

Перем ФайлОшибок;
Перем ИмяФайлаОшибок;
Перем error;

Перем ЛогФайл;
Перем ЛогОтветов;

Перем КаталогЛогФайлов;

Перем КаталогЗагрузки;
Перем КаталогВыгрузки;

Перем ТипСинхронизации;
Перем ИдКПК;
Перем ИдАгента;
Перем ТекАгент;
Перем ДатаПоследнейУдачнойСинхронизации;

Перем ОсновнаяФирма;
Перем ОргБонусТомск;
Перем ОсновнойСклад;
Перем ОсновнойТипЦен;

Перем Склады;
Перем СкладАгента;
Перем СкладТомскПиво;
Перем СкладАТАлкоголь;
Перем СкладРИФ;
Перем СкладРИФПлюс;
Перем СкладРИФПлюсАлкоголь;
Перем СкладАВН_70;
Перем СкладТОП_17;
Перем СкладОмск;
Перем СкладТюмень;
Перем СкладМеркурийАлкоголь;
Перем СкладМарсАлкоголь;
Перем СкладАтлантАлкоголь;
Перем СкладОмскЦентральный;
Перем СкладТомскОборудование;
Перем СкладБракТомскАТОбщий;
Перем СкладСигмаАлкоголь;

Перем СписокТиповЦен;
Перем СкидкиПоВидамЦен;

Перем ИспользоватьРазделениеПоСоглашениям; 

Перем ПросроченныеДолгиКлиентов;
Перем КоличествоДнейПросрочки;

Перем ДеньВСекундах;

Перем ПараметрыСинхронизации;

Перем ИндивидуальныеЦеныНаТоварВТочке;

Перем РубрикиСФото;

Перем ВидНоменклатурыМногооборотнаяТара;

Перем оргАТ_Логистик; 
Перем оргАТ_ЛогистикОМСК;
Перем оргАТЛАНТОмск;
Перем оргАТ_ЛогистикТЮМЕНЬ;
Перем оргАТ_ЛогистикЕКТ;
Перем оргРИФ;
Перем оргРИФПлюс;
Перем оргАВН_70;
Перем оргТОП_17;
Перем оргМирНапитковТомск;
Перем оргМеркурий;
Перем оргМарс;
Перем оргСигма; 
Перем оргГалактика;

Перем МассивВсехГруппТоваров;

Перем ТоварыБезНДС;
Перем ТоварыВесовые;
Перем ТоварыВесовыеБезНДС;
Перем ТоварыСигареты;
Перем ТоварыНДС_10;
Перем Товары_Борт;
Перем Товары_ОвощиФрукты;
Перем Товары_СкидкаКеги;
Перем Товары_СоциальныеГруппыТоваров;
Перем Товары_СоциальныеГруппы;
Перем Товары_НеверныйНДС;

Перем ЕстьЗаказы;

Перем ПВХ_ДоговорАТ;
Перем ПВХ_ДоговорРИФПлюсБезНДС;
Перем ПВХ_ДоговорАВН70;
Перем ПВХ_ДоговорТОП17;
Перем ПВХ_ДоговорРИФПлюс;
Перем ПВХ_ДоговорМарс;
Перем ПВХ_ДоговорГалактика;
Перем ПВХ_ДоговорМарсБезНДС;

Перем ПВХ_ЗапретЕГАИС_1;
Перем ПВХ_ЗапретЕГАИС_2;
Перем ПВХ_ОсновнойКлиентПоКегам;

Перем Клиенты_грПетров;
Перем Клиенты_НашиТочки;
Перем Клиенты_Дорога;

Перем СегментыБезЛимитаЗадолженности;

Перем ЕдиницаИзмерения_КГ;

Перем ВидНоменклатуры_ПивоРозлив;
Перем ВидНоменклатуры_ПивоДубль;
Перем ВидНоменклатуры_ЛосьоныДубль;
Перем ВидНоменклатуры_Джолики;
Перем ВидНоменклатуры_Молочка;
Перем ВидНоменклатуры_Бисквит;
Перем ВидНоменклатуры_ТабачнаяПродукция;
Перем ВидНоменклатуры_Маркировка;

Перем ПовтИсп_ТЗ_ТелефоныФизЛиц;
Перем ПовтИсп_ТЗ_ФИОФизЛиц;
Перем ПовтИсп_ТЗ_Петровы;

Перем ИмяСервераМА;
Перем ТекСервер;

Перем Агент_Лейкам;
Перем Агент_Горковенко;
Перем Агент_Валишев;
Перем Агент_Кидяева;
Перем Агент_Пьянков;
Перем Агент_Васильев;
Перем Агент_Дубовицкий;
Перем Агент_Заяц;
Перем Агент_СтопНечаев;
Перем Агент_БезСтопа;
Перем Агент_БезСтопа2;
Перем Агент_Чурсина;

Перем ОплТЗ;

Перем МассивЗаказов;

Перем ЭтоНовыйСерверМА;

Перем НоменАкцияНЭФИС;
Перем НоменСкидкаОШАЖиг14;
Перем НоменПеченьеВоронино;
Перем НоменДеревенскоеМолоко;

Перем ТочкиСРучнымиЗаказами;

Перем Структура_Пользователи_ГУИД;
Перем Структура_ГруппыТоваров;
Перем Структура_СВ;

Перем КегиУтро_МассивАгентов;
Перем КегиУтро_Хорика;

Перем ОснИсключения_Новосибирск;

Перем ТЗ_ТранзитныеСклады;

Перем ЗапретПоВидуЦены_Алтай;
Перем ЗапретПоВидуЦены_Барнаул;
Перем ЗапретПоВидуЦены_Новосибирск;
Перем ЗапретПоВидуЦены_Хакасия;
Перем ЗапретПоВидуЦены_Кузбасс;
Перем ЗапретПоВидуЦены_Красноярск;
Перем ЗапретПоВидуЦены_Канск;

Перем ПапкиРозлив;

Перем ТоварыЗаморозка;
Перем ТоварыЗаморозкаВЕС;

Перем ТоварыБонус;
Перем ТоварыБонусБезКратности;

Перем ТоварыТекстиль;

Перем ТоварыМороженное;

Перем ТоварыРИФ;

Перем Сигареты_Скидка;

Перем Сегмент_ОптовыеКлиенты;
Перем Сегмент_ЧерныйСписок;
Перем Сегмент_ОтгрузкаЗапрещена;
Перем Сегмент_ВсегдаЗаНАЛ;
Перем Сегмент_БОНУС;
Перем Сегмент_Доставка;
Перем Сегмент_Доставка2;
Перем Сегмент_ПереподключениеРегионов;
Перем Сегмент_Косиха;
Перем Сегмент_Отрочка7;
Перем Сегмент_КегиОтсрочкаИсключения;

Перем Массив_Сегмент_ВсегдаЗаНАЛ;
Перем Массив_Сегмент_ЧерныйСписок;
Перем Массив_Сегмент_ЗапретОтгрузки;
Перем Массив_Сегмент_БОНУС;
Перем Массив_Сегмент_Доставка;
Перем Массив_Сегмент_Доставка2;
Перем Массив_Сегмент_ПереподключениеРегионов;
Перем Массив_Сегмент_Отсрочка7;

Перем БезНДС_МассивОрганизацийТомск;
Перем БезНДС_МассивПоставщиковИскл;

Перем Далюева_Агенты;

Перем Клиенты_Роснефть;

Перем Массив_ФокусныеАгенты;

Перем Массив_АгентыМороженное;

Перем Массив_АгентыРИФ;


#Область ОМСК_ТРАНЗИТ


Функция Омск_Транзит_СписокТоваровСЦенами()
	
	ТЗОстаткиСЦенами = Новый ТаблицаЗначений;
	ТЗОстаткиСЦенами.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗОстаткиСЦенами.Колонки.Добавить("Цена",         ОписаниеТипаЧисло(15,2));		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены",   Справочники.ВидыЦен.НайтиПоНаименованию("ОМСК транзит"));
	Запрос.УстановитьПараметр("ВЕС",       ТоварыВесовые);
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	//               |ИЗ
	//               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//               |			&ДатаСреза,
	//               |			Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ <> ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
	//               |				И ВидЦены = &ВидЦены
	//               |				И НЕ Номенклатура В ИЕРАРХИИ (&ВЕС)) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&ДатаСреза,
	               |			Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ <> ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
	               |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Цена <> 0 Тогда
			
			НовСтрока = ТЗОстаткиСЦенами.Добавить();
			НовСтрока.Номенклатура = Выборка.Номенклатура;
			НовСтрока.Цена         = Выборка.Цена;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ТЗОстаткиСЦенами;
			
КонецФункции


Функция Омск_Транзит_АТ_Общий(врТЗ)
	
	СписокТоваров = Новый Массив;
	
	Возврат СписокТоваров;
	
	Сч = врТЗ.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		врТекТовар = врТЗ[Сч];
		
		Если (врТекТовар.ВидНоменклатуры <> ВидНоменклатуры_ПивоДубль) И (врТекТовар.ВидНоменклатуры <> ВидНоменклатуры_ЛосьоныДубль) И (врТекТовар.ВидНоменклатуры.алкВидЭлементаТМЦ <> Перечисления.алкВидыЭлементовТМЦ.Алкоголь) Тогда
			
			Если ТоварыВесовые.Найти(врТекТовар.Номенклатура) <> Неопределено Тогда
				Сч = Сч - 1;
				Продолжить;				
			КонецЕсли;	
			
			врОстаток_Омск  = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладОмскЦентральный, ТекущаяДата());
			врОстаток_Томск = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладТомскПиво,       ТекущаяДата());
			
			Если врОстаток_Омск >= врТекТовар.Количество Тогда
				Сч = Сч - 1;
				Продолжить;
			ИначеЕсли врОстаток_Томск >= врТекТовар.Количество Тогда	
				СписокТоваров.Добавить(врТекТовар.Номенклатура);
			//	врТЗ.Удалить(врТекТовар);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	Возврат СписокТоваров;
	
КонецФункции


Функция Омск_Транзит_АТ_Общий_ВЕС(врТЗ)
	
	СписокТоваров = Новый Массив;
	
	Возврат СписокТоваров;
	
	Сч = врТЗ.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		врТекТовар = врТЗ[Сч];
		
		Если (врТекТовар.ВидНоменклатуры <> ВидНоменклатуры_ПивоДубль) И (врТекТовар.ВидНоменклатуры <> ВидНоменклатуры_ЛосьоныДубль) И (врТекТовар.ВидНоменклатуры.алкВидЭлементаТМЦ <> Перечисления.алкВидыЭлементовТМЦ.Алкоголь) Тогда
			
			Если ТоварыВесовые.Найти(врТекТовар.Номенклатура) = Неопределено Тогда
				Сч = Сч - 1;
				Продолжить;
			КонецЕсли;	
			
			врОстаток_Омск  = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладОмскЦентральный, ТекущаяДата());
			врОстаток_Томск = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладТомскПиво,       ТекущаяДата());
			
			Если врОстаток_Омск >= врТекТовар.Количество Тогда
				Сч = Сч - 1;
				Продолжить;
			ИначеЕсли врОстаток_Томск >= врТекТовар.Количество Тогда	
				СписокТоваров.Добавить(врТекТовар.Номенклатура);
			//	врТЗ.Удалить(врТекТовар);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	Возврат СписокТоваров;
	
КонецФункции


Функция Омск_Транзит_АТЛ(врТЗ)
	
	СписокТоваров = Новый Массив;
	
	Возврат СписокТоваров;
	
	Сч = врТЗ.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		врТекТовар = врТЗ[Сч];
	
		Если (врТекТовар.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ (врТекТовар.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) Тогда
			
			врОстаток_Омск  = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладОмскЦентральный, ТекущаяДата());
			врОстаток_Томск = ПолучитьОстатокТовараПоСкладу(врТекТовар.Номенклатура, СкладАТАлкоголь,      ТекущаяДата());
			
			Если врОстаток_Омск >= врТекТовар.Количество Тогда
				Сч = Сч - 1;
				Продолжить;
			ИначеЕсли врОстаток_Томск >= врТекТовар.Количество Тогда	
				СписокТоваров.Добавить(врТекТовар.Номенклатура);
			//	врТЗ.Удалить(врТекТовар);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	Возврат СписокТоваров;
	
КонецФункции
	
	
#КонецОбласти



#Область ТЕСТОВЫЙ_ФУНКЦИОНАЛ


Функция ЭтоТестовыйАгент(врАгент)
	
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",   врАгент);
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запрет на бонус"));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Объект = &Объект
		               |	И ДополнительныеСведения.Свойство = &Свойство";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Значение;
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение тестового агента", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ЭтоАгентКегиРозлив(врАгент)
	
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",   врАгент);
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Кеги розлив"));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Объект = &Объект
		               |	И ДополнительныеСведения.Свойство = &Свойство";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Значение;
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение агента кеги розлив", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ЭтоБРИсключениеКегиРозлив(врБР)
	
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",   врБР);
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Исключить из кеги розлив"));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Объект = &Объект
		               |	И ДополнительныеСведения.Свойство = &Свойство";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Значение;
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение БР исключение кеги розлив", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ЭтоАгентОтложенногоПлатежа(врАгент)
	
	Попытка
		
		Если ИмяСервераМА = "Tomsk" Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Егоров Александр"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Пользователь = врАгент Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;			
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Власов Евгений"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Пользователь = врАгент Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Горохов Денис"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Пользователь = врАгент Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Лютаева Наталья"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Пользователь = врАгент Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Носков Алексей"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Пользователь = врАгент Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;			
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЭтоАгентОтложенногоПлатежа", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Пуговкин Юрий Александрович") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Кострыгин Иван Олегович") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Лютаева Наталья Владимировна") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Глинкин Михаил Игоревич") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Астраханцева Валентина Сергеевна") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Воронцова Лариса Дмитриевна") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Кирьянова Анна Олеговна") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Букалова Елена Дмитриевна") Тогда
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции	
	

Функция ЭтоАгентПетров(врАгент)
	
	Если ИмяСервераМА = "Tomsk" Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь; 
	
КонецФункции	


#КонецОбласти


#Область СЛУЖЕБНЫЕ

Функция ДеньНеделиПрописью(ДН)
	
	ДниНедели = Новый Массив;

	ДниНедели.Добавить("Понедельник");
	ДниНедели.Добавить("Вторник");
	ДниНедели.Добавить("Среда");
	ДниНедели.Добавить("Четверг");
	ДниНедели.Добавить("Пятница");
	ДниНедели.Добавить("Суббота");
	ДниНедели.Добавить("Воскресенье");
	
	Возврат ДниНедели[ДН-1];
	
КонецФункции

Функция ЧислоВСтроку(Знач ПараметрЧисло)
	
	ПараметрСтрока = Строка(ПараметрЧисло);
	ПараметрСтрока = СтрЗаменить(ПараметрСтрока, Символы.НПП, "");
	
	Возврат ПараметрСтрока;
	
КонецФункции

Функция ОписаниеТипаДата(ЧастиДаты)

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции

Функция ОписаниеТипаСтрока(ДлинаСтроки)

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции

Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено)

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции

Функция СоздатьУникальныйИдентификатор(GUID) 
	
	Возврат Новый УникальныйИдентификатор(GUID);
	
КонецФункции

Функция Split(Строк, Разделитель)
	
	Строк  = Символ(34) + Строк + Символ(34);
	Замена = Символ(34) + "©" + Символ(34);                                  
	Строк  = СтрЗаменить(Строк, Разделитель, Замена); 
	
	Список = ИзСтрокиВСписокЗначений(Строк);
	
	Возврат Список;
	
КонецФункции 

Функция ИзСтрокиВСписокЗначений(стр)
	
	Рез = Новый СписокЗначений;
	
	Если НЕ (ЗначениеЗаполнено(стр)) Тогда
		Возврат Рез;
	КонецЕсли; 
	
	текСтр = стр;
	ном = Найти(текСтр,"©");
	Пока ном > 0 Цикл
		
		новСтр = Лев(текСтр,ном-1);
		новСтр = СтрЗаменить(новСтр,"""","");
		Рез.Добавить(СокрЛП(новСтр));
		текСтр = Сред(текСтр,ном+1);
		
		ном = Найти(текСтр,"©");
	КонецЦикла; 
	
	текСтр = СтрЗаменить(текСтр,"""","");
	Рез.Добавить(СокрЛП(текСтр));
	
	Возврат Рез;
	
КонецФункции 

#КонецОбласти


#Область ВСПОМОГАТЕЛЬНЫЕ


Функция ПолучитьТекущийСервер(врИмяСервера)
	
	Если врИмяСервера = "Kuzbass" Тогда
		Возврат Перечисления.аян_Синхронизация_Сервера.Kuzbass;
	ИначеЕсли врИмяСервера = "Sever" Тогда
		Возврат Перечисления.аян_Синхронизация_Сервера.Sever;
	ИначеЕсли врИмяСервера = "Region" Тогда
		Возврат Перечисления.аян_Синхронизация_Сервера.Region;
	ИначеЕсли врИмяСервера = "Novosib" Тогда
		Возврат Перечисления.аян_Синхронизация_Сервера.Novosib;	
	ИначеЕсли врИмяСервера = "Altai" Тогда
		Возврат Перечисления.аян_Синхронизация_Сервера.Altai;			
	КонецЕсли;
	
	Возврат Перечисления.аян_Синхронизация_Сервера.Tomsk;
		
КонецФункции	


Функция ПолучитьТекущиеДатаВремяСМиллисекундами()
	
	Попытка
    	JavaScript = Новый COMОбъект("MSScriptControl.ScriptControl");
    Исключение
    	Возврат ТекущаяДата();
	КонецПопытки;
	
    JavaScript.Language = "javascript";
	JavaScript.Timeout  = -1;
    Время = JavaScript.Eval("new Date().getTime()");
	
    Возврат Строка(ТекущаяДата()) + " (" + Строка(Время % 1000) + " мс)";
	
КонецФункции


Функция Транслит(Вход)
	
    Коды = Новый Соответствие;
	
    Коды.Вставить("ё", "yo");
    Коды.Вставить("Ё", "Yo");
    Нач  = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
	
    Для К = Нач По КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
	КонецЦикла;
	
    Выход = "";
	
    Для К = 1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход, К, 1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
	КонецЦикла;
	
    Возврат Выход;
	
КонецФункции


Функция ПривестиЧислоКСтроке(врЧисло, врДлина, врЧислоДробнойЧасти)
	
	Попытка
	
		врСтрокаВозврат = Формат(врЧисло, "ЧДЦ=" + Строка(врЧислоДробнойЧасти));
	
		врСтрДлина = СтрДлина(врСтрокаВозврат);
	
		ЧислоПробелов = врДлина - врСтрДлина;
	
		 Для СчПробел = 1 По ЧислоПробелов Цикл
			врСтрокаВозврат = Символы.НПП + врСтрокаВозврат;
		КонецЦикла;	
	
		Если врЧисло < 1000 Тогда
			врСтрокаВозврат = Символы.НПП + врСтрокаВозврат;
		КонецЕсли;	
		
	Исключение
		
		Возврат Строка(врЧисло);
		
	КонецПопытки;	
	
	Возврат врСтрокаВозврат;
	
КонецФункции	


#КонецОбласти


#Область ПОВТОРНОЕ_ИСПОЛЬЗОВАНИЕ


// Получить телефон физического лица

Функция ПовтИсп_ТелефонФизЛица(врФизЛицо)
	
	ПоискСтрокаТЗ = ПовтИсп_ТЗ_ТелефоныФизЛиц.Найти(врФизЛицо, "ФизическоеЛицо");
	
	Если ПоискСтрокаТЗ <> Неопределено Тогда
		Возврат ПоискСтрокаТЗ.Телефон;
	КонецЕсли;	
	
	ТелефонФизЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(врФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	Если ПустаяСтрока(ТелефонФизЛица) Тогда
		ТелефонФизЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(врФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	КонецЕсли;
	
	НовСтрокаТЗ = ПовтИсп_ТЗ_ТелефоныФизЛиц.Добавить();
	НовСтрокаТЗ.ФизическоеЛицо = врФизЛицо;
	НовСтрокаТЗ.Телефон        = ТелефонФизЛица;
	
	Возврат ТелефонФизЛица;
		
КонецФункции	


// Получить ФИО физического лица

Функция ПовтИсп_ФИОФизЛица(врФизЛицо)
	
	ПоискСтрокаТЗ = ПовтИсп_ТЗ_ФИОФизЛиц.Найти(врФизЛицо, "ФизическоеЛицо");
	
	Если ПоискСтрокаТЗ <> Неопределено Тогда
		Возврат Новый Структура("Фамилия, Имя, Отчество", ПоискСтрокаТЗ.Фамилия, ПоискСтрокаТЗ.Имя, ПоискСтрокаТЗ.Отчество);
	КонецЕсли;	
	
	ФИОФизЛица      = ФизическиеЛицаУТ.ФамилияИмяОтчество(врФизЛицо, ТекущаяДата());
	
	НовСтрокаТЗ = ПовтИсп_ТЗ_ФИОФизЛиц.Добавить();
	НовСтрокаТЗ.ФизическоеЛицо = врФизЛицо;
	НовСтрокаТЗ.Фамилия        = ФИОФизЛица.Фамилия;
	НовСтрокаТЗ.Имя     	   = ФИОФизЛица.Имя;
	НовСтрокаТЗ.Отчество       = ФИОФизЛица.Отчество;
	
	Возврат ФИОФизЛица;
		
КонецФункции	


#КонецОбласти


#Область ФРУКТЫ_ОВОЩИ


Процедура ФРУКТЫ_ОВОЩИ_СоздатьПоступление(врРеализация)
	
	Событие1С = "ФРУКТЫ-ОВОЩИ СОЗДАНИЕ ПОСТУПЛЕНИЯ ТОВАРОВ";
	
	врДокПостСоздан = Ложь;
	
	Попытка		
	
		ДокПост = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокПост.Дата                         = врРеализация.Дата;
		ДокПост.Партнер                      = Справочники.Партнеры.НайтиПоКоду("00-00043271");
		ДокПост.Контрагент                   = Справочники.Контрагенты.НайтиПоНаименованию("МЕГА-ФРУКТ ООО");		
		ДокПост.Организация                  = оргГалактика;
		ДокПост.Склад                        = СкладТомскПиво;
		ДокПост.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ДокПост.Валюта                  	 = Константы.ВалютаРегламентированногоУчета.Получить();
		ДокПост.ВалютаВзаиморасчетов    	 = Константы.ВалютаРегламентированногоУчета.Получить();		
		ДокПост.Комментарий                  = СокрЛП(врРеализация);
		ДокПост.РегистрироватьЦеныПоставщика = Истина;
		ДокПост.НалогообложениеНДС           = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ДокПост.ЦенаВключаетНДС              = Истина;
		ДокПост.Менеджер                     = Справочники.Пользователи.НайтиПоНаименованию("Проден Томас");
		ДокПост.ДатаПлатежа                  = врРеализация.Дата;
		
		врВидЦеныЗакупочная = Справочники.ВидыЦен.НайтиПоНаименованию("Закупочная");
		
		Для Каждого ТекТовар Из врРеализация.Товары Цикл
			
			НовСтрока = ДокПост.Товары.Добавить();
			НовСтрока.Склад              = ДокПост.Склад;
			НовСтрока.Номенклатура       = ТекТовар.Номенклатура;
			НовСтрока.Количество         = ТекТовар.Количество;
			НовСтрока.КоличествоУпаковок = ТекТовар.КоличествоУпаковок;
			НовСтрока.Цена               = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ТекТовар.Номенклатура, врВидЦеныЗакупочная);
			НовСтрока.СтавкаНДС          = НовСтрока.Номенклатура.СтавкаНДС;
			НовСтрока.Сумма              = НовСтрока.Цена * НовСтрока.Количество;			
			НовСтрока.СуммаСНДС          = НовСтрока.Сумма;			
			
			ПроцентНДС                   = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(НовСтрока.СтавкаНДС);
			НовСтрока.СуммаНДС           = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, ПроцентНДС, Истина);
			
		КонецЦикла;	
		
		ДокПост.Записать(РежимЗаписиДокумента.Запись);

		врДокПостСоздан = Истина;
		
	Исключение

		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ислючение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
		
КонецПроцедуры	


#КонецОбласти


#Область ПЕТРОВ


Функция Петров_ПолучитьОсновнуюТочкуПетрова(врПетров)
	
	ЗапросПартнерПоКегам = Новый Запрос;
	ЗапросПартнерПоКегам.УстановитьПараметр("Свойство", ПВХ_ОсновнойКлиентПоКегам);
	ЗапросПартнерПоКегам.УстановитьПараметр("Значение", врПетров);
	ЗапросПартнерПоКегам.Текст = "ВЫБРАТЬ
	                             |	ПартнерыДополнительныеРеквизиты.Значение
	                             |ИЗ
	                             |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	                             |ГДЕ
	                             |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
	                             |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Значение";
	РезультатПартнерПоКегам = ЗапросПартнерПоКегам.Выполнить();
	Если Не РезультатПартнерПоКегам.Пустой() Тогда
				
		ВыборкаПоКегам = РезультатПартнерПоКегам.Выбрать();
		ВыборкаПоКегам.Следующий();
		Возврат ВыборкаПоКегам.Значение;
				
	КонецЕсли;	
						
	Возврат Справочники.Партнеры.ПустаяСсылка();
	
КонецФункции	


Функция Петров_ПолучитьОсновногоКлиентаПоКегам(врКлиент)
	
	ЗапросПартнерПоКегам = Новый Запрос;
	ЗапросПартнерПоКегам.УстановитьПараметр("Свойство", ПВХ_ОсновнойКлиентПоКегам);
	ЗапросПартнерПоКегам.УстановитьПараметр("Значение", врКлиент);
	ЗапросПартнерПоКегам.Текст = "ВЫБРАТЬ
	                             |	ПартнерыДополнительныеРеквизиты.Ссылка
	                             |ИЗ
	                             |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	                             |ГДЕ
	                             |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
	                             |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
	                             |	И НЕ ПартнерыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	РезультатПартнерПоКегам = ЗапросПартнерПоКегам.Выполнить();
	Если Не РезультатПартнерПоКегам.Пустой() Тогда
				
		ВыборкаПоКегам = РезультатПартнерПоКегам.Выбрать();
		ВыборкаПоКегам.Следующий();
		Возврат ВыборкаПоКегам.Ссылка;
				
	КонецЕсли;	
						
	Возврат Справочники.Партнеры.ПустаяСсылка();
	
КонецФункции	


Процедура Петров_ЗаполнитьСоглашениеПетроваПоОсновномуСоглашению(врСоглашение, врСоглашениеПетров)
	
	Если (Не ЗначениеЗаполнено(врСоглашение)) ИЛИ (Не ЗначениеЗаполнено(врСоглашениеПетров)) Тогда
		Возврат;
	КонецЕсли;	
	
	ФлагЗаписиСоглашения = Ложь;
	
	врСоглашениеПетровОбъект = врСоглашениеПетров.ПолучитьОбъект();
	
	// Организация Марс
	
	Если врСоглашение.Организация <> врСоглашениеПетров.Организация  Тогда
		
		ФлагЗаписиСоглашения = Истина;
		
		врСоглашениеПетровОбъект.Организация        = врСоглашение.Организация;
		врСоглашениеПетровОбъект.НалогообложениеНДС = врСоглашение.НалогообложениеНДС;
		
	КонецЕсли;	
	
	// Вид цен
	
	Если врСоглашение.ВидЦен <> врСоглашениеПетров.ВидЦен Тогда
		
		ФлагЗаписиСоглашения = Истина;
		
		врСоглашениеПетровОбъект.ВидЦен = врСоглашение.ВидЦен;
		
	КонецЕсли;	
	
	// Сегмент номенклатуры
	Если ЗначениеЗаполнено(врСоглашение.СегментНоменклатуры) Тогда
		врСоглашениеПетровОбъект.СегментНоменклатуры = врСоглашение.СегментНоменклатуры;
	КонецЕсли;	
	
	// Специальные цены на товары
	
	Если врСоглашение.Товары.Количество() > 0 Тогда
		
		ФлагЗаписиСоглашения = Истина;
		
		врСоглашениеПетровОбъект.Товары.Очистить();
		
		Для Каждого ТекСтрока Из врСоглашение.Товары Цикл
		
			НовСтрока = врСоглашениеПетровОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	// Скидки / наценки
	
	врЕстьСкидкиКлиент = Ложь;
	врЕстьСкидкиПетров = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", врСоглашение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДействиеСкидокНаценок.Период,
	               |	ДействиеСкидокНаценок.Источник,
	               |	ДействиеСкидокНаценок.СкидкаНаценка,
	               |	ДействиеСкидокНаценок.Статус,
	               |	ДействиеСкидокНаценок.СегментПартнеров,
	               |	ДействиеСкидокНаценок.Комментарий,
	               |	ДействиеСкидокНаценок.Ответственный
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	               |ГДЕ
	               |	ДействиеСкидокНаценок.Источник = &Источник";
	
	РЗКлиент = Запрос.Выполнить();
	Если Не РЗКлиент.Пустой() Тогда
		врЕстьСкидкиКлиент   = Истина;
		ФлагЗаписиСоглашения = Истина;
	КонецЕсли;	
		
	Если врЕстьСкидкиКлиент Тогда
			
		НЗСкидки = РегистрыСведений.ДействиеСкидокНаценок.СоздатьНаборЗаписей();
		НЗСкидки.Отбор.Источник.Установить(врСоглашениеПетров);
		
		ВыборкаКлиент = РЗКлиент.Выбрать();
		Пока ВыборкаКлиент.Следующий() Цикл
			НовСтрокаСкидки = НЗСкидки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаСкидки, ВыборкаКлиент);
			НовСтрокаСкидки.Источник = врСоглашениеПетров;
		КонецЦикла;
		
		Попытка
		
			НЗСкидки.Записать();
			
			ЗаписатьИнформацию1СвЛогФайл("Запись НЗ Скидок", "КЛИЕНТ = " + СокрЛП(врСоглашение) + "; ПЕТРОВ = :" + СокрЛП(врСоглашениеПетров));
		
		Исключение
		
			ЗаписатьОшибку1СвЛогФайл("Запись НЗ Скидок", "Исключение", ИнформацияОбОшибке());
		
		КонецПопытки;			
		
	КонецЕсли;	
	
	// Перезапись
	
	Если ФлагЗаписиСоглашения Тогда		
	
		Попытка
		
			врСоглашениеПетровОбъект.Записать();
			
			ЗаписатьИнформацию1СвЛогФайл("ПЕТРОВ - Синхронизация соглашений", "КЛИЕНТ = " + СокрЛП(врСоглашение) + "; ПЕТРОВ = :" + СокрЛП(врСоглашениеПетров));
		
		Исключение
		
			ЗаписатьОшибку1СвЛогФайл("ПЕТРОВ - Синхронизация соглашений", "Исключение", ИнформацияОбОшибке());
		
		КонецПопытки;	
		
	КонецЕсли;	
	
КонецПроцедуры	


Функция Петров_ПолучитьДанныеПетроваТочки(врКлиент, врСоглашение)
	
	врПетров = Петров_ПолучитьОсновногоКлиентаПоКегам(врКлиент);
	
	Если ЗначениеЗаполнено(врПетров) Тогда
		
		Попытка 
		
			Если врПетров.ОсновнойМенеджер <> врКлиент.ОсновнойМенеджер Тогда
				
				Если Не аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(врКлиент.ОсновнойМенеджер) Тогда
					
					врПетровОбъект = врПетров.ПолучитьОбъект();
					врПетровОбъект.ОсновнойМенеджер = врКлиент.ОсновнойМенеджер;
					врПетровОбъект.Записать();
					
				КонецЕсли;	
				
			КонецЕсли;	
				
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл("ПОЛУЧЕНИЕ ДАННЫХ ПЕТРОВА", "ОСНОВНОЙ МЕНЕДЖЕР", ИнформацияОбОшибке(), Истина);
				
		КонецПопытки;		
		
		врПетровСоглашение = ПолучитьСоглашениеСКлиентом(врПетров, ТекАгент).Соглашение;
		
		Если Не ЗначениеЗаполнено(врПетровСоглашение) И аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(ТекАгент) Тогда
			врСегментНоменклатуры = аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыАгента(ТекАгент);
			врПетровСоглашение = аян_СинхронизацияСервер.ФОКУС_СоздатьФокусноеСоглашениеПетров(ТекАгент, врПетров, врСоглашение, врСегментНоменклатуры);
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(врПетровСоглашение) Тогда
			
			Попытка
				Петров_ЗаполнитьСоглашениеПетроваПоОсновномуСоглашению(врСоглашение, врПетровСоглашение);
				Возврат Новый Структура("Клиент, Соглашение", врПетров, врПетровСоглашение)
			Исключение
				ЗаписатьОшибку1СвЛогФайл("Синхронизация соглашений ПЕТРОВ", "Точка = " + СокрЛП(врКлиент), ИнформацияОбОшибке(), Истина); 
				Возврат Новый Структура("Клиент, Соглашение", Справочники.Партнеры.ПустаяСсылка(), Справочники.СоглашенияСКлиентами.ПустаяСсылка());
			КонецПопытки;	
						
		Иначе
			
			Возврат Новый Структура("Клиент, Соглашение", Справочники.Партнеры.ПустаяСсылка(), Справочники.СоглашенияСКлиентами.ПустаяСсылка());
			
		КонецЕсли;	
			
	КонецЕсли;		
	
	Возврат Петров_СоздатьПетрова(врКлиент, врСоглашение);
	
КонецФункции	


Функция Петров_СоздатьПетрова(врКлиент, врСоглашение)
	
	Попытка
		врПроверкаПоиск = Справочники.Партнеры.НайтиПоНаименованию("Петров (" + СокрЛП(врКлиент.Наименование) + ")");
		Если ЗначениеЗаполнено(врПроверкаПоиск) Тогда
			ЗаписатьИнформацию1СвЛогФайл("Создание ПЕТРОВ", "Возможная ошибка! Петров уже существует = " + СокрЛП("Петров (" + СокрЛП(врКлиент.Наименование) + ")"));
		КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Создание ПЕТРОВ", "Проверка на существование!", ИнформацияОбОшибке(), Истина); 
	КонецПопытки;	
	
	врКлиентСоздан      = Ложь;
	врСоглашениеСоздано = Ложь;
	
	врПВХ_Кеги = ПВХ_ОсновнойКлиентПоКегам;
	
	// Клиент
	
	Попытка
	
		НовЭлемент = врКлиент.Скопировать();
		
		НовЭлемент.Родитель                  = Справочники.Партнеры.НайтиПоКоду("00-00002248");
		НовЭлемент.ОсновнойМенеджер          = ТекАгент;
		НовЭлемент.Наименование              = "Петров (" + СокрЛП(врКлиент.Наименование) + ")";
		НовЭлемент.НаименованиеПолное        = "Петров (" + СокрЛП(врКлиент.Наименование) + ")";
		НовЭлемент.алкОсновнойПунктРазгрузки = Справочники.алкПунктыРазгрузки.НайтиПоКоду("000000919");
		
		НовЭлемент.ДополнительныеРеквизиты.Очистить();
		
		НовСтрока = НовЭлемент.ДополнительныеРеквизиты.Добавить();
		НовСтрока.Свойство = врПВХ_Кеги;
		НовСтрока.Значение = врКлиент;
		
		НовЭлемент.Записать();
		
		врКлиентСоздан = Истина;
		
		ЗаписатьИнформацию1СвЛогФайл("Создание ПЕТРОВ", "Точка = " + СокрЛП(врКлиент)); 
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Создание ПЕТРОВ", "Точка = " + СокрЛП(врКлиент), ИнформацияОбОшибке(), Истина); 
		
	КонецПопытки;	
	
	// Соглашение
	
	Если врКлиентСоздан Тогда
	
		Попытка
		
			НовСоглашение = врСоглашение.Скопировать();
			НовСоглашение.Наименование = НовЭлемент.Наименование;
			НовСоглашение.Партнер      = НовЭлемент.Ссылка;
			НовСоглашение.Контрагент   = Справочники.Контрагенты.НайтиПоНаименованию("Петров", Истина);
		
			Если НовСоглашение.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				врГрафикОплаты = НовСоглашение.ЭтапыГрафикаОплаты[0];
				врГрафикОплаты.Сдвиг = 1;
			КонецЕсли;	
			
			НовСоглашение.Записать();
			
			врСоглашениеСоздано = Истина;
			
			ЗаписатьИнформацию1СвЛогФайл("Создание соглашения ПЕТРОВ", "Точка = " + СокрЛП(врКлиент)); 
		
		Исключение
		
			ЗаписатьОшибку1СвЛогФайл("Создание соглашения ПЕТРОВ", "Точка = " + СокрЛП(врКлиент), ИнформацияОбОшибке(), Истина); 
		
		КонецПопытки;	
		
	КонецЕсли;	
	
	// Синхронизация соглашений
	
	Если врСоглашениеСоздано Тогда
		
		Попытка
		
			Петров_ЗаполнитьСоглашениеПетроваПоОсновномуСоглашению(врСоглашение, НовСоглашение.Ссылка);
			
			Возврат Новый Структура("Клиент, Соглашение", НовЭлемент.Ссылка, НовСоглашение.Ссылка);
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл("Синхронизация соглашений ПЕТРОВ", "Точка = " + СокрЛП(врКлиент), ИнформацияОбОшибке(), Истина); 
			
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат Новый Структура("Клиент, Соглашение", Справочники.Партнеры.ПустаяСсылка(), Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	
КонецФункции	


#КонецОбласти


#Область ДОСТАВКА


Функция Доставка_ЭтоКегиУтроХорека(врАгент)
	
	Попытка
	
		Если КегиУтро_Хорика.Найти(врАгент) <> Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;	
			
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Доставка_ЭтоКегиУтроХорека", "Исключение", ИнформацияОбОшибке(), Истина);
			
	КонецПопытки;
		
	Возврат Ложь;
	
КонецФункции	


Функция Доставка_ЭтоРозливДень(врКлиент, врАгент)
	
	Попытка
		
		Если КегиУтро_МассивАгентов.Найти(врАгент) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТорговаяТочка", врКлиент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_Синхронизация_МатрицаМаршрута.ТорговаяТочка
		               |ИЗ
		               |	РегистрСведений.аян_Синхронизация_МатрицаМаршрута КАК аян_Синхронизация_МатрицаМаршрута
		               |ГДЕ
		               |	аян_Синхронизация_МатрицаМаршрута.ТорговаяТочка = &ТорговаяТочка";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Доставка_ЭтоРозливДень()", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
		
	Возврат Ложь;
	
КонецФункции	


Функция Доставка_РозливДень_ЗонаДоставки(врКлиент)
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	аян_Синхронизация_МатрицаМаршрута.ЗонаДоставки
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_МатрицаМаршрута КАК аян_Синхронизация_МатрицаМаршрута
	               |ГДЕ
	               |	аян_Синхронизация_МатрицаМаршрута.ТорговаяТочка = &ТорговаяТочка";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗонаДоставки;
	КонецЕсли;	
	
	Возврат Справочники.ЗоныДоставки.ПустаяСсылка();
	
КонецФункции	


Функция Доставка_РозливДень_ВремяНаСегодня()
	
	врТекЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
	врТекМин = Число(Формат(ТекущаяДата(), "ДФ=m"));
								
	Если врТекЧас < 9 Тогда
		
		Возврат Истина;
		
	ИначеЕсли (врТекЧас = 9) И (врТекМин <= 50) Тогда	
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	


#КонецОбласти


#Область ГРАФИК_РАБОТЫ


Функция ГрафикРаботы_СокращенныйДеньНедели(врДеньНедели)
	
	Если врДеньНедели = Перечисления.ДниНедели.Понедельник Тогда
		Возврат "ПН";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Вторник Тогда
		Возврат "ВТ";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Среда Тогда
		Возврат "СР";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Четверг Тогда
		Возврат "ЧТ";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Пятница Тогда
		Возврат "ПТ";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Суббота Тогда
		Возврат "СБ";
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
		Возврат "ВС";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	


Функция ГрафикРаботы_ПолучитьГрафикРаботыТочки(врКлиент)
	
	стрГрафикРаботы   = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыРежимРаботы.НомерСтроки,
	               |	ПартнерыРежимРаботы.Работает,
	               |	ПартнерыРежимРаботы.ДеньНедели,
	               |	ПартнерыРежимРаботы.ВремяНачалаРаботы,
	               |	ПартнерыРежимРаботы.ВремяОкончанияРаботы,
	               |	ПартнерыРежимРаботы.Обед,
	               |	ПартнерыРежимРаботы.ПриемТовараС,
	               |	ПартнерыРежимРаботы.ПриемТовараДо
	               |ИЗ
	               |	Справочник.Партнеры.РежимРаботы КАК ПартнерыРежимРаботы
	               |ГДЕ
	               |	ПартнерыРежимРаботы.Ссылка = &Ссылка";
	врКлиент_РежимРаботы = Запрос.Выполнить().Выгрузить();
		
	врЕстьРасписание = Ложь;
	Для Каждого ТекСтрокаГрафика Из врКлиент_РежимРаботы Цикл
		Если ТекСтрокаГрафика.Работает Тогда
			врЕстьРасписание = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если Не врЕстьРасписание Тогда
		Возврат "НЕ ЗАПОЛНЕНО";
	КонецЕсли;	
	
	Для Каждого ТекСтрокаГрафика Из врКлиент_РежимРаботы Цикл
		
		Если ТекСтрокаГрафика.Работает Тогда
			
			ИспользоватьВремяПриемкиТовара = Ложь;
			Если ЗначениеЗаполнено(ТекСтрокаГрафика.ВремяНачалаРаботы) Тогда
				ИспользоватьВремяПриемкиТовара = Истина;
			КонецЕсли;	
			
			Если ИспользоватьВремяПриемкиТовара Тогда
				врПараметрГрафикаНачало    = "ВремяНачалаРаботы";
				врПараметрГрафикаОкончание = "ВремяОкончанияРаботы";
			Иначе
				врПараметрГрафикаНачало    = "ПриемТовараС";
				врПараметрГрафикаОкончание = "ПриемТовараДо";				
			КонецЕсли;	
			
			стрФорматнаяСтрока = "ДФ=HH:mm";
			
			врМинутыНачало     = Формат(ТекСтрокаГрафика[врПараметрГрафикаНачало],    "ДФ=m");
			врМинутыОкончание  = Формат(ТекСтрокаГрафика[врПараметрГрафикаОкончание], "ДФ=m");
			
			Если (врМинутыНачало = "0") И (врМинутыОкончание = "0") Тогда
				стрФорматнаяСтрока = "ДФ=H";
			КонецЕсли;	
			
			врОбед = ТекСтрокаГрафика.Обед;
			Если (Не ПустаяСтрока(врОбед)) И (врОбед <> "Без обеда") Тогда
				врОбед = СтрЗаменить(врОбед, " ", "");
				врОбед = СтрЗаменить(врОбед, ":00", "");
				врОбед = СтрЗаменить(врОбед, ":30", ":30");
			Иначе
				врОбед = "";
			КонецЕсли;	
			
			Если Не ПустаяСтрока(врОбед) Тогда
				врОбед = " (" + врОбед + ")";
			КонецЕсли;	
			
			стрГрафикРаботы = стрГрафикРаботы + ?(ПустаяСтрока(стрГрафикРаботы), "", ", ") + ГрафикРаботы_СокращенныйДеньНедели(ТекСтрокаГрафика.ДеньНедели) + " " + Формат(ТекСтрокаГрафика[врПараметрГрафикаНачало], стрФорматнаяСтрока) + "-" + Формат(ТекСтрокаГрафика[врПараметрГрафикаОкончание], стрФорматнаяСтрока) + врОбед; 
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат стрГрафикРаботы;
	
КонецФункции	


#КонецОбласти


#Область КЛИЕНТЫ_КОНТРАГЕНТЫ


Функция КлиентыКонтрагенты_ГУИДПартнера(врПартнер, врАгент, врИмяСервераМА)
	Если ИмяСервераМА = "Tomsk" Тогда
		Если Не Массив_ФокусныеАгенты.Найти(врАгент) = Неопределено Тогда
			Возврат Строка(врПартнер.УникальныйИдентификатор()) + "_FCS"; 
		КонецЕсли;	
	КонецЕсли;
	Возврат Строка(врПартнер.УникальныйИдентификатор());
КонецФункции	


Функция КлиентыКонтрагенты_ОбработатьГУИДПартнера(врГУИД, врИмяСервераМА)
	Если ИмяСервераМА = "Tomsk" Тогда
		Возврат СтрЗаменить(врГУИД, "_FCS", ""); 
	КонецЕсли;
	Возврат врГУИД;
КонецФункции	


Функция КлиентыКонтрагенты_ДатаПоследнегоЗаказа(врКлиент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РеализацияТоваровУслуг.Дата,
	               |	РеализацияТоваровУслуг.ЗаказКлиента,
	               |	РеализацияТоваровУслуг.ЗаказКлиента.Дата
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслуг.Партнер = &Партнер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.МоментВремени УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ЗаказКлиента) Тогда
			Возврат Выборка.ЗаказКлиентаДата;
		Иначе
			Возврат Выборка.Дата;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Дата(1,1,1);
	
КонецФункции	


Функция КлиентыКонтрагенты_СуммаПродажЗаПериод(врКлиент, врДатаНачала, врДатаОкончания)
	
	врСумма = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",    врКлиент);
	Запрос.УстановитьПараметр("НачПериода", врДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", врДатаОкончания);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачПериода, &КонПериода, , АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК ВыручкаИСебестоимостьПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врСумма = врСумма + Выборка.Сумма;
	КонецЦикла;	
	
	Возврат врСумма;
	
КонецФункции	


Функция КлиентыКонтрагенты_ЭтоБорихинский(Знач врКлиент)
	
	врЗапросКлиент = врКлиент;
	
	Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(врКлиент) Тогда
		врЗапросКлиент = Петров_ПолучитьОсновнуюТочкуПетрова(врКлиент);
		Если Не ЗначениеЗаполнено(врЗапросКлиент) Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка", врЗапросКлиент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Синхронизация_ДоступКеги.ТорговаяТочка
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_ДоступКеги КАК аян_Синхронизация_ДоступКеги
	               |ГДЕ
	               |	аян_Синхронизация_ДоступКеги.ТорговаяТочка = &ТорговаяТочка";
	РЗ = Запрос.Выполнить();
	Если НЕ РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


Функция КлиентыКонтрагенты_МассивТочекХорека()
	
	врМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.НайтиПоНаименованию("Храмов Дмитрий (СВ)"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь
				   |ПОМЕСТИТЬ АгентыХорека
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)  
	               |;
				   |ВЫБРАТЬ
				   |	Партнеры.Ссылка
				   |ИЗ
				   |	Справочник.Партнеры КАК Партнеры
				   |ГДЕ
				   |	Партнеры.ОсновнойМенеджер В
				   |			(ВЫБРАТЬ
				   |				АгентыХорека.Пользователь
				   |			ИЗ
				   |				АгентыХорека КАК АгентыХорека)
				   |	И Партнеры.ПометкаУдаления = ЛОЖЬ
				   |	И Партнеры.Клиент = ИСТИНА
				   |	И Партнеры.ОбслуживаетсяТорговымиПредставителями = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врМассив.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	
	Возврат врМассив;
	
КонецФункции	


Функция КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(врКлиент) 
	
	Попытка
		
		Если НЕ ЗначениеЗаполнено(врКлиент) Тогда
			Возврат Ложь;
		КонецЕсли;	
	
		ИскСтрока = ПовтИсп_ТЗ_Петровы.Найти(врКлиент, "Партнер");
	
		Если ИскСтрока <> Неопределено Тогда
		
			Если ИскСтрока.ЭтоПетров = 1 Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;	
		
		Иначе
		
			врЭтоПетров = врКлиент.ПринадлежитЭлементу(Клиенты_грПетров);
		
			НовСтрока = ПовтИсп_ТЗ_Петровы.Добавить();
			НовСтрока.Партнер   = врКлиент;
			НовСтрока.ЭтоПетров = ?(врЭтоПетров, 1, 0);
			
			Возврат врЭтоПетров;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("КлиентыКонтрагенты_ПовтИсп_ЭтоПетров", "Исключение! Клиент = " + Строка(врКлиент) + "; ТипЗнч = " + Строка(ТипЗнч(врКлиент)));
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


// Точка ПЕТРОВ

Функция КлиентыКонтрагенты_ЭтоПетров(врКлиент)
	
	Событие1С = "Функция КлиентыКонтрагенты_ЭтоПетров()";
	
	Попытка
				
		Если Не ЗначениеЗаполнено(врКлиент) Тогда
			Возврат Ложь;
		КонецЕсли;	
				
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Карла Ильмера 23
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016350") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Суворова 1а
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016414") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП (ГЛАВПИВТОРГ) Ленская 47
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016351") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров С.М. ИП маг. Пивград (Мира) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00046599") Тогда
			Возврат Ложь;
		КонецЕсли;			
		
		// Петров (Иванов Н.Н. ИП тренировочный зал Mifitness)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049195") Тогда
			Возврат Ложь;
		КонецЕсли;			
		
		// Петров (Иванов Н.Н. ИП тренировочный зал Metro Fitness Барнаул)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049193") Тогда
			Возврат Ложь;
		КонецЕсли;			
		
		// Петров (Иванов Н.Н. ИП Тренажерный зал Metro Fitness) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048232") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Фатерина М. С. ИП Автомоторный пер, дом № 25В
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048016") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП Бургерная Мясоrood
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00045624") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП кафе Твоя Булочная (Беленца Алексея)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049677") Тогда
			Возврат Ложь;
		КонецЕсли;

		// Петров В.В. ИП кафе Твоя Булочная (Елизаровых)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049675") Тогда
			Возврат Ложь;
		КонецЕсли;

		// Петров В.В. ИП кафе Твоя Булочная (Кирова)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048901") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП кафе Твоя Булочная (Мира)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049676") Тогда
			Возврат Ложь;
		КонецЕсли;

		НаименованиеКлиента = СокрЛП(ВРег(врКлиент.Наименование));
				
        Если (Лев(НаименованиеКлиента, 7) = "ПЕТРОВ ") ИЛИ (Лев(НаименованиеКлиента, 7) = "ПЕТРОВ(") Тогда
			Возврат Истина;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


// Точка ПЕТРОВ без ОТСРОЧКИ

Функция КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(врКлиент)
	
	Событие1С = "Функция КлиентыКонтрагенты_ЭтоПетровБезОтсрочки()";
	
	Попытка
				
		//Если ОсновнаяФирма = оргАТ_ЛогистикОМСК Тогда
		//	Возврат Ложь;
		//КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(врКлиент) Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров (Омск)
		Если врКлиент.ПринадлежитЭлементу(Справочники.Партнеры.НайтиПоКоду("00-00006689")) Тогда
			Возврат Истина;
		КонецЕсли;					
		
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Карла Ильмера 23
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016350") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Суворова 1а
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016414") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП (ГЛАВПИВТОРГ) Ленская 47
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016351") Тогда
			Возврат Ложь;
		КонецЕсли;		
		
		// Петров С.М. ИП маг. Пивград (Мира) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00046599") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров (Иванов Н.Н. ИП Тренажерный зал Metro Fitness) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048232") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров (Иванов Н.Н. ИП Тренажерный зал Mfitness) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049195") Тогда
			Возврат Ложь;
		КонецЕсли;							

		// Петров (Иванов Н.Н. ИП Тренажерный зал Metro Fitness Барнаул) 
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049193") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Фатерина М. С. ИП Автомоторный пер, дом № 25В
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048016") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП Бургерная Мясоrood
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00045624") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП кафе Твоя Булочная (Беленца Алексея)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049677") Тогда
			Возврат Ложь;
		КонецЕсли;

		// Петров В.В. ИП кафе Твоя Булочная (Елизаровых)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049675") Тогда
			Возврат Ложь;
		КонецЕсли;

		// Петров В.В. ИП кафе Твоя Булочная (Кирова)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00048901") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Петров В.В. ИП кафе Твоя Булочная (Мира)
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00049676") Тогда
			Возврат Ложь;
		КонецЕсли;
		

		НаименованиеКлиента = ВРег(врКлиент.Наименование);
		
		врЕстьПетров         = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВ") > 0,   Истина, Ложь);
		врЕстьПетрова        = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВА") > 0,  Истина, Ложь);
		врЕстьОтсрочка       = ?(СтрЧислоВхождений(НаименованиеКлиента, "ОТСРОЧКА") > 0, Истина, Ложь);
		врЕстьОткрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, "(") > 0,        Истина, Ложь);
		врЕстьЗакрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, ")") > 0,        Истина, Ложь);
		
		Если врЕстьПетров И (НЕ врЕстьОтсрочка) И врЕстьОткрытиеСкобки И врЕстьЗакрытиеСкобки И (НЕ врЕстьПетрова) Тогда
			Возврат Истина;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Функция КлиентыКонтрагенты_ЭтоПетровЛичный(врКлиент)
	
	НаименованиеКлиента = ВРег(врКлиент.Наименование);
	
	врЕстьПетров         = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВ") > 0,   Истина, Ложь);
	врЕстьПетрова        = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВА") > 0,  Истина, Ложь);
	врЕстьОткрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, "(") > 0,        Истина, Ложь);
	врЕстьЗакрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, ")") > 0,        Истина, Ложь);
	
	Если врЕстьПетрова Тогда
		Возврат Ложь;
	КонецЕсли;	

	Если Не (врЕстьПетров И врЕстьОткрытиеСкобки И врЕстьЗакрытиеСкобки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	МассивГруппПользователей = Новый Массив;
	МассивГруппПользователей.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Город (м)"));
	МассивГруппПользователей.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Кузбасс (м)"));
	МассивГруппПользователей.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Новосибирск"));
	МассивГруппПользователей.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Север (м)"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыПользователей", МассивГруппПользователей);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыПользователейСостав.Пользователь.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	               |	И ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ (&ГруппыПользователей)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врФИО           = СокрЛП(Выборка.Наименование);
		врПозФамилия    = СтрНайти(врФИО, " ");
		врФамилия       = ВРег(Лев(врФИО, врПозФамилия - 1));
		
		Если (Не ПустаяСтрока(врФамилия)) И (врФамилия <> "ПЕТРОВ") И (СтрЧислоВхождений(НаименованиеКлиента, врФамилия) > 0) Тогда
			
		//	Сообщить("ФИО = " + врФамилия);
			
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	


Функция КлиентыКонтрагенты_ЭтоПетровЛичныйАгента(врКлиент, врАгент)
	
	Если врКлиент.ОсновнойМенеджер <> врАгент Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НаименованиеКлиента = ВРег(врКлиент.Наименование);
	
	врЕстьПетров         = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВ") > 0,   Истина, Ложь);
	врЕстьПетрова        = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВА") > 0,  Истина, Ложь);
	врЕстьОткрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, "(") > 0,        Истина, Ложь);
	врЕстьЗакрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, ")") > 0,        Истина, Ложь);
	
	Если врЕстьПетрова Тогда
		Возврат Ложь;
	КонецЕсли;	

	Если Не (врЕстьПетров И врЕстьОткрытиеСкобки И врЕстьЗакрытиеСкобки) Тогда
		Возврат Ложь;
	КонецЕсли;	
			
	врФИО           = СокрЛП(врАгент.Наименование);
	врПозФамилия    = СтрНайти(врФИО, " ");
	врФамилия       = ВРег(Лев(врФИО, врПозФамилия - 1));
		
	Если (Не ПустаяСтрока(врФамилия)) И (врФамилия <> "ПЕТРОВ") И (СтрЧислоВхождений(НаименованиеКлиента, врФамилия) > 0) Тогда
			
		Возврат Истина;
			
	КонецЕсли;	
			
	Возврат Ложь;
	
КонецФункции	


Функция КлиентыКонтрагенты_ЭтоПетровБезДоговораДляКег(врКЛиент)
	
	Событие1С = "Функция КлиентыКонтрагенты_ЭтоПетровБезДоговораДляКег";
	
	Попытка
		
		Если ОсновнаяФирма <> оргАТ_Логистик Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(врКлиент) Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Карла Ильмера 23
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016350") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП  (ГЛАВПИВТОРГ)Суворова 1а
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016414") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Петров Р.В. ИП (ГЛАВПИВТОРГ) Ленская 47
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00016351") Тогда
			Возврат Ложь;
		КонецЕсли;		
		
		//Если КлиентыКонтрагенты_ЭтоПетровЛичный(врКЛиент) Тогда
		//	Возврат Ложь;
		//КонецЕсли;	
		
		НаименованиеКлиента = ВРег(врКлиент.Наименование);
		
		врЕстьПетров         = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВ") > 0,   Истина, Ложь);
		врЕстьПетрова        = ?(СтрЧислоВхождений(НаименованиеКлиента, "ПЕТРОВА") > 0,  Истина, Ложь);
		врЕстьОткрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, "(") > 0,        Истина, Ложь);
		врЕстьЗакрытиеСкобки = ?(СтрЧислоВхождений(НаименованиеКлиента, ")") > 0,        Истина, Ложь);
		
		Если врЕстьПетров И врЕстьОткрытиеСкобки И врЕстьЗакрытиеСкобки И (НЕ врЕстьПетрова) Тогда
			
			ПартнерПоКегам   = Справочники.Партнеры.ПустаяСсылка();  
		
			ЗапросПартнерПоКегам = Новый Запрос;
			ЗапросПартнерПоКегам.УстановитьПараметр("Ссылка",   врКЛиент);
			ЗапросПартнерПоКегам.УстановитьПараметр("Свойство", ПВХ_ОсновнойКлиентПоКегам);
			ЗапросПартнерПоКегам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                             |	ПартнерыДополнительныеРеквизиты.Значение
			                             |ИЗ
			                             |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
			                             |ГДЕ
			                             |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
			                             |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
			РезультатПартнерПоКегам = ЗапросПартнерПоКегам.Выполнить();
			Если Не РезультатПартнерПоКегам.Пустой() Тогда
				
				КорректировкаКег = Истина;
				
				ВыборкаПоКегам = РезультатПартнерПоКегам.Выбрать();
				ВыборкаПоКегам.Следующий();
				ПартнерПоКегам = ВыборкаПоКегам.Значение;
				
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(ПартнерПоКегам) Тогда
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Функция КлиентыКонтрагенты_ПолучитьДанныеКонтрагентов(врМассивКонтрагентов)
			
	ЗапросДанныеКонтрагента = Новый Запрос;
	ЗапросДанныеКонтрагента.УстановитьПараметр("Ссылка", врМассивКонтрагентов);
	ЗапросДанныеКонтрагента.Текст = "ВЫБРАТЬ
	                                |	Контрагенты.Ссылка,
	                                |	Контрагенты.ИНН,
	                                |	Контрагенты.КПП,
	                                |	Контрагенты.КодПоОКПО,
	                                |	Контрагенты.НастроенЭДО
	                                |ИЗ
	                                |	Справочник.Контрагенты КАК Контрагенты
	                                |ГДЕ
	                                |	Контрагенты.Ссылка В(&Ссылка)";
	
	Возврат ЗапросДанныеКонтрагента.Выполнить().Выгрузить();
	
КонецФункции	


Функция КлиентыКонтрагенты_ПолучитьИнформациюПартнер(врПартнер)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врПартнер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Синхронизация_ПартнерыИнформация.Расписание,
	               |	аян_Синхронизация_ПартнерыИнформация.Договоры,
	               |	аян_Синхронизация_ПартнерыИнформация.АдресПартнера,
	               |	аян_Синхронизация_ПартнерыИнформация.Отсрочка,
	               |	аян_Синхронизация_ПартнерыИнформация.АдресКонтрагента,
	               |	аян_Синхронизация_ПартнерыИнформация.Телефон
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_ПартнерыИнформация КАК аян_Синхронизация_ПартнерыИнформация
	               |ГДЕ
	               |	аян_Синхронизация_ПартнерыИнформация.Партнер = &Партнер";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("Расписание, Договоры, АдресПартнера, АдресКонтрагента, Отсрочка, Телефон", Выборка.Расписание, Выборка.Договоры, Выборка.АдресПартнера, Выборка.АдресКонтрагента, Выборка.Отсрочка, Выборка.Телефон);
	КонецЕсли;	
	
	Возврат Новый Структура("Расписание, Договоры, АдресПартнера, АдресКонтрагента, Отсрочка, Телефон", "", "", "", "", "", "", "" );
	
КонецФункции	


#КонецОбласти


#Область ЕГАИС


Функция ЕГАИС_СписокТТН(врСписокКлиентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1",		НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2",		КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Свойство",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (нет подтверждения в ЕГАИС)"));	
	Запрос.УстановитьПараметр("Свойство",	ПВХ_ЗапретЕГАИС_1);
	Запрос.УстановитьПараметр("Партнер",	врСписокКлиентов);
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	НакладныеАкты.ТоварноТранспортнаяНакладная КАК ТоварноТранспортнаяНакладная,
	            	  |	НакладныеАкты.АктКТоварноТранспортнойНакладной КАК АктКТоварноТранспортнойНакладной,
	            	  |	алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент КАК РеализацияТоваровУслуг,
	            	  |	алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент.Контрагент КАК Контрагент,
	            	  |	алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент.Партнер КАК Партнер,
	            	  |	Партнеры.Значение КАК ЗапретОтгрузки,
	            	  |	НакладныеАкты.ТоварноТранспортнаяНакладная.ИдентификаторТТН КАК ИдентификаторТТН
	            	  |ПОМЕСТИТЬ ВТ_Данные
	            	  |ИЗ
	            	  |	(ВЫБРАТЬ
	            	  |		алкТоварноТранспортнаяНакладнаяЕГАИС.Ссылка КАК ТоварноТранспортнаяНакладная,
	            	  |		алкАктКТоварноТранспортнойНакладнойЕГАИС.Ссылка КАК АктКТоварноТранспортнойНакладной
	            	  |	ИЗ
	            	  |		Документ.алкТоварноТранспортнаяНакладнаяЕГАИС КАК алкТоварноТранспортнаяНакладнаяЕГАИС
	            	  |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС КАК алкАктКТоварноТранспортнойНакладнойЕГАИС
	            	  |			ПО (алкАктКТоварноТранспортнойНакладнойЕГАИС.ТоварноТранспортнаяНакладнаяЕГАИС = алкТоварноТранспортнаяНакладнаяЕГАИС.Ссылка)
	            	  |				И (алкАктКТоварноТранспортнойНакладнойЕГАИС.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.алкСтатусыДокументовЕГАИС.Подтвержден))
	            	  |				И (алкАктКТоварноТранспортнойНакладнойЕГАИС.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.алкСтатусыДокументовЕГАИС.Отклонен))
	            	  |	ГДЕ
	            	  |		алкТоварноТранспортнаяНакладнаяЕГАИС.Проведен
	            	  |		И алкТоварноТранспортнаяНакладнаяЕГАИС.Дата МЕЖДУ &Дата1 И &Дата2
	            	  |		И алкТоварноТранспортнаяНакладнаяЕГАИС.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.алкВидыДокументовЕГАИС.Исходящий)) КАК НакладныеАкты
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияДокументовЕГАИСИУчетныхДокументов КАК алкСоответствияДокументовЕГАИСИУчетныхДокументов
	            	  |		ПО (алкСоответствияДокументовЕГАИСИУчетныхДокументов.ДокументЕГАИС = НакладныеАкты.ТоварноТранспортнаяНакладная)
	            	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК Партнеры
	            	  |		ПО (алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент.Партнер = Партнеры.Ссылка)
	            	  |			И (Партнеры.Свойство = &Свойство)
	            	  |ГДЕ
	            	  |	НакладныеАкты.АктКТоварноТранспортнойНакладной ЕСТЬ NULL
	            	  |;
	            	  |
	            	  |////////////////////////////////////////////////////////////////////////////////
	            	  |ВЫБРАТЬ
	            	  |	ВТ_Данные.ТоварноТранспортнаяНакладная,
	            	  |	ВТ_Данные.АктКТоварноТранспортнойНакладной,
	            	  |	ВТ_Данные.РеализацияТоваровУслуг,
	            	  |	ВТ_Данные.Контрагент,
	            	  |	ВТ_Данные.Партнер,
	            	  |	ВТ_Данные.ЗапретОтгрузки,
	            	  |	ВТ_Данные.ИдентификаторТТН
	            	  |ИЗ
	            	  |	ВТ_Данные КАК ВТ_Данные
	            	  |ГДЕ
	            	  |	ВТ_Данные.Партнер В (&Партнер)
	            	  |
	            	  |СГРУППИРОВАТЬ ПО
	            	  |	ВТ_Данные.АктКТоварноТранспортнойНакладной,
	            	  |	ВТ_Данные.ТоварноТранспортнаяНакладная,
	            	  |	ВТ_Данные.РеализацияТоваровУслуг,
	            	  |	ВТ_Данные.ЗапретОтгрузки,
	            	  |	ВТ_Данные.Контрагент,
	            	  |	ВТ_Данные.ИдентификаторТТН,
	            	  |	ВТ_Данные.Партнер
	            	  |
	            	  |УПОРЯДОЧИТЬ ПО
	            	  |	ВТ_Данные.Контрагент,
	            	  |	ВТ_Данные.Партнер,
	            	  |	ВТ_Данные.ТоварноТранспортнаяНакладная";
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ.Колонки.Добавить("ТТН", 	   ОписаниеТипаСтрока(250));
					  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстНакладной = СокрЛП(Выборка.ТоварноТранспортнаяНакладная.Номер) + " от " + Формат(Выборка.ТоварноТранспортнаяНакладная.Дата, "ДФ=dd.MM.yyyy");
		
		НовСтрокаТЗ = ТЗ.Добавить();
		НовСтрокаТЗ.Партнер = Выборка.Партнер;
		НовСтрокаТЗ.ТТН     = ТекстНакладной;
		
	КонецЦикла;	
	
	Возврат ТЗ;
	
КонецФункции	


Функция КонтрагентуЗапрещенаОтгрузкаАлкоголя(врПартнер)
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",   врПартнер);
	//	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (нет подтверждения в ЕГАИС)"));
		Запрос.УстановитьПараметр("Свойство", ПВХ_ЗапретЕГАИС_1);
		Запрос.УстановитьПараметр("Значение", Истина);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыДополнительныеРеквизиты.Ссылка
		               |ИЗ
		               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		               |ГДЕ
		               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
		               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;	
		
	//	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (версия ЕГАИС 1, 2)"));
		//Запрос.УстановитьПараметр("Свойство", ПВХ_ЗапретЕГАИС_2);
		//РЗ = Запрос.Выполнить();
		//Если Не РЗ.Пустой() Тогда
		//	Возврат Истина;
		//КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Проверка запрета отгрузки алкоголя", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	


// Проверяем, что клиент подключен к ЕГАИС (разрешена продажа алкоголя)

Функция КонтрагентПодключенКЕГАИС(врПартнер, ПроверятьЗапретЕГАИС = Истина)
	
	Попытка 
	
		Если ПроверятьЗапретЕГАИС Тогда
			Если КонтрагентуЗапрещенаОтгрузкаАлкоголя(врПартнер) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	
		врПартнерПунктРазгрузки = врПартнер.алкОсновнойПунктРазгрузки;
	
		Если Не ЗначениеЗаполнено(врПартнерПунктРазгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;	
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПунктРазгрузки", врПартнерПунктРазгрузки);
		Запрос.Текст = "ВЫБРАТЬ
		               |	алкСоответствияОрганизацийЕГАИСИКонтрагентов.Контрагент
		               |ИЗ
		               |	РегистрСведений.алкСоответствияОрганизацийЕГАИСИКонтрагентов КАК алкСоответствияОрганизацийЕГАИСИКонтрагентов
		               |ГДЕ
		               |	алкСоответствияОрганизацийЕГАИСИКонтрагентов.ПунктРазгрузкиКонтрагента = &ПунктРазгрузки";
					   
		РезультатЗапроса = Запрос.Выполнить();
	
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("КонтрагентПодключенКЕГАИС", "Исключение! Партнер = " + Строка(врПартнер));
		
	КонецПопытки;	
		
	Возврат Ложь;
	
КонецФункции	
	
	
#КонецОбласти


#Область МАРШРУТ_ДОСТАВКА


// Получаем описание маршрута для накладной

Функция ПолучитьОписаниеМаршрута(ДокументНакладаная, БезТС = Ложь)
	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ДокументНакладная", ДокументНакладаная);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ТранспортноеСредство,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Водитель,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.КурьерЭкспедитор,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ТранспортноеСредство.Наименование,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Комментарий
	               |ИЗ
	               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |ГДЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = &ДокументНакладная
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.МоментВремени УБЫВ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаказОтправлен    = Истина;
		
		СтрокаМаршрут     = "";
		СтрокаВодитель    = "";
		СтрокаЭкспедитор  = "";		
		
		Если ЗначениеЗаполнено(Выборка.ТранспортноеСредство) Тогда
			//СтрокаМаршрут    = СокрЛП(Выборка.ТранспортноеСредствоНаименование);
			СтрокаМаршрут    = СокрЛП(Выборка.Комментарий);			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.КурьерЭкспедитор) Тогда
			ФИОЭкспедитора     = ПовтИсп_ФИОФизЛица(Выборка.КурьерЭкспедитор);
			ТелефонЭкспедитора = ПовтИсп_ТелефонФизЛица(Выборка.КурьерЭкспедитор);
			СтрокаЭкспедитор   = "э." + СокрЛП(ФИОЭкспедитора.Фамилия) + " " + СокрЛП(ФИОЭкспедитора.Имя) + ?(ЗначениеЗаполнено(ТелефонЭкспедитора), " " + СокрЛП(ТелефонЭкспедитора) + "", "");
		Иначе
			СтрокаЭкспедитор = "э. ..";
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(Выборка.Водитель) Тогда
			ФИОВодителя     = ПовтИсп_ФИОФизЛица(Выборка.Водитель);
			ТелефонВодителя = ПовтИсп_ТелефонФизЛица(Выборка.Водитель);
			СтрокаВодитель  = "; в." + СокрЛП(ФИОВодителя.Фамилия) + " " + СокрЛП(ФИОВодителя.Имя) + ?(ЗначениеЗаполнено(ТелефонВодителя), " " + СокрЛП(ТелефонВодителя) + "", "");
		Иначе
			СтрокаВодитель  = "; в. ..";
		КонецЕсли;
		
		Если БезТС Тогда
			Возврат Новый Структура("ЗаказОтправлен, Маршрут", ЗаказОтправлен, СтрокаЭкспедитор + СтрокаВодитель + ". ");
		КонецЕсли;	
						
		//Возврат Новый Структура("ЗаказОтправлен, Маршрут", ЗаказОтправлен, "М-Т:" + СтрокаМаршрут + "=" + СтрокаЭкспедитор + СтрокаВодитель + ". ");
		
		Возврат Новый Структура("ЗаказОтправлен, Маршрут", ЗаказОтправлен, СтрокаМаршрут + "=" + СтрокаЭкспедитор + СтрокаВодитель + ". ");		
		
	КонецЕсли;
	
	Возврат Новый Структура("ЗаказОтправлен, Маршрут", Ложь, "");
	
КонецФункции	


#КонецОбласти


#Область ТАРА


Функция Тара_ОстаткиПоТареВТорговыхТочках_New(врМассивКлиентов)
	
	ТЗТара = Новый ТаблицаЗначений;
	ТЗТара.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗТара.Колонки.Добавить("Тара",    ОписаниеТипаСтрока(1000));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	Запрос.УстановитьПараметр("Клиент",        врМассивКлиентов);
	Запрос.УстановитьПараметр("Кега",          "Кега %");
	Запрос.УстановитьПараметр("БаллонГазовый", "БАЛЛОН ГАЗОВЫЙ %");
	Запрос.УстановитьПараметр("Холодильник",   "Холодильник %");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование,
	               |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток,
	               |	0 КАК КоличествоОстатокПетров,
	               |	ВЫБОР
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &Кега
	               |			ТОГДА 1
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &БаллонГазовый
	               |			ТОГДА 2
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &Холодильник
	               |			ТОГДА 3
	               |		ИНАЧЕ 5
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(, Партнер В (&Клиент)) КАК ПереданнаяВозвратнаяТараОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование
	               |ИТОГИ ПО
	               |	Партнер";
				   
	ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		
		//врГрафикРаботы = ГрафикРаботы_ПолучитьГрафикРаботыТочки(ВыборкаПартнер.Партнер);
		//	
		//ВозврСтрока = ВозврСтрока + "Приемка товара: " + "@@@" + врГрафикРаботы;							
		
		врПетров = Петров_ПолучитьОсновногоКлиентаПоКегам(ВыборкаПартнер.Партнер);
		
		ЕстьОстаткиПетров = Ложь;
	
		Если ЗначениеЗаполнено(врПетров) Тогда
		
			ЗапросПетров = Новый Запрос;
			ЗапросПетров.УстановитьПараметр("Клиент", врПетров);
			ЗапросПетров.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                     |	ПереданнаяВозвратнаяТараОстатки.Номенклатура,
			                     |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток,
			                     |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование
			                     |ИЗ
			                     |	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(, Партнер = &Клиент) КАК ПереданнаяВозвратнаяТараОстатки";
			ТЗОстаткиПетров   = ЗапросПетров.Выполнить().Выгрузить();
			ЕстьОстаткиПетров = Истина;
			
		КонецЕсли;	
		
		КолСтрок    = 0;
		ВозврСтрока = "";
		
		//МинЗаказ = СуммаМинимальногоЗаказа(ВыборкаПартнер.Партнер);	
		//Если МинЗаказ > 0 Тогда
		//	ВозврСтрока = "Мин. заказ: @@@" + Формат(МинЗаказ, "ЧРД=.; ЧГ=");
		//КонецЕсли;	
				
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Номенклатура");
		ТЗ.Колонки.Добавить("НоменклатураНаименование");
		ТЗ.Колонки.Добавить("КоличествоОстаток");
		ТЗ.Колонки.Добавить("КоличествоОстатокПетров");
		ТЗ.Колонки.Добавить("Приоритет");
		
		Выборка = ВыборкаПартнер.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтрока = ТЗ.Добавить();
			НовСтрока.Номенклатура             = Выборка.Номенклатура;
			НовСтрока.НоменклатураНаименование = Выборка.НоменклатураНаименование;
			НовСтрока.КоличествоОстаток        = Выборка.КоличествоОстаток;
			НовСтрока.КоличествоОстатокПетров  = 0;
			НовСтрока.Приоритет                = Выборка.Приоритет;
		КонецЦикла;			
		
		Если ЕстьОстаткиПетров Тогда
			Для Каждого ТекОстатокПетров Из ТЗОстаткиПетров Цикл
				НовСтрока = ТЗ.Добавить();
				НовСтрока.Номенклатура             = ТекОстатокПетров.Номенклатура;
				НовСтрока.НоменклатураНаименование = ТекОстатокПетров.НоменклатураНаименование;
				НовСтрока.КоличествоОстаток        = 0;
				НовСтрока.КоличествоОстатокПетров  = ТекОстатокПетров.КоличествоОстаток;
				НовСтрока.Приоритет                = 1;
			КонецЦикла;	
		КонецЕсли;	
		
		ТЗ.Свернуть("Номенклатура, НоменклатураНаименование, Приоритет", "КоличествоОстаток, КоличествоОстатокПетров");
		ТЗ.Сортировать("Приоритет, НоменклатураНаименование");
		
		Для Каждого Выборка Из ТЗ Цикл
			
			КолСтрок = КолСтрок + 1;
			
			Если Не ПустаяСтрока(ВозврСтрока) Тогда
				ВозврСтрока = ВозврСтрока + "###";
			КонецЕсли;				
			
			Если КолСтрок = 6 Тогда
				ВозврСтрока = ВозврСтрока + "Смотрите отчет!" + "@@@" + "Всего: " + Строка(0) + " | " + "Клиент: " + Строка(0) + " | " + "Петров: " + Строка(0);			
				Прервать;
			КонецЕсли;				
			
			ОстатокНаПетрове = 0;
			Если ЕстьОстаткиПетров Тогда
				врСтрокаПоиска = ТЗОстаткиПетров.Найти(Выборка.Номенклатура, "Номенклатура"); 
				Если врСтрокаПоиска <> Неопределено Тогда
					ОстатокНаПетрове = врСтрокаПоиска["КоличествоОстаток"];
				КонецЕсли;	
			КонецЕсли;	
			
		//  ВозврСтрока = ВозврСтрока + СокрЛП(Выборка.НоменклатураНаименование) + "@@@" + "в тт " + Строка(Выборка.КоличествоОстаток) + " | " + "возв " + Строка(Выборка.КоличествоОстаток) + " | " + "долг " + Строка(Выборка.КоличествоОстаток);			
		
		    ВозврСтрока = ВозврСтрока + СокрЛП(Выборка.НоменклатураНаименование) + "@@@" + "Всего: " + Строка(Выборка.КоличествоОстаток + ОстатокНаПетрове) + " | " + "Клиент: " + Строка(Выборка.КоличествоОстаток) + " | " + "Петров: " + Строка(ОстатокНаПетрове);							
			
		КонецЦикла;	
		
		Сообщить(ВозврСтрока);
		
		Если Не ПустаяСтрока(ВозврСтрока) Тогда
			
			НовСтрока = ТЗТара.Добавить();
			НовСтрока.Партнер = ВыборкаПартнер.Партнер;
			НовСтрока.Тара    = ВозврСтрока;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТЗТара;
	
		
КонецФункции


Функция Тара_ОстаткиПоТареВТорговыхТочках(врМассивКлиентов)
	
	ТЗТара = Новый ТаблицаЗначений;
	ТЗТара.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗТара.Колонки.Добавить("Тара",    ОписаниеТипаСтрока(1000));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	Запрос.УстановитьПараметр("Клиент",        врМассивКлиентов);
	Запрос.УстановитьПараметр("Кега",          "Кега %");
	Запрос.УстановитьПараметр("БаллонГазовый", "БАЛЛОН ГАЗОВЫЙ %");
	Запрос.УстановитьПараметр("Холодильник",   "Холодильник %");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование,
	               |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток,
	               |	ВЫБОР
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &Кега
	               |			ТОГДА 1
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &БаллонГазовый
	               |			ТОГДА 2
	               |		КОГДА ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование ПОДОБНО &Холодильник
	               |			ТОГДА 3
	               |		ИНАЧЕ 5
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(, Партнер В (&Клиент)) КАК ПереданнаяВозвратнаяТараОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование
	               |ИТОГИ ПО
	               |	Партнер";
				   
	ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		
		КолСтрок    = 0;
		ВозврСтрока = "";
		
		//МинЗаказ = СуммаМинимальногоЗаказа(ВыборкаПартнер.Партнер);	
		//Если МинЗаказ > 0 Тогда
		//	ВозврСтрока = "Мин. заказ: @@@" + Формат(МинЗаказ, "ЧРД=.; ЧГ=");
		//КонецЕсли;	
				
	//	Если (ИмяСервераМА = "Tomsk") Тогда
				
			Если Не ПустаяСтрока(ВозврСтрока) Тогда
				ВозврСтрока = ВозврСтрока + "###";
			КонецЕсли;						
			
			//врГрафикРаботы = ГрафикРаботы_ПолучитьГрафикРаботыТочки(ВыборкаПартнер.Партнер);
			//
			//ВозврСтрока = ВозврСтрока + "Приемка товара: " + "@@@" + врГрафикРаботы;			
			
	//	КонецЕсли;	
		
		Выборка = ВыборкаПартнер.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КолСтрок = КолСтрок + 1;
			
			Если Не ПустаяСтрока(ВозврСтрока) Тогда
				ВозврСтрока = ВозврСтрока + "###";
			КонецЕсли;				
			
			Если КолСтрок = 6 Тогда
				ВозврСтрока = ВозврСтрока + "Остальное оборуд-ние см. в отчете!!!" + "@@@" + "в тт " + Строка(0) + " | " + "возв " + Строка(0) + " | " + "долг " + Строка(0);			
				Прервать;
			КонецЕсли;				
			
		    ВозврСтрока = ВозврСтрока + СокрЛП(Выборка.НоменклатураНаименование) + "@@@" + "в тт " + Строка(Выборка.КоличествоОстаток) + " | " + "возв " + Строка(Выборка.КоличествоОстаток) + " | " + "долг " + Строка(Выборка.КоличествоОстаток);			
						
		КонецЦикла;	
		
		Если Не ПустаяСтрока(ВозврСтрока) Тогда
			
			НовСтрока = ТЗТара.Добавить();
			НовСтрока.Партнер = ВыборкаПартнер.Партнер;
			НовСтрока.Тара    = ВозврСтрока;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТЗТара;
	
		
КонецФункции


#КонецОбласти


#Область РАЗДЕЛЕНИЕ_ТОЧЕК_ПО_АГЕНТАМ


// Получить ГУИД Партнера

Функция ПолучитьГУИДПартнера(Партнер, Агент)
	
	Возврат КлиентыКонтрагенты_ГУИДПартнера(Партнер, Агент, ИмяСервераМА);
	
	Событие1С = "Определение ГУИД Партнера";
	                               
	Если ПользовательДобавленВРазделениеТочек(Агент) Тогда
		
		Запрос = Новый Запрос;
		ЗАпрос.УстановитьПараметр("Агент",   Агент);
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_СинхронизацияТТ.IDТочки
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
		               |ГДЕ
		               |	аян_СинхронизацияТТ.Агент = &Агент
		               |	И аян_СинхронизацияТТ.ТорговаяТочка = &Партнер";
		ВЫборка = Запрос.Выполнить().Выбрать();
		Пока ВЫборка.Следующий() Цикл
			Возврат СокрлП(ВЫборка.IDТочки);
		КонецЦикла;	
		
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка определение ГУИД Партнера """ + Строка(Партнер) + """");
		
	КонецЕсли;	
	
	Возврат Партнер.УникальныйИдентификатор();
	
КонецФункции	


// Получить Партнера по ГУИД

Функция ПолучитьПартнераПоГУИД(ГУИДПартнера)
	
	Событие1С = "Определение партнера по ГУИД";
	
	Если ПустаяСтрока(ГУИДПартнера) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГУИДПартнера = КлиентыКонтрагенты_ОбработатьГУИДПартнера(ГУИДПартнера, ИмяСервераМА);
	
	ТипОпределенияГУИД = Прав(СокрЛП(ГУИДПартнера), 4);
	
	Если ТипОпределенияГУИД = "_AGR" Тогда
		
		врГУИД = Лев(СокрЛП(ГУИДПартнера), СтрДлина(СокрЛП(ГУИДПартнера)) - 4);
		
		Попытка
			GUID = СоздатьУникальныйИдентификатор(врГУИД);
		Исключение
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ГУИД """ + Строка(ГУИДПартнера) + """");
			Возврат Неопределено;
		КонецПопытки;	
		УсловиеОбслуживание = Справочники.УсловияОбслуживанияПартнеровТорговымиПредставителями.ПолучитьСсылку(GUID);
		Если УсловиеОбслуживание.ПолучитьОбъект() = Неопределено Тогда 	
			Возврат Неопределено;
		Иначе
			Если ЗначениеЗаполнено(УсловиеОбслуживание.Владелец) Тогда
				Возврат УсловиеОбслуживание.Владелец;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;		
		
	Иначе	
		
		Попытка 
			GUID = СоздатьУникальныйИдентификатор(ГУИДПартнера);
		Исключение
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ГУИД """ + Строка(ГУИДПартнера) + """");
		КонецПопытки;	
		Партнер = Справочники.Партнеры.ПолучитьСсылку(GUID);
		Если Партнер.ПолучитьОбъект() = Неопределено Тогда 
			Возврат Неопределено;
		Иначе	
			Возврат Партнер;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	


// Получить пользователя по ГУИД

Функция ПолучитьПользователяПоГУИД(ГУИДПользователя)
	
	Событие1С = "Определение партнера по Пользователя";
	
	Если ПустаяСтрока(ГУИДПользователя) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
			
	Попытка 
		GUID = СоздатьУникальныйИдентификатор(ГУИДПользователя);
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ГУИД """ + Строка(ГУИДПользователя) + """");
	КонецПопытки;	
	
	врПользователь = Справочники.Пользователи.ПолучитьСсылку(GUID);
	Если врПользователь.ПолучитьОбъект() = Неопределено Тогда 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Пользователь неопределен. ГУИД = " + СокрЛП(ГУИДПользователя));
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе	
		Возврат врПользователь;
	КонецЕсли;
	
	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Пользователь неопределен. ГУИД = " + СокрЛП(ГУИДПользователя));
	
	Возврат Неопределено;
	
КонецФункции


// Получить вид цены по ГУИД

Функция ПолучитьВидЦеныПоГУИД(ГУИДВидаЦены)
	
	Событие1С = "Определение Вид цены по ГУИД";
	
	Если ПустаяСтрока(ГУИДВидаЦены) Тогда
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
			
	Попытка 
		GUID = СоздатьУникальныйИдентификатор(ГУИДВидаЦены);
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ГУИД """ + Строка(ГУИДВидаЦены) + """");
	КонецПопытки;	
	
	врВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(GUID);
	Если врВидЦены.ПолучитьОбъект() = Неопределено Тогда 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Вид цены неопределен. ГУИД = " + СокрЛП(ГУИДВидаЦены));
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	Иначе	
		Возврат врВидЦены;
	КонецЕсли;
	
	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Вид цены неопределен. ГУИД = " + СокрЛП(ГУИДВидаЦены));
	
	Возврат Неопределено;
	
КонецФункции


// Получить группу пользователя по ГУИД

Функция ПолучитьГруппуПользователяПоГУИД(ГУИДАгента)
	
	Событие1С = "Определение Группы пользователя по ГУИД";
	
	Если ПустаяСтрока(ГУИДАгента) Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Попытка 
		GUID = СоздатьУникальныйИдентификатор(ГУИДАгента);
	Исключение
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ГУИД """ + Строка(ГУИДАгента) + """");
	КонецПопытки;	
	
	Агент = Справочники.ГруппыПользователей.ПолучитьСсылку(GUID);
	Если Агент.ПолучитьОбъект() = Неопределено Тогда 
		
		Возврат Неопределено;
	Иначе	
		Возврат Агент;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции


// Пользователь добавлен в базу после подключения разделения точек по агентам

Функция ПользовательДобавленВРазделениеТочек(Агент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_СинхронизацияПользователи.Пользователь
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияПользователи КАК аян_СинхронизацияПользователи
	               |ГДЕ
	               |	аян_СинхронизацияПользователи.Пользователь = &Агент";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


// Список всех разделенных агентов

Функция СписокВсехРазделенныхАгентов()
	
	МассивРазделенныхАгентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_СинхронизацияПользователи.Пользователь
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияПользователи КАК аян_СинхронизацияПользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРазделенныхАгентов.Добавить(Выборка.Пользователь);
	КонецЦикла;
	
	Возврат МассивРазделенныхАгентов;	
	
КонецФункции


#КонецОбласти


#Область ОТЧЕТ_АГЕНТУ


Функция ЭтоРеализацияЧерезФлажокПетров(врДокумент)
	
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",   врДокумент);
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заказ через флажок Петров"));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Объект = &Объект
		               |	И ДополнительныеСведения.Свойство = &Свойство";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Значение;
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение заказ через флажок Петров", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


// Пользователь изменивший заявку последним, кроме администраторов синхронизации

Функция ПользовательИзменившийЗаявку(врЗаяка)
	
	МассивАвторовИскл = Новый Массив;
	МассивАвторовИскл.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Администратор"));
	МассивАвторовИскл.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Батин Олег Викторович"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",      врЗаяка);
	Запрос.УстановитьПараметр("АвторВерсии", МассивАвторовИскл);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВерсииОбъектов.АвторВерсии
	               |ИЗ
	               |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	               |ГДЕ
	               |	НЕ ВерсииОбъектов.АвторВерсии В (&АвторВерсии)
	               |	И ВерсииОбъектов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВерсииОбъектов.ДатаВерсии УБЫВ";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.АвторВерсии;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции	


// Проверка, что товар весовой

Функция ЭтоВесовойТовар(врНоменклатура)
	
	Если (ТоварыВесовые.Найти(врНоменклатура) <> Неопределено) ИЛИ 
		 (ТоварыВесовыеБезНДС.Найти(врНоменклатура) <> Неопределено) ИЛИ
		 (Товары_ОвощиФрукты.Найти(врНоменклатура) <> Неопределено) Тогда
		 Возврат Истина
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции	


// Данные по ручным отказам (операторы)

Функция РучныеОтказы(врДата, врАгент)
	
	ТЗРучныеОтказы = Новый ТаблицаЗначений;
	ТЗРучныеОтказы.Колонки.Добавить("Агент");
	ТЗРучныеОтказы.Колонки.Добавить("ДатаОтказа");
	ТЗРучныеОтказы.Колонки.Добавить("ПричинаОтказа");
	ТЗРучныеОтказы.Колонки.Добавить("Клиент");
	ТЗРучныеОтказы.Колонки.Добавить("Номенклатура");
	ТЗРучныеОтказы.Колонки.Добавить("ВидДокумента");
	ТЗРучныеОтказы.Колонки.Добавить("Количество");
	ТЗРучныеОтказы.Колонки.Добавить("Комментарий");
	
	// РУЧНАЯ ОТМЕНА
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(врДата));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врДата));
	Запрос.УстановитьПараметр("Агент",      врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Количество,
	               |	ЗаказКлиентаТовары.Ссылка.Партнер КАК Партнер,
	               |	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий,
	               |	ЗаказКлиентаТовары.Ссылка.Дата,
	               |	ЗаказКлиентаТовары.Ссылка
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиентаТовары.Ссылка.Проведен
	               |	И ЗаказКлиентаТовары.Ссылка.Менеджер = &Агент
	               |	И ЗаказКлиентаТовары.Отменено";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗапросОтказы = Новый Запрос;
		ЗапросОтказы.УстановитьПараметр("НачПериода",   НачалоДня(врДата));
		ЗапросОтказы.УстановитьПараметр("КонПериода",   КонецДня(врДата));
		ЗапросОтказы.УстановитьПараметр("Агент",        врАгент);	
		ЗапросОтказы.УстановитьПараметр("Клиент",       Выборка.Партнер);
		ЗапросОтказы.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
		ЗапросОтказы.УстановитьПараметр("ВидДокумента", Перечисления.аян_СинхронизацияВидыДокументов.Заказ);			
		ЗапросОтказы.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	аян_СинхронизацияОтказы.Номенклатура
		                     |ИЗ
		                     |	РегистрСведений.аян_СинхронизацияОтказы КАК аян_СинхронизацияОтказы
		                     |ГДЕ
		                     |	аян_СинхронизацияОтказы.ДатаОтказа МЕЖДУ &НачПериода И &КонПериода
		                     |	И аян_СинхронизацияОтказы.Агент = &Агент
		                     |	И аян_СинхронизацияОтказы.Клиент = &Клиент
		                     |	И аян_СинхронизацияОтказы.Номенклатура = &Номенклатура
		                     |	И аян_СинхронизацияОтказы.ВидДокумента = &ВидДокумента";
		РЗОтказы = ЗапросОтказы.Выполнить();
		Если РЗОтказы.Пустой() Тогда
			
			врАвторИзменений = ПользовательИзменившийЗаявку(Выборка.Ссылка);
			
			НовСтрока = ТЗРучныеОтказы.Добавить();
			НовСтрока.Агент         = врАгент;
			НовСтрока.ДатаОтказа    = Выборка.Дата;		
			Если ЭтоВесовойТовар(Выборка.Номенклатура) Тогда 
				НовСтрока.ПричинаОтказа = "КОРРЕКТИРОВКА ВЕСА" + ?(ЗначениеЗаполнено(врАвторИзменений), " (" + Строка(врАвторИзменений) + ")", "");
			Иначе
				НовСтрока.ПричинаОтказа = "РУЧНАЯ ОТМЕНА" + ?(ЗначениеЗаполнено(врАвторИзменений), " (" + Строка(врАвторИзменений) + ")", "");
			КонецЕсли;	
			НовСтрока.Клиент        = Выборка.Партнер;
			НовСтрока.Номенклатура  = Выборка.Номенклатура;
			НовСтрока.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
			НовСтрока.Количество    = Выборка.Количество;
			НовСтрока.Комментарий   = Выборка.Комментарий;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	// ЗАКАЗ УДАЛЕН
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(врДата));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врДата));
	Запрос.УстановитьПараметр("Агент",      врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Количество,
	               |	ЗаказКлиентаТовары.Ссылка.Партнер КАК Партнер,
	               |	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий,
	               |	ЗаказКлиентаТовары.Ссылка.Дата,
	               |	ЗаказКлиентаТовары.Ссылка
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиентаТовары.Ссылка.ПометкаУдаления
	               |	И ЗаказКлиентаТовары.Ссылка.Менеджер = &Агент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врАвторИзменений = ПользовательИзменившийЗаявку(Выборка.Ссылка);
		
		НовСтрока = ТЗРучныеОтказы.Добавить();
		НовСтрока.Агент         = врАгент;
		НовСтрока.ДатаОтказа    = Выборка.Дата;
		НовСтрока.ПричинаОтказа = "ЗАКАЗ УДАЛЕН"  + ?(ЗначениеЗаполнено(врАвторИзменений), " (" + Строка(врАвторИзменений) + ")", "");
		НовСтрока.Клиент        = Выборка.Партнер;
		НовСтрока.Номенклатура  = Выборка.Номенклатура;
		НовСтрока.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
		НовСтрока.Количество    = Выборка.Количество;
		НовСтрока.Комментарий   = Выборка.Комментарий;
			
	КонецЦикла;
	
	Возврат ТЗРучныеОтказы;
	
КонецФункции	


// Данные по удаленным заказам

Процедура ВывестиУдаленныеЗаказы(врТабДок, врАгент, врДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер", врАгент);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(врДата));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врДата));	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка,
	               |	ЗаказКлиента.Дата,
	               |	ЗаказКлиента.Комментарий,
	               |	ЗаказКлиента.Партнер КАК Клиент,
	               |	ЗаказКлиента.Товары.(
	               |		Номенклатура,
	               |		Количество
	               |	)
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиента.ПометкаУдаления
	               |	И ЗаказКлиента.Менеджер = &Менеджер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказКлиента.МоментВремени";
	РЗ = Запрос.Выполнить();
	Если РЗ.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок    = Макет.ПолучитьОбласть("ШапкаУдаленные");
	ОблСтрока       = Макет.ПолучитьОбласть("СтрокаУдаленные");
	ОблРазделитель  = Макет.ПолучитьОбласть("Разделитель");
	ОблПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	врТабДок.Вывести(ОблЗаголовок);			
	
	Выборка = РЗ.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовары = "";
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			СтрокаТовары = СтрокаТовары + ?(ПустаяСтрока(СтрокаТовары), "", Символы.ПС) + СокрЛП(ВыборкаТовары.Номенклатура) + " = " + Строка(ВыборкаТовары.Количество);
		КонецЦикла;	
	
		ОблСтрока.Параметры.Дата        = Выборка.Дата;
		ОблСтрока.Параметры.Клиент      = СокрЛП(Выборка.Клиент.Наименование);
		ОблСтрока.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
		ОблСтрока.Параметры.Товар       = СтрокаТовары;
		
		врТабДок.Вывести(ОблСтрока);	
		
	КонецЦикла;	
	
	врТабДок.Вывести(ОблПустаяСтрока);
	
КонецПроцедуры	


// Данные по точкам незаключенными договорами

Процедура ВывестиТочкиСНеЗаключеннымиДоговорами(врТабДок, врАгент)
	
	ТЗ = аян_СинхронизацияСервер.Договоры_ДоговорыПоТочкамАгента(врАгент);
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	ТЗВывод = Новый ТаблицаЗначений;
	ТЗВывод.Колонки.Добавить("Клиент",      Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗВывод.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗВывод.Колонки.Добавить("Информация",  ОписаниеТипаСтрока(250));
	ТЗВывод.Колонки.Добавить("Выделить");
	
	ФлагВывода = Ложь;
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(ТекСтрока.Клиент) Тогда
			Продолжить;
		КонецЕсли;	
		
		ВыделитьСтроку        = Ложь;
		НеЗаключенныеДоговора = "";
		
		Если (ТекСтрока.Организация = оргАТ_Логистик) ИЛИ (ТекСтрока.Организация = оргРИФПлюс) Тогда
			
			Если Не ТекСтрока.АТЛогистик Тогда
				НеЗаключенныеДоговора = НеЗаключенныеДоговора + "АТЛ, ";
				ВыделитьСтроку        = Истина;
			КонецЕсли;
			
			Если Не ТекСтрока.ТОП17 Тогда
				НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			КонецЕсли;			
						
			//Если КонтрагентПодключенКЕГАИС(ТекСтрока.Клиент) И (Не ТекСтрока.ТОП17) Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			//КонецЕсли;
			
			//Если Не ТекСтрока.РИФПлюсБезНДС Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "РИФ+(без НДС), ";
			//КонецЕсли;			
			//
			//Если Не ТекСтрока.МарсБезНДС Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "Марс(без НДС), ";
			//КонецЕсли;			
			
		ИначеЕсли ТекСтрока.Организация = оргРИФПлюс Тогда
						
			//Если Не ТекСтрока.РИФПлюс Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "РИФ+, ";
			//КонецЕсли;
			
			//Если КонтрагентПодключенКЕГАИС(ТекСтрока.Клиент) И (Не ТекСтрока.ТОП17) Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			//КонецЕсли;			
			
		ИначеЕсли ТекСтрока.Организация = оргТОП_17 Тогда
						
			Если Не ТекСтрока.ТОП17 Тогда
				НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			КонецЕсли;
			
			//Если КонтрагентПодключенКЕГАИС(ТекСтрока.Клиент) И (Не ТекСтрока.ТОП17) Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			//КонецЕсли;						
			
		ИначеЕсли (ТекСтрока.Организация = оргМеркурий) ИЛИ (ТекСтрока.Организация = оргМарс) Тогда	
			
			Если Не ТекСтрока.Меркурий Тогда
				НеЗаключенныеДоговора = НеЗаключенныеДоговора + "Меркурий, ";
				ВыделитьСтроку        = Истина;
			КонецЕсли;
			
			//Если Не ТекСтрока.Марс Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "Марс, ";
			//	ВыделитьСтроку        = Истина;
			//КонецЕсли;							
			
			//Если КонтрагентПодключенКЕГАИС(ТекСтрока.Клиент) И (Не ТекСтрока.ТОП17) Тогда
			//	НеЗаключенныеДоговора = НеЗаключенныеДоговора + "ТОП17, ";
			//КонецЕсли;			
					
		КонецЕсли;	
		
		Если Не ПустаяСтрока(НеЗаключенныеДоговора) Тогда
			
			ФлагВывода = Истина;
			
			НовСтрока = ТЗВывод.Добавить();
			НовСтрока.Клиент      = ТекСтрока.Клиент;
			НовСтрока.Организация = ТекСтрока.Организация;
			НовСтрока.Информация  = Лев(НеЗаключенныеДоговора, СтрДлина(НеЗаключенныеДоговора) - 2);
			НовСтрока.Выделить    = ВыделитьСтроку;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Не ФлагВывода Тогда
		Возврат;
	КонецЕсли;	
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок    = Макет.ПолучитьОбласть("ШапкаДоговоры");
	ОблСтрока       = Макет.ПолучитьОбласть("СтрокаДоговоры");
	ОблРазделитель  = Макет.ПолучитьОбласть("Разделитель");
	ОблПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	врТабДок.Вывести(ОблЗаголовок);			
		
	Для Каждого ТекСтрока Из ТЗВывод Цикл
		
		ОблСтрока.Параметры.Заполнить(ТекСтрока);
		
		врОбл = врТабДок.Вывести(ОблСтрока);	
		
		ГорПоложение = врОбл.Верх;
		врОбл = врТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
				
		Если ТекСтрока.Выделить Тогда
			врОбл.ЦветФона = Новый Цвет(255, 228, 225);
		КонецЕсли;	
		
	КонецЦикла;	
	
	врТабДок.Вывести(ОблПустаяСтрока);
	
КонецПроцедуры	


// Данные по точкам с запретом по ЕГАИС

Процедура ВывестиТочкиСЗапретомПоЕГАИС(врТабДок, врАгент)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок    = Макет.ПолучитьОбласть("ШапкаЗапретЕГАИС");
	ОблСтрока       = Макет.ПолучитьОбласть("СтрокаЗапретЕГАИС");
	ОблРазделитель  = Макет.ПолучитьОбласть("Разделитель");
	ОблПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
	МассивСвойств = Новый Массив;
	//МассивСвойств.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (нет подтверждения в ЕГАИС)"));
	//МассивСвойств.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (версия ЕГАИС 1, 2)"));
	МассивСвойств.Добавить(ПВХ_ЗапретЕГАИС_1);
	//МассивСвойств.Добавить(ПВХ_ЗапретЕГАИС_2);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", 	  врАгент);
	Запрос.УстановитьПараметр("Свойство", МассивСвойств);
	Запрос.УстановитьПараметр("Значение", Истина);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ПОМЕСТИТЬ ТочкиАгента
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Агент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыДополнительныеРеквизиты.Ссылка КАК Клиент,
	               |	ПартнерыДополнительныеРеквизиты.Свойство КАК ПричинаЗапрета
	               |ИЗ
	               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	               |ГДЕ
	               |	ПартнерыДополнительныеРеквизиты.Свойство В(&Свойство)
	               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
	               |	И ПартнерыДополнительныеРеквизиты.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ТочкиАгента.ТорговаяТочка
	               |			ИЗ
	               |				ТочкиАгента КАК ТочкиАгента)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартнерыДополнительныеРеквизиты.Ссылка,
	               |	ПартнерыДополнительныеРеквизиты.Свойство
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Клиент";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		
		врТабДок.Вывести(ОблЗаголовок);			
		
		врМассивТочек = Новый Массив;
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			врМассивТочек.Добавить(Выборка.Клиент);
		КонецЦикла;
		
		НеподтверТТН = ЕГАИС_СписокТТН(врМассивТочек);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			
			врСтрокаТТН = "";
			
			Для Каждого ТекТТН Из НеподтверТТН Цикл
				Если ТекТТН.Партнер = Выборка.Клиент Тогда
					врСтрокаТТН = врСтрокаТТН + ?(ПустаяСтрока(врСтрокаТТН), ТекТТН.ТТН, "; " + ТекТТН.ТТН);
				КонецЕсли;	
			КонецЦикла;	
			
			
			ОблСтрока.Параметры.Заполнить(Выборка);
			ОблСтрока.Параметры.ТТН = врСтрокаТТН;
			врТабДок.Вывести(ОблСтрока);			
			
			
		КонецЦикла;	
		
		врТабДок.Вывести(ОблПустаяСтрока);
		
	КонецЕсли;	
		
КонецПроцедуры	


// Данные по остаткам на складе РИФ+ (алкоголь)

Процедура ВывестиДанныеПоОстаткамРИФПлюсАлкоголь(врТабДок)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок   = Макет.ПолучитьОбласть("ШапкаРИФ");
	ОблСтрока      = Макет.ПолучитьОбласть("СтрокаРИФ");
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	врТабДок.Вывести(ОблЗаголовок);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", СкладРИФПлюсАлкоголь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
	               |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток КАК ВРезервеСоСкладаОстаток
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад) КАК СвободныеОстаткиОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование";		
				   
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаНоменклатура.Следующий() Цикл
					
		ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);
		
		Если ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток > 0 Тогда
			
			ОблСтрока.Параметры.Товар   = ВыборкаНоменклатура.Номенклатура.Наименование;
			ОблСтрока.Параметры.Остаток = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
			
			врТабДок.Вывести(ОблСтрока);
					
		КонецЕсли;
				
	КонецЦикла;	
		
	врТабДок.Вывести(ОблРазделитель);						
	
КонецПроцедуры


// Вид заявки и вес (нетто) в кг

Функция ПолучитьХарактеристикиЗаявки(врЗаявка)
	
	ВидЗаявки = "";
	ВесЗаявки = 0;
	СуммаЗаявкиБезОборудования = 0;
		
	Попытка
		
		ВидЗаявкиОпеределен = Ложь;
		
		// Вес заявки
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", врЗаявка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Номенклатура.Вес КАК Тоннаж,
		               |	РеализацияТоваровУслугТовары.Количество,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
		               |	РеализацияТоваровУслугТовары.Номенклатура.Вес КАК НоменклатураВес,
		               |	РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры,
		               |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад.Наименование,
		               |	РеализацияТоваровУслугТовары.СуммаСНДС,
		               |	РеализацияТоваровУслугТовары.Ссылка.ЗаказПетрушка,
		               |	РеализацияТоваровУслугТовары.Ссылка.Организация
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатураВидНоменклатуры <> ВидНоменклатурыМногооборотнаяТара Тогда
				СуммаЗаявкиБезОборудования = СуммаЗаявкиБезОборудования + Выборка.СуммаСНДС;
			КонецЕсли;	
			
			//Если Выборка.НоменклатураЕдиницаИзмерения = ЕдиницаИзмерения_КГ Тогда
			//	ВесЗаявки = ВесЗаявки + Выборка.Количество;
			//ИначеЕсли Выборка.НоменклатураВес = 0 Тогда
			//	ЗаписатьОшибку1СвЛогФайл("Вес товара", "Не указан вес товара: " + Выборка.НоменклатураНаименование);
			//Иначе
				ВесЗаявки = ВесЗаявки + Выборка.Тоннаж;
			//КонецЕсли;	
			
			Если Не ВидЗаявкиОпеределен Тогда				
				
				Если Выборка.ЗаказПетрушка Тогда	
					ВидЗаявки 			 = "ПЕТРУШКА";
					ВидЗаявкиОпеределен  = Истина;											
				ИначеЕсли Выборка.Организация = оргМирНапитковТомск Тогда	
					ВидЗаявки 			 = "СКИДКА";
					ВидЗаявкиОпеределен  = Истина;											
				ИначеЕсли Выборка.Организация = ОргБонусТомск Тогда	
					ВидЗаявки 			 = "БОНУС";
					ВидЗаявкиОпеределен  = Истина;																
				ИначеЕсли СтрЧислоВхождений(Выборка.СкладНаименование, "транзит") > 0 Тогда	
					ВидЗаявки 			 = "ТРАНЗИТ";
					ВидЗаявкиОпеределен  = Истина;																					
				КонецЕсли;	
				
			КонецЕсли;	
						
		КонецЦикла;
				
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Определение характеристик заявки", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
		
	Возврат Новый Структура("ВидЗаявки, Вес, СуммаЗаявкиБезОборудования", ВидЗаявки, ВесЗаявки, СуммаЗаявкиБезОборудования);	
	
КонецФункции	


// Данные по оборудованию

Процедура ВывестиДанныеПоОборудованию(врТабДок, врАгент)
	
	врНачПериодаДвижения = НачалоДня(ТекущаяДата() - ДеньВСекундах * 60);
	врКонПериодаДвижения = КонецДня(ТекущаяДата());
	
	ТЗДвижения = аян_СинхронизацияСервер.Оборудование_ДвижениеПоОборудованиюЗаПериод(врАгент, врНачПериодаДвижения, врКонПериодаДвижения);
	ТЗОстатки  = аян_СинхронизацияСервер.Оборудование_ОстаткиПоОборудованию(врАгент, врКонПериодаДвижения);
	ТЗВозвраты = аян_СинхронизацияСервер.Оборудование_НепроведенныеВозвраты(врАгент, врНачПериодаДвижения, врКонПериодаДвижения);
	
	Если (ТЗДвижения.Количество() = 0) И (ТЗОстатки.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок         = Макет.ПолучитьОбласть("ЗаголовокОборудование");
	ОблКлиент            = Макет.ПолучитьОбласть("ОборудованиеКлиент");
	ОблСтрокаПередача    = Макет.ПолучитьОбласть("СтрокаОборудованиеПередача");
	ОблСтрокаВозврат     = Макет.ПолучитьОбласть("СтрокаОборудованиеВозврат");
	ОблОстатки 		     = Макет.ПолучитьОбласть("ОборудованиеОстатки");
	ОблВозвратыЗаголовок = Макет.ПолучитьОбласть("ОборудованиеВозвратыЗаголовок");
	ОблВозвратыСтрока    = Макет.ПолучитьОбласть("ОборудованиеВозвратыСтрока");	
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.ТорговаяТочка,
	               |	аян_СинхронизацияТТ.ТорговаяТочка.Наименование
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Менеджер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	аян_СинхронизацияТТ.ТорговаяТочка.Наименование";
				   
	РЗ = Запрос.Выполнить();
	
	Если НЕ РЗ.Пустой() Тогда
		
		врТабДок.Вывести(ОблРазделитель);
		врТабДок.Вывести(ОблЗаголовок);
				
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Region") ИЛИ ((ИмяСервераМА = "Kuzbass")) Тогда
				
				врПоиск_Движения = ТЗДвижения.Найти(Выборка.ТорговаяТочка, "Партнер");
				врПоиск_Остатки  = ТЗОстатки.Найти(Выборка.ТорговаяТочка,  "Партнер");
				врПоиск_Возвраты = ТЗВозвраты.Найти(Выборка.ТорговаяТочка, "Партнер");

				Если (врПоиск_Движения = Неопределено) И (врПоиск_Остатки = Неопределено) И (врПоиск_Возвраты = Неопределено) Тогда
					Продолжить;
				КонецЕсли;	
				
			КонецЕсли;	
			
			ОблКлиент.Параметры.Клиент            = Выборка.ТорговаяТочкаНаименование;
			ОблКлиент.Параметры.НаименованиеШапки = "Движения за 60 дней (" + Формат(врНачПериодаДвижения, "ДФ=dd.MM.yyyy") + " - " + Формат(врКонПериодаДвижения, "ДФ=dd.MM.yyyy") + ")";
			
			врТабДок.Вывести(ОблКлиент);
			
			ФлагДвижения = Ложь;
			
			// ДВИЖЕНИЯ
			
			Для Каждого ТекДвижение Из ТЗДвижения Цикл
				
				Если Выборка.ТорговаяТочка = ТекДвижение.Партнер Тогда
					
					ФлагДвижения = Истина;
					
					Если ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				
						ОблСтрокаВозврат.Параметры.Период       = ТекДвижение.Период;
						ОблСтрокаВозврат.Параметры.ВидДвижения  = ?(ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход, "Передача (+)", "Возврат (-)");
						ОблСтрокаВозврат.Параметры.Оборудование = ТекДвижение.Номенклатура;
						ОблСтрокаВозврат.Параметры.Документ     = ТекДвижение.Регистратор;
						ОблСтрокаВозврат.Параметры.Количество   = "[-] " + Строка(ТекДвижение.Количество);
						
						врТабДок.Вывести(ОблСтрокаВозврат);
						
					Иначе
						
						ОблСтрокаПередача.Параметры.Период       = ТекДвижение.Период;
						ОблСтрокаПередача.Параметры.ВидДвижения  = ?(ТекДвижение.ВидДвижения = ВидДвиженияНакопления.Приход, "Передача (+)", "Возврат (-)");
						ОблСтрокаПередача.Параметры.Оборудование = ТекДвижение.Номенклатура;
						ОблСтрокаПередача.Параметры.Документ     = ТекДвижение.Регистратор;
						ОблСтрокаПередача.Параметры.Количество   = "[+] " + Строка(ТекДвижение.Количество);						
						
						врТабДок.Вывести(ОблСтрокаПередача);
					
					КонецЕсли;	
										
				КонецЕсли;	
				
			КонецЦикла;
			
			Если Не ФлагДвижения Тогда
				
				ОблСтрокаПередача.Параметры.Период       = "---";
				ОблСтрокаПередача.Параметры.ВидДвижения  = "---";
				ОблСтрокаПередача.Параметры.Оборудование = "Движения отсутствуют";
				ОблСтрокаПередача.Параметры.Документ     = "Движения отсутствуют";
				ОблСтрокаПередача.Параметры.Количество   = "";						
						
				врТабДок.Вывести(ОблСтрокаПередача);
				
			КонецЕсли;
			
			// ОСТАТКИ
				
			ПредставлениеОборудование = "";
			ПредставлениеКеги         = "";
			
			Для Каждого ТекОстаток Из ТЗОстатки Цикл
				
				Если Выборка.ТорговаяТочка = ТекОстаток.Партнер Тогда
				
					СтрНаименование = ВРег(ТекОстаток.НоменклатураНаименование); 
					Если СтрЧислоВхождений(СтрНаименование, "КЕГА") > 0 Тогда
						ПредставлениеКеги         = ПредставлениеКеги         + ?(ПустаяСтрока(ПредставлениеКеги), "", Символы.ПС)         + СокрЛП(ТекОстаток.НоменклатураНаименование) + " = [" + Строка(ТекОстаток.КоличествоОстаток) + "]"; 
					Иначе
						ПредставлениеОборудование = ПредставлениеОборудование + ?(ПустаяСтрока(ПредставлениеОборудование), "", Символы.ПС) + СокрЛП(ТекОстаток.НоменклатураНаименование) + " = [" + Строка(ТекОстаток.КоличествоОстаток) + "]"; 
					КонецЕсли;	
				
				КонецЕсли;
				
			КонецЦикла;		
									
			ОблОстатки.Параметры.ТекущиеОстатки = "Текущие остатки (на " + Строка(врКонПериодаДвижения) + ")";
			ОблОстатки.Параметры.Оборудование   = ?(ПустаяСтрока(ПредставлениеОборудование), "Отсутствуют", ПредставлениеОборудование);
			ОблОстатки.Параметры.Кеги           = ?(ПустаяСтрока(ПредставлениеКеги),         "Отсутствуют", ПредставлениеКеги);
			врТабДок.Вывести(ОблОстатки);			
			
			// НЕПРОВЕДЕННЫЕ ВОЗВРАТЫ
			
			ОблВозвратыЗаголовок.Параметры.Заголовок = "Непроведенные возвраты за 60 дней (" + Формат(врНачПериодаДвижения, "ДФ=dd.MM.yyyy") + " - " + Формат(врКонПериодаДвижения, "ДФ=dd.MM.yyyy") + ")";;
			врТабДок.Вывести(ОблВозвратыЗаголовок);			
			
			ФлагВозвраты = Ложь;
			
			Для Каждого ТекВозврат Из ТЗВозвраты Цикл
				
				Если Выборка.ТорговаяТочка = ТекВозврат.Партнер Тогда
					
					ФлагВозвраты = Истина;
					
					ОблВозвратыСтрока.Параметры.Дата         = Формат(ТекВозврат.Дата, "ДФ=dd.MM.yyyy");
					ОблВозвратыСтрока.Параметры.Оборудование = ТекВозврат.Оборудование;
					ОблВозвратыСтрока.Параметры.Документ     = ТекВозврат.Документ;
					ОблВозвратыСтрока.Параметры.Статус       = ?(ТекВозврат.ПометкаУдаления, "УДАЛЕН", "В обработке");
					ОблВозвратыСтрока.Параметры.Количество   = ТекВозврат.Количество;
					врТабДок.Вывести(ОблВозвратыСтрока);					
				
				КонецЕсли;
				
			КонецЦикла;		
			
			Если Не ФлагВозвраты Тогда
				
				ОблВозвратыСтрока.Параметры.Дата         = "---";
				ОблВозвратыСтрока.Параметры.Оборудование = "Отсутствуют";
				ОблВозвратыСтрока.Параметры.Документ     = "Отсутствуют";
				ОблВозвратыСтрока.Параметры.Статус       = "---";
				ОблВозвратыСтрока.Параметры.Количество   = "";
				врТабДок.Вывести(ОблВозвратыСтрока);									
				
			КонецЕсли;	
							
		КонецЦикла;				
			
	КонецЕсли;						   								
	
КонецПроцедуры

Процедура ВывестиДанныеПоОборудованию_OLD(врТабДок, врАгент)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок   = Макет.ПолучитьОбласть("ЗаголовокОборудование");
	ОблСтрока      = Макет.ПолучитьОбласть("СтрокаОборудование");
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ПОМЕСТИТЬ ТорговыеТочки
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Менеджер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура,
	               |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование
	               |ИЗ
	               |	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(
	               |			,
	               |			Партнер В
	               |				(ВЫБРАТЬ
	               |					ТорговыеТочки.ТорговаяТочка
	               |				ИЗ
	               |					ТорговыеТочки КАК ТорговыеТочки)) КАК ПереданнаяВозвратнаяТараОстатки
	               |ГДЕ
	               |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПереданнаяВозвратнаяТараОстатки.Партнер.Наименование,
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование
	               |ИТОГИ ПО
	               |	Партнер";
				   
	РЗ = Запрос.Выполнить();
	
	Если НЕ РЗ.Пустой() Тогда
		
		врТабДок.Вывести(ОблРазделитель);
		
		врТабДок.Вывести(ОблЗаголовок);
			
		Выборка = РЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
				
			ПредставлениеОборудование = "";
			ПредставлениеКеги         = "";
				
			ВыборкаНоменклатура = Выборка.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				СтрНаименование = ВРег(ВыборкаНоменклатура.НоменклатураНаименование); 
				Если СтрЧислоВхождений(СтрНаименование, "КЕГА") > 0 Тогда
					ПредставлениеКеги         = ПредставлениеКеги         + ?(ПустаяСтрока(ПредставлениеКеги), "", Символы.ПС)         + СокрЛП(ВыборкаНоменклатура.НоменклатураНаименование) + " = [" + Строка(ВыборкаНоменклатура.КоличествоОстаток) + "]"; 
				Иначе
					ПредставлениеОборудование = ПредставлениеОборудование + ?(ПустаяСтрока(ПредставлениеОборудование), "", Символы.ПС) + СокрЛП(ВыборкаНоменклатура.НоменклатураНаименование) + " = [" + Строка(ВыборкаНоменклатура.КоличествоОстаток) + "]"; 
				КонецЕсли;	
			КонецЦикла;	
			
			ОблСтрока.Параметры.Клиент       = Выборка.Партнер.Наименование;
			ОблСтрока.Параметры.Оборудование = ПредставлениеОборудование;
			ОблСтрока.Параметры.Кеги         = ПредставлениеКеги;
			врТабДок.Вывести(ОблСтрока);
							
		КонецЦикла;				
			
	КонецЕсли;						   								
	
КонецПроцедуры


// Данные по продажам за текущий день

Процедура ВывестиДанныеПоПродажамТоваровЗаТекущийДень(врТабДок, врАгент)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовок   = Макет.ПолучитьОбласть("ЗаголовокТекущиеПродажи");
	ОблСтрока      = Макет.ПолучитьОбласть("СтрокаТекущиеПродажи");
	ОблИтого	   = Макет.ПолучитьОбласть("ИтогоТекущиеПродажи");
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ТекущийДень = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущийДень));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущийДень));
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
						   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Ссылка
	               |ПОМЕСТИТЬ ЗаказыКлиентов
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка.Проведен
	               |	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиентаТовары.Ссылка.Менеджер = &Менеджер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаТовары.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Ссылка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента В
	               |				(ВЫБРАТЬ
	               |					ЗаказыКлиентов.Ссылка
	               |				ИЗ
	               |					ЗаказыКлиентов КАК ЗаказыКлиентов)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		РеализацияТоваровУслугТовары.Ссылка
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		РеализацияТоваровУслугТовары.Ссылка.Проведен
	               |		И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	               |		И РеализацияТоваровУслугТовары.Ссылка.Менеджер = &Менеджер) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Ссылка";
			
		РЗ = Запрос.Выполнить();
		
		Если НЕ РЗ.Пустой() Тогда
			
			ЗапросТовары = Новый Запрос;
			ЗапросТовары.УстановитьПараметр("Документы", РЗ.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			ЗапросТовары.УстановитьПараметр("Штука",     ЕдиницаИзмерения_КГ);
			ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                     |	РеализацияТоваровУслугТовары.Номенклатура,
			                     |	СУММА(ВЫБОР
			                     |			КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = &Штука
			                     |				ТОГДА РеализацияТоваровУслугТовары.Количество
			                     |			ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Вес * РеализацияТоваровУслугТовары.Количество
			                     |		КОНЕЦ) КАК Тоннаж,
			                     |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			                     |	СУММА(РеализацияТоваровУслугТовары.СуммаСНДС) КАК Сумма,
			                     |	РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
			                     |ИЗ
			                     |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			                     |ГДЕ
			                     |	РеализацияТоваровУслугТовары.Ссылка В(&Документы)
			                     |
			                     |СГРУППИРОВАТЬ ПО
			                     |	РеализацияТоваровУслугТовары.Номенклатура
			                     |
			                     |УПОРЯДОЧИТЬ ПО
			                     |	РеализацияТоваровУслугТовары.Номенклатура.Наименование";
			
			РЗТовары = ЗапросТовары.Выполнить();
			Если НЕ РЗТовары.Пустой() Тогда
				
				ИтогоТоннаж       = 0;
				ИтогоСумма        = 0;
				ИтогоСуммаБезТары = 0;
				
				ОблЗаголовок.Параметры.Наименование = "Проданные товары за текущий день (" + Формат(ТекущийДень, "ДЛФ=DD") + ")";
				
				врТабДок.Вывести(ОблЗаголовок);
				
				ВыборкаТовары = РЗТовары.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					
					ОблСтрока.Параметры.Заполнить(ВыборкаТовары);
					
					ОблСтрока.Параметры.Сумма      = ПривестиЧислоКСтроке(ВыборкаТовары.Сумма,      15, 2);
					ОблСтрока.Параметры.Тоннаж     = ПривестиЧислоКСтроке(ВыборкаТовары.Тоннаж,     15, 3);
					ОблСтрока.Параметры.Количество = ПривестиЧислоКСтроке(ВыборкаТовары.Количество, 15, 3);
					
					ИтогоТоннаж = ИтогоТоннаж + ВыборкаТовары.Тоннаж;
					ИтогоСумма  = ИтогоСумма  + ВыборкаТовары.Сумма;
					
					Если ВыборкаТовары.ВидНоменклатуры <> ВидНоменклатурыМногооборотнаяТара Тогда
						ИтогоСуммаБезТары = ИтогоСуммаБезТары + ВыборкаТовары.Сумма;
					КонецЕсли;	
					
					врТабДок.Вывести(ОблСтрока);
					
				КонецЦикла;	
				
				ОблИтого.Параметры.ИтогоТоннаж       = ПривестиЧислоКСтроке(ИтогоТоннаж,       15, 3);
				ОблИтого.Параметры.ИтогоСумма        = ПривестиЧислоКСтроке(ИтогоСумма,        15, 2);
				ОблИтого.Параметры.ИтогоСуммаБезТары = ПривестиЧислоКСтроке(ИтогоСуммаБезТары, 15, 2);
				
				врТабДок.Вывести(ОблИтого);
				
			КонецЕсли;	
			
		КонецЕсли;		   								
	
КонецПроцедуры



// Данные по возвратам по алкоголю за период

Процедура ВывестиВозвратыПоАлкоголюЗаПериод(врТабДок, врНачПериода, врКонПериода, врАгент)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовокВозвраты  = Макет.ПолучитьОбласть("ЗаголовокВозвраты");
	ОблСтрокаВозвраты     = Макет.ПолучитьОбласть("СтрокаВозвраты");
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(врНачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врКонПериода));
	Запрос.УстановитьПараметр("Агент",      врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ПОМЕСТИТЬ ТочкиАгента
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Агент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровОтКлиента.Дата КАК Дата,
	               |	ВозвратТоваровОтКлиента.Партнер КАК Клиент,
	               |	ВозвратТоваровОтКлиента.Товары.(
	               |		Номенклатура,
	               |		Количество
	               |	),
	               |	ВозвратТоваровОтКлиента.Проведен,
	               |	ВозвратТоваровОтКлиента.ПометкаУдаления,
	               |	ВозвратТоваровОтКлиента.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ВозвратТоваровОтКлиента.Партнер В
	               |			(ВЫБРАТЬ
	               |				ТочкиАгента.ТорговаяТочка
	               |			ИЗ
	               |				ТочкиАгента КАК ТочкиАгента)
	               |	И ВозвратТоваровОтКлиента.Товары.Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	Клиент";
				   
	РЗ = Запрос.Выполнить();
	
	Если НЕ РЗ.Пустой() Тогда
		
		ОблЗаголовокВозвраты.Параметры.ЗаголовокВозвраты = "ВОЗВРАТЫ ПО ЕГАИС за последние 14 дней (" + ПредставлениеПериода(НачалоДня(врНачПериода), КонецДня(врКонПериода), "ФП = Истина") + ")";
		врТабДок.Вывести(ОблЗаголовокВозвраты);
			
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			ПредставлениеТоваров = "";
				
			ВыборкаТовары = Выборка.Товары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				Если ПустаяСтрока(ПредставлениеТоваров) Тогда
					ПредставлениеТоваров = СокрЛП(ВыборкаТовары.Номенклатура.Наименование) + " = ["+ Строка(ВыборкаТовары.Количество) + "]"; 	
				Иначе
					ПредставлениеТоваров = ПредставлениеТоваров + ";  " + СокрЛП(ВыборкаТовары.Номенклатура.Наименование) + " = ["+ Строка(ВыборкаТовары.Количество) + "]"; 
				КонецЕсли;	
			КонецЦикла;	
				
			СтатусВозврата = "";
				
			Если Выборка.Проведен Тогда
				СтатусВозврата = "проведен";
			ИначеЕсли Выборка.ПометкаУдаления Тогда
				СтатусВозврата = "удален";
			Иначе
				СтатусВозврата = "в обработке";
			КонецЕсли;	
				
			ОблСтрокаВозвраты.Параметры.Заполнить(Выборка);
			ОблСтрокаВозвраты.Параметры.УменьшениеДолга = аян_СинхронизацияСервер.Возварты_УменьшениеДолгаПоВозврату(Выборка.Ссылка);
			ОблСтрокаВозвраты.Параметры.Товары 			= ПредставлениеТоваров;
			ОблСтрокаВозвраты.Параметры.Статус 			= СтатусВозврата;
			врОбл = врТабДок.Вывести(ОблСтрокаВозвраты);
				
			ГорПоложение = врОбл.Верх;
			врОбл = врТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
				
			Если Выборка.Проведен Тогда
				врОбл.ЦветФона = Новый Цвет(204, 255, 204);
			ИначеЕсли Выборка.ПометкаУдаления Тогда	
				врОбл.ЦветФона = Новый Цвет(255, 228, 225);
			Иначе
				врОбл.ЦветФона = Новый Цвет(255, 255, 255);
			КонецЕсли;	
			
		КонецЦикла;	
		
		врТабДок.Вывести(ОблРазделитель);
			
	КонецЕсли;						   								
	
КонецПроцедуры

// Данные по возвратам за период

Процедура ВывестиВозвратыЗаПериод(врТабДок, врНачПериода, врКонПериода, врАгент, врИтоговая = Ложь)
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблЗаголовокВозвраты  = Макет.ПолучитьОбласть("ЗаголовокВозвраты");
	ОблСтрокаВозвраты     = Макет.ПолучитьОбласть("СтрокаВозвраты");
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(врНачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врКонПериода));
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровОтКлиента.Дата КАК Дата,
	               |	ВозвратТоваровОтКлиента.Партнер КАК Клиент,
	               |	ВозвратТоваровОтКлиента.Товары.(
	               |		Номенклатура,
	               |		Номенклатура.Наименование КАК Наименование,
	               |		Количество,
	               |		Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |		СуммаСНДС
	               |	),
	               |	ВозвратТоваровОтКлиента.Проведен,
	               |	ВозвратТоваровОтКлиента.ПометкаУдаления,
	               |	ВозвратТоваровОтКлиента.Ссылка,
	               |	ВозвратТоваровОтКлиента.Комментарий
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ВозвратТоваровОтКлиента.Менеджер = &Менеджер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	Клиент";
				   
	РЗ = Запрос.Выполнить();
	
	Если НЕ РЗ.Пустой() Тогда
		
		врСуммаВозвратов = 0;
		
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Проведен Тогда
				ВыборкаТовары = Выборка.Товары.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					Если ВыборкаТовары.ВидНоменклатуры <> ВидНоменклатурыМногооборотнаяТара Тогда
						врСуммаВозвратов = врСуммаВозвратов + ВыборкаТовары.СуммаСНДС; 
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не врИтоговая Тогда
			ОблЗаголовокВозвраты.Параметры.ЗаголовокВозвраты = "ВОЗВРАТЫ";
			ОблЗаголовокВозвраты.Параметры.СуммаВозвратов    = "Сумма проведенных возвратов без учета тары и оборудования = " + Формат(врСуммаВозвратов, "ЧДЦ=2; ЧН=0,00");
		Иначе
			ОблЗаголовокВозвраты.Параметры.ЗаголовокВозвраты = "ВОЗВРАТЫ за последние 30 дней (" + ПредставлениеПериода(НачалоДня(врНачПериода), КонецДня(врКонПериода), "ФП = Истина") + ")";
			ОблЗаголовокВозвраты.Параметры.СуммаВозвратов    = "Сумма проведенных возвратов без учета тары и оборудования = " + Формат(врСуммаВозвратов, "ЧДЦ=2; ЧН=0,00");
		КонецЕсли;	
		врТабДок.Вывести(ОблЗаголовокВозвраты);
			
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			ПредставлениеТоваров = "";
				
			ВыборкаТовары = Выборка.Товары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				Если ПустаяСтрока(ПредставлениеТоваров) Тогда
					ПредставлениеТоваров = СокрЛП(ВыборкаТовары.Наименование) + " = ["+ Строка(ВыборкаТовары.Количество) + "]"; 	
				Иначе
					ПредставлениеТоваров = ПредставлениеТоваров + ";  " + СокрЛП(ВыборкаТовары.Наименование) + " = ["+ Строка(ВыборкаТовары.Количество) + "]"; 
				КонецЕсли;	
			КонецЦикла;	
				
			СтатусВозврата = "";
				
			Если Выборка.Проведен Тогда
				СтатусВозврата = "проведен";
			ИначеЕсли Выборка.ПометкаУдаления Тогда
				СтатусВозврата = "удален";
			Иначе
				СтатусВозврата = "в обработке";
			КонецЕсли;	
			
			СтруктураМаршрута = ПолучитьОписаниеМаршрута(Выборка.Ссылка);			

			ОблСтрокаВозвраты.Параметры.Заполнить(Выборка);
			ОблСтрокаВозвраты.Параметры.УменьшениеДолга = аян_СинхронизацияСервер.Возварты_УменьшениеДолгаПоВозврату(Выборка.Ссылка);
			ОблСтрокаВозвраты.Параметры.Товары 			= ПредставлениеТоваров;
			ОблСтрокаВозвраты.Параметры.Статус 			= СтатусВозврата;
			ОблСтрокаВозвраты.Параметры.Комментарий		= СокрЛП(Выборка.Комментарий);
			ОблСтрокаВозвраты.Параметры.Маршрут  		= "Маршрут: " + СокрЛП(СтруктураМаршрута.Маршрут);
			врОбл = врТабДок.Вывести(ОблСтрокаВозвраты);
				
			ГорПоложение = врОбл.Верх;
			врОбл  = врТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
			врОбл2 = врТабДок.Область("R" + ЧислоВСтроку(ГорПоложение + 1) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение + 1) + "C" + ЧислоВСтроку(10));
				
			Если Выборка.Проведен Тогда
				врОбл.ЦветФона  = Новый Цвет(204, 255, 204);
				врОбл2.ЦветФона = Новый Цвет(204, 255, 204);
			ИначеЕсли Выборка.ПометкаУдаления Тогда	
				врОбл.ЦветФона  = Новый Цвет(255, 228, 225);
				врОбл2.ЦветФона = Новый Цвет(255, 228, 225);
			Иначе
				врОбл.ЦветФона  = Новый Цвет(255, 255, 255);
				врОбл2.ЦветФона = Новый Цвет(255, 255, 255);
			КонецЕсли;	
			
		КонецЦикла;	
		
		врТабДок.Вывести(ОблРазделитель);
			
	КонецЕсли;						   								
	
КонецПроцедуры


// Представление накладной в виде номера и даты

Функция ПредставлениеДокумента(врНакладная)
	
	Если ТипЗнч(врНакладная) = ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", врНакладная);
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Номер,
		               |	РеализацияТоваровУслуг.Дата
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		РЗ = Запрос.Выполнить();
		Если НЕ РЗ.Пустой() Тогда
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			Возврат " " + СокрЛП(Выборка.Номер) + " от " + Формат(Выборка.Дата, "ДЛФ=D");
		Иначе
			Возврат СокрЛП(врНакладная);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрЛП(врНакладная);
	
КонецФункции	


// Каталог сохранения отчета агенту

Функция КаталогСохраненияОтчетаАгенту(Агент)
	
	врТурова   = ПолучитьПользователяПоГУИД("05e4bde6-7971-11ea-830a-1831bf2dc5c0");
		
	Если ТекАгент = врТурова Тогда
		Возврат РабочийКаталог + "DocumentsRegion";			
	КонецЕсли;			
	
	Если ИмяСервераМА = "Region" Тогда
		Возврат РабочийКаталог + "DocumentsRegion";			
	КонецЕсли;		
	
	Если ИмяСервераМА = "Altai" Тогда
		Возврат РабочийКаталог + "DocumentsKuzbass";			
	КонецЕсли;	
	
	Если ЭтоГруппаПользователяБарнаул(Агент) Тогда
		Возврат РабочийКаталог + "DocumentsKuzbass";			
	КонецЕсли;	
	
	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаКузбасс = Справочники.ГруппыПользователей.НайтиПоНаименованию("Кузбасс");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаКузбасс) ИЛИ (ГруппаПользователя = ГруппаКузбасс) Тогда 
			Возврат РабочийКаталог + "DocumentsKuzbass";		
		КонецЕсли;	
		
		Если ЭтоГруппаПользователяСевер(Агент) Тогда
			Возврат РабочийКаталог + "DocumentsSever";		
		КонецЕсли;			
				
	КонецЕсли;		
		
	Возврат РабочийКаталог + "Documents";		
	
КонецФункции	


// Отчет агенту

Процедура СформироватьОтчетАгенту(Агент, НачПериода, КонПериода, ТЗНеоплаченныеНакладные, врИдКПК = "") Экспорт
	
	ЗамерСтарт = ТекущаяДата();
	
	Если КонПериода < НачПериода Тогда
		Возврат;
	КонецЕсли;	
	
	ДеньВСекундах = 60 * 60 * 24;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблДатаОтчета         = Макет.ПолучитьОбласть("ДатаОтчета");
	ОблШапка              = Макет.ПолучитьОбласть("Шапка");
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
	ОблЗаголовокОтказы    = Макет.ПолучитьОбласть("ЗаголовокОтказы");
	ОблСтрокаОтказы       = Макет.ПолучитьОбласть("СтрокаОтказы");
	ОблЗаголовокЗаявки    = Макет.ПолучитьОбласть("ЗаголовокЗаявки");
	ОблСтрокаЗаявки       = Макет.ПолучитьОбласть("СтрокаЗаявки");
	ОблСтрокаЗаявки2      = Макет.ПолучитьОбласть("СтрокаЗаявки2");
	ОблСтрокаЗаявки3      = Макет.ПолучитьОбласть("СтрокаЗаявки3");
	ОблИтогоЗаявки        = Макет.ПолучитьОбласть("ИтогоЗаявки");	
	ОблЗаголовокВозвраты  = Макет.ПолучитьОбласть("ЗаголовокВозвраты");
	ОблСтрокаВозвраты     = Макет.ПолучитьОбласть("СтрокаВозвраты");
	ОблЗаголовокОплаты    = Макет.ПолучитьОбласть("ЗаголовокОплаты");
	ОблСтрокаОплаты       = Макет.ПолучитьОбласть("СтрокаОплаты");
	ОблИтогоОплаты        = Макет.ПолучитьОбласть("ИтогоОплаты");
	ОблЗаголовокДебиторка = Макет.ПолучитьОбласть("ЗаголовокДебиторка");
	ОблКлиент			  = Макет.ПолучитьОбласть("Клиент");
	ОблСтрокаДебиторка    = Макет.ПолучитьОбласть("СтрокаДебиторка");		
	ОблИнформация         = Макет.ПолучитьОбласть("Информация");	
	ОблЗаголовокПереплата = Макет.ПолучитьОбласть("ЗаголовокПереплата");
	ОблКлиентПереплата	  = Макет.ПолучитьОбласть("КлиентПереплата");
	ОблСтрокаПереплата    = Макет.ПолучитьОбласть("СтрокаПереплата");				
	ОблЗаголовокМин		  = Макет.ПолучитьОбласть("ЗаголовокМин");
	ОблСтрокаМин    	  = Макет.ПолучитьОбласть("СтрокаМин");	
	ОблЗаголовокВычерки   = Макет.ПолучитьОбласть("ЗаголовокВычерки");
	ОблСтрокаВычерки      = Макет.ПолучитьОбласть("СтрокаВычерки");	
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);
		
	ВывестиДанныеПоПродажамТоваровЗаТекущийДень(ТабДок, Агент);
	
	// ТОРГОВЫЕ ТОЧКИ С НЕЗАКЛЮЧЕННЫМИ ДОГОВОРАМИ
	
	//Попытка
	//	ВывестиТочкиСНеЗаключеннымиДоговорами(ТабДок, Агент);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("Отчет агенту. Незаключенные договоры", "Исключение", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;		
	
	// ТОРГОВЫЕ ТОЧКИ С ЗАПРЕТОМ ПО ЕГАИС
	
	Попытка
		ВывестиТочкиСЗапретомПоЕГАИС(ТабДок, Агент);
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Отчет агенту. Запрет по ЕГАИС", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
		
	ТекущийДень = НачалоДня(КонПериода);
	
	врПерваяСтрока = Истина;
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
	
		// ШАПКА
	
		ОблШапка.Параметры.Период = Формат(ТекущийДень, "ДЛФ=DD");
		ОблШапка.Параметры.Агент  = СокрЛП(Агент.Наименование);
		
		ТабДок.Вывести(ОблШапка);
		
		// МИНИМАЛЬНЫЙ ЗАКАЗ
		
		Если ИмяСервераМА = "Novosib" Тогда
		
		врСписокМенеджеров = Новый СписокЗначений;
		врСписокМенеджеров.Добавить(ТекАгент);
		
		ТЗ_Мин = ЗаказыНеВошедшиеВЛимит(врСписокМенеджеров, ТекущийДень, 4000);
		
		Если ТЗ_Мин.Количество() > 0 Тогда
			
			ТабДок.Вывести(ОблЗаголовокМин);
			
			Для Каждого ТекСтрока_Мин Из ТЗ_Мин Цикл
				
				ОблСтрокаМин.Параметры.Дата     = Формат(ТекущийДень, "ДФ=dd.MM.yyyy");
				ОблСтрокаМин.Параметры.Клиент   = ТекСтрока_Мин.Партнер;
				ОблСтрокаМин.Параметры.Петрушка = ТекСтрока_Мин.Петрушка;
				ОблСтрокаМин.Параметры.КПК      = ТекСтрока_Мин.КПК;
				ОблСтрокаМин.Параметры.Всего    = ТекСтрока_Мин.Всего;				
				ТабДок.Вывести(ОблСтрокаМин);
				
			КонецЦикла;				
			
		КонецЕсли;	
		
		КонецЕсли;
	
	    // ВЫЧЕРКИ СО СКЛАДА
		
		Если ИмяСервераМА = "Tomsk" ИЛИ ИмяСервераМА = "Sever" Тогда
			
			Попытка
			
			ЗапросВычерки = Новый Запрос;
			ЗапросВычерки.УстановитьПараметр("НачалоПериода",      НачалоДня(ТекущийДень));
			ЗапросВычерки.УстановитьПараметр("КонецПериода",       КонецДня(ТекущийДень));
			ЗапросВычерки.УстановитьПараметр("Менеджер",           Агент);			
			ЗапросВычерки.УстановитьПараметр("МногоОборотнаяТара", ВидНоменклатурыМногооборотнаяТара);						
			ЗапросВычерки.Текст = "ВЫБРАТЬ
			                      |	аян_ПричиныВычерковТоваров.СкладВычерк КАК СкладВычерк,
			                      |	аян_ПричиныВычерковТоваров.Партия КАК Партия,
			                      |	аян_ПричиныВычерковТоваров.Партия.Менеджер КАК Агент,
			                      |	аян_ПричиныВычерковТоваров.ПричинаВычерка КАК ПричинаВычерка,
			                      |	аян_ПричиныВычерковТоваров.Номенклатура КАК Номенклатура,
			                      |	аян_ПричиныВычерковТоваров.Характеристика КАК Характеристика,
			                      |	СУММА(аян_ПричиныВычерковТоваров.Количество) КАК Количество
			                      |ПОМЕСТИТЬ ВТ_НачДанныеПриход
			                      |ИЗ
			                      |	РегистрНакопления.аян_ПричиныВычерковТоваров КАК аян_ПричиныВычерковТоваров
			                      |ГДЕ
			                      |	ИСТИНА
			                      |	И ВЫРАЗИТЬ(аян_ПричиныВычерковТоваров.Регистратор КАК Документ.ПеремещениеТоваров).ДокументОснование = аян_ПричиныВычерковТоваров.Партия
			                      |	И аян_ПричиныВычерковТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
			                      |	И НЕ аян_ПричиныВычерковТоваров.Номенклатура.ВидНоменклатуры = &МногоОборотнаяТара
			                      |	И аян_ПричиныВычерковТоваров.Партия.Менеджер = &Менеджер
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	аян_ПричиныВычерковТоваров.СкладВычерк,
			                      |	аян_ПричиныВычерковТоваров.Партия,
			                      |	аян_ПричиныВычерковТоваров.ПричинаВычерка,
			                      |	аян_ПричиныВычерковТоваров.Номенклатура,
			                      |	аян_ПричиныВычерковТоваров.Характеристика,
			                      |	аян_ПричиныВычерковТоваров.Партия.Менеджер
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	ВТ_ВсеПартии.Агент КАК Агент,
			                      |	ВТ_ВсеПартии.Партия КАК Партия,
			                      |	ВТ_ВсеПартии.Партия.Партнер КАК Клиент,
			                      |	ВТ_ВсеПартии.Номенклатура КАК Номенклатура,
			                      |	ВТ_ВсеПартии.Характеристика КАК Характеристика,
			                      |	ВТ_ВсеПартии.ПричинаВычерка КАК ПричинаВычерка,
			                      |	-РеализацияТоваровУслугРасхожденияТовары.КоличествоРасхождение КАК Количество
			                      |ИЗ
			                      |	ВТ_НачДанныеПриход КАК ВТ_ВсеПартии
			                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.РасхожденияТовары КАК РеализацияТоваровУслугРасхожденияТовары
			                      |		ПО (ИСТИНА)
			                      |			И ВТ_ВсеПартии.Партия = РеализацияТоваровУслугРасхожденияТовары.Ссылка
			                      |			И ВТ_ВсеПартии.Номенклатура = РеализацияТоваровУслугРасхожденияТовары.Номенклатура"					  
								  ;
			РЗВычерки = ЗапросВычерки.Выполнить();
			Если РЗВычерки.Пустой() = Ложь Тогда
				
				ТабДок.Вывести(ОблЗаголовокВычерки);
				
				ВыборкаВычерки = РЗВычерки.Выбрать();
				Пока ВыборкаВычерки.Следующий() Цикл
					ОблСтрокаВычерки.Параметры.Заполнить(ВыборкаВычерки);
					ОблСтрокаВычерки.Параметры.ДатаВычерка = ТекущийДень;
					ТабДок.Вывести(ОблСтрокаВычерки);
				КонецЦикла;	
				
			КонецЕсли;	
			
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл("Отчет агенту", "Вычерки со склада", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
			
		КонецЕсли;	
		
		// УДАЛЕННЫЕ ЗАКАЗЫ
		
		ВывестиУдаленныеЗаказы(ТабДок, Агент, ТекущийДень);		
		
		// ОТКАЗЫ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("Менеджер",   Агент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_СинхронизацияОтказы.ДатаОтказа КАК ДатаОтказа,
		               |	аян_СинхронизацияОтказы.ПричинаОтказа КАК ПричинаОтказа,
		               |	аян_СинхронизацияОтказы.Клиент КАК Клиент,
		               |	аян_СинхронизацияОтказы.Клиент.Наименование,
		               |	аян_СинхронизацияОтказы.Номенклатура,
		               |	аян_СинхронизацияОтказы.Количество,
		               |	аян_СинхронизацияОтказы.Комментарий,
		               |	аян_СинхронизацияОтказы.ВидДокумента КАК Вид
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияОтказы КАК аян_СинхронизацияОтказы
		               |ГДЕ
		               |	аян_СинхронизацияОтказы.Агент = &Менеджер
		               |	И аян_СинхронизацияОтказы.ДатаОтказа МЕЖДУ &НачПериода И &КонПериода
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаОтказа,
		               |	Клиент,
		               |	ПричинаОтказа";
		РЗ = Запрос.Выполнить();
		
		Если НЕ РЗ.Пустой() Тогда
			
			ТабДок.Вывести(ОблЗаголовокОтказы);
			
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОблСтрокаОтказы.Параметры.Заполнить(Выборка);
				//Если Выборка.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.Неизвестно Тогда
				//	ОблСтрокаОтказы.Параметры.ПричинаОтказа = "Нет в остатке"; 
				//КонецЕсли;	                       
				Если ИмяСервераМА = "Tomsk" Тогда
					Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(Выборка.Клиент) Тогда
						Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
							ОблСтрокаОтказы.Параметры.Клиент = СокрЛП(Выборка.КлиентНаименование) + Символы.ПС + "(" + СокрЛП(Выборка.Комментарий) + ")";
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
				врОбл = ТабДок.Вывести(ОблСтрокаОтказы);
			КонецЦикла;	
			
		КонецЕсли;	
		
		// РУЧНЫЕ ОТКАЗЫ
		
//		Если Агент = Справочники.Пользователи.НайтиПоНаименованию("Горлова Татьяна Валерьевна") Тогда
			
			ТЗРучныеОтказы = РучныеОтказы(ТекущийДень, Агент);
			
			Если РЗ.Пустой() И (НЕ ТЗРучныеОтказы.Количество() = 0) Тогда
				ТабДок.Вывести(ОблЗаголовокОтказы);	
			КонецЕсли;	
			
			Для Каждого Выборка Из ТЗРучныеОтказы Цикл
				
				ОблСтрокаОтказы.Параметры.Заполнить(Выборка);
				ОблСтрокаОтказы.Параметры.Количество = ПривестиЧислоКСтроке(Выборка.Количество, 15, 2);
				
				Если ИмяСервераМА = "Tomsk" Тогда
					Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(Выборка.Клиент) Тогда
						Если Не ПустаяСтрока(Выборка.Комментарий) Тогда
							ОблСтрокаОтказы.Параметры.Клиент = СокрЛП(Выборка.Клиент.Наименование) + Символы.ПС + "(" + СокрЛП(Выборка.Комментарий) + ")";
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				
				врОбл = ТабДок.Вывести(ОблСтрокаОтказы);
				
				ГорПоложение = врОбл.Верх;
				
				врОбл = ТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
				
				Если ЭтоВесовойТовар(Выборка.Номенклатура) Тогда
					врОбл.ЦветФона = Новый Цвет(204, 255, 204);	
				Иначе
					врОбл.ЦветФона = Новый Цвет(255, 218, 185);
				КонецЕсли;	
				
			КонецЦикла;	
			
//		КонецЕсли;	
				
		// ЗАКАЗЫ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",      НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",      КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("Менеджер",        Агент);
		Запрос.УстановитьПараметр("ВидНоменклатуры", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("МногооборотнаяТара", Истина));
		Запрос.УстановитьПараметр("Кега", 			 "Кега %");
							   
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТовары.Ссылка
		               |ПОМЕСТИТЬ ЗаказыКлиентов
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Ссылка.Проведен
		               |	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаказКлиентаТовары.Ссылка.Менеджер = &Менеджер
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказКлиентаТовары.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Ссылка,
		               |	ВложенныйЗапрос.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ВложенныйЗапрос.ДатаЗаказа КАК ДатаЗаказа,
		               |	ВложенныйЗапрос.ЗаказКлиента,
		               |	ВложенныйЗапрос.Организация КАК Организация,
		               |	ВложенныйЗапрос.Клиент КАК Клиент,
		               |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		               |		РеализацияТоваровУслугТовары.Ссылка.Дата КАК ДатаОтгрузки,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента.Дата КАК ДатаЗаказа,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК ЗаказКлиента,
		               |		РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
		               |		РеализацияТоваровУслугТовары.Ссылка.Партнер КАК Клиент,
		               |		РеализацияТоваровУслугТовары.СуммаСНДС КАК Сумма
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |	ГДЕ
		               |		НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента В
		               |				(ВЫБРАТЬ
		               |					ЗаказыКлиентов.Ссылка
		               |				ИЗ
		               |					ЗаказыКлиентов КАК ЗаказыКлиентов)
		               |		И НЕ РеализацияТоваровУслугТовары.Номенклатура.Наименование ПОДОБНО &Кега
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		РеализацияТоваровУслугТовары.Ссылка,
		               |		РеализацияТоваровУслугТовары.Ссылка.Дата,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента.Дата,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента,
		               |		РеализацияТоваровУслугТовары.Ссылка.Организация,
		               |		РеализацияТоваровУслугТовары.Ссылка.Партнер,
		               |		РеализацияТоваровУслугТовары.СуммаСНДС
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |	ГДЕ
		               |		НЕ РеализацияТоваровУслугТовары.Номенклатура.Наименование ПОДОБНО &Кега
		               |		И РеализацияТоваровУслугТовары.Ссылка.Проведен
		               |		И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		               |		И РеализацияТоваровУслугТовары.Ссылка.Менеджер = &Менеджер) КАК ВложенныйЗапрос
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Организация,
		               |	ВложенныйЗапрос.ДатаОтгрузки,
		               |	ВложенныйЗапрос.ДатаЗаказа,
		               |	ВложенныйЗапрос.Ссылка,
		               |	ВложенныйЗапрос.ЗаказКлиента,
		               |	ВложенныйЗапрос.Клиент
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаЗаказа,
		               |	Организация,
		               |	Клиент";
			
		РЗ = Запрос.Выполнить();
		
		Если НЕ РЗ.Пустой() Тогда
			
			СуммаЗаявок = 0;
			ВесЗаявок   = 0;
			
			ТабДок.Вывести(ОблЗаголовокЗаявки);
			
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
								
			//	СуммаЗаявок = СуммаЗаявок + Выборка.Сумма;
			
				ЭтоЗаказПетрушка = Выборка.Ссылка.ЗаказПетрушка;
				
				ЕстьКомментарий  = Ложь;
				ЕстьМаршрут      = Ложь;
				
				Note = СокрЛП(Выборка.Ссылка.Комментарий);
				Note = СтрЗаменить(Note, Символ(13) + Символ(10), " ");
				Note = СтрЗаменить(Note, Символ(10), " ");
				Note = СтрЗаменить(Note, Символ(13), " ");
				
				Если Не ПустаяСтрока(Note) Тогда
					ЕстьКомментарий = Истина;
				КонецЕсли;	
				
				ПоискСтрокаТЗ = ТЗНеоплаченныеНакладные.Найти(Выборка.Ссылка, "РН");
				
				Если ПоискСтрокаТЗ <> Неопределено Тогда 
					
					Маршрут     = СокрЛП(ПоискСтрокаТЗ.Маршрут);
					ЕстьМаршрут = ПоискСтрокаТЗ.ЗаказОтправлен;
					
				Иначе	
					
					ОписаниеМаршрута = ПолучитьОписаниеМаршрута(Выборка.Ссылка);
					Если ОписаниеМаршрута.ЗаказОтправлен Тогда
						ЕстьМаршрут = Истина;
					КонецЕсли;	
					
					Маршрут = СокрЛП(ОписаниеМаршрута.Маршрут);
					
				КонецЕсли;	
				
				ХарактеристикиЗаявки = ПолучитьХарактеристикиЗаявки(Выборка.Ссылка);
				
				СуммаЗаявок = СуммаЗаявок + ХарактеристикиЗаявки.СуммаЗаявкиБезОборудования;
				
				ВесЗаявок = ВесЗаявок + ХарактеристикиЗаявки.Вес;
				
				СпособДоставки = "";
				Если Выборка.Ссылка.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
					СпособДоставки = "!!! САМОВЫВОЗ !!! ";
					ЕстьКомментарий = Истина;
				КонецЕсли;	
				
				Если ЕстьКомментарий И ЕстьМаршрут Тогда
				
					ОблСтрокаЗаявки2.Параметры.Заполнить(Выборка);
					ОблСтрокаЗаявки2.Параметры.Комментарий = СпособДоставки + Note;
					ОблСтрокаЗаявки2.Параметры.Маршрут     = "Маршрут = " + Маршрут;
					ОблСтрокаЗаявки2.Параметры.Вес         = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.Вес, 15, 3);
					ОблСтрокаЗаявки2.Параметры.Вид         = ХарактеристикиЗаявки.ВидЗаявки;
					ОблСтрокаЗаявки2.Параметры.Сумма       = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.СуммаЗаявкиБезОборудования, 15, 2);
				
					врОблЗаявки = ТабДок.Вывести(ОблСтрокаЗаявки2);
					
				ИначеЕсли (НЕ ЕстьКомментарий) И ЕстьМаршрут Тогда
					
					ОблСтрокаЗаявки3.Параметры.Заполнить(Выборка);
					ОблСтрокаЗаявки3.Параметры.Маршрут     = "Маршрут = " + Маршрут;
					ОблСтрокаЗаявки3.Параметры.Вес         = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.Вес, 15, 3);
					ОблСтрокаЗаявки3.Параметры.Вид         = ХарактеристикиЗаявки.ВидЗаявки;
					ОблСтрокаЗаявки3.Параметры.Сумма       = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.СуммаЗаявкиБезОборудования, 15, 2);
				
					врОблЗаявки = ТабДок.Вывести(ОблСтрокаЗаявки3);
					
				Иначе 
					
					ОблСтрокаЗаявки.Параметры.Заполнить(Выборка);
					ОблСтрокаЗаявки.Параметры.Комментарий = СпособДоставки + Note;
					ОблСтрокаЗаявки.Параметры.Вес         = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.Вес, 15, 3);
					ОблСтрокаЗаявки.Параметры.Вид         = ХарактеристикиЗаявки.ВидЗаявки;
					ОблСтрокаЗаявки.Параметры.Сумма       = ПривестиЧислоКСтроке(ХарактеристикиЗаявки.СуммаЗаявкиБезОборудования, 15, 2);
				
					врОблЗаявки = ТабДок.Вывести(ОблСтрокаЗаявки);
					
				КонецЕсли;	
				
				ГорПоложение = врОблЗаявки.Верх;
				
				врОбл = ТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
				
				Если ЭтоЗаказПетрушка Тогда
					врОбл.ЦветФона = Новый Цвет(152, 251, 152);	
				Иначе
					врОбл.ЦветФона = Новый Цвет(255, 255, 255);
				КонецЕсли;	
												
			КонецЦикла;	
			
			ОблИтогоЗаявки.Параметры.ИтогоЗаявки = ПривестиЧислоКСтроке(СуммаЗаявок, 15, 2);
			ОблИтогоЗаявки.Параметры.Вес         = ПривестиЧислоКСтроке(ВесЗаявок, 15, 3);
			ТабДок.Вывести(ОблИтогоЗаявки);
			
		КонецЕсли;	
		
		// ВОЗВРАТЫ
		
		Если врПерваяСтрока Тогда
			врКон = ТекущийДень + 7 * ДеньВСекундах;
			ВывестиВозвратыЗаПериод(ТабДок, ТекущийДень, врКон, Агент, Ложь);
            врПерваяСтрока = Ложь;
		Иначе
			ВывестиВозвратыЗаПериод(ТабДок, ТекущийДень, ТекущийДень, Агент, Ложь);
		КонецЕсли;	
			
		// ОПЛАТЫ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",        НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",        КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("ВидОплаты",         Перечисления.ВидОплатыПКО.ОплатаАгенту);
		Запрос.УстановитьПараметр("НаименованиеКассы", СокрЛП(Агент.Наименование) + "%");
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа КАК Накладная,
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Партнер КАК Клиент,
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата КАК Дата
		               |ИЗ
		               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		               |ГДЕ
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Наименование ПОДОБНО &НаименованиеКассы
		               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = &ВидОплаты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата,
		               |	Клиент,
		               |	Накладная";
		РЗ = Запрос.Выполнить();
		
		Если НЕ РЗ.Пустой() Тогда
			
			СуммаОплат = 0;
			
			ТабДок.Вывести(ОблЗаголовокОплаты);
			
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				СуммаОплат = СуммаОплат + Выборка.Сумма;
				ОблСтрокаОплаты.Параметры.Заполнить(Выборка);
				ОблСтрокаОплаты.Параметры.Сумма     = ПривестиЧислоКСтроке(Выборка.Сумма, 15, 2);
				ОблСтрокаОплаты.Параметры.Накладная = ПредставлениеДокумента(Выборка.Накладная);
				ТабДок.Вывести(ОблСтрокаОплаты);
			КонецЦикла;	
			
			ОблИтогоОплаты.Параметры.ИтогоОплаты = ПривестиЧислоКСтроке(СуммаОплат, 15, 2);
			ТабДок.Вывести(ОблИтогоОплаты);
			
		КонецЕсли;	
		
		ТабДок.Вывести(ОблРазделитель);
		
		ТекущийДень = ТекущийДень - ДеньВСекундах; 
		
	КонецЦикла;	
	
	
	// ВОЗВРАТЫ ПО ЕГАИС ЗА ПОСЛЕДНИИ 14 дней
	
	ВывестиВозвратыПоАлкоголюЗаПериод(ТабДок, ТекущаяДата() - (14 * ДеньВСекундах), ТекущаяДата(), Агент);		
	
	
	// ВОЗВРАТЫ ЗА ПОСЛЕДНИЕ 30 ДНЕЙ
	
	ВывестиВозвратыЗаПериод(ТабДок, ТекущаяДата() - (30 * ДеньВСекундах), ТекущаяДата() + 7 * ДеньВСекундах, Агент, Истина);
	
	
	// ПЕРЕПЛАТА
	
	//Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Кидяева Татьяна Александровна") Тогда
	//	
	//	ОблЗаголовокПереплата.Параметры.СтрПереплата = "ПЕРЕПЛАТА на дату: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	//	ТабДок.Вывести(ОблЗаголовокПереплата);
	//
	//	ТЗ_ПереплатаПоДокументам = аян_СинхронизацияСервер.Переплата_ПереплатаПоТочкамАгента(Агент);
	//	ТЗ_Переплата = ТЗ_ПереплатаПоДокументам.Скопировать();
	//	ТЗ_Переплата.Свернуть("Партнер", "Сумма");
	//	ТЗ_Переплата.Сортировать("Партнер");
	//
	//	Если ТЗ_Переплата.Количество() > 0 Тогда
	//
	//		МассивКИ_Партнеров = Новый Массив;
	//		МассивКИ_Партнеров.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);

	//		ТЗ_КИ_Партнеры = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ТЗ_Переплата.ВыгрузитьКолонку("Партнер"), , МассивКИ_Партнеров);			
	//
	//		Для Каждого ТекПартнер Из ТЗ_Переплата Цикл
	//	
	//			АдресПартнера = "";
	//	
	//			ИскСтрокиМассив = ТЗ_КИ_Партнеры.НайтиСтроки(Новый Структура("Объект", ТекПартнер.Партнер));
	//			Если ИскСтрокиМассив.Количество() > 0 Тогда
	//				Для Каждого ТекИскСтрока Из ИскСтрокиМассив Цикл
	//					Если ТекИскСтрока.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера Тогда
	//						АдресПартнера = СтрЗаменить(ТекИскСтрока.Представление, Символ(13) + Символ(10), " ");
	//					КонецЕсли;	
	//				КонецЦикла;	
	//			КонецЕсли;					
	//		
	//			ОблКлиентПереплата.Параметры.Клиент      = ТекПартнер.Партнер.Наименование;
	//			ОблКлиентПереплата.Параметры.Сумма       = ТекПартнер.Сумма;
	//			ОблКлиентПереплата.Параметры.КлиентАдрес = АдресПартнера;
	//			ТабДок.Вывести(ОблКлиентПереплата);
	//		
	//			Для Каждого ТекСтрокаДокумент Из ТЗ_ПереплатаПоДокументам Цикл
	//				Если ТекСтрокаДокумент.Партнер = ТекПартнер.Партнер Тогда
	//					ОблСтрокаПереплата.Параметры.Клиент        = ТекСтрокаДокумент.Партнер;
	//					ОблСтрокаПереплата.Параметры.Накладная     = ТекСтрокаДокумент.Документ;
	//					ОблСтрокаПереплата.Параметры.Сумма         = ТекСтрокаДокумент.Сумма;
	//					врОбл = ТабДок.Вывести(ОблСтрокаПереплата);
	//				КонецЕсли;	
	//			КонецЦикла;	
	//		
	//		КонецЦикла;		
	//	
	//	КонецЕсли;			
	//	
	//КонецЕсли;		
			
	// ИНФОРМАЦИЯ
	
	ТабДок.Вывести(ОблРазделитель);
	
	ТабДок.Вывести(ОблИнформация);
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	Если ПустаяСтрока(врИдКПК) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Report" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Report" + СокрЛП(врИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
	
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту " + ?(ПустаяСтрока(врИдКПК), СокрЛП(ИдКПК), СокрЛП(врИдКПК)) + " сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Отчет агенту по дебиторской задолженности

Процедура СформироватьОтчетАгенту_ДебиторскаяЗадолженность(Агент, НачПериода, КонПериода, ТЗНеоплаченныеНакладные, врИдКПК = "") Экспорт
	
	ЗамерСтарт = ТекущаяДата();
	
	Если КонПериода < НачПериода Тогда
		Возврат;
	КонецЕсли;	
	
	ДеньВСекундах = 60 * 60 * 24;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблДатаОтчета         = Макет.ПолучитьОбласть("ДатаОтчета");
	ОблШапка              = Макет.ПолучитьОбласть("Шапка");
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
	ОблЗаголовокОтказы    = Макет.ПолучитьОбласть("ЗаголовокОтказы");
	ОблСтрокаОтказы       = Макет.ПолучитьОбласть("СтрокаОтказы");
	ОблЗаголовокЗаявки    = Макет.ПолучитьОбласть("ЗаголовокЗаявки");
	ОблСтрокаЗаявки       = Макет.ПолучитьОбласть("СтрокаЗаявки");
	ОблСтрокаЗаявки2      = Макет.ПолучитьОбласть("СтрокаЗаявки2");
	ОблСтрокаЗаявки3      = Макет.ПолучитьОбласть("СтрокаЗаявки3");
	ОблИтогоЗаявки        = Макет.ПолучитьОбласть("ИтогоЗаявки");	
	ОблЗаголовокВозвраты  = Макет.ПолучитьОбласть("ЗаголовокВозвраты");
	ОблСтрокаВозвраты     = Макет.ПолучитьОбласть("СтрокаВозвраты");
	ОблЗаголовокОплаты    = Макет.ПолучитьОбласть("ЗаголовокОплаты");
	ОблСтрокаОплаты       = Макет.ПолучитьОбласть("СтрокаОплаты");
	ОблИтогоОплаты        = Макет.ПолучитьОбласть("ИтогоОплаты");
	ОблЗаголовокДебиторка = Макет.ПолучитьОбласть("ЗаголовокДебиторка");
	ОблКлиент			  = Макет.ПолучитьОбласть("Клиент");
	ОблСтрокаДебиторка    = Макет.ПолучитьОбласть("СтрокаДебиторка");		
	ОблИнформация         = Макет.ПолучитьОбласть("Информация");	
	ОблЗаголовокПереплата = Макет.ПолучитьОбласть("ЗаголовокПереплата");
	ОблКлиентПереплата	  = Макет.ПолучитьОбласть("КлиентПереплата");
	ОблСтрокаПереплата    = Макет.ПолучитьОбласть("СтрокаПереплата");				
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);
			
	// ДЕБИТОРСКАЯ ЗАДОЛЖЕННОСТЬ	
	
	ОблЗаголовокДебиторка.Параметры.СтрДебиторскаяЗадолженность = "ДЕБИТОРСКАЯ ЗАДОЛЖЕННОСТЬ на дату: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблЗаголовокДебиторка);
	
	ТЗКонтрагенты = ТЗНеоплаченныеНакладные.Скопировать();
	ТЗКонтрагенты.Свернуть("Партнер", "Долг");
	ТЗКонтрагенты.Сортировать("Партнер");
	
	Если ТЗКонтрагенты.Количество() > 0 Тогда
	
		МассивКИ_Партнеров = Новый Массив;
		МассивКИ_Партнеров.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);

		ТЗ_КИ_Партнеры = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ТЗКонтрагенты.ВыгрузитьКолонку("Партнер"), , МассивКИ_Партнеров);			
	
		Для Каждого ТекПартнер Из ТЗКонтрагенты Цикл
			
			врПартнер = ТекПартнер.Партнер;
			
			врПартнерНаименование = врПартнер.Наименование;
			АдресПартнера         = "";
			
			ИскСтрокиМассив = ТЗ_КИ_Партнеры.НайтиСтроки(Новый Структура("Объект", ТекПартнер.Партнер));
			Если ИскСтрокиМассив.Количество() > 0 Тогда
				Для Каждого ТекИскСтрока Из ИскСтрокиМассив Цикл
					Если ТекИскСтрока.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера Тогда
						АдресПартнера = СтрЗаменить(ТекИскСтрока.Представление, Символ(13) + Символ(10), " ");
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;					
								
			ОблКлиент.Параметры.Клиент      = врПартнерНаименование;
			ОблКлиент.Параметры.Долг        = ПривестиЧислоКСтроке(ТекПартнер.Долг, 15, 2);
			ОблКлиент.Параметры.КлиентАдрес = АдресПартнера;
			ТабДок.Вывести(ОблКлиент);
			
			Для Каждого Выборка Из ТЗНеоплаченныеНакладные Цикл
				Если Выборка.Партнер = врПартнер Тогда
					
					врРН = Выборка.РН;
					
					врПредставлениеДокумента = " " + СокрЛП(Выборка.НомерНакладной) + " от " + Формат(Выборка.ДатаНакладной, "ДЛФ=D");
					
					ОблСтрокаДебиторка.Параметры.Клиент = врПартнерНаименование;
					КомментарийНакладной = "";
					
					//Если Выборка.РН.Организация = ОргБонусТомск Тогда
					//	Если Не ЕстьПКОДляРеализации(Выборка.РН) Тогда
					//		КомментарийНакладной = "НЕТ ПКО; ";
					//	КонецЕсли;	
					//КонецЕсли;	
					
					//ОписаниеМаршрута = ПолучитьОписаниеМаршрута(врРН);
					//Маршрут          = СокрЛП(ОписаниеМаршрута.Маршрут);		
					Маршрут          = СокрЛП(Выборка.Маршрут);
					КомментарийНакладной = КомментарийНакладной + СокрЛП(Выборка.Комментарий);
					Если Не ПустаяСтрока(Маршрут) Тогда
						КомментарийНакладной = ?(ПустаяСтрока(КомментарийНакладной), "", "; ") + Маршрут;
					КонецЕсли;	
					ОблСтрокаДебиторка.Параметры.Накладная     = врПредставлениеДокумента + ?(ПустаяСтрока(КомментарийНакладной), "", Символы.ПС + КомментарийНакладной);
					ОблСтрокаДебиторка.Параметры.Долг          = ПривестиЧислоКСтроке(Выборка.Долг, 15, 2);
					ОблСтрокаДебиторка.Параметры.ПросрочкаДней = ПривестиЧислоКСтроке(Выборка.ПросрочкаДней, 5, 0);
					врОбл = ТабДок.Вывести(ОблСтрокаДебиторка);
					Если Выборка.ПросрочкаДней > 0 Тогда
						ГорПоложение = врОбл.Верх;
						врОбл = ТабДок.Область("R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(2) + ":R" + ЧислоВСтроку(ГорПоложение) + "C" + ЧислоВСтроку(10));
						врОбл.ЦветФона = Новый Цвет(255, 228, 225);
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЦикла;		
		
	КонецЕсли;	
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	Если ПустаяСтрока(врИдКПК) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Debt" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Debt" + СокрЛП(врИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту " + ?(ПустаяСтрока(врИдКПК), СокрЛП(ИдКПК), СокрЛП(врИдКПК)) + " (ДЕБИТОРСКАЯ ЗАДОЛЖЕННОСТЬ) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Отчет агенту по оборудованию

Процедура СформироватьОтчетАгенту_Оборудование(Агент, врИдКПК = "") Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ОтчетАгенту");
	
	ОблДатаОтчета         = Макет.ПолучитьОбласть("ДатаОтчета");
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);
			
	// ОБОРУДОВАНИЕ
	
	ВывестиДанныеПоОборудованию(ТабДок, Агент);
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	Если ПустаяСтрока(врИдКПК) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Kegs" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Kegs" + СокрЛП(врИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;	
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту " + ?(ПустаяСтрока(врИдКПК), СокрЛП(ИдКПК), СокрЛП(врИдКПК)) + " (ОБОРУДОВАНИЕ) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Сумма оплаты по накладной

Функция СуммыОплатыПоНакладнойЧерезАгента(врНакладная)
	
	СуммаОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованиеПлатежа", врНакладная);
	Запрос.УстановитьПараметр("ВидОплаты",        Перечисления.ВидОплатыПКО.ОплатаАгенту);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов, 0) КАК Сумма
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = &ВидОплаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаОплаты = СуммаОплаты + Выборка.Сумма;
	КонецЦикла;	
	
	Возврат СуммаОплаты;
	
КонецФункции	


// Отчет по борту агента (за последнии 7 дней)

Процедура СформироватьОтчетАгенту_Борт(врАгент, врИдКПК = "")
	
	Склад_БортАгента = ПолучитьБортАгента(врАгент);
	
	Если Не ЗначениеЗаполнено(Склад_БортАгента) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Борт");
	
	ОблШапка			  = Макет.ПолучитьОбласть("Шапка");
	ОблОстаткиЗаголовок   = Макет.ПолучитьОбласть("ОстаткиЗаголовок");
	ОблОстаткиСтрока      = Макет.ПолучитьОбласть("ОстаткиСтрока");
	ОблПродажиЗаголовок   = Макет.ПолучитьОбласть("ПродажиЗаголовок");
	ОблПродажиСтрока      = Макет.ПолучитьОбласть("ПродажиСтрока");
	ОблПродажиИтоги       = Макет.ПолучитьОбласть("ПродажиИтоги");
	ОблРазделитель        = Макет.ПолучитьОбласть("Разделитель");
	
	ОблШапка.Параметры.Борт       = СокрЛП(Склад_БортАгента.Наименование);
	ОблШапка.Параметры.ДатаОтчета = "Дата формирования отчета: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);
	
	КонПериода = ТекущаяДата();
	НачПериода = КонПериода - 7 * ДеньВСекундах;
	
	ТекущийДень = НачалоДня(КонПериода);
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
		
		// ДВИЖЕНИЯ И ОСТАТКИ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",      Склад_БортАгента);
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущийДень));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СвободныеОстаткиОстаткиИОбороты.Номенклатура,
		               |	СвободныеОстаткиОстаткиИОбороты.ВНаличииНачальныйОстаток КАК НачОстаток,
		               |	СвободныеОстаткиОстаткиИОбороты.ВНаличииКонечныйОстаток КАК КонОстаток,
		               |	СвободныеОстаткиОстаткиИОбороты.ВНаличииПриход КАК Приход,
		               |	СвободныеОстаткиОстаткиИОбороты.ВНаличииРасход КАК Расход
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.ОстаткиИОбороты(&НачПериода, &КонПериода, , , Склад = &Склад) КАК СвободныеОстаткиОстаткиИОбороты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СвободныеОстаткиОстаткиИОбороты.Номенклатура.Наименование";
		
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			
			ОблОстаткиЗаголовок.Параметры.ДвижениеТоваровЗаДень = "Движение товаров за " + Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблОстаткиЗаголовок);
			
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОблОстаткиСтрока.Параметры.Заполнить(Выборка);
				ТабДок.Вывести(ОблОстаткиСтрока);
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		// ПРОДАЖИ И ОПЛАТЫ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("Склад",      Склад_БортАгента);
		Запрос.УстановитьПараметр("Кега", 		"Кега %");
							   
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТовары.Ссылка
		               |ПОМЕСТИТЬ ЗаказыКлиентов
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Ссылка.Проведен
		               |	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаказКлиентаТовары.Ссылка.Склад = &Склад
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказКлиентаТовары.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		               |	СУММА(РеализацияТоваровУслугТовары.СуммаСНДС) КАК Сумма
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		               |	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента В
		               |			(ВЫБРАТЬ
		               |				ЗаказыКлиентов.Ссылка
		               |			ИЗ
		               |				ЗаказыКлиентов КАК ЗаказыКлиентов)
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Наименование ПОДОБНО &Кега
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка.Дата";
			
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			
			ОблПродажиЗаголовок.Параметры.ПродажиЗаДень = "Продажи товаров с борта за " + Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблПродажиЗаголовок);
			
			Продажи_ИтогоСумма    = 0;
			Продажи_ИтогоОплачено = 0;
				
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СуммаОплатыНакладной = СуммыОплатыПоНакладнойЧерезАгента(Выборка.Ссылка);
				
				ОблПродажиСтрока.Параметры.Клиент    = Выборка.Ссылка.Партнер.Наименование;
				ОблПродажиСтрока.Параметры.Накладная = ПредставлениеДокумента(Выборка.Ссылка);
				ОблПродажиСтрока.Параметры.Сумма     = Выборка.Сумма;
				ОблПродажиСтрока.Параметры.Оплачено  = СуммаОплатыНакладной;
				ТабДок.Вывести(ОблПродажиСтрока);
				
				Продажи_ИтогоСумма    = Продажи_ИтогоСумма    + Выборка.Сумма;
				Продажи_ИтогоОплачено = Продажи_ИтогоОплачено + СуммаОплатыНакладной;
					
			КонецЦикла;				
			
			ОблПродажиИтоги.Параметры.Сумма    = Продажи_ИтогоСумма;
			ОблПродажиИтоги.Параметры.Оплачено = Продажи_ИтогоОплачено;
			ТабДок.Вывести(ОблПродажиИтоги);
				
		КонецЕсли;	
		
		ТабДок.Вывести(ОблРазделитель);
		
		ТекущийДень = ТекущийДень - ДеньВСекундах;
	
	КонецЦикла;
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	Если ПустаяСтрока(врИдКПК) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(врАгент)) + "\Board" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(врАгент)) + "\Board" + СокрЛП(врИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (БОРТ) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	
	

// Овощи-фрукты

Процедура СформироватьОтчетАгенту_ОвощиФрукты(Агент) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ОвощиФрукты");
	
	ОблШапка   = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока  = Макет.ПолучитьОбласть("Строка");
	ОблИтоги   = Макет.ПолучитьОбласть("Итоги");
		
	КонПериода = ТекущаяДата();
	НачПериода = КонПериода - 10 * ДеньВСекундах;
	
	ТекущийДень = НачалоДня(КонПериода);
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",  НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",  КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("ОвощиФрукты", Товары_ОвощиФрукты);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТовары.Ссылка
		               |ПОМЕСТИТЬ ЗаказыКлиентов
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Ссылка.Проведен
		               |	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказКлиентаТовары.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Ссылка,
		               |	ВложенныйЗапрос.Менеджер КАК Менеджер,
		               |	ВложенныйЗапрос.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ВложенныйЗапрос.ДатаЗаказа КАК ДатаЗаказа,
		               |	ВложенныйЗапрос.ЗаказКлиента,
		               |	ВложенныйЗапрос.Организация КАК Организация,
		               |	ВложенныйЗапрос.Клиент КАК Клиент,
		               |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		               |		РеализацияТоваровУслугТовары.Ссылка.Менеджер КАК Менеджер,
		               |		РеализацияТоваровУслугТовары.Ссылка.Дата КАК ДатаОтгрузки,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента.Дата КАК ДатаЗаказа,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК ЗаказКлиента,
		               |		РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
		               |		РеализацияТоваровУслугТовары.Ссылка.Партнер КАК Клиент,
		               |		РеализацияТоваровУслугТовары.СуммаСНДС КАК Сумма
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |	ГДЕ
		               |		НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента В
		               |				(ВЫБРАТЬ
		               |					ЗаказыКлиентов.Ссылка
		               |				ИЗ
		               |					ЗаказыКлиентов КАК ЗаказыКлиентов)
		               |		И РеализацияТоваровУслугТовары.Номенклатура В(&ОвощиФрукты)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		РеализацияТоваровУслугТовары.Ссылка,
		               |		РеализацияТоваровУслугТовары.Ссылка.Менеджер,
		               |		РеализацияТоваровУслугТовары.Ссылка.Дата,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента.Дата,
		               |		РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента,
		               |		РеализацияТоваровУслугТовары.Ссылка.Организация,
		               |		РеализацияТоваровУслугТовары.Ссылка.Партнер,
		               |		РеализацияТоваровУслугТовары.СуммаСНДС
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |	ГДЕ
		               |		РеализацияТоваровУслугТовары.Номенклатура В (&ОвощиФрукты)
		               |		И РеализацияТоваровУслугТовары.Ссылка.Проведен
		               |		И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |		И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ВложенныйЗапрос
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Организация,
		               |	ВложенныйЗапрос.Менеджер,
		               |	ВложенныйЗапрос.ДатаОтгрузки,
		               |	ВложенныйЗапрос.ДатаЗаказа,
		               |	ВложенныйЗапрос.Ссылка,
		               |	ВложенныйЗапрос.ЗаказКлиента,
		               |	ВложенныйЗапрос.Клиент
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Менеджер";
		
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда			
			
			ОблШапка.Параметры.ДатаОтчета = Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблШапка);
			
			НомерПП = 0;
			Продажи_ИтогоСумма = 0;
				
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НомерПП = НомерПП + 1;
				
				врМаршрут = ПолучитьОписаниеМаршрута(Выборка.Ссылка);
				
				ОблСтрока.Параметры.Номер   = НомерПП;
				ОблСтрока.Параметры.Агент   = Выборка.Менеджер;
				ОблСтрока.Параметры.Фактура = ПредставлениеДокумента(Выборка.Ссылка);
				ОблСтрока.Параметры.Сумма   = Выборка.Сумма;
				ОблСтрока.Параметры.Маршрут = врМаршрут.Маршрут;
				ТабДок.Вывести(ОблСтрока);
				
				Продажи_ИтогоСумма    = Продажи_ИтогоСумма    + Выборка.Сумма;
					
			КонецЦикла;				
			
			ОблИтоги.Параметры.Сумма  = Продажи_ИтогоСумма;
			ТабДок.Вывести(ОблИтоги);
			
		КонецЕсли;	
		
		ТекущийДень = ТекущийДень - ДеньВСекундах;
	
	КонецЦикла;
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(Агент)) + "\Fruits" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (ОВОЩИ-ФРУКТЫ) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Маршрут для супервайзеров

Процедура СформироватьОтчет_Маршрут(СписокСупервайзеров, НаименованиеРегиона) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Маршрут");
	
	ОблДатаОтчета  = Макет.ПолучитьОбласть("ДатаОтчета");	
	ОблШапка       = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока      = Макет.ПолучитьОбласть("Строка");
	ОблИтоги       = Макет.ПолучитьОбласть("Итоги");
	
	ОблШапкаРасш   = Макет.ПолучитьОбласть("ШапкаРасш");
	ОблСтрокаРасш  = Макет.ПолучитьОбласть("СтрокаРасш");
	ОблИтогиРасш   = Макет.ПолучитьОбласть("ИтогиРасш");
	
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);			
	
	врМассивАгентов = Новый Массив;
	
	ЗапросАгенты = Новый Запрос;
	ЗапросАгенты.УстановитьПараметр("СписокСупервайзеров", СписокСупервайзеров);
	ЗапросАгенты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ГруппыПользователейСостав.Пользователь
	                     |ИЗ
	                     |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	                     |ГДЕ
	                     |	ГруппыПользователейСостав.Ссылка В(&СписокСупервайзеров)";
	ВыборкаАгенты = ЗапросАгенты.Выполнить().Выбрать();
	Пока ВыборкаАгенты.Следующий() Цикл
		врМассивАгентов.Добавить(ВыборкаАгенты.Пользователь);
	КонецЦикла;	
		
	//Если НаименованиеРегиона = "Novosib" Тогда
	//	врМассивАгентов.Добавить(врАгентКарчков);
	//КонецЕсли;	
	//
	//Если НаименованиеРегиона = "Kuzbass" Тогда
	//	врПоискПоз = врМассивАгентов.Найти(врАгентКарчков);
	//	Если врПоискПоз <> Неопределено Тогда
	//		врМассивАгентов.Удалить(врПоискПоз);
	//	КонецЕсли;
	//КонецЕсли;		
	
	Если СписокСупервайзеров.Количество() = 0 Тогда
		врМассивАгентов.Добавить(ТекАгент);
	КонецЕсли;	
		
	КонПериода = ТекущаяДата();
	НачПериода = КонПериода - 14 * ДеньВСекундах;
	
		
	ТекущийДень = НачалоДня(КонПериода);
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",    НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",    КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("СписокАгентов", врМассивАгентов);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаданиеНаПеревозку.Ссылка КАК ДокЗаданиеНаПеревозку,
		               |	ВЫРАЗИТЬ(ЗаданиеНаПеревозку.Комментарий КАК СТРОКА(100)) КАК БР,
		               |	ЗаданиеНаПеревозку.ТранспортноеСредство КАК Транспорт,
		               |	ЗаданиеНаПеревозку.ТранспортноеСредство.ГрузоподъемностьВТоннах КАК Грузоподъемность,
		               |	ЗаданиеНаПеревозку.Вес КАК ТоннажТовара
		               |ИЗ
		               |	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		               |ГДЕ
		               |	ЗаданиеНаПеревозку.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Менеджер В(&СписокАгентов)
		               |	И НЕ ЗаданиеНаПеревозку.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	БР";
		
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда			
			
			ОблШапка.Параметры.ДатаОтчета = Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблШапка);
			
			НомерПП = 0;
			
			врИтогоКолТочек = 0;
			врИтогоТоннаж   = 0;
			врИтогоСумма    = 0;
				
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				врТочки = Новый ТаблицаЗначений;
				врТочки.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));							
				
				СуммаДоставки = 0;
				
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("СписокАгентов", врМассивАгентов);
				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер В(&СписокАгентов)";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					СуммаДоставки = СуммаДоставки + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					НовСтрокаТочка  = врТочки.Добавить();
					врОсновнаяТочка = Петров_ПолучитьОсновнуюТочкуПетрова(ВыборкаСуммаДоставки.Распоряжение.Партнер);					
					Если ЗначениеЗаполнено(врОсновнаяТочка) Тогда
						НовСтрокаТочка.Точка = врОсновнаяТочка;
					Иначе	
						НовСтрокаТочка.Точка = ВыборкаСуммаДоставки.Распоряжение.Партнер;
					КонецЕсли;											
				КонецЦикла;	
				
				врТочки.Свернуть("Точка");
				
				НомерПП = НомерПП + 1;
							
				ОблСтрока.Параметры.Номер       = НомерПП;
				ОблСтрока.Параметры.Заполнить(Выборка);
				ОблСтрока.Параметры.КолТочек    = врТочки.Количество();
				ОблСтрока.Параметры.СуммаТовара = СуммаДоставки;
				ТабДок.Вывести(ОблСтрока);
				
				врИтогоКолТочек = врИтогоКолТочек + врТочки.Количество();
				врИтогоТоннаж   = врИтогоТоннаж + Выборка.ТоннажТовара;
				врИтогоСумма    = врИтогоСумма  + СуммаДоставки;
				
			КонецЦикла;				
			
			ОблИтоги.Параметры.КолТочек     = врИтогоКолТочек;
			ОблИтоги.Параметры.ТоннажТовара = врИтогоТоннаж;
			ОблИтоги.Параметры.СуммаТовара  = врИтогоСумма;
			ТабДок.Вывести(ОблИтоги);
			
			// РАСШИФРОВКА
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				ОблШапкаРасш.Параметры.БР = Формат(ТекущийДень, "ДЛФ=DD") + " Бизнес-регион: " + СокрЛП(Выборка.БР);
				ТабДок.Вывести(ОблШапкаРасш);
			
				НомерПП = 0;
			
				врИтогоТоннаж = 0;
				врИтогоСумма  = 0;
				
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("СписокАгентов", врМассивАгентов);
				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер КАК Агент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер КАК Клиент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер В(&СписокАгентов)
				                            |
				                            |СГРУППИРОВАТЬ ПО
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |
				                            |УПОРЯДОЧИТЬ ПО
				                            |	Агент,
				                            |	Клиент";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					
					НомерПП = НомерПП + 1;
				
					ОблСтрокаРасш.Параметры.Номер        = НомерПП;
					ОблСтрокаРасш.Параметры.Заполнить(ВыборкаСуммаДоставки);
					ОблСтрокаРасш.Параметры.Фактура      = ПредставлениеДокумента(ВыборкаСуммаДоставки.Распоряжение);
					ОблСтрокаРасш.Параметры.ТоннажТовара = врХаракЗаявки.Вес / 1000;
					ОблСтрокаРасш.Параметры.СуммаТовара  = врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
					ТабДок.Вывести(ОблСтрокаРасш);
				
					врИтогоТоннаж = врИтогоТоннаж + врХаракЗаявки.Вес / 1000;
					врИтогоСумма  = врИтогоСумма  + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
				КонецЦикла;					
				
				ОблИтогиРасш.Параметры.ТоннажТовара = врИтогоТоннаж;
				ОблИтогиРасш.Параметры.СуммаТовара  = врИтогоСумма;
				ТабДок.Вывести(ОблИтогиРасш);				
				
			КонецЦикла;	
			
			ТабДок.Вывести(ОблРазделитель);
			
		КонецЕсли;	
		
		ТекущийДень = ТекущийДень - ДеньВСекундах;
	
	КонецЦикла;
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Route" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Маршрут) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Маршрут общий по региону

Процедура СформироватьОтчет_Маршрут_ПоРегиону_ЗД(НаименованиеРегиона, ЗонаДоставки) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Маршрут");
	
	ОблДатаОтчета  = Макет.ПолучитьОбласть("ДатаОтчета");
	ОблШапка       = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока      = Макет.ПолучитьОбласть("Строка");
	ОблИтоги       = Макет.ПолучитьОбласть("Итоги");
	
	ОблШапкаРасш   = Макет.ПолучитьОбласть("ШапкаРасш");
	ОблСтрокаРасш  = Макет.ПолучитьОбласть("СтрокаРасш");
	ОблИтогиРасш   = Макет.ПолучитьОбласть("ИтогиРасш");
	
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);		
	
	врСкладГруппаТомск = Справочники.Склады.НайтиПоНаименованию("Томск", Истина);
	
	врМассивЗонДоставки = Новый Массив;
		
	ЗапросЗоныДоставки = Новый Запрос;
	ЗапросЗоныДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	ЗоныДоставки.Ссылка
	                           |ИЗ
	                           |	Справочник.ЗоныДоставки КАК ЗоныДоставки
	                           |ГДЕ
	                           |	НЕ ЗоныДоставки.ЭтоГруппа
	                           |	И ЗоныДоставки.Родитель = &Родитель";
	Для Каждого ТекЗонаДоставки Из ЗонаДоставки Цикл
		ЗапросЗоныДоставки.УстановитьПараметр("Родитель", ТекЗонаДоставки);
		ВыборкаЗоныДоставки = ЗапросЗоныДоставки.Выполнить().Выбрать();
		Пока ВыборкаЗоныДоставки.Следующий() Цикл
			врМассивЗонДоставки.Добавить(ВыборкаЗоныДоставки.Ссылка);
		КонецЦикла;	
	КонецЦикла;	
				
	КонПериода = ТекущаяДата();
	НачПериода = КонПериода - 5 * ДеньВСекундах;
	
	ТекущийДень = НачалоДня(КонПериода);
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",    НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",    КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
		Запрос.УстановитьПараметр("Склад",		   врСкладГруппаТомск);
		
				
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаданиеНаПеревозку.Ссылка КАК ДокЗаданиеНаПеревозку,
		               |	ВЫРАЗИТЬ(ЗаданиеНаПеревозку.Комментарий КАК СТРОКА(100)) КАК БР,
		               |	ЗаданиеНаПеревозку.ТранспортноеСредство КАК Транспорт,
		               |	ЗаданиеНаПеревозку.ТранспортноеСредство.ГрузоподъемностьВТоннах КАК Грузоподъемность,
		               |	ЗаданиеНаПеревозку.Вес КАК ТоннажТовара
		               |ИЗ
		               |	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		               |ГДЕ
		               |	ЗаданиеНаПеревозку.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаданиеНаПеревозку.Распоряжения.Распоряжение.ЗонаДоставки В(&ЗонаДоставки)
		               |	И ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Склад.Родитель = &Склад
		               |	И НЕ ЗаданиеНаПеревозку.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	БР";
				
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда	
			
			ОблШапка.Параметры.ДатаОтчета = Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблШапка);
			
			НомерПП = 0;
			
			врИтогоТоннаж = 0;
			врИтогоСумма  = 0;
				
			Выборка = РЗ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СуммаДоставки = 0;
				
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
				ЗапросСуммаДоставки.УстановитьПараметр("Склад",		    врСкладГруппаТомск);
				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.ЗонаДоставки В(&ЗонаДоставки)
											|	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &Склад";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					СуммаДоставки = СуммаДоставки + врХаракЗаявки.СуммаЗаявкиБезОборудования;
				КонецЦикла;	
				
				НомерПП = НомерПП + 1;
				
				ОблСтрока.Параметры.Номер       = НомерПП;
				ОблСтрока.Параметры.Заполнить(Выборка);
				ОблСтрока.Параметры.СуммаТовара = СуммаДоставки;
				ТабДок.Вывести(ОблСтрока);
				
				врИтогоТоннаж = врИтогоТоннаж + Выборка.ТоннажТовара;
				врИтогоСумма  = врИтогоСумма  + СуммаДоставки;
				
			КонецЦикла;				
			
			ОблИтоги.Параметры.ТоннажТовара = врИтогоТоннаж;
			ОблИтоги.Параметры.СуммаТовара  = врИтогоСумма;
			ТабДок.Вывести(ОблИтоги);
			
			// РАСШИФРОВКА
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				ОблШапкаРасш.Параметры.БР = Формат(ТекущийДень, "ДЛФ=DD") + " Бизнес-регион: " + СокрЛП(Выборка.БР);
				ТабДок.Вывести(ОблШапкаРасш);
			
				НомерПП = 0;
			
				врИтогоТоннаж = 0;
				врИтогоСумма  = 0;
				
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
				ЗапросСуммаДоставки.УстановитьПараметр("Склад",			врСкладГруппаТомск);
				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер КАК Агент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер КАК Клиент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.ЗонаДоставки В(&ЗонаДоставки)
											|	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &Склад
				                            |
				                            |СГРУППИРОВАТЬ ПО
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |
				                            |УПОРЯДОЧИТЬ ПО
				                            |	Агент,
				                            |	Клиент";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					
					НомерПП = НомерПП + 1;
				
					ОблСтрокаРасш.Параметры.Номер        = НомерПП;
					ОблСтрокаРасш.Параметры.Заполнить(ВыборкаСуммаДоставки);
					ОблСтрокаРасш.Параметры.Фактура      = ПредставлениеДокумента(ВыборкаСуммаДоставки.Распоряжение);
					ОблСтрокаРасш.Параметры.ТоннажТовара = врХаракЗаявки.Вес / 1000;
					ОблСтрокаРасш.Параметры.СуммаТовара  = врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
					ТабДок.Вывести(ОблСтрокаРасш);
				
					врИтогоТоннаж = врИтогоТоннаж + врХаракЗаявки.Вес / 1000;
					врИтогоСумма  = врИтогоСумма  + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
				КонецЦикла;	
				
				ОблИтогиРасш.Параметры.ТоннажТовара = врИтогоТоннаж;
				ОблИтогиРасш.Параметры.СуммаТовара  = врИтогоСумма;
				ТабДок.Вывести(ОблИтогиРасш);				
				
			КонецЦикла;	
			
			ТабДок.Вывести(ОблРазделитель);
			
		КонецЕсли;	
		
		ТекущийДень = ТекущийДень - ДеньВСекундах;
		
	КонецЦикла;
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Route" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Маршрут) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


Процедура СформироватьОтчет_Маршрут_ПоРегиону(НаименованиеРегиона, ЗонаДоставки, ВыводитьРасшифровку = Истина) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("МаршрутТранзит");
	
	ОблДатаОтчета   = Макет.ПолучитьОбласть("ДатаОтчета");
	ОблШапка        = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока       = Макет.ПолучитьОбласть("Строка");
	ОблИтоги        = Макет.ПолучитьОбласть("Итоги");
	
	ОблШапкаРасш   = Макет.ПолучитьОбласть("ШапкаРасш");
	ОблСтрокаРасш  = Макет.ПолучитьОбласть("СтрокаРасш");
	ОблИтогиРасш   = Макет.ПолучитьОбласть("ИтогиРасш");
	
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);	
	
	врСкладГруппаТомск   = Справочники.Склады.НайтиПоНаименованию("Томск", 			   Истина);
	врСкладГруппаТранзит = Справочники.Склады.НайтиПоНаименованию("Транзитные склады", Истина);
	
	врМассивЗонДоставки = Новый Массив;
	
	ЗапросЗоныДоставки = Новый Запрос;
	ЗапросЗоныДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	БизнесРегионы.Ссылка
	                           |ИЗ
	                           |	Справочник.БизнесРегионы КАК БизнесРегионы
	                           |ГДЕ
	                           |	БизнесРегионы.Родитель = &Родитель";
	Для Каждого ТекЗонаДоставки Из ЗонаДоставки Цикл
		ЗапросЗоныДоставки.УстановитьПараметр("Родитель", ТекЗонаДоставки);
		ВыборкаЗоныДоставки = ЗапросЗоныДоставки.Выполнить().Выбрать();
		Пока ВыборкаЗоныДоставки.Следующий() Цикл
			врМассивЗонДоставки.Добавить(ВыборкаЗоныДоставки.Ссылка);
		КонецЦикла;	
	КонецЦикла;	
	
	врБР_Кемерово = Справочники.БизнесРегионы.НайтиПоНаименованию("КЕМЕРОВО", Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_НСК      = Справочники.БизнесРегионы.НайтиПоНаименованию("НОВОСИБИРСК", Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	
	врМассивИсключенийКузбасс = Новый Массив;
	врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Болотное ", 	 Истина, врБР_Кемерово));
	врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Ояш Болотное", Истина, врБР_Кемерово));
	врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Березиково",   Истина, врБР_Кемерово));
	//врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Мошково",      Истина, врБР_Кемерово));
	//врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Горный",       Истина, врБР_Кемерово));
	врМассивИсключенийКузбасс.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Тогучин",      Истина, врБР_Кемерово));
	
	врМассивИсключенийКузбасс_2 = Новый Массив;
	врМассивИсключенийКузбасс_2.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Мариинск ",  Истина, врБР_Кемерово));	
	врМассивИсключенийКузбасс_2.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Тисуль", 	 Истина, врБР_Кемерово));
	
	врМассивИсключенийНСК = Новый Массив;
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("сети новосибирск 1", Истина, врБР_НСК));	
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("сети новосибирск 2", Истина, врБР_НСК));	
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("сети новосибирск 3", Истина, врБР_НСК));
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("сети новосибирск 4", Истина, врБР_НСК));	
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("сети новосибирск 5", Истина, врБР_НСК));	
	врМассивИсключенийНСК.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Мочищенское ш.",     Истина, врБР_НСК));	
	
	Если НаименованиеРегиона = "Novosib" Тогда
		
		Для Каждого ТекСтрокаИскл Из врМассивИсключенийКузбасс Цикл
			Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
				врМассивЗонДоставки.Добавить(ТекСтрокаИскл);
			КонецЕсли;	                                                                            
		КонецЦикла;
		
		Для Каждого ТекСтрокаИскл Из врМассивИсключенийНСК Цикл
			Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
				врПоиск = врМассивЗонДоставки.Найти(ТекСтрокаИскл);
				Если врПоиск <> Неопределено Тогда
					врМассивЗонДоставки.Удалить(врПоиск);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	
	//Если НаименованиеРегиона = "Barnaul" Тогда
	//	Для Каждого ТекСтрокаИскл Из врМассивИсключенийНСК Цикл
	//		Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
	//			врМассивЗонДоставки.Добавить(ТекСтрокаИскл);
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;	
	
	Если НаименованиеРегиона = "Krasnoyarsk" Тогда
		Для Каждого ТекСтрокаИскл Из врМассивИсключенийКузбасс_2 Цикл
			Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
				врМассивЗонДоставки.Добавить(ТекСтрокаИскл);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;		
	
	Если НаименованиеРегиона = "Kuzbass" Тогда
		
		Для Каждого ТекСтрокаИскл Из врМассивИсключенийКузбасс Цикл
			Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
				врПоиск = врМассивЗонДоставки.Найти(ТекСтрокаИскл);
				Если врПоиск <> Неопределено Тогда
					врМассивЗонДоставки.Удалить(врПоиск);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ТекСтрокаИскл Из врМассивИсключенийКузбасс_2 Цикл
			Если ЗначениеЗаполнено(ТекСтрокаИскл) Тогда
				врПоиск = врМассивЗонДоставки.Найти(ТекСтрокаИскл);
				Если врПоиск <> Неопределено Тогда
					врМассивЗонДоставки.Удалить(врПоиск);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;		
	
	КонПериода = ТекущаяДата();
	НачПериода = КонПериода - 14 * ДеньВСекундах;
	//Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Зиганшина Виктория Валерьевна") Тогда
	//	НачПериода = '20211201';
	//КонецЕсли;	
	//Если НаименованиеРегиона = "Barnaul" Тогда
	//	НачПериода = '20220101';
	//КонецЕсли;	
	
	ТекущийДень = НачалоДня(КонПериода);
	
	Пока ТекущийДень >= НачалоДня(НачПериода) Цикл
		
		врТЗ = Новый ТаблицаЗначений;
		врТЗ.Колонки.Добавить("БР",        ОписаниеТипаСтрока("50"));
		врТЗ.Колонки.Добавить("Тоннаж",    ОписаниеТипаЧисло(15,6));
		врТЗ.Колонки.Добавить("ТР_Тоннаж", ОписаниеТипаЧисло(15,6));
		врТЗ.Колонки.Добавить("ОБ_Тоннаж", ОписаниеТипаЧисло(15,6));
		врТЗ.Колонки.Добавить("Сумма",     ОписаниеТипаЧисло(15,2));
		врТЗ.Колонки.Добавить("ТР_Сумма",  ОписаниеТипаЧисло(15,2));
		врТЗ.Колонки.Добавить("ОБ_Сумма",  ОписаниеТипаЧисло(15,2));
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",    НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонПериода",    КонецДня(ТекущийДень));
		Запрос.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
		Запрос.УстановитьПараметр("Склад",		   врСкладГруппаТомск);
		Запрос.УстановитьПараметр("СкладТранзит",  врСкладГруппаТранзит);
				
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаданиеНаПеревозку.Ссылка КАК ДокЗаданиеНаПеревозку,
		               |	ВЫРАЗИТЬ(ЗаданиеНаПеревозку.Комментарий КАК СТРОКА(50)) КАК БР,
		               |	ЗаданиеНаПеревозку.Склад КАК Склад,
		               |	ЗаданиеНаПеревозку.Склад.Родитель,
		               |	СУММА(ВЫБОР
		               |			КОГДА ЗаданиеНаПеревозку.Склад.Родитель = &Склад
		               |					ИЛИ ЗаданиеНаПеревозку.Склад = &Склад
		               |				ТОГДА ЗаданиеНаПеревозку.Вес
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК Тоннаж,
		               |	СУММА(ВЫБОР
		               |			КОГДА ЗаданиеНаПеревозку.Склад.Родитель = &СкладТранзит
		               |					ИЛИ ЗаданиеНаПеревозку.Склад = &СкладТранзит
		               |				ТОГДА ЗаданиеНаПеревозку.Вес
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ТР_Тоннаж
		               |ИЗ
		               |	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		               |ГДЕ
		               |	ЗаданиеНаПеревозку.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Партнер.БизнесРегион В(&ЗонаДоставки)
		               |	И (ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Склад.Родитель = &Склад
		               |			ИЛИ ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Склад.Родитель = &СкладТранзит)
		               |	И НЕ ЗаданиеНаПеревозку.ПометкаУдаления
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаданиеНаПеревозку.Ссылка,
		               |	ЗаданиеНаПеревозку.Склад,
		               |	ЗаданиеНаПеревозку.Склад.Родитель,
		               |	ВЫРАЗИТЬ(ЗаданиеНаПеревозку.Комментарий КАК СТРОКА(50))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	БР";
						
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда	
			
			ОблШапка.Параметры.ДатаОтчета = Формат(ТекущийДень, "ДЛФ=DD");
			ТабДок.Вывести(ОблШапка);			
			
			НомерПП = 0;
			
			врТочки = Новый ТаблицаЗначений;
			врТочки.Колонки.Добавить("БР",    ОписаниеТипаСтрока(50));			
			врТочки.Колонки.Добавить("Точка", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));						
			
			Выборка = РЗ.Выбрать();				
			Пока Выборка.Следующий() Цикл
				
				врВыборкаБР = Выборка.БР;
				врВыборкаБР = СокрЛП(СтрЗаменить(врВыборкаБР, "ТРАНЗИТ", ""));
				
				врКоммент = ВРЕГ(Выборка.ДокЗаданиеНаПеревозку.Комментарий);
				Если СтрЧислоВхождений(врКоммент, " ОБЩИЙ") > 0 Тогда
					Продолжить;
				КонецЕсли;	
				Если СтрЧислоВхождений(врКоммент, "ОБЪЕДИНЕННОЕ") > 0 Тогда
					Продолжить;
				КонецЕсли;	
													
				СуммаДоставки    = 0;
				ТР_СуммаДоставки = 0;
				
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
				ЗапросСуммаДоставки.УстановитьПараметр("Склад",		    врСкладГруппаТомск);
				ЗапросСуммаДоставки.УстановитьПараметр("СкладТранзит",	врСкладГруппаТранзит);
				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер.БизнесРегион В(&ЗонаДоставки)
				                            |	И (ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &Склад
				                            |			ИЛИ ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &СкладТранзит)";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					Если ВыборкаСуммаДоставки.РаспоряжениеСкладРодитель = врСкладГруппаТранзит Тогда 
						ТР_СуммаДоставки = ТР_СуммаДоставки + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					Иначе
						СуммаДоставки = СуммаДоставки + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					КонецЕсли;	
					НовСтрокаТочка  = врТочки.Добавить();
					врОсновнаяТочка = Петров_ПолучитьОсновнуюТочкуПетрова(ВыборкаСуммаДоставки.РаспоряжениеПартнер);					
					Если ЗначениеЗаполнено(врОсновнаяТочка) Тогда
						НовСтрокаТочка.БР    = СокрЛП(врВыборкаБР);
						НовСтрокаТочка.Точка = врОсновнаяТочка;
					Иначе	
						НовСтрокаТочка.БР    = СокрЛП(врВыборкаБР);
						НовСтрокаТочка.Точка = ВыборкаСуммаДоставки.РаспоряжениеПартнер;
					КонецЕсли;						
				КонецЦикла;	
								
				врНовСтрокаТЗ = врТЗ.Добавить();
				врНовСтрокаТЗ.БР        = СокрЛП(врВыборкаБР);
				врНовСтрокаТЗ.Тоннаж    = Выборка.Тоннаж;
				врНовСтрокаТЗ.ТР_Тоннаж = Выборка.ТР_Тоннаж;
				врНовСтрокаТЗ.ОБ_Тоннаж = Выборка.Тоннаж + Выборка.ТР_Тоннаж;
				врНовСтрокаТЗ.Сумма     = СуммаДоставки;
				врНовСтрокаТЗ.ТР_Сумма  = ТР_СуммаДоставки;
				врНовСтрокаТЗ.ОБ_Сумма  = СуммаДоставки + ТР_СуммаДоставки;
			
			КонецЦикла;	
			
			врТочки.Свернуть("БР, Точка");			
			
			НомерПП = НомерПП + 1;
			
			врТЗ.Свернуть("БР", "Тоннаж, ТР_Тоннаж, ОБ_Тоннаж, Сумма, ТР_Сумма, ОБ_Сумма");
			врТЗ.Сортировать("БР");
			
			Для Каждого врТекСтрокаТЗ Из врТЗ Цикл
				
				врБРМассив = врТочки.НайтиСтроки(Новый Структура("БР", врТекСтрокаТЗ.БР));
							
				ОблСтрока.Параметры.Номер       = НомерПП;
				ОблСтрока.Параметры.Заполнить(врТекСтрокаТЗ);
				
				ОблСтрока.Параметры.Тоннаж    = ПривестиЧислоКСтроке(врТекСтрокаТЗ.Тоннаж,    14, 6);
				ОблСтрока.Параметры.Сумма     = ПривестиЧислоКСтроке(врТекСтрокаТЗ.Сумма,     14, 2);
				ОблСтрока.Параметры.ТР_Тоннаж = ПривестиЧислоКСтроке(врТекСтрокаТЗ.ТР_Тоннаж, 14, 6);
				ОблСтрока.Параметры.ТР_Сумма  = ПривестиЧислоКСтроке(врТекСтрокаТЗ.ТР_Сумма,  14, 2);
				ОблСтрока.Параметры.ОБ_Тоннаж = ПривестиЧислоКСтроке(врТекСтрокаТЗ.ОБ_Тоннаж, 14, 6);
				ОблСтрока.Параметры.ОБ_Сумма  = ПривестиЧислоКСтроке(врТекСтрокаТЗ.ОБ_Сумма,  14, 2);				
				
				ОблСтрока.Параметры.КолТочек    = врБРМассив.Количество();
				ТабДок.Вывести(ОблСтрока);
				
				НомерПП = НомерПП + 1;
				
			КонецЦикла;	
			
			ОблИтоги.Параметры.КолТочек  = врТочки.Количество();
			ОблИтоги.Параметры.Тоннаж    = врТЗ.Итог("Тоннаж");
			ОблИтоги.Параметры.Сумма     = врТЗ.Итог("Сумма");						
			ОблИтоги.Параметры.ТР_Тоннаж = врТЗ.Итог("ТР_Тоннаж");;
			ОблИтоги.Параметры.ТР_Сумма  = врТЗ.Итог("ТР_Сумма");			
			ОблИтоги.Параметры.ОБ_Тоннаж = врТЗ.Итог("ОБ_Тоннаж");			
			ОблИтоги.Параметры.ОБ_Сумма  = врТЗ.Итог("ОБ_Сумма");						
			ТабДок.Вывести(ОблИтоги);
			
			Если ВыводитьРасшифровку Тогда
			
			// РАСШИФРОВКА
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				ОблШапкаРасш.Параметры.БР = Формат(ТекущийДень, "ДЛФ=DD") + " Бизнес-регион: " + СокрЛП(Выборка.БР);
				ТабДок.Вывести(ОблШапкаРасш);
			
				НомерПП = 0;
			
				врИтогоТоннаж = 0;
				врИтогоСумма  = 0;
								
				ЗапросСуммаДоставки = Новый Запрос;
				ЗапросСуммаДоставки.УстановитьПараметр("Ссылка",        Выборка.ДокЗаданиеНаПеревозку);
				ЗапросСуммаДоставки.УстановитьПараметр("ЗонаДоставки",  врМассивЗонДоставки);
				ЗапросСуммаДоставки.УстановитьПараметр("Склад",			врСкладГруппаТомск);
				ЗапросСуммаДоставки.УстановитьПараметр("СкладТранзит",	врСкладГруппаТранзит);

				ЗапросСуммаДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер КАК Агент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер КАК Клиент,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |ИЗ
				                            |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				                            |ГДЕ
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				                            |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер.БизнесРегион В(&ЗонаДоставки)
											|	И (ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &Склад ИЛИ ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Склад.Родитель = &СкладТранзит)
				                            |
				                            |СГРУППИРОВАТЬ ПО
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Менеджер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Партнер,
				                            |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
				                            |
				                            |УПОРЯДОЧИТЬ ПО
				                            |	Агент,
				                            |	Клиент";
				ВыборкаСуммаДоставки = ЗапросСуммаДоставки.Выполнить().Выбрать();
				Пока ВыборкаСуммаДоставки.Следующий() Цикл
					
					врХаракЗаявки = ПолучитьХарактеристикиЗаявки(ВыборкаСуммаДоставки.Распоряжение);
					
					НомерПП = НомерПП + 1;
				
					ОблСтрокаРасш.Параметры.Номер        = НомерПП;
					ОблСтрокаРасш.Параметры.Заполнить(ВыборкаСуммаДоставки);
					ОблСтрокаРасш.Параметры.Фактура      = ПредставлениеДокумента(ВыборкаСуммаДоставки.Распоряжение);
					ОблСтрокаРасш.Параметры.ТоннажТовара = врХаракЗаявки.Вес / 1000;
					ОблСтрокаРасш.Параметры.СуммаТовара  = врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
					ТабДок.Вывести(ОблСтрокаРасш);
				
					врИтогоТоннаж = врИтогоТоннаж + врХаракЗаявки.Вес / 1000;
					врИтогоСумма  = врИтогоСумма  + врХаракЗаявки.СуммаЗаявкиБезОборудования;
					
				КонецЦикла;	
				
				ОблИтогиРасш.Параметры.ТоннажТовара = врИтогоТоннаж;
				ОблИтогиРасш.Параметры.СуммаТовара  = врИтогоСумма;
				ТабДок.Вывести(ОблИтогиРасш);				
				
			КонецЦикла;	
			
			КонецЕсли;
			
			ТабДок.Вывести(ОблРазделитель);
			
		КонецЕсли;	
		
		ТекущийДень = ТекущийДень - ДеньВСекундах;
		
	КонецЦикла;
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Route" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Маршрут) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Минимальная сумма заказа


Функция ЗаказыНеВошедшиеВЛимит(врСписокМенеджеров, врДата, врСуммаЛимита)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Менеджер",       Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ.Колонки.Добавить("Партнер",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ.Колонки.Добавить("Петрушка",       ОписаниеТипаЧисло(15,2));
	ТЗ.Колонки.Добавить("КПК",	 	      ОписаниеТипаЧисло(15,2));		
	ТЗ.Колонки.Добавить("Всего", 	      ОписаниеТипаЧисло(15,2));	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ОргБонусТомск);
	Запрос.УстановитьПараметр("Менеджер",    врСписокМенеджеров);
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(врДата));
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(врДата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка
	               |ПОМЕСТИТЬ ВТ_Заказы
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Проведен
	               |	И ЗаказКлиента.Менеджер В(&Менеджер)
	               |	И ЗаказКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиента.Организация <> &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Менеджер,
	               |	РеализацияТоваровУслуг.Партнер,
	               |	РеализацияТоваровУслуг.Ссылка,
	               |	РеализацияТоваровУслуг.СуммаДокумента,
	               |	РеализацияТоваровУслуг.ЗаказПетрушка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.ЗаказКлиента В
	               |			(ВЫБРАТЬ
	               |				ВТ_Заказы.Ссылка
	               |			ИЗ
	               |				ВТ_Заказы КАК ВТ_Заказы)
	               |	И РеализацияТоваровУслуг.Дата >= &НачПериода";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
								
		НовСтрока = ТЗ.Добавить();
				
		НовСтрока.Менеджер       = Выборка.Менеджер;
		НовСтрока.Партнер        = Выборка.Партнер;
				
		врХарак = ПолучитьХарактеристикиЗаявки(Выборка.Ссылка);
						
		врСумма = врХарак.СуммаЗаявкиБезОборудования;
		
		Если Выборка.ЗаказПетрушка Тогда
			НовСтрока.Петрушка = врСумма;
			НовСтрока.КПК      = 0;
			НовСтрока.Всего    = врСумма;
		Иначе
			НовСтрока.Петрушка = 0;
			НовСтрока.КПК      = врСумма;
			НовСтрока.Всего    = врСумма;			
		КонецЕсли;			
		
		Если ИмяСервераМА = "Tomsk" Тогда
				
			Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(Выборка.Партнер) Тогда
					
				врОсновнаяТочка = Петров_ПолучитьОсновнуюТочкуПетрова(Выборка.Партнер);
			
				Если ЗначениеЗаполнено(врОсновнаяТочка) Тогда
					НовСтрока.Партнер = врОсновнаяТочка;					
				КонецЕсли;	
				
			КонецЕсли;	
					
		КонецЕсли;	
				
	КонецЦикла;	
			
	ТЗ.Свернуть("Менеджер, Партнер", "Петрушка, КПК, Всего");
	
	КолСтрок = ТЗ.Количество() - 1;
	Пока КолСтрок >= 0 Цикл
			
		врСтрокаТЗ = ТЗ[КолСтрок];
			
		Если (врСтрокаТЗ.Всего >= врСуммаЛимита) ИЛИ (врСтрокаТЗ.Всего = 0) Тогда
			ТЗ.Удалить(врСтрокаТЗ);
		КонецЕсли;	
						
		КолСтрок = КолСтрок - 1;
			
	КонецЦикла;	
			
	ТЗ.Сортировать("Менеджер, Партнер");
		
	Возврат ТЗ;
	
КонецФункции


// Лимит заказов для СВ


Функция ЗаказыНеВошедшиеВЛимит_СВ(врСписокМенеджеров, врДатаНачала, врДатаОкончания, врСуммаЛимита)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Период",         ОписаниеТипаДата(ЧастиДаты.Дата));
	ТЗ.Колонки.Добавить("Менеджер",       Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ.Колонки.Добавить("Партнер",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ.Колонки.Добавить("Петрушка", ОписаниеТипаЧисло(15,2));
	ТЗ.Колонки.Добавить("КПК", ОписаниеТипаЧисло(15,2));
	ТЗ.Колонки.Добавить("Всего", ОписаниеТипаЧисло(15,2));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ОргБонусТомск);
	Запрос.УстановитьПараметр("Менеджер",    врСписокМенеджеров);
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(врДатаНачала));
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(врДатаОкончания));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка
	               |ПОМЕСТИТЬ ВТ_Заказы
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Проведен
	               |	И ЗаказКлиента.Менеджер В(&Менеджер)
	               |	И ЗаказКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ЗаказКлиента.Организация <> &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Дата КАК Период,
	               |	РеализацияТоваровУслуг.Менеджер,
	               |	РеализацияТоваровУслуг.Партнер,
	               |	РеализацияТоваровУслуг.Ссылка,
	               |	РеализацияТоваровУслуг.СуммаДокумента,
	               |	РеализацияТоваровУслуг.ЗаказПетрушка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.ЗаказКлиента В
	               |			(ВЫБРАТЬ
	               |				ВТ_Заказы.Ссылка
	               |			ИЗ
	               |				ВТ_Заказы КАК ВТ_Заказы)
	               |	И РеализацияТоваровУслуг.Дата >= &НачПериода";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
								
		НовСтрока = ТЗ.Добавить();
		
		НовСтрока.Период         = Выборка.Период;
		НовСтрока.Менеджер       = Выборка.Менеджер;
		НовСтрока.Партнер        = Выборка.Партнер;
				
		врХарак = ПолучитьХарактеристикиЗаявки(Выборка.Ссылка);
						
		врСумма = врХарак.СуммаЗаявкиБезОборудования;
		
		Если Выборка.ЗаказПетрушка Тогда
			НовСтрока.Петрушка = врСумма;
			НовСтрока.КПК      = 0;
			НовСтрока.Всего    = врСумма;
		Иначе
			НовСтрока.Петрушка = 0;
			НовСтрока.КПК      = врСумма;
			НовСтрока.Всего    = врСумма;			
		КонецЕсли;	
		
		Если ИмяСервераМА = "Tomsk" Тогда
				
			Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(Выборка.Партнер) Тогда
					
				врОсновнаяТочка = Петров_ПолучитьОсновнуюТочкуПетрова(Выборка.Партнер);
			
				Если ЗначениеЗаполнено(врОсновнаяТочка) Тогда
					НовСтрока.Партнер = врОсновнаяТочка;					
				КонецЕсли;	
						
			КонецЕсли;	
			
		КонецЕсли;	
				
	КонецЦикла;	
			
	ТЗ.Свернуть("Период, Менеджер, Партнер", "Петрушка, КПК, Всего");
	
	КолСтрок = ТЗ.Количество() - 1;
	Пока КолСтрок >= 0 Цикл
			
		врСтрокаТЗ = ТЗ[КолСтрок];
			
		Если (врСтрокаТЗ.Всего >= врСуммаЛимита) ИЛИ (врСтрокаТЗ.Всего = 0) Тогда
			ТЗ.Удалить(врСтрокаТЗ);
		КонецЕсли;	
						
		КолСтрок = КолСтрок - 1;
			
	КонецЦикла;	
			
	ТЗ.Сортировать("Менеджер, Период УБЫВ, Партнер");
		
	Возврат ТЗ;
	
КонецФункции

			
Процедура СформироватьОтчет_ЛимитЗаказов_СВ(СписокСВ, НаименованиеРегиона) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
	
	врВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес", Истина, Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Контактная информация справочника ""Партнеры"""));
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ЛимитЗаказа");
	
	ОблШапка  = Макет.ПолучитьОбласть("Шапка");
	ОблЗагол  = Макет.ПолучитьОбласть("Заголовок");
	ОблСтрока = Макет.ПолучитьОбласть("Строка");
	ОблАгент  = Макет.ПолучитьОбласть("Агент");
		
	ТабДок.Вывести(ОблШапка);
	
	Для Каждого ТекСВ Из СписокСВ Цикл
		
		ОблЗагол.Параметры.Супервайзер = ТекСВ;
		ТабДок.Вывести(ОблЗагол);

		СписокМенеджеров = Новый СписокЗначений;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТекСВ);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ГруппыПользователейСостав.Пользователь
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
		               |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокМенеджеров.Добавить(Выборка.Пользователь);
		КонецЦикла;	
				
		КонПериода = ТекущаяДата();
		НачПериода = НачалоНедели(ТекущаяДата() - 7 * ДеньВСекундах);
		
		ТЗ = ЗаказыНеВошедшиеВЛимит_СВ(СписокМенеджеров, НачалоДня(НачПериода), КонецДня(КонПериода), 1500);
		
		ТЗМенеджеры = ТЗ.Скопировать();
		ТЗМенеджеры.Свернуть("Менеджер");
		ТЗМенеджеры.Сортировать("Менеджер");
		
		Для Каждого ТекМенеджер Из ТЗМенеджеры Цикл
			
			ОблАгент.Параметры.Агент = ТекМенеджер.Менеджер;
			ТабДок.Вывести(ОблАгент);			
		
			ТекущийДень = НачалоДня(КонПериода);
		
			Для Каждого ТекСтрока Из ТЗ Цикл
				
				Если ТекМенеджер.Менеджер = ТекСтрока.Менеджер Тогда
					
					ОблСтрока.Параметры.Дата     = Формат(ТекСтрока.Период, "ДФ=dd.MM.yyyy");
					ОблСтрока.Параметры.Менеджер = ТекСтрока.Менеджер;
					ОблСтрока.Параметры.Партнер  = ТекСтрока.Партнер;
					ОблСтрока.Параметры.Адрес    = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекСтрока.Партнер, врВидКИ);
					ОблСтрока.Параметры.Петрушка = ТекСтрока.Петрушка;
					ОблСтрока.Параметры.КПК      = ТекСтрока.КПК;
					ОблСтрока.Параметры.Всего    = ТекСтрока.Всего;
					
					ТабДок.Вывести(ОблСтрока);
						
				КонецЕсли;	
					
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;	
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Limit" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Лимит заказов) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Матрица логистов


Функция ТЗ_МатрицаДоставки(ЗонаДоставки)
	
	врМассивЗонДоставки = Новый Массив;
		
	ЗапросЗоныДоставки = Новый Запрос;
	ЗапросЗоныДоставки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	БизнесРегионы.Ссылка
	                           |ИЗ
	                           |	Справочник.БизнесРегионы КАК БизнесРегионы
	                           |ГДЕ
	                           |	БизнесРегионы.Родитель = &Родитель
	                           |	И НЕ БизнесРегионы.ПометкаУдаления";
	Для Каждого ТекЗонаДоставки Из ЗонаДоставки Цикл
		ЗапросЗоныДоставки.УстановитьПараметр("Родитель", ТекЗонаДоставки);
		ВыборкаЗоныДоставки = ЗапросЗоныДоставки.Выполнить().Выбрать();
		Пока ВыборкаЗоныДоставки.Следующий() Цикл
			врМассивЗонДоставки.Добавить(ВыборкаЗоныДоставки.Ссылка);
		КонецЦикла;	
	КонецЦикла;	
	
	ТЗ_Доставка = Новый ТаблицаЗначений;
	ТЗ_Доставка.Колонки.Добавить("ДеньНедели",  ОписаниеТипаСтрока("25"));
	ТЗ_Доставка.Колонки.Добавить("Направление", ОписаниеТипаСтрока("150"));
	
	ЗапросМатрица = Новый Запрос;
	ЗапросМатрица.Текст = "ВЫБРАТЬ
	                      |	МаршрутизацияДляЛогистов.ДеньНедели,
	                      |	МаршрутизацияДляЛогистов.Маршрут,
	                      |	МаршрутизацияДляЛогистов.ВремяСбора,
	                      |	МаршрутизацияДляЛогистов.Собирать,
	                      |	МаршрутизацияДляЛогистов.Направление,
	                      |	МаршрутизацияДляЛогистов.Направление1,
	                      |	МаршрутизацияДляЛогистов.Направление2
	                      |ИЗ
	                      |	РегистрСведений.МаршрутизацияДляЛогистов КАК МаршрутизацияДляЛогистов";
	ВыборкаМатрица = ЗапросМатрица.Выполнить().Выбрать();
	Пока ВыборкаМатрица.Следующий() Цикл
		
		Для Каждого ТекЗонаДоставки ИЗ врМассивЗонДоставки Цикл
			
			врФлагДобавления = Ложь;
			
			Если ВРег(СокрЛП(ВыборкаМатрица.Направление.Наименование)) = ВРег(СокрЛП(ТекЗонаДоставки.Наименование)) Тогда
				врФлагДобавления = Истина;
			КонецЕсли;	
				
			Если ВРег(СокрЛП(ВыборкаМатрица.Направление1.Наименование)) = ВРег(СокрЛП(ТекЗонаДоставки.Наименование)) Тогда
				врФлагДобавления = Истина;
			КонецЕсли;	
			
			Если ВРег(СокрЛП(ВыборкаМатрица.Направление2.Наименование)) = ВРег(СокрЛП(ТекЗонаДоставки.Наименование)) Тогда
				врФлагДобавления = Истина;
			КонецЕсли;	
			
			Если врФлагДобавления Тогда
				ТЗ_НоваяСтрока = ТЗ_Доставка.Добавить();
				ТЗ_НоваяСтрока.ДеньНедели  = ВыборкаМатрица.ДеньНедели;
				ТЗ_НоваяСтрока.Направление = ТекЗонаДоставки.Наименование;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТЗ_Доставка.Сортировать("ДеньНедели, Направление");
	
	ТЗ_Возврат = Новый ТаблицаЗначений;
	ТЗ_Возврат.Колонки.Добавить("ДеньНедели",  ОписаниеТипаСтрока("25"));
	ТЗ_Возврат.Колонки.Добавить("Направление", ОписаниеТипаСтрока("150"));
	
	врМассивДнейНедели = Новый Массив;
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Понедельник);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Вторник);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Среда);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Четверг);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Пятница);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Суббота);
	врМассивДнейНедели.Добавить(Перечисления.ДниНедели.Воскресенье);
	
	Для Каждого ТекДеньНедели Из врМассивДнейНедели Цикл
		
		СтрНаправление = "";
		
		Для Каждого ТекСтрокаДоставка Из ТЗ_Доставка Цикл
			
			Если СокрЛП(ТекСтрокаДоставка.ДеньНедели) = СокрЛП(ТекДеньНедели) Тогда
				СтрНаправление = СтрНаправление + ?(ПустаяСтрока(СтрНаправление), ТекСтрокаДоставка.Направление, ", " + ТекСтрокаДоставка.Направление);
			КонецЕсли;
			
		КонецЦикла;	
		
		НовСтрокаВозврат = ТЗ_Возврат.Добавить();
		НовСтрокаВозврат.ДеньНедели  = ТекДеньНедели;
		НовСтрокаВозврат.Направление = СтрНаправление;
		
	КонецЦикла;	
		
	Возврат ТЗ_Возврат;
	
КонецФункции
	

Процедура СформироватьОтчет_ДниПогрузки(НаименованиеРегиона, ЗонаДоставки) Экспорт
	
	ЗамерСтарт = ТекущаяДата();
		
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Отгрузка");
	
	ОблШапка       = Макет.ПолучитьОбласть("Шапка");
	ОблЗаголовок   = Макет.ПолучитьОбласть("Заголовок");
	ОблСтрока      = Макет.ПолучитьОбласть("Строка");
	
	ОблШапка.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);		
	
	СтрЗоныДоставки = "";
	Для Каждого ТекЗонаДоставки Из ЗонаДоставки Цикл
		СтрЗоныДоставки = СтрЗоныДоставки + ?(ПустаяСтрока(СтрЗоныДоставки), Строка(ТекЗонаДоставки), ", " + Строка(ТекЗонаДоставки));
	КонецЦикла;	
	
	ОблЗаголовок.Параметры.Супервайзер = СтрЗоныДоставки;
	ТабДок.Вывести(ОблЗаголовок);			
	
	врТЗ = ТЗ_МатрицаДоставки(ЗонаДоставки);
	
	Для Каждого ТекСтрокаТЗ Из врТЗ Цикл
		
		ОблСтрока.Параметры.Заполнить(ТекСтрокаТЗ);
		ТабДок.Вывести(ОблСтрока);
		
	КонецЦикла;	
		
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Pogruzka" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Погрузка) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


Процедура СформироватьОтчет_ЗаказыНаДоставкуСВ(врСВ)
	
	ЗамерСтарт = ТекущаяДата();
	
	врГруппаСкладовТомск = Справочники.Склады.НайтиПоНаименованию("Томск", Истина);
	
	ЗапросВес = Новый Запрос;
	ЗапросВес.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	РеализацияТоваровУслугТовары.Номенклатура,
	                  |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.Вес, 0) КАК ВесБрутто,
					  |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.ВесБрутто, 0) КАК ВесНетто,
	                  |	РеализацияТоваровУслугТовары.Количество
	                  |ИЗ
	                  |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                  |ГДЕ
	                  |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";	
	
	врТЗ = Новый ТаблицаЗначений;
	врТЗ.Колонки.Добавить("БР",            Новый ОписаниеТипов("СправочникСсылка.БизнесРегионы"));
	врТЗ.Колонки.Добавить("Агент",         Новый ОписаниеТипов("СправочникСсылка.Пользователи"));                  
	врТЗ.Колонки.Добавить("Точка",         Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врТЗ.Колонки.Добавить("Количество",    ОписаниеТипаЧисло(3));
	врТЗ.Колонки.Добавить("Вес",           ОписаниеТипаЧисло(15,4));
	врТЗ.Колонки.Добавить("Сумма",         ОписаниеТипаЧисло(15,2));
	врТЗ.Колонки.Добавить("ТР_Количество", ОписаниеТипаЧисло(3));
	врТЗ.Колонки.Добавить("ТР_Вес",        ОписаниеТипаЧисло(15,4));
	врТЗ.Колонки.Добавить("ТР_Сумма",      ОписаниеТипаЧисло(15,2));
	врТЗ.Колонки.Добавить("Склад",         ОписаниеТипаСтрока("15"));
	
	врТЗ_ОБ = Новый ТаблицаЗначений;
	врТЗ_ОБ.Колонки.Добавить("БР",            Новый ОписаниеТипов("СправочникСсылка.БизнесРегионы"));
	врТЗ_ОБ.Колонки.Добавить("Агент",         Новый ОписаниеТипов("СправочникСсылка.Пользователи")); 
	врТЗ_ОБ.Колонки.Добавить("Точка",         Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врТЗ_ОБ.Колонки.Добавить("Количество",    ОписаниеТипаЧисло(3));
	
	МассивСтатусовЗаданийНаПереозку = Новый Массив;
	МассивСтатусовЗаданийНаПереозку.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыт);
	МассивСтатусовЗаданийНаПереозку.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлен);
	
	Запрос = Новый Запрос;                               
	Запрос.УстановитьПараметр("СВ",              врСВ);
	Запрос.УстановитьПараметр("НачПериода",      ТекущаяДата() - 60*60*24*10);
	Запрос.УстановитьПараметр("КонПериода",      ТекущаяДата() + 60*60*24*10);
	Запрос.УстановитьПараметр("НачДатаДоставки", ТекущаяДата() - 60*60*24*30);
	Запрос.УстановитьПараметр("Статус",          МассивСтатусовЗаданийНаПереозку);
	Если ТипЗнч(врСВ) = ТипЗнч(Справочники.ГруппыПользователей.ПустаяСсылка()) Тогда
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыПользователейСостав.Пользователь
	               |ПОМЕСТИТЬ Пользователи
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка = &СВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион КАК БизнесРегион
	               |ПОМЕСТИТЬ БР
	               |ИЗ
	               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |ГДЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель В
	               |			(ВЫБРАТЬ
	               |				Пользователи.Пользователь
	               |			ИЗ
	               |				Пользователи КАК Пользователи)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	               |ПОМЕСТИТЬ ОтправленныеРТУ
	               |ИЗ
	               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |ГДЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата >= &НачДатаДоставки
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус В(&Статус)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка,
				   |	РеализацияТоваровУслуг.Склад.Наименование КАК Склад,
				   |	РеализацияТоваровУслуг.Склад.Родитель КАК СкладРодитель,
	               |	РеализацияТоваровУслуг.Партнер,
	               |	РеализацияТоваровУслуг.Партнер.БизнесРегион КАК БизнесРегион,
	               |	РеализацияТоваровУслуг.Менеджер
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И РеализацияТоваровУслуг.Партнер.БизнесРегион В
	               |			(ВЫБРАТЬ
	               |				БР.БизнесРегион
	               |			ИЗ
	               |				БР КАК БР
	               |			ГДЕ
	               |				БР.БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка))
	               |	И НЕ РеализацияТоваровУслуг.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ОтправленныеРТУ.Распоряжение
	               |				ИЗ
	               |					ОтправленныеРТУ КАК ОтправленныеРТУ)";
	Иначе
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион КАК БизнесРегион
	               |ПОМЕСТИТЬ БР
	               |ИЗ
	               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |ГДЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель = &СВ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	               |ПОМЕСТИТЬ ОтправленныеРТУ
	               |ИЗ
	               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |ГДЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата >= &НачДатаДоставки
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус В(&Статус)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка,
	               |	РеализацияТоваровУслуг.Склад.Наименование КАК Склад,
	               |	РеализацияТоваровУслуг.Склад.Родитель КАК СкладРодитель,
	               |	РеализацияТоваровУслуг.Партнер,
	               |	РеализацияТоваровУслуг.Партнер.БизнесРегион КАК БизнесРегион,
	               |	РеализацияТоваровУслуг.Менеджер
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И РеализацияТоваровУслуг.Партнер.БизнесРегион В
	               |			(ВЫБРАТЬ
	               |				БР.БизнесРегион
	               |			ИЗ
	               |				БР КАК БР
	               |			ГДЕ
	               |				БР.БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка))
	               |	И НЕ РеализацияТоваровУслуг.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ОтправленныеРТУ.Распоряжение
	               |				ИЗ
	               |					ОтправленныеРТУ КАК ОтправленныеРТУ)";	
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врХарЗаявки = ПолучитьХарактеристикиЗаявки(Выборка.Ссылка);
		
		врНовСтрока = врТЗ.Добавить();
		
		врНовСтрока.БР    = Выборка.БизнесРегион;
		врНовСтрока.Точка = Выборка.Партнер;
		врНовСтрока.Агент = Выборка.Менеджер;
				
		врВесФактуры = 0;
		ЗапросВес.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		ВыборкаВес = ЗапросВес.Выполнить().Выбрать();
		Пока ВыборкаВес.Следующий() Цикл
			врВесФактуры = врВесФактуры + ВыборкаВес.Количество * ВыборкаВес.ВесБрутто;
		КонецЦикла;	
		
		Если Выборка.СкладРодитель = врГруппаСкладовТомск Тогда
			врНовСтрока.Вес      = врВесФактуры;
			врНовСтрока.Сумма    = врХарЗаявки.СуммаЗаявкиБезОборудования;
			врНовСтрока.Склад    = "Томск";
		Иначе
			врНовСтрока.ТР_Вес   = врВесФактуры;
			врНовСтрока.ТР_Сумма = врХарЗаявки.СуммаЗаявкиБезОборудования;			
			врНовСтрока.Склад    = "Транзит";
		КонецЕсли;
		
		НовСтрока_ОБ = врТЗ_ОБ.Добавить();
		НовСтрока_ОБ.БР    = Выборка.БизнесРегион;
		НовСтрока_ОБ.Агент = Выборка.Менеджер;
		НовСтрока_ОБ.Точка = Выборка.Партнер;
		
	КонецЦикла;	
	
	врТЗ_ОБ.Свернуть("БР, Точка, Агент", "Количество");
	
	Для Каждого ТекСтрока_ОБ Из врТЗ_ОБ Цикл
		ТекСтрока_ОБ.Количество = 1;
	КонецЦикла;
		
	врТЗ_ОБ.Свернуть("БР, Агент", "Количество");
	
	врТЗ_ОБ_БР = врТЗ_ОБ.Скопировать();
	врТЗ_ОБ_БР.Свернуть("БР", "Количество");
	
	врТЗ.Свернуть("БР, Точка, Агент, Склад", "Количество, Вес, Сумма, ТР_Количество, ТР_Вес, ТР_Сумма");
	
	Для Каждого ТекСтрока Из врТЗ Цикл
		Если ТекСтрока.Склад = "Томск" Тогда
			ТекСтрока.Количество = 1;
		Иначе
			ТекСтрока.ТР_Количество = 1;
		КонецЕсли;	
	КонецЦикла;
	
	врТЗ.Свернуть("БР, Агент", "Количество, Вес, Сумма, ТР_Количество, ТР_Вес, ТР_Сумма");
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ЗаказыБР_Новый");
	
	ОблШапка    = Макет.ПолучитьОбласть("Шапка");
	ОблЗагол    = Макет.ПолучитьОбласть("Заголовок");
	ОблСтрока   = Макет.ПолучитьОбласть("Строка");
	ОблСтрокаБР = Макет.ПолучитьОбласть("СтрокаБР");
	ОблПодвал   = Макет.ПолучитьОбласть("Подвал");
	
	ОблШапка.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);
	
	ОблЗагол.Параметры.Супервайзер = Строка(врСВ);
	ТабДок.Вывести(ОблЗагол);
		
	врТЗ_БР = врТЗ.Скопировать();
	врТЗ_БР.Свернуть("БР", "Количество, Вес, Сумма, ТР_Количество, ТР_Вес, ТР_Сумма");
	врТЗ_БР.Сортировать("БР");
	
	Для Каждого ТекСтрокаБР из врТЗ_БР Цикл
			
		ОблСтрокаБР.Параметры.БизнесРегион  = Строка(ТекСтрокаБР.БР);
		ОблСтрокаБР.Параметры.Количество    = ТекСтрокаБР.Количество;
		ОблСтрокаБР.Параметры.Вес           = ПривестиЧислоКСтроке(ТекСтрокаБР.Вес, 15, 4);
		ОблСтрокаБР.Параметры.Сумма         = ПривестиЧислоКСтроке(ТекСтрокаБР.Сумма, 15, 2);
		ОблСтрокаБР.Параметры.ТР_Количество = ТекСтрокаБР.ТР_Количество;
		ОблСтрокаБР.Параметры.ТР_Вес        = ПривестиЧислоКСтроке(ТекСтрокаБР.ТР_Вес, 15, 4);
		ОблСтрокаБР.Параметры.ТР_Сумма      = ПривестиЧислоКСтроке(ТекСтрокаБР.ТР_Сумма, 15, 2);	
		
		врКоличествоТТ_БР = 0;
		врПоиск_БР = врТЗ_ОБ_БР.НайтиСтроки(Новый Структура("БР", ТекСтрокаБР.БР));
		Если врПоиск_БР.Количество() > 0 Тогда
			врКоличествоТТ_БР = врПоиск_БР[0].Количество;
		КонецЕсли;	
		
		ОблСтрокаБР.Параметры.ОБ_Количество = врКоличествоТТ_БР;
		ОблСтрокаБР.Параметры.ОБ_Вес        = ПривестиЧислоКСтроке(ТекСтрокаБР.Вес + ТекСтрокаБР.ТР_Вес, 15, 4);
		ОблСтрокаБР.Параметры.ОБ_Сумма      = ПривестиЧислоКСтроке(ТекСтрокаБР.Сумма + ТекСтрокаБР.ТР_Сумма, 15, 2);	
			
		ТабДок.Вывести(ОблСтрокаБР);
		
		Для Каждого ТекСтрока Из врТЗ Цикл
			
			Если ТекСтрока.БР = ТекСтрокаБР.БР Тогда
				
				ОблСтрока.Параметры.Агент         = Строка(ТекСтрока.Агент);
				ОблСтрока.Параметры.Количество    = ТекСтрока.Количество;
				ОблСтрока.Параметры.Вес           = ПривестиЧислоКСтроке(ТекСтрока.Вес, 15, 4);			
				ОблСтрока.Параметры.Сумма         = ПривестиЧислоКСтроке(ТекСтрока.Сумма, 15, 2);			
				ОблСтрока.Параметры.ТР_Количество = ТекСтрока.ТР_Количество;
				ОблСтрока.Параметры.ТР_Вес        = ПривестиЧислоКСтроке(ТекСтрока.ТР_Вес, 15, 4);			
				ОблСтрока.Параметры.ТР_Сумма      = ПривестиЧислоКСтроке(ТекСтрока.ТР_Сумма, 15, 2);	
				
				врКоличествоТТ = 0;
				врПоиск = врТЗ_ОБ.НайтиСтроки(Новый Структура("БР, Агент", ТекСтрока.БР, ТекСтрока.Агент));
				Если врПоиск.Количество() > 0 Тогда
					врКоличествоТТ = врПоиск[0].Количество;
				КонецЕсли;	
				
				ОблСтрока.Параметры.ОБ_Количество = врКоличествоТТ;
				ОблСтрока.Параметры.ОБ_Вес        = ПривестиЧислоКСтроке(ТекСтрока.Вес + ТекСтрока.ТР_Вес, 15, 4);			
				ОблСтрока.Параметры.ОБ_Сумма      = ПривестиЧислоКСтроке(ТекСтрока.Сумма + ТекСтрока.ТР_Сумма, 15, 2);						
				
				ТабДок.Вывести(ОблСтрока);
				
			КонецЕсли;	
			
		КонецЦикла;
				
	КонецЦикла;	
	
	ТабДок.Вывести(ОблПодвал);
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	врСВИмя = СокрЛП(врСВ);
	
	врФамилия = Лев(врСВИмя, СтрНайти(врСВИмя, " "));
	
	Если ТипЗнч(врСВ) = ТипЗнч(Справочники.ГруппыПользователей.ПустаяСсылка()) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Orders" + СокрЛП(ИдКПК) + "_" + Транслит(врФамилия) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	Иначе
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Orders" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);		
	КонецЕсли;	
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Заказы) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры


Процедура СформироватьОтчет_ЗаказыНаДоставкуСВ_OLD(врСВ)
	
	ЗамерСтарт = ТекущаяДата();
	
	врГруппаСкладовТомск = Справочники.Склады.НайтиПоНаименованию("Томск", Истина);
	
	ЗапросВес = Новый Запрос;
	ЗапросВес.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	РеализацияТоваровУслугТовары.Номенклатура,
	                  |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.Вес, 0) КАК ВесБрутто,
					  |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.ВесБрутто, 0) КАК ВесНетто,
	                  |	РеализацияТоваровУслугТовары.Количество
	                  |ИЗ
	                  |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                  |ГДЕ
	                  |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";	
	
	врТЗ = Новый ТаблицаЗначений;
	врТЗ.Колонки.Добавить("СкладОтгрузки", ОписаниеТипаСтрока(25));
	врТЗ.Колонки.Добавить("БР",            Новый ОписаниеТипов("СправочникСсылка.БизнесРегионы"));
	врТЗ.Колонки.Добавить("Агент",         Новый ОписаниеТипов("СправочникСсылка.Пользователи"));                  
	врТЗ.Колонки.Добавить("Точка",         Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врТЗ.Колонки.Добавить("Количество",    ОписаниеТипаЧисло(3));
	врТЗ.Колонки.Добавить("Вес",           ОписаниеТипаЧисло(15,4));
	врТЗ.Колонки.Добавить("Сумма",         ОписаниеТипаЧисло(15,2));
	
	МассивСтатусовЗаданийНаПереозку = Новый Массив;
	МассивСтатусовЗаданийНаПереозку.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыт);
	МассивСтатусовЗаданийНаПереозку.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлен);
	
	Запрос = Новый Запрос;                               
	Запрос.УстановитьПараметр("СВ",              врСВ);
	Запрос.УстановитьПараметр("НачПериода",      ТекущаяДата() - 60*60*24*10);
	Запрос.УстановитьПараметр("КонПериода",      ТекущаяДата() + 60*60*24*10);
	Запрос.УстановитьПараметр("НачДатаДоставки", ТекущаяДата() - 60*60*24*30);
	Запрос.УстановитьПараметр("Статус",          МассивСтатусовЗаданийНаПереозку);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыПользователейСостав.Пользователь
	               |ПОМЕСТИТЬ Пользователи
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка = &СВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион КАК БизнесРегион
	               |ПОМЕСТИТЬ БР
	               |ИЗ
	               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |ГДЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель В
	               |			(ВЫБРАТЬ
	               |				Пользователи.Пользователь
	               |			ИЗ
	               |				Пользователи КАК Пользователи)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.БизнесРегион
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	               |ПОМЕСТИТЬ ОтправленныеРТУ
	               |ИЗ
	               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |ГДЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата >= &НачДатаДоставки
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус В(&Статус)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка,
				   |	РеализацияТоваровУслуг.Склад.Наименование КАК Склад,
				   |	РеализацияТоваровУслуг.Склад.Родитель КАК СкладРодитель,
	               |	РеализацияТоваровУслуг.Партнер,
	               |	РеализацияТоваровУслуг.Партнер.БизнесРегион КАК БизнесРегион,
	               |	РеализацияТоваровУслуг.Менеджер
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И РеализацияТоваровУслуг.Партнер.БизнесРегион В
	               |			(ВЫБРАТЬ
	               |				БР.БизнесРегион
	               |			ИЗ
	               |				БР КАК БР
	               |			ГДЕ
	               |				БР.БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка))
	               |	И НЕ РеализацияТоваровУслуг.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ОтправленныеРТУ.Распоряжение
	               |				ИЗ
	               |					ОтправленныеРТУ КАК ОтправленныеРТУ)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врХарЗаявки = ПолучитьХарактеристикиЗаявки(Выборка.Ссылка);
		
		врНовСтрока = врТЗ.Добавить();
		Если Выборка.СкладРодитель = врГруппаСкладовТомск Тогда
			врНовСтрока.СкладОтгрузки = "ЦЕНТРАЛЬНЫЙ СКЛАД";
		Иначе
			врНовСтрока.СкладОтгрузки = Выборка.Склад;
		КонецЕсли;
		врНовСтрока.БР    = Выборка.БизнесРегион;
		врНовСтрока.Точка = Выборка.Партнер;
		врНовСтрока.Агент = Выборка.Менеджер;
		врНовСтрока.Сумма = врХарЗаявки.СуммаЗаявкиБезОборудования;
		
		врВесФактуры = 0;
		ЗапросВес.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		ВыборкаВес = ЗапросВес.Выполнить().Выбрать();
		Пока ВыборкаВес.Следующий() Цикл
			врВесФактуры = врВесФактуры + ВыборкаВес.Количество * ВыборкаВес.ВесБрутто;
		КонецЦикла;	
		
		врНовСтрока.Вес  = врВесФактуры;
		
	КонецЦикла;	
	
	врТЗ.Свернуть("СкладОтгрузки, БР, Точка, Агент", "Количество, Вес, Сумма");
	
	Для Каждого ТекСтрока Из врТЗ Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	
	врТЗ.Свернуть("СкладОтгрузки, БР, Агент", "Количество, Вес, Сумма");
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ЗаказыБР");
	
	ОблШапка    = Макет.ПолучитьОбласть("Шапка");
	ОблЗагол    = Макет.ПолучитьОбласть("Заголовок");
	ОблСтрока   = Макет.ПолучитьОбласть("Строка");
	ОблСтрокаБР = Макет.ПолучитьОбласть("СтрокаБР");
	ОблСтрокаТР = Макет.ПолучитьОбласть("СтрокаТранзит");
	
	ОблШапка.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);
	
	ОблЗагол.Параметры.Супервайзер = Строка(врСВ);
	ТабДок.Вывести(ОблЗагол);
	
	
	врТЗ_ТР = врТЗ.Скопировать();
	врТЗ_ТР.Свернуть("СкладОтгрузки", "Количество, Вес, Сумма");
	врТЗ_ТР.Сортировать("СкладОтгрузки");
	
	врТЗ_БР = врТЗ.Скопировать();
	врТЗ_БР.Свернуть("СкладОтгрузки, БР", "Количество, Вес, Сумма");
	врТЗ_БР.Сортировать("БР");
	
	Для Каждого ТекСтрокаТР Из врТЗ_ТР Цикл
		
		ОблСтрокаТР.Параметры.СкладОтгрузки = Строка(ТекСтрокаТР.СкладОтгрузки);
		ОблСтрокаТР.Параметры.Количество    = ТекСтрокаТР.Количество;
		ОблСтрокаТР.Параметры.Вес           = ТекСтрокаТР.Вес;
		ОблСтрокаТР.Параметры.Сумма         = ТекСтрокаТР.Сумма;
		ТабДок.Вывести(ОблСтрокаТР);		
		
		Для Каждого ТекСтрокаБР из врТЗ_БР Цикл
			
			Если ТекСтрокаБР.СкладОтгрузки = ТекСтрокаТР.СкладОтгрузки Тогда
		
				ОблСтрокаБР.Параметры.БизнесРегион = Строка(ТекСтрокаБР.БР);
				ОблСтрокаБР.Параметры.Количество   = ТекСтрокаБР.Количество;
				ОблСтрокаБР.Параметры.Вес          = ТекСтрокаБР.Вес;
				ОблСтрокаБР.Параметры.Сумма        = ТекСтрокаБР.Сумма;
				ТабДок.Вывести(ОблСтрокаБР);
		
				Для Каждого ТекСтрока Из врТЗ Цикл
					Если (ТекСтрока.БР = ТекСтрокаБР.БР) И (ТекСтрока.СкладОтгрузки = ТекСтрокаТР.СкладОтгрузки) Тогда
						ОблСтрока.Параметры.Агент      = Строка(ТекСтрока.Агент);
						ОблСтрока.Параметры.Количество = ТекСтрока.Количество;
						ОблСтрока.Параметры.Вес        = ТекСтрока.Вес;			
						ОблСтрока.Параметры.Сумма      = ТекСтрока.Сумма;			
						ТабДок.Вывести(ОблСтрока);
					КонецЕсли;	
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	врСВИмя = СокрЛП(врСВ);
	
	врФамилия = Лев(врСВИмя, СтрНайти(врСВИмя, " "));
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Orders" + СокрЛП(ИдКПК) + "_" + Транслит(врФамилия) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Заказы) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры


Процедура СформироватьОтчет_ТранспортныеРасходы(БизнесРегион, НаименованиеРегиона)
	
	ЗамерСтарт = ТекущаяДата();
	
	врБР_Алтай      = Справочники.БизнесРегионы.НайтиПоНаименованию("АЛТАЙ",       Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Куйбышев   = Справочники.БизнесРегионы.НайтиПоНаименованию("КУЙБЫШЕВ",    Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Барнаул    = Справочники.БизнесРегионы.НайтиПоНаименованию("БАРНАУЛ",     Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Кемерово   = Справочники.БизнесРегионы.НайтиПоНаименованию("Кемерово",    Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Красноярск = Справочники.БизнесРегионы.НайтиПоНаименованию("Красноярск",  Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_НСК        = Справочники.БизнесРегионы.НайтиПоНаименованию("Новосибирск", Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Хакасия    = Справочники.БизнесРегионы.НайтиПоНаименованию("ХАКАСИЯ",     Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	
	СписокБР = Новый Массив;
	
	ЗапросБР = Новый Запрос;
	ЗапросБР.УстановитьПараметр("Ссылка", БизнесРегион);
	ЗапросБР.Текст = "ВЫБРАТЬ
	                 |	БизнесРегионы.Ссылка
	                 |ИЗ
	                 |	Справочник.БизнесРегионы КАК БизнесРегионы
	                 |ГДЕ
	                 |	БизнесРегионы.Ссылка В ИЕРАРХИИ(&Ссылка)";
	ВыборкаБР = ЗапросБР.Выполнить().Выбрать();
	Пока ВыборкаБР.Следующий() Цикл
		СписокБР.Добавить(ВыборкаБР.Ссылка);
	КонецЦикла;	
	
	Если БизнесРегион = врБР_НСК Тогда
		
		ЗапросБР.УстановитьПараметр("Ссылка", врБР_Куйбышев);
		ВыборкаБР = ЗапросБР.Выполнить().Выбрать();
		Пока ВыборкаБР.Следующий() Цикл
			СписокБР.Добавить(ВыборкаБР.Ссылка);
		КонецЦикла;	
		
		ЗапросБР.УстановитьПараметр("Ссылка", врБР_Алтай);
		ВыборкаБР = ЗапросБР.Выполнить().Выбрать();
		Пока ВыборкаБР.Следующий() Цикл
			СписокБР.Добавить(ВыборкаБР.Ссылка);
		КонецЦикла;			

		ЗапросБР.УстановитьПараметр("Ссылка", врБР_НСК);
		ВыборкаБР = ЗапросБР.Выполнить().Выбрать();
		Пока ВыборкаБР.Следующий() Цикл
			СписокБР.Добавить(ВыборкаБР.Ссылка);
		КонецЦикла;			
		
	КонецЕсли;	
	
	врБР_Кемерово   = Справочники.БизнесРегионы.НайтиПоНаименованию("Кемерово",    Истина, Справочники.БизнесРегионы.ПустаяСсылка());
	врБР_Красноярск = Справочники.БизнесРегионы.НайтиПоНаименованию("Красноярск",  Истина, Справочники.БизнесРегионы.ПустаяСсылка());

	БР_Мариинск = Справочники.БизнесРегионы.НайтиПоНаименованию("Мариинск ", Истина, врБР_Кемерово);
	БР_Тисуль   = Справочники.БизнесРегионы.НайтиПоНаименованию("Тисуль",    Истина, врБР_Кемерово);
	
	Если БизнесРегион = врБР_Красноярск Тогда
		СписокБР.Добавить(БР_Мариинск);
		СписокБР.Добавить(БР_Тисуль);
	ИначеЕсли БизнесРегион = врБР_Кемерово Тогда
		врПоз = СписокБР.Найти(БР_Мариинск);
		Если врПоз <> Неопределено Тогда
			СписокБР.Удалить(врПоз);
		КонецЕсли;	
		врПоз = СписокБР.Найти(БР_Тисуль);
		Если врПоз <> Неопределено Тогда
			СписокБР.Удалить(врПоз);
		КонецЕсли;			
	КонецЕсли;	
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ЗатратыНаДоставку");
	
	ОблДатаОтчета  = Макет.ПолучитьОбласть("ДатаОтчета");	
	ОблШапка       = Макет.ПолучитьОбласть("Шапка");
	ОблСтрока      = Макет.ПолучитьОбласть("Строка");
	ОблИтоги       = Макет.ПолучитьОбласть("Итоги");
	
	ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ОблДатаОтчета.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблДатаОтчета);
	
	ТекДата = НачалоМесяца(ТекущаяДата());
	
	врЧислоМесяцев = 3;
	
	Для Сч = 1 По врЧислоМесяцев Цикл
		
		ОблШапка.Параметры.ДатаОтчета = ВРег(БизнесРегион) + " - " + Формат(ТекДата, "ДФ='MMMM yyyy ""г.""'");
		
		ТабДок.Вывести(ОблШапка);
		
		врИтогоТоннаж        = 0;
		врИтогоСуммаЗаявок   = 0;
		врИтогоСуммаДоставки = 0;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесРегион", СписокБР);
		Запрос.УстановитьПараметр("НачПериода",   НачалоМесяца(ТекДата));
		Запрос.УстановитьПараметр("КонПериода",   КонецМесяца(ТекДата));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаданиеНаПеревозку.Ссылка КАК ЗаданиеНаПеревозку,
		               |	ЗаданиеНаПеревозку.СуммаДоставки,
		               |	ЗаданиеНаПеревозку.Комментарий,
		               |	ЗаданиеНаПеревозку.Километраж * ЗаданиеНаПеревозку.Тариф КАК СуммаРасчет,
		               |	ЗаданиеНаПеревозку.Тариф,
		               |	ЗаданиеНаПеревозку.Километраж,
		               |	ЗаданиеНаПеревозку.Вес
		               |ПОМЕСТИТЬ втЗаданияНаПеревозку
		               |ИЗ
		               |	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		               |ГДЕ
		               |	ЗаданиеНаПеревозку.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаданиеНаПеревозку.СуммаДоставки > 0
		               |	И ЗаданиеНаПеревозку.Проведен
		               |	И ЗаданиеНаПеревозку.Распоряжения.Распоряжение.Партнер.БизнесРегион В (&БизнесРегион)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПоступлениеУслугПрочихАктивов.Ссылка КАК Акт,
		               |	ПоступлениеУслугПрочихАктивов.ДокументОснование
		               |ПОМЕСТИТЬ втАкты
		               |ИЗ
		               |	Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
		               |ГДЕ
		               |	ПоступлениеУслугПрочихАктивов.Проведен
		               |	И ПоступлениеУслугПрочихАктивов.ДокументОснование В
		               |			(ВЫБРАТЬ
		               |				втЗаданияНаПеревозку.ЗаданиеНаПеревозку
		               |			ИЗ
		               |				втЗаданияНаПеревозку КАК втЗаданияНаПеревозку)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втЗаданияНаПеревозку.СуммаДоставки,
		               |	втЗаданияНаПеревозку.Комментарий,
		               |	втЗаданияНаПеревозку.ЗаданиеНаПеревозку,
		               |	втАкты.Акт,
		               |	втЗаданияНаПеревозку.СуммаРасчет,
		               |	втЗаданияНаПеревозку.Тариф,
		               |	втЗаданияНаПеревозку.Километраж,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(втАкты.Акт, 0) = 0
		               |			ТОГДА ""СОБСТВЕННОЕ""
		               |		ИНАЧЕ ""НАЕМНОЕ""
		               |	КОНЕЦ КАК Вид,
		               |	втЗаданияНаПеревозку.ЗаданиеНаПеревозку.Дата КАК ДатаМаршрута,
		               |	втЗаданияНаПеревозку.Вес
		               |ИЗ
		               |	втЗаданияНаПеревозку КАК втЗаданияНаПеревозку
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втАкты КАК втАкты
		               |		ПО втЗаданияНаПеревозку.ЗаданиеНаПеревозку = втАкты.ДокументОснование
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаМаршрута";
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
						
			врКомментарий = ВРег(СокрЛП(Выборка.ЗаданиеНаПеревозку.Комментарий));
			
			Если СтрЧислоВхождений(врКомментарий, "СЕТИНОВОСИБ") > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрЧислоВхождений(врКомментарий, "ЛЕНТА") > 0 Тогда
				Продолжить;
			КонецЕсли;				
	
			врСуммаЗаявок = 0;
			врВесТранзит  = 0;
		
			ЗапросПараметрыЗадания = Новый Запрос;
			ЗапросПараметрыЗадания.УстановитьПараметр("Ссылка", Выборка.ЗаданиеНаПеревозку);
			ЗапросПараметрыЗадания.Текст = "ВЫБРАТЬ
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
			                               |ИЗ
			                               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
			                               |ГДЕ
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
			                               |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг";
			ВыборкаПараметрыЗадания = ЗапросПараметрыЗадания.Выполнить().Выбрать();
			Пока ВыборкаПараметрыЗадания.Следующий() Цикл
				ХаракЗаявки  = ПолучитьХарактеристикиЗаявки(ВыборкаПараметрыЗадания.Распоряжение);
				врСуммаЗаявок = врСуммаЗаявок + ХаракЗаявки.СуммаЗаявкиБезОборудования;
			КонецЦикла;	
			
			// ТРАНЗИТ
			
			врКомментарий = СокрЛП(Выборка.ЗаданиеНаПеревозку.Комментарий);
			
			ЗапросПараметрыЗадания = Новый Запрос;
			ЗапросПараметрыЗадания.УстановитьПараметр("Комментарий", "%" + врКомментарий + "%");
			ЗапросПараметрыЗадания.УстановитьПараметр("НачПериода",  НачалоДня(Выборка.ЗаданиеНаПеревозку.Дата));
			ЗапросПараметрыЗадания.УстановитьПараметр("КонПериода",  КонецДня(Выборка.ЗаданиеНаПеревозку.Дата));
			ЗапросПараметрыЗадания.Текст = "ВЫБРАТЬ
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Комментарий,
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Вес
			                               |ИЗ
			                               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
			                               |ГДЕ
			                               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
			                               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
			                               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
			                               |	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Комментарий ПОДОБНО &Комментарий";
			
			ВыборкаПараметрыЗадания = ЗапросПараметрыЗадания.Выполнить().Выбрать();
			Пока ВыборкаПараметрыЗадания.Следующий() Цикл
				
				врКомЗадания = СокрЛП(ВРег(ВыборкаПараметрыЗадания.Комментарий));
				Если (СтрЧислоВхождений(врКомЗадания, "ТРАНЗИТ") > 0) И (СтрЧислоВхождений(врКомЗадания, ВРег(врКомментарий)) > 0) И (СтрЧислоВхождений(врКомЗадания, "ОБЪЕДИНЕННОЕ") = 0) Тогда
					ХаракЗаявки  = ПолучитьХарактеристикиЗаявки(ВыборкаПараметрыЗадания.Распоряжение);
					врСуммаЗаявок = врСуммаЗаявок + ХаракЗаявки.СуммаЗаявкиБезОборудования;
					Если врВесТранзит = 0 Тогда
						врВесТранзит  = ВыборкаПараметрыЗадания.Вес;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;				
					
			ПроцентЗатрат = 0;
			Если врСуммаЗаявок > 0 Тогда
				ПроцентЗатрат = Выборка.СуммаДоставки * 100 / врСуммаЗаявок;
			КонецЕсли;	
		
			ОблСтрока.Параметры.ДатаМаршрута  = Формат(Выборка.ДатаМаршрута, "ДФ=dd.MM.yyyy");
			ОблСтрока.Параметры.Маршрут       = СокрЛП(Выборка.Комментарий);
			ОблСтрока.Параметры.ВидТС 	      = СокрЛП(Выборка.Вид);
			ОблСтрока.Параметры.Километраж    = ПривестиЧислоКСтроке(Выборка.Километраж, 14, 0);
			ОблСтрока.Параметры.Тариф         = ПривестиЧислоКСтроке(Выборка.Тариф, 14, 2);
			ОблСтрока.Параметры.СуммаДоставки = ПривестиЧислоКСтроке(Выборка.СуммаДоставки, 14, 2);
			ОблСтрока.Параметры.Тоннаж        = ПривестиЧислоКСтроке(Выборка.Вес + врВесТранзит, 10, 4);
			ОблСтрока.Параметры.СуммаЗаявок   = ПривестиЧислоКСтроке(врСуммаЗаявок, 14, 2);		
			ОблСтрока.Параметры.ПроцентЗатрат = ПривестиЧислоКСтроке(ПроцентЗатрат, 14, 2);		
		
			ТабДок.Вывести(ОблСтрока);	
			
			врКомм = ВРег(Выборка.Комментарий);
			Если (СтрЧислоВхождений(врКомм, "ОБЪЕДИНЕННОЕ") = 0) И (СтрЧислоВхождений(врКомм, "ОБЩИЙ") = 0) Тогда
				врИтогоТоннаж        = врИтогоТоннаж + Выборка.Вес + врВесТранзит;
				врИтогоСуммаЗаявок   = врИтогоСуммаЗаявок + врСуммаЗаявок;
			КонецЕсли;
			
			врИтогоСуммаДоставки = врИтогоСуммаДоставки + Выборка.СуммаДоставки;
		
		КонецЦикла;	
		
		врИтогоПроцент = 0;
		Если врИтогоСуммаЗаявок <> 0 Тогда
			врИтогоПроцент = врИтогоСуммаДоставки * 100 / врИтогоСуммаЗаявок;
		КонецЕсли;	
		
		ОблИтоги.Параметры.Тоннаж        = ПривестиЧислоКСтроке(врИтогоТоннаж, 10, 4);
		ОблИтоги.Параметры.СуммаЗаявок   = ПривестиЧислоКСтроке(врИтогоСуммаЗаявок, 14, 2);
		ОблИтоги.Параметры.СуммаДоставки = ПривестиЧислоКСтроке(врИтогоСуммаДоставки, 14, 2);
		ОблИтоги.Параметры.ПроцентЗатрат = ПривестиЧислоКСтроке(врИтогоПроцент, 14, 2);
		
		ТабДок.Вывести(ОблИтоги);
		
		ТабДок.Вывести(ОблРазделитель);
		
		ТекДата = ДобавитьМесяц(ТекДата, -1);
		
	КонецЦикла;	
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Transport_" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	Если (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Зиганшина Виктория Валерьевна")) Тогда
		ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\EXCEL_Transport_" + СокрЛП(НаименованиеРегиона) + СокрЛП(ИдКПК) + ".xls", ТипФайлаТабличногоДокумента.XLS);
	КонецЕсли;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Затраты на доставку) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


Функция БонусАгента(врАгент, НачПериода, КонПериода)
	
	// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
	//Газ40    = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
	Газ40 = аян_ОбщийМодульСерверПовтИсп.Газ40();
	Газ40Аттест = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест();
	// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
	
	
	СуммаПродаж = 0;
	СуммаБонуса = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("ОргБонус",   Справочники.Организации.НайтиПоНаименованию("Бонус томск"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот, 0) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Менеджер = &Менеджер
	               |				И АналитикаУчетаПоПартнерам.Организация <> &ОргБонус) КАК ВыручкаИСебестоимостьПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПродаж = СуммаПродаж + Выборка.Сумма;
	КонецЦикла;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыручкаИСебестоимостьПродажОбороты.Регистратор,
	               |	ВыручкаИСебестоимостьПродажОбороты.Регистратор.Соглашение.ВидЦен КАК ВидЦен,
	               |	ВыручкаИСебестоимостьПродажОбороты.Период
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Регистратор,
	               |			Менеджер = &Менеджер
	               |				И АналитикаУчетаПоПартнерам.Организация = &ОргБонус) КАК ВыручкаИСебестоимостьПродажОбороты
	               |ГДЕ
	               |	ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
						
		Для Каждого ТекСтрока Из Выборка.Регистратор.Товары Цикл
			
			врНаименНомен = ВРег(ТекСтрока.Номенклатура.Наименование);
			Если (СтрЧислоВхождений(врНаименНомен, "АКЦИЯ") > 0) ИЛИ (СтрЧислоВхождений(врНаименНомен, "БОНУС") > 0) Тогда
				Продолжить;
			КонецЕсли;	
			
			// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
			//Если (Не ТекСтрока.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара) И (ТекСтрока.Номенклатура <> Газ40) Тогда
			Если ТекСтрока.Номенклатура.ВидНоменклатуры <> ВидНоменклатурыМногооборотнаяТара И
					ТекСтрока.Номенклатура <> Газ40 И 
					ТекСтрока.Номенклатура <> Газ40Аттест Тогда
			// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
			 
				Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатурыНаДату(ТекСтрока.Номенклатура, Выборка.ВидЦен, Выборка.Период);
			
				СуммаСтроки = ТекСтрока.Количество * Цена;
			
				СуммаБонуса = СуммаБонуса + СуммаСтроки;		
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Новый Структура("СуммаПродаж, СуммаБонусов", Окр(СуммаПродаж), Окр(СуммаБонуса));
	
КонецФункции	


Процедура СформироватьОтчет_БонусыАгентов(СписокСВ)
	
	ЗамерСтарт = ТекущаяДата();
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Бонусы");
	
	ОблШапка    = Макет.ПолучитьОбласть("Шапка");
	ОблЗагол    = Макет.ПолучитьОбласть("Заголовок");
	ОблСтрока   = Макет.ПолучитьОбласть("Строка");
	ОблПодвал   = Макет.ПолучитьОбласть("Подвал");
	
	ОблШапка.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);
		
	ДатаСтарт = НачалоМесяца(ТекущаяДата());
	
	Для СчДней = 1 По 2 Цикл
		
		Для Каждого ТекСВ Из СписокСВ Цикл
			
			ОблЗагол.Параметры.Супервайзер = Строка(ТекСВ) + " - " + Формат(ДатаСтарт, "ДФ='MMММ yyyy ""г.""'");
			ТабДок.Вывести(ОблЗагол);
			
			ЗапросАгенты = Новый Запрос;
			ЗапросАгенты.УстановитьПараметр("Супервайзер", ТекСВ);
			ЗапросАгенты.Текст = "ВЫБРАТЬ
			                     |	аян_Агенты.Агент
			                     |ИЗ
			                     |	РегистрСведений.аян_Агенты КАК аян_Агенты
			                     |ГДЕ
			                     |	аян_Агенты.Супервайзер = &Супервайзер
			                     |
			                     |УПОРЯДОЧИТЬ ПО
			                     |	аян_Агенты.Агент.Наименование";
			ВыборкаАгенты = ЗапросАгенты.Выполнить().Выбрать();
			Пока ВыборкаАгенты.Следующий() Цикл
				
				врБонус = БонусАгента(ВыборкаАгенты.Агент, НачалоМесяца(ДатаСтарт), КонецМесяца(ДатаСтарт));
				
				Если ДатаСтарт >= '20221001' Тогда
					врЛимитБонусов = Окр(врБонус.СуммаПродаж*0.8/100);
				Иначе
					врЛимитБонусов = Окр(врБонус.СуммаПродаж/100);
				КонецЕсли;	
				врПроцент      = ?(врБонус.СуммаПродаж > 0, Окр(врБонус.СуммаБонусов*100/врБонус.СуммаПродаж, 2), 0);
				врРазница      = врЛимитБонусов - врБонус.СуммаБонусов;
				
				ОблСтрока.Параметры.Агент        = ВыборкаАгенты.Агент;
				ОблСтрока.Параметры.СуммаПродаж  = ПривестиЧислоКСтроке(врБонус.СуммаПродаж,  9, 0);
				ОблСтрока.Параметры.ЛимитБонусов = ПривестиЧислоКСтроке(врЛимитБонусов,       9, 0);
				ОблСтрока.Параметры.СуммаБонусов = ПривестиЧислоКСтроке(врБонус.СуммаБонусов, 9, 0);
				ОблСтрока.Параметры.Процент      = ПривестиЧислоКСтроке(врПроцент,			  9, 2);
				ОблСтрока.Параметры.Превышение   = ПривестиЧислоКСтроке(?(врРазница < 0, -врРазница, 0), 9, 0);
				
				ТабДок.Вывести(ОблСтрока);
				
			КонецЦикла;	
			
			ТабДок.Вывести(ОблПодвал);
			
		КонецЦикла;	
		
		ДатаСтарт = НачалоМесяца(ДатаСтарт - 1);
		
	КонецЦикла;
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Bonus" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Бонусы) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	

КонецПроцедуры	


Процедура СформироватьОтчет_Посещения(СписокСВ)
	
	ЗамерСтарт = ТекущаяДата();
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Посещения");
	
	ОблШапка    = Макет.ПолучитьОбласть("ДатаОтчета");
	ОблЗагол    = Макет.ПолучитьОбласть("Заголовок");
	ОблБР   	= Макет.ПолучитьОбласть("БР");
	ОблТочка    = Макет.ПолучитьОбласть("Точка");
	
	ОблШапка.Параметры.ДатаФормированияОтчета = "ДАТА ФОРМИРОВАНИЯ ОТЧЕТА: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	ТабДок.Вывести(ОблШапка);
	
	ОблЗагол.Параметры.Период          = "Торговые точки БЕЗ заказов за текущую неделю";
	ОблЗагол.Параметры.ПериодЗаголовок = Формат(ТекущаяДата(), "ДФ='MMMM yyyy'");
	ТабДок.Вывести(ОблЗагол);
	
	врНачПерида = НачалоНедели(ТекущаяДата()) - ДеньВСекундах;
	врКонПерида = ?(ДеньНедели(ТекущаяДата()) < 6, КонецДня(ТекущаяДата() + 2*ДеньВСекундах), КонецДня(ТекущаяДата()));
	
	врМассивАгентов = Новый Массив;
	
	ЗапросАгенты = Новый Запрос;
	ЗапросАгенты.УстановитьПараметр("Супервайзер", СписокСВ);
	ЗапросАгенты.Текст = "ВЫБРАТЬ
	                     |	аян_Агенты.Агент
	                     |ИЗ
	                     |	РегистрСведений.аян_Агенты КАК аян_Агенты
	                     |ГДЕ
	                     |	аян_Агенты.Супервайзер В(&Супервайзер)
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	аян_Агенты.Агент.Наименование";
	ВыборкаАгенты = ЗапросАгенты.Выполнить().Выбрать();
	Пока ВыборкаАгенты.Следующий() Цикл
		врМассивАгентов.Добавить(ВыборкаАгенты.Агент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", врНачПерида);
	Запрос.УстановитьПараметр("КонПериода", врКонПерида);
	Запрос.УстановитьПараметр("Менеджер",   врМассивАгентов);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Партнер.БизнесРегион КАК БизнесРегион
	               |ПОМЕСТИТЬ БизнесРегионы
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И РеализацияТоваровУслуг.Менеджер В(&Менеджер)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслуг.Партнер.БизнесРегион
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ПОМЕСТИТЬ ТорговыйТочкиАгентаПоБР
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент В(&Менеджер)
	               |	И аян_СинхронизацияТТ.ТорговаяТочка.БизнесРегион В
	               |			(ВЫБРАТЬ
	               |				БизнесРегионы.БизнесРегион
	               |			ИЗ
	               |				БизнесРегионы КАК БизнесРегионы)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Партнер
	               |ПОМЕСТИТЬ ОтгруженныеТочки
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И РеализацияТоваровУслуг.Партнер В
	               |			(ВЫБРАТЬ
	               |				ТорговыйТочкиАгентаПоБР.ТорговаяТочка
	               |			ИЗ
	               |				ТорговыйТочкиАгентаПоБР КАК ТорговыйТочкиАгентаПоБР)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслуг.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТорговыйТочкиАгентаПоБР.ТорговаяТочка,
	               |	ТорговыйТочкиАгентаПоБР.ТорговаяТочка.БизнесРегион КАК БизнесРегион,
	               |	ТорговыйТочкиАгентаПоБР.ТорговаяТочка.ОсновнойМенеджер КАК Агент
	               |ИЗ
	               |	ТорговыйТочкиАгентаПоБР КАК ТорговыйТочкиАгентаПоБР
	               |ГДЕ
	               |	НЕ ТорговыйТочкиАгентаПоБР.ТорговаяТочка В
	               |				(ВЫБРАТЬ
	               |					ОтгруженныеТочки.Партнер
	               |				ИЗ
	               |					ОтгруженныеТочки КАК ОтгруженныеТочки)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	БизнесРегион,
	               |	ТорговыйТочкиАгентаПоБР.ТорговаяТочка.Наименование
	               |ИТОГИ ПО
	               |	БизнесРегион";
	ВыборкаБР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБР.Следующий() Цикл
		
		ОблБР.Параметры.БР = ВыборкаБР.БизнесРегион;
 		ТабДок.Вывести(ОблБР);
		
		Выборка = ВыборкаБР.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОблТочка.Параметры.ТорговаяТочка = Выборка.ТорговаяТочка;
			ОблТочка.Параметры.Агент		 = Выборка.Агент;	
			
			врВсего    = КлиентыКонтрагенты_СуммаПродажЗаПериод(Выборка.ТорговаяТочка, НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
			врПетрушка = СуммаРеализацийПоПетрушке(Выборка.ТорговаяТочка);
			
			ОблТочка.Параметры.КПК	   		 = врВсего - врПетрушка;	
			ОблТочка.Параметры.Петрушка		 = врПетрушка;	
			ОблТочка.Параметры.Всего		 = врВсего;	
			
			ОблТочка.Параметры.ПослЗаказ	 = Формат(КлиентыКонтрагенты_ДатаПоследнегоЗаказа(Выборка.ТорговаяТочка), "ДФ=dd.MM.yyyy; ДП='нет данных'");;			
			
			ТабДок.Вывести(ОблТочка);
			
		КонецЦикла;	
				
	КонецЦикла;
	
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСнизу  = 1;
	ТабДок.ПолеСлева  = 1;
	ТабДок.ПолеСправа = 1;	
	
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.Записать(СокрЛП(КаталогСохраненияОтчетаАгенту(ТекАгент)) + "\Visit" + СокрЛП(ИдКПК) + ".pdf", ТипФайлаТабличногоДокумента.PDF);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Отчет агенту (Посещения) сформирован ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	

КонецПроцедуры	


#КонецОбласти


#Область ЛОГИРОВАНИЕ


// Проверка наличия файлов "Invoice.txt" и "InvoiceProduct.txt"

Функция ПроверитьНаличиеФайловДляЗагрузкиДокументов()
	       
	ФлагInvoice        = Истина;
	ФлагInvoiceProduct = Истина;
	
	СтрокаОшибки = "";
	
	Файл = Новый Файл(каталогЗагрузки + "\Invoice.txt");
	Если Файл.Существует() = Ложь Тогда
		СтрокаОшибки = "Не найден файл для импорта: Invoice.txt";
		ФлагInvoice = Ложь;
	КонецЕсли;	
	
	Файл = Новый Файл(каталогЗагрузки + "\InvoiceProduct.txt");
	Если Файл.Существует() = Ложь Тогда
		Если Не ПустаяСтрока(СтрокаОшибки) Тогда
			СтрокаОшибки = СтрокаОшибки + "; ";
		КонецЕсли;	
		СтрокаОшибки = СтрокаОшибки + "Не найден файл для импорта: InvoiceProduct.txt";
		ФлагInvoiceProduct = Ложь;
		Если ФлагInvoice Тогда
			ЗаписатьОшибку1СвЛогФайл_Invoice("Проверка наличия файлов для загрузки", "Не найден файл для импорта: InvoiceProduct.txt");
		КонецЕсли;	
	КонецЕсли;	
	
	// Оба файла присутствуют
	Если ФлагInvoice И ФлагInvoiceProduct Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Оба файла отсутствуют
	Если (ФлагInvoice = Ложь) И (ФлагInvoiceProduct = Ложь) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если (ФлагInvoice = Ложь) ИЛИ (ФлагInvoiceProduct = Ложь) Тогда
		ЗаписатьОшибку1СвЛогФайл("Импорт документов", СтрокаОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
		
КонецФункции		


// Обработка ошибки при отсутствии товаров для загрузки

Процедура Логирование_Ошибка_ОтсутствуютТоварыДляЗагрузки(врВидДокумента, врПартнер, врСумма)
	
	врТемаПисьма  = "ОШИБКА # " + врВидДокумента + " # InvoiceProduct # " + СокрЛП(ИмяСервераМА) + " # " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")";
	врТекстОшибки = Символы.ПС + 
					"ОШИБКА: Отсутствуют товары для загрузки в InvoiceProduct.txt" + Символы.ПС + Символы.ПС +	
					"Дата: " + ТекущаяДата() + Символы.ПС + 
					"Сервер: " + ИмяСервераМА + Символы.ПС + 
					"КПК: " + Строка(ИдКПК) + Символы.ПС + 
					"Агент: " + Строка(ТекАгент) + Символы.ПС +
					"Тип документа: " + врВидДокумента + Символы.ПС + 
					"Клиент: " + СокрЛП(врПартнер) + Символы.ПС + 	
					"Сумма: "  + СокрЛП(врСумма);
	
	Если врСумма <> 0 Тогда
	
		ЗаписатьОшибку1СвЛогФайл("ОТСУТСТВУЮТ ТОВАРЫ ДЛЯ ЗАГРУЗКИ", "Отсутствуют товары для загрузки в InvoiceProduct.txt. Клиент =  " + СокрЛП(врПартнер) + "; Сумма = " + СокрЛП(врСумма));	
	
		Логирование_ОтправитьПисьмо("serge.penkin@9bit.ru", врТемаПисьма, врТекстОшибки);
		
	КонецЕсли;	
	
КонецПроцедуры	


// Отправка писем с сообщением

Процедура Логирование_ОтправитьПисьмо(врАдрес, врТема, врТекстПисьма)
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.ИспользоватьSSLSMTP = Истина;
	Профиль.АдресСервераSMTP    = "connect.smtp.bz"; 
	Профиль.ПортSMTP            = 465;
	Профиль.Пользователь        = "fsrar@ayantomsk.store";
	Профиль.Пароль              = "7mrxuwIW7w1k";
	Профиль.АутентификацияSMTP  = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.ПарольSMTP          = "7mrxuwIW7w1k";
	Профиль.ПользовательSMTP    = "fsrar@ayantomsk.store"; 
			
	Письмо = Новый ИнтернетПочтовоеСообщение; 
	Письмо.Организация = "АТЛ";
	Письмо.Отправитель = "fsrar@ayantomsk.store";		
	Письмо.Тема        = врТема;
		
	врТекст = Письмо.Тексты.Добавить(врТекстПисьма);
	врТекст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				
	//Письмо.Получатели.Добавить(СокрЛП(врАдрес));
	//Письмо.Получатели.Добавить(СокрЛП("nikolaenko@9bit.ru"));
	Письмо.Получатели.Добавить(СокрЛП("Bt_Oleg@mail.ru"));
	Письмо.Получатели.Добавить(СокрЛП("a.sitkova@at-logistic.su"));
		
	ПисьмоОтправлено = Ложь;
		
	Попытка
		Почта = Новый ИнтернетПочта; 
		Почта.Подключиться(Профиль);
		Почта.Послать(Письмо); 
		Почта.Отключиться();
		ПисьмоОтправлено = Истина;
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Логирование. Отправка писем.", "Ошибка отправки письма на адрес: " + СокрЛП(врАдрес) + ", тема письма: " + СокрЛП(врТема), ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
			
КонецПроцедуры	


// Запись ошибок 1С в LogERR.txt

Процедура ЗаписатьОшибку1СвЛогФайл(Событие, ТекстОшибки, ИнфОбОшибке = Неопределено, ЭтоОбработкаИсключения = Ложь)
	
	Попытка 
		
		ЛогОшибок1С = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "LogErrors" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		Если ЭтоОбработкаИсключения Тогда
			
			ЛогТекстОшибки = ЛогТекстОшибки + " ## Обработка исключения! Описание = " + СокрЛП(ИнфОбОшибке.Описание) + 
										  		"; Имя модуля = "                     + СокрЛП(ИнфОбОшибке.ИмяМодуля) + 
										  	    "; Номер строки = "                   + СокрЛП(ИнфОбОшибке.НомерСтроки) + 
										  		"; Исходная строка = "                + СокрЛП(ИнфОбОшибке.ИсходнаяСтрока) + 
										  		"; Причина = "    		              + СокрЛП(ИнфОбОшибке.Причина); 										  
										  
		КонецЕсли;	
	
		ЛогОшибок1С.ЗаписатьСтроку("<-- ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ЛогТекстОшибки));	
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.Закрыть();	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ЗаписатьОшибку1СвЛогФайл_Invoice(Событие, ТекстОшибки)
	
	Попытка 
		
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(каталогЗагрузки + "\Invoice.txt", КодировкаТекста.ANSI);	
		
		КЧ2		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
		КЧ3		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
		КЧ4		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
		КС20 	= ПолучитьОписаниеТиповСтроки(20);
		КС36 	= ПолучитьОписаниеТиповСтроки(36);
		КС40 	= ПолучитьОписаниеТиповСтроки(40);
		КС100 	= ПолучитьОписаниеТиповСтроки(100);
			
		Счета = Новый ТаблицаЗначений;
	
		Счета.Колонки.Добавить("DeviceID",				КС20);
		Счета.Колонки.Добавить("InvoiceID",				КС36);
		Счета.Колонки.Добавить("InvoiceRefID",			КС36);
		Счета.Колонки.Добавить("InvoiceTypeRefID",		КС20);
		Счета.Колонки.Добавить("ParentInvoiceID",		КС20);
		Счета.Колонки.Добавить("ParentInvoiceRefID",	КС36);
		Счета.Колонки.Добавить("AgentRefID",			КС36);
		Счета.Колонки.Добавить("ShopRefID",				КС40);
		Счета.Колонки.Добавить("VisitID",				КС36);
		Счета.Колонки.Добавить("InvoiceDateTime",		КС20);
		Счета.Колонки.Добавить("InvoiceNo",				КС20);
		Счета.Колонки.Добавить("InvoiceAmount",			КЧ2);
		Счета.Колонки.Добавить("AmountPaID",			КЧ2);
		Счета.Колонки.Добавить("DeliveryFromDateTime",	КС20);
		Счета.Колонки.Добавить("DeliveryThruDateTime",	КС20);
		Счета.Колонки.Добавить("IsConfidential",		КС20); 
		Счета.Колонки.Добавить("Note",					КС100);	
		Счета.Колонки.Добавить("SellerRefID",			КС100);
		Счета.Колонки.Добавить("PriceTypeRefID",		КС36); 
		Счета.Колонки.Добавить("InvoiceTypeCode",		КС36); 
		Счета.Колонки.Добавить("InvoiceRequired",		КС36); 	
		Счета.Колонки.Добавить("ShopID",				КС36);
		Счета.Колонки.Добавить("GpsLatitude",			КС36);
		Счета.Колонки.Добавить("GpsLongitude",			КС36);
		Счета.Колонки.Добавить("GpsHDOP",				КС36);
		Счета.Колонки.Добавить("GpsIsVisited",			КС36);
		Счета.Колонки.Добавить("InvoiceWeight",			КС36);
		Счета.Колонки.Добавить("InvoiceStatusRefID",	КС36);
		Счета.Колонки.Добавить("StockRefID",			КС36);
		Счета.Колонки.Добавить("InvoiceInitDateTime",   КС20);
		Счета.Колонки.Добавить("IsTTN",					КС36);
		Счета.Колонки.Добавить("IsInvoice",				КС20);
		Счета.Колонки.Добавить("WithouPay",				КС20);	
		Счета.Колонки.Добавить("Return",				КС20);
		Счета.Колонки.Добавить("Petrov",				КС20);
		Счета.Колонки.Добавить("PaymentDate",			КС20);
		
		КоличествоЗаписей = Число(Файл.ПолучитьСтроку(1));   
	
		Для сч = 3 По КоличествоЗаписей + 2 Цикл
		
			СписокАтрибутов = Split(файл.ПолучитьСтроку(сч), Символы.Таб);
		
			НоваяСтрока = Счета.Добавить();
			
			НоваяСтрока.DeviceID 				= СписокАтрибутов[0].Значение; 
			НоваяСтрока.InvoiceID				= СписокАтрибутов[1].Значение;
			НоваяСтрока.InvoiceRefID 			= ПолучитьНомерОтветаНаЗаказ();			
			НоваяСтрока.InvoiceTypeRefID 		= СписокАтрибутов[3].Значение;
			НоваяСтрока.ParentInvoiceID			= СписокАтрибутов[4].Значение; 
			НоваяСтрока.ParentInvoiceRefID		= СписокАтрибутов[5].Значение;
			НоваяСтрока.AgentRefID 				= СписокАтрибутов[6].Значение;
			НоваяСтрока.ShopRefID 				= СписокАтрибутов[7].Значение;
			НоваяСтрока.VisitID 				= СписокАтрибутов[8].Значение;
			НоваяСтрока.InvoiceDateTime			= СписокАтрибутов[9].Значение;			
			НоваяСтрока.InvoiceNo				= СписокАтрибутов[10].Значение;
			НоваяСтрока.InvoiceAmount			= СписокАтрибутов[11].Значение;
			НоваяСтрока.AmountPaid				= СписокАтрибутов[12].Значение;
			НоваяСтрока.DeliveryFromDateTime	= СписокАтрибутов[13].Значение;
			НоваяСтрока.DeliveryThruDateTime	= СписокАтрибутов[14].Значение;
			НоваяСтрока.IsConfidential			= СписокАтрибутов[15].Значение; 
			НоваяСтрока.Note					= СписокАтрибутов[16].Значение;
			НоваяСтрока.SellerRefID				= СписокАтрибутов[17].Значение;
			НоваяСтрока.PriceTypeRefID	 		= СписокАтрибутов[18].Значение;
			НоваяСтрока.InvoiceTypeCode	 		= СписокАтрибутов[19].Значение;
			НоваяСтрока.InvoiceRequired	 		= СписокАтрибутов[20].Значение;
			НоваяСтрока.ShopID					= СписокАтрибутов[21].Значение;
			НоваяСтрока.GpsLatitude				= СписокАтрибутов[22].Значение;
			НоваяСтрока.GpsLongitude			= СписокАтрибутов[23].Значение;
			НоваяСтрока.GpsHDOP					= СписокАтрибутов[24].Значение;
			НоваяСтрока.GpsIsVisited			= СписокАтрибутов[25].Значение;
			НоваяСтрока.InvoiceWeight			= СписокАтрибутов[26].Значение;
			НоваяСтрока.InvoiceStatusRefID		= СписокАтрибутов[27].Значение;
			НоваяСтрока.StockRefID				= СписокАтрибутов[28].Значение;
			НоваяСтрока.InvoiceInitDateTime		= СписокАтрибутов[29].Значение;
			НоваяСтрока.IsTTN					= СписокАтрибутов[30].Значение;
			НоваяСтрока.IsInvoice				= СписокАтрибутов[31].Значение;
			НоваяСтрока.WithouPay				= СписокАтрибутов[32].Значение;
			НоваяСтрока.Return					= СписокАтрибутов[33].Значение;
			НоваяСтрока.Petrov					= СписокАтрибутов[34].Значение;
			НоваяСтрока.PaymentDate				= СписокАтрибутов[35].Значение;
						
		КонецЦикла; 
		
		ЛогОшибок1С = Новый ЗаписьТекста(РабочийКаталог + "LogInvoice\LogInvoice" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		врТекстТочки = "";
		
		Для Каждого ТекСтрокаСчета Из Счета Цикл
			
			врТекстТочки = врТекстТочки + ?(ПустаяСтрока(врТекстТочки), "", Символы.ПС) + "Точка = " + СокрЛП(ПолучитьПартнераПоГУИД(СокрЛП(ТекСтрокаСчета.ShopRefID))) + "; Сумма = " + СокрЛП(ТекСтрокаСчета.InvoiceAmount);
			
		КонецЦикла;	
			
		ЛогОшибок1С.ЗаписатьСтроку("<-- ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ЛогТекстОшибки));	
		
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.ЗаписатьСтроку(врТекстТочки);	
		
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.Закрыть();	
		
		врТемаПисьма  = "ОШИБКА # Отсутствует InvoiceProduct.txt # " + СокрЛП(ИмяСервераМА) + " # " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")";
		врТекстОшибки = Символы.ПС + 
						"ОШИБКА: Отсутствует файл InvoiceProduct.txt" + Символы.ПС + Символы.ПС +	
						"Дата: " + ТекущаяДата() + Символы.ПС + 
						"Сервер: " + ИмяСервераМА + Символы.ПС + 
						"КПК: " + Строка(ИдКПК) + Символы.ПС + 
						"Агент: " + Строка(ТекАгент) + Символы.ПС + Символы.ПС +
						врТекстТочки;
		
		Логирование_ОтправитьПисьмо("serge.penkin@9bit.ru", врТемаПисьма, врТекстОшибки);
				
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Ошибка логирования Invoice", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ЗаписатьОшибку1СвЛогФайл_Delete(Событие, ТекстОшибки, врТекущееВремя)
	
	Попытка 
				
		ЛогОшибок1С = Новый ЗаписьТекста(РабочийКаталог + "LogDelete\LogDelete" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		ЛогОшибок1С.ЗаписатьСтроку("<-- ## " + врТекущееВремя + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ЛогТекстОшибки));	
		
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.Закрыть();	
		
				
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Ошибка логирования Invoice", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ЗаписатьОшибку1СвЛогФайл_Alert(Событие, ТекстОшибки, ИнфОбОшибке = Неопределено, ЭтоОбработкаИсключения = Ложь)
	
	Попытка 
		
		ЛогОшибок1С = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "LogAlert" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		Если ЭтоОбработкаИсключения Тогда
			
			ЛогТекстОшибки = ЛогТекстОшибки + " ## Обработка исключения! Описание = " + СокрЛП(ИнфОбОшибке.Описание) + 
										  		"; Имя модуля = "                     + СокрЛП(ИнфОбОшибке.ИмяМодуля) + 
										  	    "; Номер строки = "                   + СокрЛП(ИнфОбОшибке.НомерСтроки) + 
										  		"; Исходная строка = "                + СокрЛП(ИнфОбОшибке.ИсходнаяСтрока) + 
										  		"; Причина = "    		              + СокрЛП(ИнфОбОшибке.Причина); 										  
										  
		КонецЕсли;	
	
		ЛогОшибок1С.ЗаписатьСтроку("<-- ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ЛогТекстОшибки));	
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.Закрыть();	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	


// Запись информацию 1С в LogInfo.txt

Процедура ЗаписатьИнформацию1СвЛогФайл(Событие, ТекстИнформации)
	
	Попытка 
		
		ЛогИнформации1С = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "LogInfo" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогИнформации1С.ЗаписатьСтроку("<-- ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ТекстИнформации));	
		ЛогИнформации1С.ЗаписатьСтроку("");	
		
		ЛогИнформации1С.Закрыть();	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	


// Запись загрузки данных в СихронизацияLog

Процедура ЗаписатьДанныеВЛогЗагрузкиДокументов(врВидДанных, врInvoiceID, врНомерВПакете, врДокумент, врОрганизация, врКлиент, врСтатус)
	
	Попытка 
		
		НЗ = РегистрыСведений.аян_СинхронизацияLog.СоздатьНаборЗаписей();
		НовЗапись = НЗ.Добавить();
		
		НовЗапись.ДатаЗагрузки 		= ТекущаяДата();
		НовЗапись.ID           		= ИдКПК;
		НовЗапись.Пользователь 		= ТекАгент;
		НовЗапись.ВидДанных    		= врВидДанных;
		НовЗапись.InvoiceID    		= врInvoiceID;
		НовЗапись.НомерВПакете      = врНомерВПакете;
		
		НовЗапись.Документ    		= врДокумент;
		
		НовЗапись.Организация     	= врОрганизация;
		НовЗапись.Клиент     		= врКлиент;
		НовЗапись.ПервичныйДокумент = Строка(врДокумент);
		НовЗапись.Статус            = врСтатус;
		
		НЗ.Записать(Ложь);
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Логирование загруженных документов", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	


// Проверка на дубли

Функция ДокументУжеЗагруженВБазу(врInvoiceID)
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("InvoiceID", врInvoiceID);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_СинхронизацияLog.Документ,
		               |	аян_СинхронизацияLog.ДатаЗагрузки
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияLog КАК аян_СинхронизацияLog
		               |ГДЕ
		               |	аян_СинхронизацияLog.InvoiceID = &InvoiceID";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаписатьОшибку1СвЛогФайл("Проверка на дубли", "Документ с InvoiceID """ + СокрЛП(врInvoiceID) + """ уже загружен в базу! Дата загрузки: " + Формат(Выборка.ДатаЗагрузки) + "; Документ: " + СокрЛП(Выборка.Документ));
		
			Возврат Истина;
		
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Проверка на дубли", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
				   
	Возврат Ложь;
	
КонецФункции	


// Очистить журнал логирования

Процедура ОчиститьЖурналЛогирования(врКонечнаяДата)
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Очистка журнала логирования... ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня('20170101'));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(врКонечнаяДата));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_СинхронизацияLog.ДатаЗагрузки
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияLog КАК аян_СинхронизацияLog
	               |ГДЕ
	               |	аян_СинхронизацияLog.ДатаЗагрузки МЕЖДУ &НачПериода И &КонПериода";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НЗ = РегистрыСведений.аян_СинхронизацияLog.СоздатьНаборЗаписей();
		НЗ.Отбор.ДатаЗагрузки.Установить(Выборка.ДатаЗагрузки);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать(Истина);
		
	КонецЦикла;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Очистка журнала логирования выполнена ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


#КонецОбласти


#Область СТОП_ЛИСТ

// Cформировать поле AgentNote (для оперативной синхронизации ТТ)

Функция СформироватьAgentNote(Клиент, ТЗНеоплаченныеНакладные)
	
	AgentNote = "";
			
	Если Не НеобходимостьЛимитаЗадолженности(Клиент) Тогда
		Возврат AgentNote;
	КонецЕсли;	
	
	Если ИмяСервераМА = "Tomsk" Тогда
		КоличествоДнейПросрочки = 1;
		Если Массив_Сегмент_Отсрочка7.Найти(Клиент) <> Неопределено Тогда
			КоличествоДнейПросрочки = 7;
		КонецЕсли;	
	КонецЕсли;	
	
	ТЗСтопВТеченииЛимитаПросрочки = Новый ТаблицаЗначений;
	ТЗСтопВТеченииЛимитаПросрочки.Колонки.Добавить("КолДней", ОписаниеТипаЧисло(5));
	ТЗСтопВТеченииЛимитаПросрочки.Колонки.Добавить("Текст",   ОписаниеТипаСтрока(400));
	
	// Текущая просрочка
	
	ПерваяСтрока = Ложь;
	
	СтруктураПоиска = Новый Структура("Партнер", Клиент);
			
	МассивНайденныеСтроки = ТЗНеоплаченныеНакладные.НайтиСтроки(СтруктураПоиска);	
	
	Для Каждого Выборка Из МассивНайденныеСтроки Цикл
		
		НакладнаяЗаНАЛ =  ?(Оплаты_НакладнаяВОтсрочку(Выборка.РН), "", "(НАЛ)");
		
		Если Выборка.ПросрочкаДней > КоличествоДнейПросрочки Тогда
			
			AgentNote = AgentNote + ?(ПустаяСтрока(AgentNote), "ПРОСРОЧКА: ", "; ") + НакладнаяЗаНАЛ + СокрЛП(Выборка.НомерНакладной) + " от " + Формат(Выборка.ДатаНакладной, "ДФ=dd.MM.yy") + " = " + Формат(Выборка.Долг, "ЧРД=.; ЧГ=");
				
		ИначеЕсли (Выборка.ПросрочкаДней >= 0) И (Выборка.ПросрочкаДней <= КоличествоДнейПросрочки) Тогда 
				
			Если ПустаяСтрока(AgentNote) Тогда
				НовСтрокаТЗ = ТЗСтопВТеченииЛимитаПросрочки.Добавить();
				НовСтрокаТЗ.КолДней = КоличествоДнейПросрочки - Выборка.ПросрочкаДней;
				НовСтрокаТЗ.Текст   = НакладнаяЗаНАЛ + СокрЛП(Выборка.НомерНакладной) + " от " + Формат(Выборка.ДатаНакладной, "ДФ=dd.MM.yy") + " = " + Формат(Выборка.Долг, "ЧРД=.; ЧГ=");
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЦикла;
	
	// Предполагаемая просрочка
	
	Если ПустаяСтрока(AgentNote) Тогда
		
		Если ТЗСтопВТеченииЛимитаПросрочки.Количество() > 0 Тогда
		
			ТЗСтопВТеченииЛимитаПросрочки.Сортировать("КолДней");
			
			МинКолДней = ТЗСтопВТеченииЛимитаПросрочки[0].КолДней;
			
			Для Каждого ТекСтрокаТЗ Из ТЗСтопВТеченииЛимитаПросрочки Цикл
				Если ТекСтрокаТЗ.КолДней = МинКолДней Тогда
					
					ДатаСтопаСтрокой = "";
					Если МинКолДней = 0 Тогда
						ДатаСтопаСтрокой = "завтра: ";
					ИначеЕсли МинКолДней = 1 Тогда	
						ДатаСтопаСтрокой = "через 1 день: ";
					ИначеЕсли МинКолДней = 2 Тогда	
						ДатаСтопаСтрокой = "через 2 дня: ";
					ИначеЕсли МинКолДней = 3 Тогда	
						ДатаСтопаСтрокой = "через 3 дня: ";
					ИначеЕсли МинКолДней = 4 Тогда	
						ДатаСтопаСтрокой = "через 4 дня: ";
					ИначеЕсли МинКолДней = 5 Тогда	
						ДатаСтопаСтрокой = "через 5 дней: ";						
					КонецЕсли;	
					
					AgentNote = AgentNote + ?(ПустаяСтрока(AgentNote), "СТОП " + ДатаСтопаСтрокой, "; ") + ТекСтрокаТЗ.Текст;
					
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	AgentNote = СокрЛП(AgentNote);
	
	Если СтрДлина(AgentNote) > 400 Тогда
		AgentNote = Лев(AgentNote, 400);
	КонецЕсли;	
	
	Возврат AgentNote;
		
КонецФункции	


// Проверяет клиента на необходимость установки лимита просроченной задолженности

Функция НеобходимостьЛимитаЗадолженности(Клиент)
		
	//врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
	//	
	//Если (врТекущийЧас >= 9) И (врТекущийЧас < 11) Тогда
	//						
	//	Если Доставка_ЭтоРозливДень(Клиент, ТекАгент) Тогда
	//		Возврат Ложь;
	//	КонецЕсли;	
	//			
	//КонецЕсли;					
	
	//Если ИмяСервераМА = "Tomsk" Тогда
	//	Если Клиент.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
	//		Возврат Ложь;
	//	КонецЕсли;	
	//КонецЕсли;	
		
	//ПервыеСимволыНаименования = Лев(СокрЛ(Клиент.Наименование), 4);
	//
	//Если ПервыеСимволыНаименования = "Аян+" Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если ПервыеСимволыНаименования = "РИФ+" Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	//
	//Если ПервыеСимволыНаименования = "МАРС" Тогда
	//	Возврат Ложь;
	//КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",  Клиент);
	Запрос.УстановитьПараметр("Сегменты", СегментыБезЛимитаЗадолженности);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер
	               |	И ПартнерыСегмента.Сегмент В(&Сегменты)";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	


// Максимальная сумма просроченной дебиторской задолженности для клиента

Функция Получить_MaxOverdueDebtAmount(Клиент, ПросроченныйДолг)
	
	Если ПросроченныйДолг <= 50 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Если НеобходимостьЛимитаЗадолженности(Клиент) Тогда		
		Возврат 50;
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции	


// Получить переплату по точке

Функция ПереплатаПоТочке(врПартнер)
	
	СтрПереплата = "";
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", врПартнер);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РасчетыСКлиентамиОстатки.СуммаОстаток
		               |ИЗ
		               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, ) КАК РасчетыСКлиентамиОстатки
		               |ГДЕ
		               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер = &Партнер";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
				
			Если Выборка.СуммаОстаток < 0 Тогда
				СтрПереплата  = "ПЕРЕПЛАТА: " + Формат(-Выборка.СуммаОстаток, "ЧРД=.; ЧГ=") + ". ";
			КонецЕсли;	
			
			Возврат СтрПереплата;
				
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Переплата", "Исключение", ИнформацияОбОшибке(), Истина); 
		
	КонецПопытки;	
	
	Возврат СтрПереплата;
	
КонецФункции	


// Просроченный долг клиента (для ежедневной синхронизации)

Функция ПолучитьПросроченныйДолгКлиента(Клиент, Соглашение, ТипДолга)
	
	Если ПросроченныеДолгиКлиентов = Неопределено Тогда
		Возврат 0;
	КонецЕсли;	
	
	СтрокиДолга = Неопределено;
	
	Если (Соглашение = Неопределено) ИЛИ (Не ЗначениеЗаполнено(Соглашение)) Тогда
		СтрокиДолга = ПросроченныеДолгиКлиентов.НайтиСтроки(Новый Структура("Клиент", Клиент));
	Иначе	
		СтрокиДолга = ПросроченныеДолгиКлиентов.НайтиСтроки(Новый Структура("Клиент, Соглашение", Клиент, Соглашение));
	КонецЕсли;	
		
	Если СтрокиДолга.Количество() > 0 Тогда
		СуммаДолг = 0;
		Для Каждого ТекСтрокаДолг Из СтрокиДолга Цикл
			Если ТипДолга = "Долг" Тогда
				СуммаДолг = СуммаДолг + ТекСтрокаДолг.Долг;
			ИначеЕсли ТипДолга = "ПросроченныйДолг" Тогда	
				СуммаДолг = СуммаДолг + ТекСтрокаДолг.ПросроченныйДолг;
			КонецЕсли;	
		КонецЦикла;	
		Возврат СуммаДолг;
	КонецЕсли;		
	
	Возврат 0;			   
				   
КонецФункции	


// Заполнить просроченные долги клиентов (для ежедневной синхронизации)

Функция ЗаполнитьПросроченныеДолгиТТ()
	
	врСписокПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(ИмяСервераМА);
	
	НЗНакладные = РегистрыСведений.аян_Накладные.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",  ТекущаяДата());
	Запрос.УстановитьПараметр("ОргБонус", ПолучитьВсеОрганизацииБонус());
	Запрос.УстановитьПараметр("Агенты",   врСписокПользователейСервера);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Клиент,
	               |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент,
	               |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.Соглашение КАК Соглашение,
	               |	ВЫБОР
	               |		КОГДА РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	               |			ТОГДА ВЫБОР
	               |					КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 0
	               |						ТОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ТекДата, ДЕНЬ)
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПросрочкаДней,
	               |	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток КАК Долг,
	               |	0 КАК ПросроченныйДолг
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	               |			&ТекДата,
	               |			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				И НЕ АналитикаУчетаПоПартнерам.Организация В (&ОргБонус)
	               |				И РасчетныйДокумент.Менеджер В (&Агенты)) КАК РасчетыСКлиентамиПоДокументамОстатки";
				   
				   //|
				   //|ОБЪЕДИНИТЬ ВСЕ
				   //|
				   //|ВЫБРАТЬ
				   //|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер,
				   //|	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент,
				   //|	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.Соглашение,
				   //|	ВЫБОР
				   //|		КОГДА РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
				   //|			ТОГДА ВЫБОР
				   //|					КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 0
				   //|						ТОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ТекДата, ДЕНЬ)
				   //|					ИНАЧЕ 0
				   //|				КОНЕЦ
				   //|		ИНАЧЕ 0
				   //|	КОНЕЦ,
				   //|	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток,
				   //|	0
				   //|ИЗ
				   //|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
				   //|			&ТекДата,
				   //|			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
				   //|				И АналитикаУчетаПоПартнерам.Организация В (&ОргБонус)) КАК РасчетыСКлиентамиПоДокументамОстатки
				   //|ГДЕ
				   //|	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 50";
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
				   
	ТЗ = Результат.Выгрузить();	
	
	Сч = ТЗ.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		ТекСтрокаТЗ = ТЗ[Сч];
		
		//ЗапросТовары = Новый Запрос;
		//ЗапросТовары.УстановитьПараметр("Ссылка", ТекСтрокаТЗ.РасчетныйДокумент);
		//ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//               |	РеализацияТоваровУслугТовары.Номенклатура,
		//               |	РеализацияТоваровУслугТовары.Количество,
		//               |	РеализацияТоваровУслугТовары.Цена,
		//               |	РеализацияТоваровУслугТовары.СтавкаНДС
		//               |ИЗ
		//               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//               |ГДЕ
		//               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		//ТЗТовары = ЗапросТовары.Выполнить().Выгрузить();
		
		НеобходимостьВыгрузки = НеобходимостьВыгрузкиНакладной(ТекСтрокаТЗ.РасчетныйДокумент);
		//МаршрутНакладной      = ПолучитьОписаниеМаршрута(ТекСтрокаТЗ.РасчетныйДокумент);   
		//
		//НовЗапись = НЗНакладные.Добавить();
		//НовЗапись.Агент                 = ТекСтрокаТЗ.Клиент.ОсновнойМенеджер;
		//НовЗапись.Накладная             = ТекСтрокаТЗ.РасчетныйДокумент;
		//НовЗапись.НеобходимостьВыгрузки = НеобходимостьВыгрузки; 
		//НовЗапись.ЗаказОтправлен        = МаршрутНакладной.ЗаказОтправлен;
		//НовЗапись.Маршрут               = СокрЛП(МаршрутНакладной.Маршрут);
		//НовЗапись.Точка                 = ТекСтрокаТЗ.Клиент;
		//НовЗапись.ТабличнаяЧасть        = Новый ХранилищеЗначения(ТЗТовары);
				
		Если Не НеобходимостьВыгрузки Тогда
			ТЗ.Удалить(ТекСтрокаТЗ);
		КонецЕсли;	
		
		Сч = Сч - 1;
		
	КонецЦикла;	
		
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.ПросрочкаДней > КоличествоДнейПросрочки Тогда
			СтрокаТЗ.ПросроченныйДолг = СтрокаТЗ.Долг;
		КонецЕсли;	
	КонецЦикла;		
	
	ТЗ.Свернуть("Клиент, Соглашение", "Долг, ПросроченныйДолг");
	
	//Попытка
	//	НЗНакладные.Записать(Истина);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("Формирование кэша накладных", "Исключение", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;	
	
	Возврат ТЗ;
				   
КонецФункции	


#КонецОбласти


#Область АГЕНТЫ


Функция Пользователи_ЭтоСупервайзер(врАгент)
	
	врМассивСупер = Новый Массив;
	врМассивСупер.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Турова Ирина Васильевна"));
	врМассивСупер.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Маметьева Юлия Владиславовна"));
	врМассивСупер.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович"));	
	
	Если врМассивСупер.Найти(врАгент) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Супервайзер", врАгент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Агенты.Супервайзер
	               |ИЗ
	               |	РегистрСведений.аян_Агенты КАК аян_Агенты
	               |ГДЕ
	               |	аян_Агенты.Супервайзер = &Супервайзер";
	
	Возврат НЕ Запрос.Выполнить().Пустой()
	
КонецФункции	


Функция Пользователи_СписокАгентовСупервайзера(врАгент)
	
	врМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Супервайзер", врАгент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Агенты.Агент
	               |ИЗ
	               |	РегистрСведений.аян_Агенты КАК аян_Агенты
	               |ГДЕ
	               |	аян_Агенты.Супервайзер = &Супервайзер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Агент) Тогда
			врМассив.Добавить(Выборка.Агент);
		КонецЕсли;	
	КонецЦикла;
	
	Если врМассив.Найти(врАгент) = Неопределено Тогда
		врМассив.Добавить(врАгент);
	КонецЕсли;	
	
	Возврат врМассив;
	
КонецФункции	


Функция ПроверимАгентаСевер(ТекАгент)
	
	Супер = Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Супервайзер", Супер);
	Запрос.УстановитьПараметр("Агент", ТекАгент);
	Запрос.Текст = "ВЫБРАТЬ
		|	аян_Агенты.Агент
		|ИЗ
		|	РегистрСведений.аян_Агенты КАК аян_Агенты
		|ГДЕ
		|	аян_Агенты.Супервайзер = &Супервайзер
		|	И аян_Агенты.Агент = &Агент";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	


Функция ПолучитьТипАгента(врАгент)
		
	ТЗ_Супервайзеры = Новый ТаблицаЗначений;
	ТЗ_Супервайзеры.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ_Супервайзеры.Колонки.Добавить("Группа",       Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей"));
	ТЗ_Супервайзеры.Колонки.Добавить("Супервайзер",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	// Север
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Север (м)");
	НовСтрока.Супервайзер  = Справочники.Пользователи.ПустаяСсылка();
	
	// Кузбасс
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина);
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Кузбасс (м)");
	НовСтрока.Супервайзер  = Справочники.Пользователи.ПустаяСсылка();	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Черникова Наталья Владимировна");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Черникова Наталья");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина);
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Исакова Виктория Валерьевна");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Исакова Виктория");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина);
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Кузнецова Ольга Владимировна");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Кузнецова Ольга");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина);
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Мезенцев Кирилл Николаевич");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Мезенцев Кирилл");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина);
	
	// Томск
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Томск (м)");
	НовСтрока.Супервайзер  = Справочники.Пользователи.ПустаяСсылка();	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Власов Евгений Николаевич");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Власов Евгений");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Горохов Денис Петрович");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Горохов Денис");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Лейкам Евгений Евгеньевич");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Лейкам Евгений ");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Лютаева Наталья Владимировна");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Лютаева Наталья");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");	
	
	НовСтрока = ТЗ_Супервайзеры.Добавить();
	НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович");
	НовСтрока.Группа       = Справочники.ГруппыПользователей.НайтиПоНаименованию("Шулейко Виталий");
	НовСтрока.Супервайзер  = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Ольга");	
	
	// Определяем тип агента
	// Структура: Parent, PlansAllowed
	
	СтрокаПоиска = ТЗ_Супервайзеры.Найти(врАгент, "Пользователь");
	Если СтрокаПоиска = Неопределено Тогда
		
		врГруппа = Справочники.ГруппыПользователей.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", врАгент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ГруппыПользователей.Ссылка
		               |ИЗ
		               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
		               |ГДЕ
		               |	ГруппыПользователей.Состав.Пользователь = &Пользователь"; 
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			врГруппа = Выборка.Ссылка;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(врГруппа) Тогда
			ГрСтрокаПоиска = ТЗ_Супервайзеры.Найти(врГруппа, "Группа");	
			Если ГрСтрокаПоиска <> Неопределено Тогда
				Возврат Новый Структура("Parent, PlansAllowed", ГрСтрокаПоиска.Пользователь.УникальныйИдентификатор(), "False");		
			КонецЕсли;	
		КонецЕсли;	
		
		Возврат Новый Структура("Parent, PlansAllowed", "", "False");
		
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаПоиска.Супервайзер) Тогда
		Возврат Новый Структура("Parent, PlansAllowed", СтрокаПоиска.Супервайзер.УникальныйИдентификатор(), "True");
	Иначе
		Возврат Новый Структура("Parent, PlansAllowed", "", "True");
	КонецЕсли;	
		
КонецФункции	


Функция ЭтоАгентБортаТомск(врАгент)
	
	Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(врАгент) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Лейкам Евгений Евгеньевич") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Берко Андрей Владимирович") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Махныткина Елена Васильевна") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;;
	
КонецФункции	


Функция ЭтоАгентБортаТюмень(врАгент)
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Архипов Николай Игоревич") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Карпухин Павел Геннадьевич") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Кукарская Евгения Юрьевна") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Сметанина Людмила Геннадьевна") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Саночкин Дмитрий Сергеевич") Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ПолучитьДанныеАгента(врАгент)
	
	СтрВозврата = Новый Структура("ИдКПК, ИмяСервера, Супервайзер, ЛимитСуммыБорта, БизнесРегион, КомментарийДоставки", "", "", Справочники.Пользователи.ПустаяСсылка(), 0, Справочники.БизнесРегионы.ПустаяСсылка(), "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_Агенты.ИдКПК,
	               |	аян_Агенты.ИмяСервера,
	               |	аян_Агенты.Супервайзер,
	               |	аян_Агенты.ЛимитСуммыБорта,
	               |	аян_Агенты.БизнесРегион,
	               |	аян_Агенты.КомментарийДоставки
	               |ИЗ
	               |	РегистрСведений.аян_Агенты КАК аян_Агенты
	               |ГДЕ
	               |	аян_Агенты.Агент = &Агент";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		
		СтрВозврата.Вставить("ИдКПК",               Выборка.ИдКПК);
		СтрВозврата.Вставить("ИмяСервера",          Выборка.ИмяСервера);
		СтрВозврата.Вставить("Супервайзер",         Выборка.Супервайзер);
		СтрВозврата.Вставить("ЛимитСуммыБорта",     Выборка.ЛимитСуммыБорта);
		СтрВозврата.Вставить("БизнесРегион",        Выборка.БизнесРегион);
		СтрВозврата.Вставить("КомментарийДоставки", Выборка.КомментарийДоставки);
		
		Возврат СтрВозврата;
		
	КонецЕсли;	
	
	Возврат СтрВозврата;
	
КонецФункции	


Функция ЭтоГруппаПользователяТомск(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Справочники.ГруппыПользователей.НайтиПоНаименованию("Город");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции		


Функция ЭтоГруппаПользователяНовосибирск(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Справочники.ГруппыПользователей.НайтиПоНаименованию("Новосибирск");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции	


Функция ЭтоГруппаПользователяАчинск(Агент)
	
	Если ИмяСервераМА = "Region" Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ИмяСервераМА = "Kuzbass" Тогда
		Возврат Ложь;
	КонецЕсли;		

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Структура_СВ.Думченко;
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции	


Функция ЭтоГруппаПользователяАлтай(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Структура_СВ.Меленцова;
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Функция ЭтоГруппаПользователяКЕГИУТРО_НЕ_Томск(Агент)
	
	Если КегиУтро_МассивАгентов.Найти(Агент) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Структура_СВ.Лютаева;
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Функция ЭтоГруппаПользователяБарнаул(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
		
		// Либрихт Владимир
		ГруппаТомск = ПолучитьГруппуПользователяПоГУИД("ad0b1962-d130-11ea-8331-1831bf2dc5c0");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
		
		// Чурсина Алена 
		ГруппаТомск = ПолучитьГруппуПользователяПоГУИД("4a16b0da-2b7b-11e9-82b9-1831bf2dc5c0");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;			
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Функция ЭтоГруппаПользователяЧурсина(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		// Чурсина Алена 
		ГруппаТомск = ПолучитьГруппуПользователяПоГУИД("4a16b0da-2b7b-11e9-82b9-1831bf2dc5c0");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;			
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Функция ЭтоГруппаПользователяОмск(Агент)

	ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
		ГруппаТомск = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Омск");
		Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
			Возврат Истина;		
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Функция ЭтоГруппаПользователяКузбасс(врАгент)
	
	Попытка
		
		ГруппаСевер = Новый Массив;
		ГруппаСевер.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Кузбасс"));
		ГруппаСевер.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Горковенко Дмитрий"));
		ГруппаСевер.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Мезенцев Кирилл"));
		ГруппаСевер.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Турова Ирина"));
		ГруппаСевер.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Маметьева Юлия"));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", врАгент);
		Запрос.УстановитьПараметр("Ссылка",       ГруппаСевер);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ГруппыПользователей.Ссылка
		               |ИЗ
		               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
		               |ГДЕ
		               |	ГруппыПользователей.Состав.Пользователь = &Пользователь
		               |	И ГруппыПользователей.Ссылка В (&Ссылка)";
					   
		РЗ = Запрос.Выполнить();
		
		Если Не РЗ.Пустой() Тогда
			
			Возврат Истина;
			
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("КУЗБАСС", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции


Функция ЭтоГруппаПользователяСевер_Old(врАгент)
	
	Попытка
		
		ГруппаСевер = Справочники.ГруппыПользователей.НайтиПоНаименованию("Север");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", врАгент);
		Запрос.УстановитьПараметр("Ссылка",       ГруппаСевер);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ГруппыПользователей.Ссылка
		               |ИЗ
		               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
		               |ГДЕ
		               |	ГруппыПользователей.Состав.Пользователь = &Пользователь
		               |	И ГруппыПользователей.Ссылка = &Ссылка";
					   
		РЗ = Запрос.Выполнить();
		
		Если Не РЗ.Пустой() Тогда
			
			Возврат Истина;
			
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("СЕВЕР", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции


Функция ЭтоГруппаПользователяСевер(Агент)
	
	Попытка
		
		ГруппаПользователя = ПолучитьГруппуПользователя(Агент);
	
		Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
				
			ГруппаТомск = Справочники.ГруппыПользователей.НайтиПоНаименованию("Север (м)");
			Если ГруппаПользователя.ПринадлежитЭлементу(ГруппаТомск) ИЛИ (ГруппаПользователя = ГруппаТомск) Тогда 
				Возврат Истина;		
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат Ложь;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("СЕВЕР", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции


Функция ЭтоОмскОбласть(врАгент)
	
	Попытка 
		Если (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Ткаченко Сергей")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Солоха Дмитрий Николаевич")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Сульман Евгения Александровна")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Кузнецова Марина")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Коротченко Роман")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Полынов Алексей Николаевич")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Толпекина Татьяна Александровна")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Зейферт Лариса Сергеевна")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Узбеков Руслан Шамильевич")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Дегтярёва Анжелика Александровна")) ИЛИ
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Усольцева Анастасия Алексеевна")) ИЛИ	
		//	 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Рыбалко Марина Владимировна")) ИЛИ 			 
			 (врАгент = Справочники.Пользователи.НайтиПоНаименованию("Нахшкарян Виталий Юрьевич")) Тогда
			 Возврат Истина;
		 КонецЕсли;	 
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Агент область ОМСК", "Исключение", ИнформацияОбОшибке(), Истина);	 
	КонецПопытки;	 
	
	Возврат Ложь;
	
КонецФункции	


Функция ПолучитьГруппуПользователя(врАгент)
	
	Событие1С = "Определение группы пользователя"; 
	
	Если ЗначениеЗаполнено(врАгент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", врАгент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ГруппыПользователейСостав.Ссылка
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
		               |	ГруппыПользователейСостав.Пользователь = &Пользователь
		               |	И НЕ ГруппыПользователейСостав.Ссылка.ПометкаУдаления";
					   
		Выборка = Запрос.Выполнить().Выбрать();			   
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;	
					   
	КонецЕсли;	
	
	Возврат Справочники.ГруппыПользователей.ПустаяСсылка();
	
КонецФункции	


Функция ЭтоИногороднийАгент(врАгент)

	ГруппаПользователя = ПолучитьГруппуПользователя(врАгент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Екб") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Омск") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Тюмень") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ПолучитьСписокАгентов()
	
	Событие1С = "Определения списка Агентов";
	
	МассивГруппАгентов = Новый Массив;
	
	// Агенты Екб
	ТекЭлСпр = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Екб");
	Если ТекЭлСпр <> Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		МассивГруппАгентов.Добавить(ТекЭлСпр);
	Иначе 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена группа агентов ""Агенты Екб""");
	КонецЕсли;	
		
	// Агенты Омск
	ТекЭлСпр = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Омск");
	Если ТекЭлСпр <> Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		МассивГруппАгентов.Добавить(ТекЭлСпр);
	Иначе 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена группа агентов ""Агенты Омск""");
	КонецЕсли;	
		 
	// Агенты Тюмень
	ТекЭлСпр = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Тюмень");
	Если ТекЭлСпр <> Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		МассивГруппАгентов.Добавить(ТекЭлСпр);
	Иначе 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена группа агентов ""Агенты Тюмень""");
	КонецЕсли;	
	
	// Город
	ТекЭлСпр = Справочники.ГруппыПользователей.НайтиПоНаименованию("Город");
	Если ТекЭлСпр <> Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		МассивГруппАгентов.Добавить(ТекЭлСпр);
	Иначе 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена группа агентов ""Город""");
	КонецЕсли;	
		
	// Север
	ТекЭлСпр = Справочники.ГруппыПользователей.НайтиПоНаименованию("Север");
	Если ТекЭлСпр <> Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		МассивГруппАгентов.Добавить(ТекЭлСпр);
	Иначе 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена группа агентов ""Север""");
	КонецЕсли;	
	
	СписокАгентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивГруппАгентов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыПользователейСостав.Пользователь КАК Агент
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)
	               |	И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокАгентов.Добавить(Выборка.Агент);
	КонецЦикла;
	
	Возврат СписокАгентов;
	
КонецФункции	


// Agent.txt, DeviceStock.txt

Процедура ЭкспортАгентов()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем агентов...");
	
	// Agent.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"AgentRefID" 	+ Символ(9) +
	"AgentName" 	+ Символ(9) +
	"StockRefID" 	+ Символ(9) +
	"AgentTypeCode");
	
	// DeviceStock.txt
	
	//ФайлПривязкиСкладов = Новый ТекстовыйДокумент;
	//ФайлПривязкиСкладов.ДобавитьСтроку(
	//"AgentRefID" 	+ Символ(9) +
	//"StockRefID");	
	
	СписокАгентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Пользователь,
	               |	НастройкиПользователей.Настройка,
	               |	НастройкиПользователей.Значение
	               |ПОМЕСТИТЬ СкладыПользователей
	               |ИЗ
	               |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Настройка = &Настройка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Наименование КАК AgentName,
	               |	Пользователи.Ссылка КАК AgentRefID,
	               |	СкладыПользователей.Значение КАК StockRefID
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СкладыПользователей КАК СкладыПользователей
	               |		ПО (СкладыПользователей.Пользователь = Пользователи.Ссылка)
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ СкладыПользователей.Значение ЕСТЬ NULL ";
	
	Запрос.Параметры.Вставить("Настройка", ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(Выборка.StockRefID) Тогда
			Продолжить;
		КонецЕсли;
		
		врГУИД = СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
		Если СокрЛП(Выборка.AgentName) = "Заяц Сергей Николаевич" Тогда
			врГУИД = "cffe2a2d-b2ae-11e5-80c6-00155d000c03";
		КонецЕсли;	
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(врГУИД)											+ Символ(9) +    // AgentRefID
		СокрЛП(Выборка.AgentName)								+ Символ(9) +    // AgentName
		СокрЛП(Выборка.StockRefID.УникальныйИдентификатор())	+ Символ(9) +    // StockRefID
		"1");                                                                    // AgentTypeCode
		
		//ФайлПривязкиСкладов.ДобавитьСтроку(
		//СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) +    // AgentRefID
		//СокрЛП(Выборка.StockRefID.УникальныйИдентификатор()));				 	 // StockRefID		
		//
		//Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Томск", Истина) Тогда
		//	
		//	// Виртуальный склад АТ-Логистик
		//	
		//	ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
		//	"VR_STOCK_ATLOG");						  							  // StockRefID		
		//	
		//	// Виртуальный склад РИФ+
		//	
		//	ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
		//	"VR_STOCK_RIFPLUS");   												  // StockRefID					
		//	
		//КонецЕсли;			
		
		Если Склады.Найти(Выборка.StockRefID) = Неопределено Тогда 
			Склады.Добавить(Выборка.StockRefID);
		КонецЕсли;
		
	КонецЦикла;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Agent.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Agent.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Агентов произведена в " + КаталогВыгрузки + "\Agent.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	//ФайлПривязкиСкладов.ВставитьСтроку(1, Формат(ФайлПривязкиСкладов.КоличествоСтрок() - 1, "ЧГ="));
	//ФайлПривязкиСкладов.Записать(КаталогВыгрузки + "\DeviceStock.txt", КодировкаТекста.ANSI);		
	//
	//ФайлПривязкиСкладов.Записать(РабочийКаталог + "DailyOriginal\DeviceStock.txt", КодировкаТекста.ANSI);
	//
	//ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Привязки складов к агентам произведена в " + КаталогВыгрузки + "\DeviceStock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
КонецПроцедуры


Процедура ЭкспортАгентовСевер()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем агентов...");
	
	// Agent.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"AgentRefID" 	+ Символ(9) +
	"AgentName" 	+ Символ(9) +
	"StockRefID" 	+ Символ(9) +
	"AgentTypeCode");
	
	// DeviceStock.txt
	
	ФайлПривязкиСкладов = Новый ТекстовыйДокумент;
	ФайлПривязкиСкладов.ДобавитьСтроку(
	"AgentRefID" 	+ Символ(9) +
	"StockRefID");	
	
	СписокАгентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Пользователь,
	               |	НастройкиПользователей.Настройка,
	               |	НастройкиПользователей.Значение
	               |ПОМЕСТИТЬ СкладыПользователей
	               |ИЗ
	               |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Настройка = &Настройка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Наименование КАК AgentName,
	               |	Пользователи.Ссылка КАК AgentRefID,
	               |	СкладыПользователей.Значение КАК StockRefID
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СкладыПользователей КАК СкладыПользователей
	               |		ПО (СкладыПользователей.Пользователь = Пользователи.Ссылка)
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ СкладыПользователей.Значение ЕСТЬ NULL ";
	
	Запрос.Параметры.Вставить("Настройка", ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(Выборка.StockRefID) Тогда
			Продолжить;
		КонецЕсли;
		
		врГУИД = СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
		Если СокрЛП(Выборка.AgentName) = "Заяц Сергей Николаевич" Тогда
			врГУИД = "cffe2a2d-b2ae-11e5-80c6-00155d000c03";
		КонецЕсли;	
		
		ФайлВыгрузки.ДобавитьСтроку(
	//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) +    // AgentRefID
		СокрЛП(врГУИД)											+ Символ(9) +    // AgentRefID
		СокрЛП(Выборка.AgentName)								+ Символ(9) +    // AgentName
		СокрЛП(Выборка.StockRefID.УникальныйИдентификатор())	+ Символ(9) +    // StockRefID
		"1");                                                                    // AgentTypeCode
		
		ФайлПривязкиСкладов.ДобавитьСтроку(
	//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) +    // AgentRefID
		СокрЛП(врГУИД)											+ Символ(9) +    // AgentRefID
		СокрЛП(Выборка.StockRefID.УникальныйИдентификатор()));				 	 // StockRefID		
		
		Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Томск", Истина) Тогда
		
			// Виртуальный склад АТ-Логистик
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID	
			"VR_STOCK_ATLOG");						  							  // StockRefID		
			
			// Виртуальный склад РИФ+
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID	
			"VR_STOCK_RIFPLUS");   												  // StockRefID	
			
			// Виртуальный склад ТОП-17
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID		
			"VR_STOCK_TOP17");   												  // StockRefID				
			
			// Виртуальный склад Меркурий
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID		
			"VR_STOCK_MERCURY");   												  // StockRefID				
			
			// Виртуальный склад Марс
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID	
			"VR_STOCK_MARS");   												  // StockRefID							
			
			// Виртуальный склад Сигма
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID
			"VR_STOCK_SIGMA"); 													  // StockRefID	
			
			// Виртуальный склад АТЛАНТ (ТОМСК)
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			СокрЛП(врГУИД)											+ Символ(9) + // AgentRefID		
			"VR_STOCK_ATLANT_TOMSK");   										  // StockRefID													
			
			// ТРАНЗИТНЫЕ СКЛАДЫ
			
			Для Каждого ТекТранзитСклад Из ТЗ_ТранзитныеСклады Цикл
				ФайлПривязкиСкладов.ДобавитьСтроку(
				СокрЛП(врГУИД)										+ Символ(9) + // AgentRefID
				СокрЛП(ТекТранзитСклад.ГУИД));   					 			  // StockRefID														
			КонецЦикла;	
			
			// Борта агентов
			
			//Если (ИмяСервераМА = "Kuzbass") Тогда
			//	
			//	ГУИД_БортАгента = "SKL_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
			//	
			//	ФайлПривязкиСкладов.ДобавитьСтроку(
			//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			//	ГУИД_БортАгента);   												  // StockRefID
			//	
			//КонецЕсли;	
						
			Если ИмяСервераМА = "Tomsk" Тогда
							
			//	ГУИД_БортАгента = "SKW_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
				ГУИД_БортАгента = "SKW_" + СокрЛП(врГУИД);
	
				ФайлПривязкиСкладов.ДобавитьСтроку(
			//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())			+ Символ(9) + 	// AgentRefID
				СокрЛП(врГУИД)													+ Символ(9) +   // AgentRefID		
				ГУИД_БортАгента);   												  			// StockRefID			
					
			//	ГУИД_БортАгента = "SKB_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
				ГУИД_БортАгента = "SKB_" + СокрЛП(врГУИД);
			
				ФайлПривязкиСкладов.ДобавитьСтроку(
			//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())			+ Символ(9) + 	// AgentRefID
				СокрЛП(врГУИД)													+ Символ(9) +   // AgentRefID		
				ГУИД_БортАгента);   												  			// StockRefID			
			
			КонецЕсли;	
		
		КонецЕсли;		
		
		//Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Тюмень", Истина) Тогда
		//	
		//	ГУИД_БортАгента = "SKL_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
		//		
		//	ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
		//	ГУИД_БортАгента);   												  // StockRefID			
		//	
		//КонецЕсли;	
		//
		//Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Омск", Истина) Тогда
		//	
		//	ФайлПривязкиСкладов.ДобавитьСтроку(
		//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
		//	"VR_STOCK_ATLANT");   												  // StockRefID			
		//	
		//КонецЕсли;		
		
		Если Склады.Найти(Выборка.StockRefID) = Неопределено Тогда 
			Склады.Добавить(Выборка.StockRefID);
		КонецЕсли;
		
	КонецЦикла;	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Agent.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Agent.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Агентов произведена в " + КаталогВыгрузки + "\Agent.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	ФайлПривязкиСкладов.ВставитьСтроку(1, Формат(ФайлПривязкиСкладов.КоличествоСтрок() - 1, "ЧГ="));
	ФайлПривязкиСкладов.Записать(КаталогВыгрузки + "\DeviceStock.txt", КодировкаТекста.ANSI);		
	
	//ФайлПривязкиСкладов.Записать(РабочийКаталог + "DailyOriginal\DeviceStock.txt", КодировкаТекста.ANSI);
	//
	//ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Привязки складов к агентам произведена в " + КаталогВыгрузки + "\DeviceStock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
КонецПроцедуры


Процедура ЭкспортАгентовСевер_New()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем агентов...");
	
	// Agent.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"AgentRefID" 		+ Символ(9) +
	"AgentName" 		+ Символ(9) +
	"StockRefID" 		+ Символ(9) +
	"AgentTypeCode" 	+ Символ(9) +
	"ParentAgentRefID"	+ Символ(9) +
	"PlansAllowed");
	
	// DeviceStock.txt
	
	ФайлПривязкиСкладов = Новый ТекстовыйДокумент;
	ФайлПривязкиСкладов.ДобавитьСтроку(
	"AgentRefID" 	+ Символ(9) +
	"StockRefID");	
	
	СписокАгентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Пользователь,
	               |	НастройкиПользователей.Настройка,
	               |	НастройкиПользователей.Значение
	               |ПОМЕСТИТЬ СкладыПользователей
	               |ИЗ
	               |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Настройка = &Настройка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Наименование КАК AgentName,
	               |	Пользователи.Ссылка КАК AgentRefID,
	               |	СкладыПользователей.Значение КАК StockRefID
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СкладыПользователей КАК СкладыПользователей
	               |		ПО (СкладыПользователей.Пользователь = Пользователи.Ссылка)
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ СкладыПользователей.Значение ЕСТЬ NULL ";
	
	Запрос.Параметры.Вставить("Настройка", ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(Выборка.StockRefID) Тогда
			Продолжить;
		КонецЕсли;
		
		врТипАгента = ПолучитьТипАгента(Выборка.AgentRefID);
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) +    // AgentRefID
		СокрЛП(Выборка.AgentName)								+ Символ(9) +    // AgentName
		СокрЛП(Выборка.StockRefID.УникальныйИдентификатор())	+ Символ(9) +    // StockRefID
		"1"                                                     + Символ(9) +    // AgentTypeCode
		СокрЛП(врТипАгента.Parent)                              + Символ(9) +
	//	СокрЛП(врТипАгента.PlansAllowed));
		"True");
		
		ФайлПривязкиСкладов.ДобавитьСтроку(
		СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) +    // AgentRefID
		СокрЛП(Выборка.StockRefID.УникальныйИдентификатор()));				 	 // StockRefID		
		
		Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Томск", Истина) Тогда
		
			// Виртуальный склад АТ-Логистик
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
			СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			"VR_STOCK_ATLOG");						  							  // StockRefID		
			
			// Виртуальный склад РИФ+
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
			СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			"VR_STOCK_RIFPLUS");   												  // StockRefID	
			
			// Виртуальный склад ТОП-17
			
			ФайлПривязкиСкладов.ДобавитьСтроку(
			СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			"VR_STOCK_TOP17");   												  // StockRefID				
			
			// Борта агентов
			
			//Если (ИмяСервераМА = "Kuzbass") Тогда
			//	
			//	ГУИД_БортАгента = "SKL_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
			//	
			//	ФайлПривязкиСкладов.ДобавитьСтроку(
			//	СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			//	ГУИД_БортАгента);   												  // StockRefID
			//	
			//КонецЕсли;	
						
			Если ИмяСервераМА = "Tomsk" Тогда
							
				ГУИД_БортАгента = "SKW_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
	
				ФайлПривязкиСкладов.ДобавитьСтроку(
				СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())			+ Символ(9) + 	// AgentRefID
				ГУИД_БортАгента);   												  			// StockRefID			
					
				ГУИД_БортАгента = "SKB_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
			
				ФайлПривязкиСкладов.ДобавитьСтроку(
				СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())			+ Символ(9) + 	// AgentRefID
				ГУИД_БортАгента);   												  			// StockRefID			
			
			КонецЕсли;	
		
		КонецЕсли;		
		
		Если Выборка.StockRefID = Справочники.Склады.НайтиПоНаименованию("Тюмень", Истина) Тогда
			
			ГУИД_БортАгента = "SKL_" + СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор());
				
			ФайлПривязкиСкладов.ДобавитьСтроку(
			СокрЛП(Выборка.AgentRefID.УникальныйИдентификатор())	+ Символ(9) + // AgentRefID
			ГУИД_БортАгента);   												  // StockRefID			
			
		КонецЕсли;	
		
		Если Склады.Найти(Выборка.StockRefID) = Неопределено Тогда 
			Склады.Добавить(Выборка.StockRefID);
		КонецЕсли;
		
	КонецЦикла;	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Agent.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Agent.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Агентов произведена в " + КаталогВыгрузки + "\Agent.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	ФайлПривязкиСкладов.ВставитьСтроку(1, Формат(ФайлПривязкиСкладов.КоличествоСтрок() - 1, "ЧГ="));
	ФайлПривязкиСкладов.Записать(КаталогВыгрузки + "\DeviceStock.txt", КодировкаТекста.ANSI);		
	
	//ФайлПривязкиСкладов.Записать(РабочийКаталог + "DailyOriginal\DeviceStock.txt", КодировкаТекста.ANSI);
	//
	//ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Привязки складов к агентам произведена в " + КаталогВыгрузки + "\DeviceStock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
КонецПроцедуры


#КонецОбласти


#Область ФИРМЫ_ОРГАНИЗАЦИИ


// Client.txt

Процедура ЭкспортФирм()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем фирмы...");
	
	// Client.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ClientRefID"	 		+ Символ(9) +
	"ClientName"	 		+ Символ(9) +
	"ClientTypeCode"	 	+ Символ(9) +
	"LegalForm"	 			+ Символ(9) +
	"Address"	 			+ Символ(9) +
	"Phone"				 	+ Символ(9) +
	"ContactPerson"	 		+ Символ(9) +
	"INN"				 	+ Символ(9) +
	"KPP"				 	+ Символ(9) +
	"OKPO"		 			+ Символ(9) +
	"OKONH"				 	+ Символ(9) +
	"BIK"	 				+ Символ(9) +
	"BankName"	 			+ Символ(9) +
	"SettlementAccount"		+ Символ(9) +
	"CorrespondentAccount"	+ Символ(9) +
	"DOB"					+ Символ(9) +
	"DirectorName"			+ Символ(9) +
	"ChiefAccountantName"	+ Символ(9) +
	"PaymentDelay"	 		+ Символ(9) +
	"DiscountRate"		 	+ Символ(9) +
	"CurDebtAmount"	 		+ Символ(9) +
	"MaxDebtAmount"	 		+ Символ(9) +
	"Note"			 		+ Символ(9) +
	"IsDebtLimited"	 		+ Символ(9) +
	"IsLegal");     
		
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;	
		
		БИК = ""; Наименование = ""; НомерСчета = ""; КоррСчет = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Выборка.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	БанковскиеСчетаОрганизаций.Банк.Наименование КАК Наименование,
		               |	БанковскиеСчетаОрганизаций.Банк.Код КАК БИК,
		               |	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
		               |	БанковскиеСчетаОрганизаций.Банк.КоррСчет КАК КоррСчет
		               |ИЗ
		               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		               |ГДЕ
		               |	БанковскиеСчетаОрганизаций.Владелец = &Владелец";
		ВыборкаБанка = Запрос.Выполнить().Выбрать();
		Если ВыборкаБанка.Следующий() Тогда 
			
			БИК          = ВыборкаБанка.БИК;
			Наименование = ВыборкаБанка.Наименование;
			НомерСчета   = ВыборкаБанка.НомерСчета;
			КоррСчет     = ВыборкаБанка.КоррСчет;
			
		КонецЕсли;
		
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())		+ Символ(9) +		// ClientRefID
		СокрЛП(Выборка.Наименование)							+ Символ(9) +       // ClientName
		"2"														+ Символ(9) +       // ClientTypeCode
		""														+ Символ(9) +       // LegalForm
		УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации)+ Символ(9) + 	// Address
		УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)+ Символ(9) + 	// Phone
		""														+ Символ(9) +       // ContactPerson
		СокрЛП(Выборка.ИНН)										+ Символ(9) +       // INN
		СокрЛП(Выборка.КПП)										+ Символ(9) +       // KPP
		СокрЛП(Выборка.КодПоОКПО)								+ Символ(9) +       // OKPO
		""														+ Символ(9) +       // OKONH
		СокрЛП(БИК)												+ Символ(9) +       // BIK
		СокрЛП(Наименование)									+ Символ(9) +       // BankName
		СокрЛП(НомерСчета)										+ Символ(9) +       // SettlementAccount
		СокрЛП(КоррСчет)										+ Символ(9) +       // CorrespondentAccount
		""														+ Символ(9) +       // DOB
		""														+ Символ(9) +       // DirectorName
		""														+ Символ(9) +       // ChiefAccountantName
		"0"														+ Символ(9) +       // PaymentDelay
		"0"														+ Символ(9) +       // DiscountRate
		"0"														+ Символ(9) +       // CurDebtAmount
		"0"														+ Символ(9) +       // MaxDebtAmount
		""														+ Символ(9) +       // Note
		"False"													+ Символ(9) +       // IsDebtLimited
		"False");                                                                   // IsLegal
		
	КонецЦикла;
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Client.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Client.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка фирм произведена в " + КаталогВыгрузки + "\Client.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры 


Процедура ЭкспортФирмСевер()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем фирмы...");
	
	// Client.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ClientRefID"	 		+ Символ(9) +
	"ClientName"	 		+ Символ(9) +
	"ClientTypeCode"	 	+ Символ(9) +
	"LegalForm"	 			+ Символ(9) +
	"Address"	 			+ Символ(9) +
	"Phone"				 	+ Символ(9) +
	"ContactPerson"	 		+ Символ(9) +
	"INN"				 	+ Символ(9) +
	"KPP"				 	+ Символ(9) +
	"OKPO"		 			+ Символ(9) +
	"OKONH"				 	+ Символ(9) +
	"BIK"	 				+ Символ(9) +
	"BankName"	 			+ Символ(9) +
	"SettlementAccount"		+ Символ(9) +
	"CorrespondentAccount"	+ Символ(9) +
	"DOB"					+ Символ(9) +
	"DirectorName"			+ Символ(9) +
	"ChiefAccountantName"	+ Символ(9) +
	"PaymentDelay"	 		+ Символ(9) +
	"DiscountRate"		 	+ Символ(9) +
	"CurDebtAmount"	 		+ Символ(9) +
	"MaxDebtAmount"	 		+ Символ(9) +
	"Note"			 		+ Символ(9) +
	"IsDebtLimited"	 		+ Символ(9) +
	"IsLegal"               + Символ(9) +
	"StockRefID");     
		
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;	
		
		БИК = ""; Наименование = ""; НомерСчета = ""; КоррСчет = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Выборка.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	БанковскиеСчетаОрганизаций.Банк.Наименование КАК Наименование,
		               |	БанковскиеСчетаОрганизаций.Банк.Код КАК БИК,
		               |	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
		               |	БанковскиеСчетаОрганизаций.Банк.КоррСчет КАК КоррСчет
		               |ИЗ
		               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		               |ГДЕ
		               |	БанковскиеСчетаОрганизаций.Владелец = &Владелец";
		ВыборкаБанка = Запрос.Выполнить().Выбрать();
		Если ВыборкаБанка.Следующий() Тогда 
			
			БИК          = ВыборкаБанка.БИК;
			Наименование = ВыборкаБанка.Наименование;
			НомерСчета   = ВыборкаБанка.НомерСчета;
			КоррСчет     = ВыборкаБанка.КоррСчет;
			
		КонецЕсли;
		
		СкладПоУмолчанию = "";
						
		Если Выборка.Ссылка = оргАТ_Логистик Тогда
			СкладПоУмолчанию = "VR_STOCK_ATLOG";
		ИначеЕсли Выборка.Ссылка = оргРИФПлюс Тогда
			СкладПоУмолчанию = "VR_STOCK_RIFPLUS";
		ИначеЕсли Выборка.Ссылка = оргТОП_17 Тогда
			СкладПоУмолчанию = "VR_STOCK_TOP17";			
		ИначеЕсли Выборка.Ссылка = оргМеркурий Тогда
			СкладПоУмолчанию = "VR_STOCK_MERCURY";						
		ИначеЕсли Выборка.Ссылка = оргМарс Тогда
			СкладПоУмолчанию = "VR_STOCK_MARS";									
		ИначеЕсли Выборка.Ссылка = оргСигма Тогда
			СкладПоУмолчанию = "VR_STOCK_SIGMA";												
		ИначеЕсли Выборка.Ссылка = оргАТ_ЛогистикОМСК Тогда
			СкладПоУмолчанию = СкладОмск.УникальныйИдентификатор();
		ИначеЕсли Выборка.Ссылка = оргАТЛАНТОмск Тогда
			СкладПоУмолчанию = "VR_STOCK_ATLANT_TOMSK";									
		ИначеЕсли Выборка.Ссылка = оргАТ_ЛогистикТЮМЕНЬ Тогда
			СкладПоУмолчанию = СкладТюмень.УникальныйИдентификатор();
		КонецЕсли;	
		
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())		+ Символ(9) +		// ClientRefID
		СокрЛП(Выборка.Наименование)							+ Символ(9) +       // ClientName
		"2"														+ Символ(9) +       // ClientTypeCode
		""														+ Символ(9) +       // LegalForm
		УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации)+ Символ(9) + 	// Address
		УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)+ Символ(9) + 	// Phone
		""														+ Символ(9) +       // ContactPerson
		СокрЛП(Выборка.ИНН)										+ Символ(9) +       // INN
		СокрЛП(Выборка.КПП)										+ Символ(9) +       // KPP
		СокрЛП(Выборка.КодПоОКПО)								+ Символ(9) +       // OKPO
		""														+ Символ(9) +       // OKONH
		СокрЛП(БИК)												+ Символ(9) +       // BIK
		СокрЛП(Наименование)									+ Символ(9) +       // BankName
		СокрЛП(НомерСчета)										+ Символ(9) +       // SettlementAccount
		СокрЛП(КоррСчет)										+ Символ(9) +       // CorrespondentAccount
		""														+ Символ(9) +       // DOB
		""														+ Символ(9) +       // DirectorName
		""														+ Символ(9) +       // ChiefAccountantName
		"0"														+ Символ(9) +       // PaymentDelay
		"0"														+ Символ(9) +       // DiscountRate
		"0"														+ Символ(9) +       // CurDebtAmount
		"0"														+ Символ(9) +       // MaxDebtAmount
		""														+ Символ(9) +       // Note
		"False"													+ Символ(9) +       // IsDebtLimited
		"False"                                                 + Символ(9) +		// IsLegal
		СкладПоУмолчанию);                                                                   
		
	КонецЦикла;
	
	// Транзитные склады
	
	Для Каждого ТекТранзитныйСклад Из ТЗ_ТранзитныеСклады Цикл
		
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(ТекТранзитныйСклад.оргГУИД)						+ Символ(9) +		// ClientRefID
		СокрЛП(ТекТранзитныйСклад.оргНаименование)				+ Символ(9) +       // ClientName
		"2"														+ Символ(9) +       // ClientTypeCode
		""														+ Символ(9) +       // LegalForm
		""														+ Символ(9) +	 	// Address
		""														+ Символ(9) +	 	// Phone
		""														+ Символ(9) +       // ContactPerson
		""														+ Символ(9) +       // INN
		""														+ Символ(9) +       // KPP
		""														+ Символ(9) +       // OKPO
		""														+ Символ(9) +       // OKONH
		""														+ Символ(9) +       // BIK
		""														+ Символ(9) +       // BankName
		""														+ Символ(9) +       // SettlementAccount
		""														+ Символ(9) +       // CorrespondentAccount
		""														+ Символ(9) +       // DOB
		""														+ Символ(9) +       // DirectorName
		""														+ Символ(9) +       // ChiefAccountantName
		"0"														+ Символ(9) +       // PaymentDelay
		"0"														+ Символ(9) +       // DiscountRate
		"0"														+ Символ(9) +       // CurDebtAmount
		"0"														+ Символ(9) +       // MaxDebtAmount
		""														+ Символ(9) +       // Note
		"False"													+ Символ(9) +       // IsDebtLimited
		"False"                                                 + Символ(9) +		// IsLegal
		СокрЛП(ТекТранзитныйСклад.ГУИД));                                                                   		
		
	КонецЦикла;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Client.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Client.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка фирм произведена в " + КаталогВыгрузки + "\Client.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры 


Функция ПолучитьОсновнуюОрганизацию(врАгент)
	
	Событие1С = "Определение основной организации Агента";
	
	ГруппаПользователя = ПолучитьГруппуПользователя(врАгент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Екб") Тогда
			Возврат Справочники.Организации.НайтиПоНаименованию("АЯН+ Екатеринбург", Истина);
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Омск") Тогда
			Возврат Справочники.Организации.НайтиПоНаименованию("АТ-ЛОГИСТИК (Омск)", Истина);
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Тюмень") Тогда
			Возврат Справочники.Организации.НайтиПоНаименованию("АЯН- Тюмень ООО", Истина);
		КонецЕсли;
		
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена основная организация агента. Используется организация ""АТ-Логистик""");
		
	КонецЕсли;	
	
	Возврат Справочники.Организации.НайтиПоНаименованию("АТЛ", Истина);	
	
КонецФункции


Функция ПолучитьОрганизациюВЧерную(врАгент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",   врАгент);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Мир напитков"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаписатьОшибку1СвЛогФайл("Определение организации Мир напитков", "Организация Мир напитков для Агента не найдена!");
	
	Возврат Справочники.Организации.НайтиПоНаименованию("Мир, напитки (Томск)");	
	
КонецФункции


Функция ПолучитьОрганизациюБонус(врАгент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",   врАгент);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Бонус"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаписатьОшибку1СвЛогФайл("Определение организации Бонус", "Организация Бонус для Агента не найдена! Используется организация ""Бонус томск""");
	
	Возврат Справочники.Организации.НайтиПоНаименованию("Бонус томск");	
	
КонецФункции


Функция ПолучитьВсеОсновныеОрганизации()
	
	МассивОрганизации = Новый Массив;
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоНаименованию("АЯН+ Екатеринбург", Истина));
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоНаименованию("АЯН+ (Омск)", Истина));
	МассивОрганизации.Добавить(Справочники.Организации.НайтиПоНаименованию("АЯН- Тюмень ООО", Истина));
			
	Возврат МассивОрганизации;		
			
КонецФункции	


Функция ПолучитьВсеОрганизацииБонус()
	
	МассивБонус = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Бонус"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДополнительныеСведения.Значение";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивБонус.Добавить(Выборка.Значение);
	КонецЦикла;
				   
	Возврат МассивБонус;
	
КонецФункции	


Функция ПолучитьОрганизациюПоГУИД(врГУИД)
	
	Событие1С = "Определение Организации по ГУИД";
	
	Если ПустаяСтрока(врГУИД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СокрЛП(врГУИД) = "CLIENT_BARNAUL_ATL" Тогда
		Возврат оргАТ_Логистик;
	КонецЕсли;	
	
	Если СокрЛП(врГУИД) = "CLIENT_BARNAUL_ATLANT" Тогда
		Возврат оргАТЛАНТОмск;
	КонецЕсли;	
			
	Попытка 
		GUID = СоздатьУникальныйИдентификатор(врГУИД);
	Исключение
	КонецПопытки;	
	
	врОрг = Справочники.Организации.ПолучитьСсылку(GUID);
	Если врОрг.ПолучитьОбъект() = Неопределено Тогда 
		Возврат Неопределено;
	Иначе	
		Возврат врОрг;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции


#КонецОбласти


#Область ЕДИНИЦЫ_ИЗМЕРЕНИЯ

// MeasureUnit.txt

Процедура ЭкспортЕдиницИзмерения() 
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем единицы измерения...");
	
	// MeasureUnit.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"MeasureUnitRefID" 			+ Символ(9) + 
	"MeasureUnitShortName" 		+ Символ(9) + 
	"MeasureUnitName");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	               |	ЕдиницыИзмерения.Наименование,
	               |	ЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное
	               |ИЗ
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |ГДЕ
	               |	ЕдиницыИзмерения.Наименование <> """"
	               |	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		врНаименПолное = Выборка.НаименованиеПолное;
		Если ПустаяСтрока(врНаименПолное) Тогда
			врНаименПолное = Выборка.Наименование;
		КонецЕсли;	
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())			+ Символ(9) +		// MeasureUnitRefID	
		СокрЛП(Выборка.Наименование)								+ Символ(9) +	    // MeasureUnitShortName
		СокрЛП(врНаименПолное));   				                                        // MeasureUnitName
		
	КонецЦикла;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\MeasureUnit.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\MeasureUnit.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка единиц измерения произведена в " + КаталогВыгрузки + "\MeasureUnit.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры  

#КонецОбласти


#Область СКЛАДЫ


// Создает борт (склад) агента

Функция СоздатьБортАгента(врАгент, врГруппаСкладов, врВидЦены)
	
	врНаименованиеСклада = "БОРТ - " + СокрЛП(врАгент.Наименование);
	
	НовСклад = Справочники.Склады.СоздатьЭлемент();
	НовСклад.Родитель                          = врГруппаСкладов;
	НовСклад.Наименование                      = врНаименованиеСклада;
	НовСклад.ВыборГруппы                       = Ложь;
	НовСклад.РозничныйВидЦены                  = врВидЦены; 
	НовСклад.УчетныйВидЦены                    = врВидЦены;
	НовСклад.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
	НовСклад.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		
	Попытка
		НовСклад.Записать();
		НовСклад.КонтролироватьОперативныеОстатки = Истина;
		НовСклад.Записать();
		ЗаписатьИнформацию1СвЛогФайл("БОРТ!", "Создан склад: " + СокрЛП(НовСклад.Наименование));
		Возврат НовСклад.Ссылка;
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Создание склада (борта) агента", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	

	Возврат Справочники.Склады.ПустаяСсылка();
	
КонецФункции	


// Получает борт (склад) агента

Функция ПолучитьБортАгента(врАгент)
	
	врНаименованиеСклада = "БОРТ - " + СокрЛП(врАгент.Наименование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", врНаименованиеСклада);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.Наименование = &Наименование
	               |	И НЕ Склады.ЭтоГруппа
	               |	И НЕ Склады.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
				
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;	
	
	Возврат Справочники.Склады.ПустаяСсылка();
		
КонецФункции	


// Получить склад для возврата товаров (ВАЖНО!!! ТАРА возвращается на Основной склад!)

Функция ПолучитьСкладВозврата(врАгент)
	
	Событие1С = "Определение склада для возврата товаров";
	
	ГруппаПользователя = ПолучитьГруппуПользователя(врАгент);
	
	Если ЗначениеЗаполнено(ГруппаПользователя) Тогда
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Екб") Тогда
			Возврат Справочники.Склады.НайтиПоНаименованию("Екатеринбург Центральный", Истина);
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Омск") Тогда
			Возврат Справочники.Склады.НайтиПоНаименованию("Омск Центральный", Истина);
		КонецЕсли;
		
		Если ГруппаПользователя = Справочники.ГруппыПользователей.НайтиПоНаименованию("Агенты Тюмень") Тогда
			Возврат Справочники.Склады.НайтиПоНаименованию("Брак (Тюмень)", Истина);
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат СкладБракТомскАТОбщий; 
	
КонецФункции	


// Получить основной склад агента (Группа складов организации)

Функция ПолучитьОсновнойСкладАгента(врАгент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Значение
	               |ИЗ
	               |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Пользователь = &Пользователь
	               |	И НастройкиПользователей.Настройка = &Настройка";
			
	Запрос.Параметры.Вставить("Пользователь", врАгент);
	Запрос.Параметры.Вставить("Настройка",    ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Значение;
	КонецЕсли;	
	
	ЗаписатьОшибку1СвЛогФайл("Определение основного склада Агента", "Основной склад не найден!");
	
	Возврат Справочники.Склады.НайтиПоНаименованию("Томск"); 
	
КонецФункции	


// Проверка разрешения выгрузки остатков по складу

Функция СкладРазрешенДляВыгрузки(Склад)
	
	Если Склад = СкладТомскПиво Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Склад = СкладТомскОборудование Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Склад = СкладОмскЦентральный Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",   Склад);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Остатки выгружаются в КПК"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Значение Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	


// Получить массив складов (только элементы)

Функция ПолучитьМассивСкладов(Знач мСклады)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	НЕ Склады.ЭтоГруппа
	               |	И НЕ Склады.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВозврСклады = Новый Массив;
	
	// ПО ВСЕМ СКЛАДАМ АГЕНТОВ (0)
	
	Если ТипЗнч(мСклады) = Тип("Массив") Тогда
	
		Для Каждого ТекСклад Из мСклады Цикл
		
			Если ТекСклад.ЭтоГруппа Тогда
			
				Пока Выборка.Следующий() Цикл
					Если Выборка.Ссылка.ПринадлежитЭлементу(ТекСклад) Тогда
						Если СкладРазрешенДляВыгрузки(Выборка.Ссылка) Тогда
							Если ВозврСклады.Найти(Выборка.Ссылка) = Неопределено Тогда
								ВозврСклады.Добавить(Выборка.Ссылка);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
				
				Выборка.Сбросить();
				
			Иначе
				
				Если СкладРазрешенДляВыгрузки(ТекСклад) Тогда
					Если ВозврСклады.Найти(ТекСклад) = Неопределено Тогда
						ВозврСклады.Добавить(ТекСклад);
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
		
		КонецЦикла;
		
	КонецЕсли;	
	
	// ПО СКЛАДУ АГЕНТА (1)
	
	Если ТипЗнч(мСклады) = ТипЗнч(Справочники.Склады.ПустаяСсылка()) Тогда
		
		Если мСклады.ЭтоГруппа Тогда
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка.ПринадлежитЭлементу(мСклады) Тогда
					Если СкладРазрешенДляВыгрузки(Выборка.Ссылка) Тогда
						Если ВозврСклады.Найти(Выборка.Ссылка) = Неопределено Тогда
							ВозврСклады.Добавить(Выборка.Ссылка);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;					
			
		Иначе
			
			Если СкладРазрешенДляВыгрузки(мСклады) Тогда
				ВозврСклады.Добавить(мСклады);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ВозврСклады;

КонецФункции


// Получить ВСЕ склады, помеченные для выгрузки на КПК

Функция ПолучитьВсеСклады()
	
	ВозврСклады = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	НЕ Склады.ЭтоГруппа
	               |	И НЕ Склады.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СкладРазрешенДляВыгрузки(Выборка.Ссылка) Тогда
			ВозврСклады.Добавить(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ВозврСклады;
	
КонецФункции	


// Получить склад Агента

Функция ПолучитьСкладАгента(Агент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", Агент);	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО Склады.ТекущийОтветственный = Пользователи.ФизическоеЛицо
	               |ГДЕ
	               |	Пользователи.Ссылка = &Агент";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда 
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Склады.ПустаяСсылка();
	
КонецФункции	


// Stock.txt

Процедура ЭкспортСкладов() 
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем склады...");
	
	// Stock.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("StockRefID" + Символ(9) + "StockName");
	
	Для Каждого Склад Из Склады Цикл 
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(Склад.УникальныйИдентификатор())	+ Символ(9) +
		СокрЛП(Склад.Наименование));	
	КонецЦикла;
	
	// Виртуальный склад АТ-Логистик
	
//	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_ATLOG" + Символ(9) + "АТ-Логистик");	
	
	// Виртуальный склад РИФ+
		
//	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_RIFPLUS" + Символ(9) + "РИФ+");		
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Stock.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Stock.txt", КодировкаТекста.ANSI);	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка складов произведена в " + КаталогВыгрузки + "\Stock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры


Процедура ЭкспортСкладовСевер() 
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем склады...");
	
	// Stock.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("StockRefID" + Символ(9) + "StockName");
	
	Для Каждого Склад Из Склады Цикл 
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(Склад.УникальныйИдентификатор())	+ Символ(9) +
		СокрЛП(Склад.Наименование));	
	КонецЦикла;
	
	// Виртуальный склад АТ-Логистик
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_ATLOG" + Символ(9) + "АТЛ");	
	
	// Виртуальный склад РИФ+
		
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_RIFPLUS" + Символ(9) + "РИФ+");		

//	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_RIFPLUS" + Символ(9) + "Марс");		

	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_TOP17" + Символ(9) + "ТОП-17");		
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_MERCURY" + Символ(9) + "Меркурий");		
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_MARS" + Символ(9) + "Марс");		
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_SIGMA" + Символ(9) + "Сигма");
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_ATLANT_TOMSK" + Символ(9) + "АТЛАНТ (ТОМСК)");	
	
	ФайлВыгрузки.ДобавитьСтроку("VR_STOCK_ATLANT" + Символ(9) + "АТЛАНТ");	
	
	// ТРАНЗИТНЫЕ СКЛАДЫ
			
	Для Каждого ТекТранзитСклад Из ТЗ_ТранзитныеСклады Цикл
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(ТекТранзитСклад.ГУИД)						+ Символ(9) + // AgentRefID
		СокрЛП(ТекТранзитСклад.Наименование));   						  // StockRefID														
	КонецЦикла;	
	
	// Борта агентов
	
//	Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Region") Тогда

	Если (ИмяСервераМА = "Region") Тогда
		
		//МассивПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(ИмяСервераМА);
		//
		//Для Каждого ТекПользовательСервера Из МассивПользователейСервера Цикл
		//	ФайлВыгрузки.ДобавитьСтроку(
		//	СокрЛП("SKL_" + СокрЛП(ТекПользовательСервера.УникальныйИдентификатор()))	+ Символ(9) +
		//	СокрЛП("БОРТ"));			
		//КонецЦикла;		
			
	ИначеЕсли ИмяСервераМА = "Tomsk" Тогда
				
		МассивПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(ИмяСервераМА);
		
		Для Каждого ТекПользовательСервера Из МассивПользователейСервера Цикл
			
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП("SKW_" + СокрЛП(ТекПользовательСервера.УникальныйИдентификатор()))	+ Символ(9) +
			СокрЛП("БОРТ (белый)"));			
				
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП("SKB_" + СокрЛП(ТекПользовательСервера.УникальныйИдентификатор()))	+ Символ(9) +
			СокрЛП("БОРТ (черный)"));				
			
		КонецЦикла;	
				
	КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Stock.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка складов произведена в " + КаталогВыгрузки + "\Stock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры


#КонецОбласти


#Область ПРЕЗЕНТЕР


// Добавление рубрик с фото в массив

Процедура ДобавитьРубрикуСФото(Рубрика)
	
	Если РубрикиСФото.Найти(Рубрика.Ссылка) = Неопределено Тогда 
		РубрикиСФото.Добавить(Рубрика.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Рубрика.Родитель) Тогда 
		ДобавитьРубрикуСФото(Рубрика.Родитель);	
	КонецЕсли;
	
КонецПроцедуры


// PresenterTree.txt

Процедура ЭкспортПрезентера()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем Презентер...");
	
	// PresenterTree.txt
	
	ФайлВыгрузкиПрезентер = Новый ТекстовыйДокумент; 
	ФайлВыгрузкиПрезентер.ДобавитьСтроку(
	"PresenterTreeRefID"			+ Символ(9) +
	"ParentPresenterTreeRefID"		+ Символ(9) +
	"PresenterNodeName"				+ Символ(9) +
	"ImageFileName");
		
	Для Каждого Рубрика Из РубрикиСФото Цикл 
		
		ФайлВыгрузкиПрезентер.ДобавитьСтроку(
		СокрЛП(Рубрика.Ссылка.УникальныйИдентификатор())													+ Символ(9) +		// PresenterTreeRefID	
		?(ЗначениеЗаполнено(Рубрика.Родитель), СокрЛП(Рубрика.Родитель.УникальныйИдентификатор()), "") 		+ Символ(9) +       // ParentPresenterTreeRefID
		СокрЛП(Рубрика.Ссылка.Наименование) 																+ Символ(9) +       // PresenterNodeName
		СокрЛП(Рубрика.Ссылка.УникальныйИдентификатор()) + ".jpg");                                                             // ImageFileName
		
	КонецЦикла;
	
	ФайлВыгрузкиПрезентер.ВставитьСтроку(1, Формат(ФайлВыгрузкиПрезентер.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузкиПрезентер.Записать(КаталогВыгрузки + "\PresenterTree.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузкиПрезентер.Записать(РабочийКаталог + "DailyOriginal\PresenterTree.txt", КодировкаТекста.ANSI);		
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Презентера произведена в " + КаталогВыгрузки + "\PresenterTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры


#КонецОбласти


#Область СКИДКИ_НАЦЕНКИ


Функция СКИДКИ_ПолучитьГруппыТоваровПоСегментуНоменклатуры(врСегментНоменклатуры)
	
	врСписокТоваров = Новый Массив;
	
	ЗапросСегмент = Новый Запрос;
	ЗапросСегмент.УстановитьПараметр("Сегмент", врСегментНоменклатуры);
	ЗапросСегмент.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	НоменклатураСегмента.Номенклатура.Родитель КАК Родитель
				                      |ИЗ
				                      |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				                      |ГДЕ
				                      |	НоменклатураСегмента.Сегмент = &Сегмент
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	НоменклатураСегмента.Номенклатура.Родитель";
	ВыборкаСегмент = ЗапросСегмент.Выполнить().Выбрать();
	Пока ВыборкаСегмент.Следующий() Цикл
		Если Товары_СоциальныеГруппы.Найти(ВыборкаСегмент.Родитель) = Неопределено Тогда
			врСписокТоваров.Добавить(ВыборкаСегмент.Родитель);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат врСписокТоваров;
	
КонецФункции


Функция СКИДКИ_ПолучитьСкикдиПоСегментуКлиентов()
	
	врТЗ = Новый ТаблицаЗначений;
	врТЗ.Колонки.Добавить("Партнер",      Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	врТЗ.Колонки.Добавить("Скидка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, ) КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.УсловияПредоставления.УсловиеПредоставления.СегментПартнеров <> ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врСкидка = Выборка.СкидкаНаценка.ЗначениеСкидкиНаценки/100;
		
		врСегментПартнеров    = Справочники.СегментыПартнеров.ПустаяСсылка();
		врСегментНоменклатуры = Справочники.СегментыНоменклатуры.ПустаяСсылка();
		
		Для Каждого ТекУсловиеПредоставления Из Выборка.СкидкаНаценка.УсловияПредоставления Цикл
			
			врУсловиеПредоставления = ТекУсловиеПредоставления.УсловиеПредоставления; 
			
			Если ЗначениеЗаполнено(врУсловиеПредоставления) Тогда
				
				Если ЗначениеЗаполнено(врУсловиеПредоставления.СегментПартнеров) Тогда
					врСегментПартнеров = врУсловиеПредоставления.СегментПартнеров; 
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(врУсловиеПредоставления.СегментНоменклатурыОграничения) Тогда
					врСегментНоменклатуры = врУсловиеПредоставления.СегментНоменклатурыОграничения; 
				КонецЕсли;					
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(врСегментПартнеров) И ЗначениеЗаполнено(врСегментНоменклатуры) Тогда
			
			врСписокНоменклатурыСегмента = СКИДКИ_ПолучитьГруппыТоваровПоСегментуНоменклатуры(врСегментНоменклатуры);
			
			ЗапросКлиенты = Новый Запрос;
			ЗапросКлиенты.УстановитьПараметр("Сегмент", врСегментПартнеров);
			ЗапросКлиенты.Текст = "ВЫБРАТЬ
			                      |	ПартнерыСегмента.Партнер
			                      |ИЗ
			                      |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			                      |ГДЕ
			                      |	ПартнерыСегмента.Сегмент = &Сегмент";
			ВыборкаКлиенты = ЗапросКлиенты.Выполнить().Выбрать();
			Пока ВыборкаКлиенты.Следующий() Цикл
				
				Для Каждого ТекТовар Из врСписокНоменклатурыСегмента Цикл
				
					НовСтрокаТЗ = врТЗ.Добавить();
					НовСтрокаТЗ.Партнер      = ВыборкаКлиенты.Партнер;
					НовСтрокаТЗ.Номенклатура = ТекТовар;
					НовСтрокаТЗ.Скидка       = врСкидка;
					
				КонецЦикла;	
				
			КонецЦикла;	
			
			
		КонецЕсли;	
		                
	КонецЦикла;	
	
	Возврат врТЗ;
			
КонецФункции	


#КонецОбласти


#Область ТИПЫ_ЦЕН_ТОВАРЫ_ДЕРЕВО_ТОВАРОВ_ПРИВЯЗКИ


Функция ИсторияЗаказовТочки(врКлиент, врАгент)
	
	врТекДата = ТекущаяДата();
	
	КолМесяцев = 2;
	Если ИмяСервераМА = "Region" Тогда
		КолМесяцев = 6;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",      ДобавитьМесяц(врТекДата, -КолМесяцев));
	Запрос.УстановитьПараметр("КонПериода",      врТекДата + 60*60*24*7);
	Запрос.УстановитьПараметр("Партнер",         врКлиент);
	Запрос.УстановитьПараметр("Организация",     ОргБонусТомск);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыМногооборотнаяТара);
	Если аян_СинхронизацияСервер.ФОКУС_АгентВФокуснойСхеме(врАгент) Тогда
		врСегмент = аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыАгента(врАгент);		
		Запрос.УстановитьПараметр("ГруппыИскл", аян_СинхронизацияСервер.ФОКУС_СписокГруппТоваров(врСегмент));
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РеализацияТоваровУслугТовары.Номенклатура
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		               |	И РеализацияТоваровУслугТовары.Ссылка.Партнер = &Партнер
		               |	И РеализацияТоваровУслугТовары.Ссылка.Организация <> &Организация
		               |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры
		               |	И " + ?(аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(врАгент), "", "НЕ ") + "РеализацияТоваровУслугТовары.Номенклатура.Родитель В(&ГруппыИскл)";		
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РеализацияТоваровУслугТовары.Номенклатура
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		               |	И РеализацияТоваровУслугТовары.Ссылка.Партнер = &Партнер
		               |	И РеализацияТоваровУслугТовары.Ссылка.Организация <> &Организация
		               |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры";
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции	


Функция СписокДействующихТоваров()
	
	врМассивТоваров = Новый Массив;
	
	Запрос = Новый Запрос;
	Если ИмяСервераМА = "Region" Тогда
		Запрос.УстановитьПараметр("НачПериода", ДобавитьМесяц(ТекущаяДата(), -2));		
	Иначе	
		Запрос.УстановитьПараметр("НачПериода", ДобавитьМесяц(ТекущаяДата(), -3));
	КонецЕсли;	
	Запрос.УстановитьПараметр("Период",     ТекущаяДата() - ДеньВСекундах*7);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	               |		И РеализацияТоваровУслугТовары.Ссылка.Дата >= &НачПериода
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ПоступлениеТоваровУслугТовары.Номенклатура
	               |	ИЗ
	               |		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |	ГДЕ
	               |		ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	               |		И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &НачПериода
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ОприходованиеИзлишковТоваровТовары.Номенклатура
	               |	ИЗ
	               |		Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеИзлишковТоваровТовары
	               |	ГДЕ
	               |		ОприходованиеИзлишковТоваровТовары.Ссылка.Проведен = ИСТИНА
	               |		И ОприходованиеИзлишковТоваровТовары.Ссылка.Дата >= &НачПериода
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЦеныНоменклатуры.Номенклатура
	               |	ИЗ
	               |		РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |	ГДЕ
	               |		ЦеныНоменклатуры.Период >= &Период) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врМассивТоваров.Добавить(Выборка.Номенклатура);
	КонецЦикла;	
	
	Возврат врМассивТоваров;
	
КонецФункции


Функция ТОП_50_ПоВидуЦены()
	
	НЗ = РегистрыСведений.аян_Синхронизация_ТОП50.СоздатьНаборЗаписей();
	НЗ.Отбор.Сервер.Установить(ПолучитьТекущийСервер(ИмяСервераМА));
	
	врМассивВидовЦен = Новый Массив;
	
	Если ИмяСервераМА = "Region" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Красноярск"));
	ИначеЕсли ИмяСервераМА = "Altai" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Барнаул"));
	ИначеЕсли ИмяСервераМА = "Novosib" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск область"));
	ИначеЕсли ИмяСервераМА = "Kuzbass" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Кузбасс опт"));
	ИначеЕсли ИмяСервераМА = "Sever" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("СЕВЕР"));
	ИначеЕсли ИмяСервераМА = "Tomsk" Тогда
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));
		врМассивВидовЦен.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Область"));	
	КонецЕсли;	
	
	врМассивПартнеров = Новый Массив;
	врМассивПартнеров.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00005788"));
	врМассивПартнеров.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00003512"));	
		
	НомПП = 1;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦены",     врМассивВидовЦен);
	Запрос.УстановитьПараметр("НачПериода",  ДобавитьМесяц(ТекущаяДата(), -2));
	Запрос.УстановитьПараметр("КонПериода",  ТекущаяДата());	
	Запрос.УстановитьПараметр("ПартнерИскл", врМассивПартнеров);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаВыручкиОборот
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Соглашение.ВидЦен В (&ВидЦены)
	               |				И АналитикаУчетаНоменклатуры.Номенклатура.ПоставляетсяВМногооборотнойТаре = ЛОЖЬ
	               |				И НЕ АналитикаУчетаПоПартнерам.Партнер В (&ПартнерИскл)) КАК ВыручкаИСебестоимостьПродажОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СуммаВыручкиОборот УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		НовСтрока = НЗ.Добавить();
		НовСтрока.Сервер       = ПолучитьТекущийСервер(ИмяСервераМА);
		НовСтрока.Номенклатура = Выборка.Номенклатура;
		НовСтрока.Порядок      = НомПП;
		
		НомПП = НомПП + 1;
			
	КонецЦикла;	
		
	НЗ.Записать(Истина);
	
КонецФункции	


// PriceType.txt

Процедура ЭкспортТиповЦен(врСписокПользователей = Неопределено)
	
	ЗамерСтарт = ТекущаяДата();
	
	// Фиксируем текущую матрицу видов цен
	
	//врНЗ = РегистрыСведений.аян_Синхронизация_ВидыЦен.СоздатьНаборЗаписей();
	//врНЗ.Отбор.Сервер.Установить(ТекСервер);
	
	// Определяем все возможные скидки в процентах
		
	ЗапросСкидки = Новый Запрос;
	ЗапросСкидки.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	ЗапросСкидки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки КАК Значение,
	                     |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен КАК ВидЦен
	                     |ИЗ
	                     |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, ) КАК ДействиеСкидокНаценокСрезПоследних
	                     |ГДЕ
	                     |	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	                     |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
	                     |	И ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки,
	                     |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен";
	СкидкиПоВидамЦен = ЗапросСкидки.Выполнить().Выгрузить();
	
	Если врСписокПользователей <> Неопределено Тогда
		СкидкиПоВидамЦен = аян_СинхронизацияСервер.Товары_ВозможныеСкидкиНаценки(врСписокПользователей);
	КонецЕсли;	
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем типы цен...");
	
	// PriceType.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("PriceTypeRefID" + Символ(9) + "PriceTypeName");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыЦенНоменклатуры.Ссылка КАК ТипыЦен
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ТипыЦенНоменклатуры
	               |ГДЕ
	               |	ТипыЦенНоменклатуры.Наименование <> """"
	               |	И НЕ ТипыЦенНоменклатуры.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТипыЦенНоменклатуры.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповЦен = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 		
		
		СписокТиповЦен.Добавить(Выборка.ТипыЦен);
		
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.ТипыЦен.УникальныйИдентификатор())	+ Символ(9) + СокрЛП(Выборка.ТипыЦен.Наименование));	
		
		//НовСтрокаНЗ = врНЗ.Добавить();
		//НовСтрокаНЗ.Сервер        = ТекСервер;
		//НовСтрокаНЗ.ВидЦены       = Выборка.ТипыЦен;
		//НовСтрокаНЗ.Скидка        = 0;
		//НовСтрокаНЗ.ДатаИзменения = ТекущаяДата();		
		
		Для Каждого ТекСкидка Из СкидкиПоВидамЦен Цикл
			
			Если ТекСкидка.ВидЦен = Выборка.ТипыЦен Тогда
				
				СтрокаПроцентСкидки = "_" + Строка(ТекСкидка.Значение);
				
				ФайлВыгрузки.ДобавитьСтроку(СокрЛП(Выборка.ТипыЦен.УникальныйИдентификатор()) + СтрокаПроцентСкидки + Символ(9) + СокрЛП(Выборка.ТипыЦен.Наименование) + СтрокаПроцентСкидки);	
				
				//НовСтрокаНЗ = врНЗ.Добавить();
				//НовСтрокаНЗ.Сервер        = ТекСервер;
				//НовСтрокаНЗ.ВидЦены       = Выборка.ТипыЦен;
				//НовСтрокаНЗ.Скидка        = ТекСкидка.Значение;
				//НовСтрокаНЗ.ДатаИзменения = ТекущаяДата();
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сервер", ИмяСервераМА);
		Запрос.Текст = "ВЫБРАТЬ
		               |	аян_СинхронизацияТТ.ВидЦены
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
		               |ГДЕ
		               |	аян_СинхронизацияТТ.Сервер = &Сервер
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	аян_СинхронизацияТТ.ВидЦены";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФайлВыгрузки.ДобавитьСтроку(СокрЛП(Выборка.ВидЦены.УникальныйИдентификатор()) + "_SG1" + Символ(9) + СокрЛП(Выборка.ВидЦены.Наименование) + " (+доставка1)");	
			ФайлВыгрузки.ДобавитьСтроку(СокрЛП(Выборка.ВидЦены.УникальныйИдентификатор()) + "_SG2" + Символ(9) + СокрЛП(Выборка.ВидЦены.Наименование) + " (+доставка2)");							
		КонецЦикла;	
		
	КонецЕсли;	
	
	//Если (ИмяСервераМА <> "Tomsk") И (ИмяСервераМА <> "Sever") Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("Сервер", ИмяСервераМА);
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	аян_СинхронизацияТТ.ВидЦены
	//	               |ИЗ
	//	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	//	               |ГДЕ
	//	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	//	               |
	//	               |СГРУППИРОВАТЬ ПО
	//	               |	аян_СинхронизацияТТ.ВидЦены";
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		ФайлВыгрузки.ДобавитьСтроку(СокрЛП(Выборка.ВидЦены.УникальныйИдентификатор()) + "_SGR" + Символ(9) + СокрЛП(Выборка.ВидЦены.Наименование) + " (новые регионы)");	
	//	КонецЦикла;	
	//	
	//КонецЕсли;		
	
	//Попытка
	//	врНЗ.Записать(Истина);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("PriceType.txt", "Исключение при записи набора регистра аян_Синхронизация_ВидыЦен", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\PriceType.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\PriceType.txt", КодировкаТекста.ANSI);			
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка типов цен произведена в " + КаталогВыгрузки + "\PriceType.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры  


// ProductTree.txt

Процедура ЭкспортДереваТоваров()
	
	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем дерево товаров...");
	
	МассивВсехГруппТоваров = Новый Массив;
	
	// ProductTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ProductTreeRefID"	 		+ Символ(9) +
	"ParentProductTreeRefID"	+ Символ(9) +
	"ProductNodeName");
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.Наименование <> """"
	               |	И Номенклатура.ЭтоГруппа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		МассивВсехГруппТоваров.Добавить(Выборка.Ссылка);
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())													+ Символ(9) +	// ProductTreeRefID
		?(ЗначениеЗаполнено(Выборка.Родитель), СокрЛП(Выборка.Родитель.УникальныйИдентификатор()), "") 		+ Символ(9) +   // ParentProductTreeRefID
		СокрЛП(Выборка.Ссылка.Наименование));			                                                                    // ProductNodeName
		
	КонецЦикла;                          	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ProductTree.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\ProductTree.txt", КодировкаТекста.ANSI);				
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Дерева товаров произведена в " + КаталогВыгрузки + "\ProductTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры 


// CategoryTree.txt

Функция ПолучитьСписокВсехГруппЭлементаНоменклатуры(врНоменклатура)
	
	ТекЭлементЦикла = врНоменклатура;
	
	МассивГрупп = Новый Массив;
	
	ФлагЦикла = Истина;
	Пока ФлагЦикла Цикл
		
		Если Не ЗначениеЗаполнено(ТекЭлементЦикла.Родитель) Тогда
			ФлагЦикла = Ложь;
		Иначе
			МассивГрупп.Добавить(ТекЭлементЦикла.Родитель);
			ТекЭлементЦикла = ТекЭлементЦикла.Родитель;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивГрупп;
	
КонецФункции	

Процедура ЭкспортКатегорийТоваров(врГрубинаВыгрузкиМесяцев)
	
	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем категорий товаров...");
	
	врМассивКатегорий = Новый Массив;
	
	// CategoryTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"CategoryTreeRefID"	 		+ Символ(9) +
	"ParentCategoryTreeRefID"	+ Символ(9) +
	"CategoryNodeName");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -врГрубинаВыгрузкиМесяцев)));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ТекущаяДата()));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугТовары.Номенклатура.Родитель КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка.Проведен
	               |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.Наименование <> """"
	               |	И Номенклатура.ЭтоГруппа
	               |	И Номенклатура.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Номенклатура.Номенклатура
	               |			ИЗ
	               |				ВТ_Номенклатура КАК ВТ_Номенклатура)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если врМассивКатегорий.Найти(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ФайлВыгрузки.ДобавитьСтроку(
		"CTG_" + СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())														+ Символ(9) +	// CategoryTreeRefID
		?(ЗначениеЗаполнено(Выборка.Родитель), "CTG_" + СокрЛП(Выборка.Родитель.УникальныйИдентификатор()), "") 		+ Символ(9) +   // ParentCategoryTreeRefID
		СокрЛП(Выборка.Ссылка.Наименование));																							// CategoryNodeName
		
		врМассивКатегорий.Добавить(Выборка.Ссылка);
		
		врМассивВсехГрупп = ПолучитьСписокВсехГруппЭлементаНоменклатуры(Выборка.Ссылка);
		
		Для Каждого ТекСтрока Из врМассивВсехГрупп Цикл
			
			Если врМассивКатегорий.Найти(ТекСтрока) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ФайлВыгрузки.ДобавитьСтроку(
			"CTG_" + СокрЛП(ТекСтрока.УникальныйИдентификатор())																+ Символ(9) +	// CategoryTreeRefID
			?(ЗначениеЗаполнено(ТекСтрока.Родитель), "CTG_" + СокрЛП(ТекСтрока.Родитель.УникальныйИдентификатор()), "") 		+ Символ(9) +   // ParentCategoryTreeRefID
			СокрЛП(ТекСтрока.Наименование));																									// CategoryNodeName
			
			врМассивКатегорий.Добавить(ТекСтрока);
			
		КонецЦикла;	
		
	КонецЦикла;                          	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\CategoryTree.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Категорий товаров произведена в " + КаталогВыгрузки + "\CategoryTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	

Процедура ЭкспортКатегорийТоваров_Old()
	
	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем категорий товаров...");
	
	// CategoryTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"CategoryTreeRefID"	 		+ Символ(9) +
	"ParentCategoryTreeRefID"	+ Символ(9) +
	"CategoryNodeName");
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.Наименование <> """"
	               |	И Номенклатура.ЭтоГруппа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		ФайлВыгрузки.ДобавитьСтроку(
		"CTG_" + СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())														+ Символ(9) +	// CategoryTreeRefID
		?(ЗначениеЗаполнено(Выборка.Родитель), "CTG_" + СокрЛП(Выборка.Родитель.УникальныйИдентификатор()), "") 		+ Символ(9) +   // ParentCategoryTreeRefID
		СокрЛП(Выборка.Ссылка.Наименование));			                                                                			    // CategoryNodeName
		
	КонецЦикла;                          	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\CategoryTree.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Категорий товаров произведена в " + КаталогВыгрузки + "\CategoryTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


// Получает разрешенные группы товаров для Агента  

Функция ПолучитьМассивГруппТоваровАгента(врАгент)
	
	Если аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(врАгент) Тогда
		врСегментФокус = аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыАгента(врАгент);
		Возврат аян_СинхронизацияСервер.ФОКУС_СписокГруппТоваров(врСегментФокус);
	КонецЕсли;	
	
	МассивГрупп = Новый Массив;
	врМассив     = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", врАгент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_ТоварнаяМатрица.Номенклатура
	               |ИЗ
	               |	РегистрСведений.аян_ТоварнаяМатрица КАК аян_ТоварнаяМатрица
	               |ГДЕ
	               |	аян_ТоварнаяМатрица.Агент = &Агент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура.ЭтоГруппа Тогда
			врМассив.Добавить(Выборка.Номенклатура);
		КонецЕсли;	
	КонецЦикла;	
	
	ЗапросГрупп = Новый Запрос;
	
	Для Каждого ТекЭлемент Из врМассив Цикл
		
		Если МассивГрупп.Найти(ТекЭлемент) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		МассивГрупп.Добавить(ТекЭлемент);
		
		ЗапросГрупп.УстановитьПараметр("Группа", ТекЭлемент);
		ЗапросГрупп.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	Номенклатура.Ссылка КАК ГруппаТовара
		                    |ИЗ
		                    |	Справочник.Номенклатура КАК Номенклатура
		                    |ГДЕ
		                    |	НЕ Номенклатура.ПометкаУдаления
		                    |	И Номенклатура.Наименование <> """"
		                    |	И Номенклатура.ЭтоГруппа
		                    |	И Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)";
	    ВыборкаГрупп = ЗапросГрупп.Выполнить().Выбрать();
		Пока ВыборкаГрупп.Следующий() Цикл
			Если МассивГрупп.Найти(ВыборкаГрупп.ГруппаТовара) = Неопределено Тогда
				МассивГрупп.Добавить(ВыборкаГрупп.ГруппаТовара);
			КонецЕсли;	
		КонецЦикла;	
					   
	КонецЦикла;	
	
	Возврат МассивГрупп;
	
КонецФункции	


// DeviceProductTree.txt


Функция ГруппаТовараРазрешенаДляПродажи_Кузбасс(врАгент, врГруппаТовара)
	
	Если врАгент <> Структура_Пользователи_ГУИД.Шадчина_Наталья Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", врАгент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ГруппыПользователейСостав.Ссылка
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
		               |	ГруппыПользователейСостав.Пользователь = &Пользователь";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Если (Выборка.Ссылка = Структура_СВ.Мезенцев) ИЛИ (Выборка.Ссылка = Структура_СВ.Мирусина) Тогда
			
				Если ЗапретПоВидуЦены_Кузбасс.Найти(врГруппаТовара) <> Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;	
				
			КонецЕсли;	
		
		КонецЦикла;	
		
	КонецЕсли;	
	
	// АЯН
	
	Если врАгент <> Структура_Пользователи_ГУИД.Маметьева_Юлия Тогда
			
		Если врГруппаТовара.ПринадлежитЭлементу(Структура_ГруппыТоваров.Аян_ФАС_СКИДКА) ИЛИ (врГруппаТовара = Структура_ГруппыТоваров.Аян_ФАС_СКИДКА) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
		
	// КУЗБАСС - ЗАПРЕТ АЛЬПИНА И РАССОЛЬНЫЕ СЫРЫ
	
	Если ИмяСервераМА = "Kuzbass" Тогда
	
		врМассивЗапретаАльпина = Новый Массив;
		врМассивЗапретаАльпина.Добавить(ПолучитьПользователяПоГУИД("9ed77e55-8ff2-11e8-8281-1831bf2dc5c0")); // Ощепкова
		врМассивЗапретаАльпина.Добавить(ПолучитьПользователяПоГУИД("764deb29-3d13-11e6-8112-00155d00a101")); // Сергеев
		врМассивЗапретаАльпина.Добавить(ПолучитьПользователяПоГУИД("a407b06d-781b-11e8-8279-1831bf2dc5c0")); // Теренко 
		врМассивЗапретаАльпина.Добавить(ПолучитьПользователяПоГУИД("6c11a8ed-781c-11e8-8279-1831bf2dc5c0")); // Цибориус
		
		НужноПроверитьРазрешение      = Ложь;
		НужноПроверитьРазрешениеДубль = Ложь;
	
		Если врМассивЗапретаАльпина.Найти(ТекАгент) <> Неопределено Тогда
			НужноПроверитьРазрешение      = Истина;
			НужноПроверитьРазрешениеДубль = Истина;		
		КонецЕсли;	
	
		Если НужноПроверитьРазрешение Тогда
				
			// Напитки чай Альпина
		
			Если врГруппаТовара = Структура_ГруппыТоваров.Альпина_ЧАЙ Тогда
				Возврат Ложь;
			КонецЕсли;	
		
			// Альпина ФАС
		
			Если врГруппаТовара.ПринадлежитЭлементу(Структура_ГруппыТоваров.Альпина_ФАС) ИЛИ (врГруппаТовара = Структура_ГруппыТоваров.Альпина_ФАС) Тогда
				Возврат Ложь;
			КонецЕсли;	
		
			Если врГруппаТовара.ПринадлежитЭлементу(Структура_ГруппыТоваров.Альпина_СЫР) ИЛИ (врГруппаТовара = Структура_ГруппыТоваров.Альпина_СЫР) Тогда
				Возврат Ложь;
			КонецЕсли;			
				
		КонецЕсли;
	
		// АЛЬПИНА фас ДУБЛЬ 
	
		Если НужноПроверитьРазрешениеДубль Тогда
		
			Если врГруппаТовара.ПринадлежитЭлементу(Структура_ГруппыТоваров.Альпина_ФАС_СКИДКА) ИЛИ (врГруппаТовара = Структура_ГруппыТоваров.Альпина_ФАС_СКИДКА) Тогда
				Возврат Ложь;
			КонецЕсли;			
		
		КонецЕсли;
		
	КонецЕсли;	
		
	// ***** АЧИНСК ******
	
	Если ЭтоГруппаПользователяАчинск(врАгент) Тогда
		
		Если ЗапретПоВидуЦены_Красноярск.Найти(врГруппаТовара) <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// ****** АЧИНСК *****        	
	
	Возврат Истина;
	
КонецФункции	


Функция ГруппаТовараРазрешенаДляПродажи_Новосибирск(врАгент, врГруппаТовара)
	
	Если ЗапретПоВидуЦены_Новосибирск.Найти(врГруппаТовара) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
				
	Возврат Истина;
	
КонецФункции	


Функция ГруппаТовараРазрешенаДляПродажи_Алтай(врАгент, врГруппаТовара)
		
	Если ЗапретПоВидуЦены_Алтай.Найти(врГруппаТовара) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
								
	Возврат Истина;	
	
КонецФункции	


Функция ГруппаТовараРазрешенаДляПродажи_Регион(врАгент, врГруппаТовара)
		
	Если ЗапретПоВидуЦены_Красноярск.Найти(врГруппаТовара) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
				
	Возврат Истина;	
	
КонецФункции	


Функция ЭтоАгентНовосибирскОбласть(врАгент)
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Маметчин Ренат Рашитович") ИЛИ
		 врАгент = Справочники.Пользователи.НайтиПоНаименованию("Крипиневич Дмитрий Сергеевич") ИЛИ
		 врАгент = Справочники.Пользователи.НайтиПоНаименованию("Абакумов Андрей Геннадьевич") ИЛИ
		 врАгент = Справочники.Пользователи.НайтиПоНаименованию("Карчков Дмитрий Николаевич") ИЛИ
		 врАгент = Справочники.Пользователи.НайтиПоНаименованию("Ищенко Александр Алексеевич") Тогда		 
		 Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	


Процедура ЭкспортПривязкиГруппТоваровКАгентам(ТЗАгентыТовары)
		
	// ЗАПРЕТ ПО ВИДУ ЦЕН
		
	врМассивВидовЦен_Алтай = Новый Массив;
	врМассивВидовЦен_Алтай.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Барнаул"));
	врМассивВидовЦен_Алтай.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск область"));
	врМассивВидовЦен_Алтай.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск"));
	                                                                   
	врМассивВидовЦен_Новосибирск = Новый Массив;
	врМассивВидовЦен_Новосибирск.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Барнаул"));
	врМассивВидовЦен_Новосибирск.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск область"));
	врМассивВидовЦен_Новосибирск.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск"));
	
	врМассивВидовЦен_Красноярск = Новый Массив;
	врМассивВидовЦен_Красноярск.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Красноярск"));
	
	врМассивВидовЦен_Кузбасс = Новый Массив;
	врМассивВидовЦен_Кузбасс.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));
	врМассивВидовЦен_Кузбасс.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Кузбасс опт"));
	врМассивВидовЦен_Кузбасс.Добавить(Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));
	
	ЗапретПоВидуЦены_Алтай       = СписокЗапрещенныхГруппТоваровДляВидаЦены(врМассивВидовЦен_Алтай);
	ЗапретПоВидуЦены_Новосибирск = СписокЗапрещенныхГруппТоваровДляВидаЦены(врМассивВидовЦен_Новосибирск);
	ЗапретПоВидуЦены_Красноярск  = СписокЗапрещенныхГруппТоваровДляВидаЦены(врМассивВидовЦен_Красноярск);
	ЗапретПоВидуЦены_Кузбасс     = СписокЗапрещенныхГруппТоваровДляВидаЦены(врМассивВидовЦен_Кузбасс);
	
	ПапкиРозлив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Справочники.Номенклатура.НайтиПоКоду("00001742   "));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
	               |	И Номенклатура.ПоставляетсяВМногооборотнойТаре
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.Родитель";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПапкиРозлив.Добавить(Выборка.Родитель);
	КонецЦикла;	
		
	// ПОЛЬЗОВАТЕЛИ ПО ГУИД
		
	Структура_Пользователи_ГУИД = Новый Структура;
	
	// Хакасия
	
	Структура_Пользователи_ГУИД.Вставить("Вакансия_Шира",  	 	   ПолучитьПользователяПоГУИД("1771bb17-aad2-11ea-8323-1831bf2dc5c0"));
		
	// Кузбасс
	
	Структура_Пользователи_ГУИД.Вставить("Карасук",  	 	       ПолучитьПользователяПоГУИД("46d0b696-9b0e-11ea-831e-1831bf2dc5c0"));
	
	Структура_Пользователи_ГУИД.Вставить("Атюшкин_Максим",         ПолучитьПользователяПоГУИД("4fca97f7-866e-11e8-827f-1831bf2dc5c0"));
	
	Структура_Пользователи_ГУИД.Вставить("Суняйкина_Татьяна",      ПолучитьПользователяПоГУИД("aec451a2-a622-11e6-8150-00155d00a101"));
	
	Структура_Пользователи_ГУИД.Вставить("Змазнева_Анастасия",     ПолучитьПользователяПоГУИД("dc623af6-336a-11e6-810f-00155d00a101"));	
	
	Структура_Пользователи_ГУИД.Вставить("Гололобова_Оксана",      ПолучитьПользователяПоГУИД("6c11a8ed-781c-11e8-8279-1831bf2dc5c0"));
		
	Структура_Пользователи_ГУИД.Вставить("Белоусова_Марина",       ПолучитьПользователяПоГУИД("d821d390-39d1-11e6-8111-00155d00a101"));	
	
	Структура_Пользователи_ГУИД.Вставить("Логин_Руслан",           ПолучитьПользователяПоГУИД("fd47af0d-a6b5-11e7-8181-00155d640d00"));
	
	
	// Хлыновская
	Структура_Пользователи_ГУИД.Вставить("Корецкая_Маргарита",     ПолучитьПользователяПоГУИД("9ed77e55-8ff2-11e8-8281-1831bf2dc5c0"));
	
	// Чекурина
	Структура_Пользователи_ГУИД.Вставить("Назарова_Юлия",          ПолучитьПользователяПоГУИД("a407b06d-781b-11e8-8279-1831bf2dc5c0"));
	
	// Глушаева
	Структура_Пользователи_ГУИД.Вставить("Пупков_Егор",            ПолучитьПользователяПоГУИД("d25550c6-31f7-11e6-810d-00155d00a101"));
	
	// Корнилова
	Структура_Пользователи_ГУИД.Вставить("Семахин_Дмитрий",        ПолучитьПользователяПоГУИД("93598d31-3d0e-11e6-8112-00155d00a101"));
	
	Структура_Пользователи_ГУИД.Вставить("Сергеев_Андрей",         ПолучитьПользователяПоГУИД("764deb29-3d13-11e6-8112-00155d00a101"));
	
	// Елгина
	Структура_Пользователи_ГУИД.Вставить("Христофорова_Валентина", ПолучитьПользователяПоГУИД("396d0268-ee83-11e6-a286-000c29fb98a2"));
	
	Структура_Пользователи_ГУИД.Вставить("Михель_Дмитрий",         ПолучитьПользователяПоГУИД("fd47af0d-a6b5-11e7-8181-00155d640d00"));
	
	Структура_Пользователи_ГУИД.Вставить("Лебедева_Екатерина",     ПолучитьПользователяПоГУИД("476c8e53-d59a-11e8-829e-1831bf2dc5c0"));
	
	Структура_Пользователи_ГУИД.Вставить("Маметьева_Юлия",     	   ПолучитьПользователяПоГУИД("41899d60-39dd-11e6-8111-00155d00a101"));	
	
	Структура_Пользователи_ГУИД.Вставить("Шадчина_Наталья",    	   ПолучитьПользователяПоГУИД("2b63a70e-1daa-11e6-8100-00155d00a101"));	
		
	// Алтай
	
	Структура_Пользователи_ГУИД.Вставить("Мищенко_Вадим",          ПолучитьПользователяПоГУИД("7a41b818-9b0f-11ea-831e-1831bf2dc5c0"));	
	
	// Новосибирск
	
	Структура_Пользователи_ГУИД.Вставить("Ладик_Людмила",          ПолучитьПользователяПоГУИД("a0c2f30a-1af1-11e9-82b6-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Сорокина_Ирина",         ПолучитьПользователяПоГУИД("900b1eff-1b09-11e9-82b6-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Новикова_Юлия",          ПолучитьПользователяПоГУИД("d1f4ccf8-bae3-11e7-81a5-00155d640d00"));		 
	Структура_Пользователи_ГУИД.Вставить("Кабаков_Евгений",        ПолучитьПользователяПоГУИД("76e79f39-51e3-11e9-82c0-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Гурских_Юрий",           ПолучитьПользователяПоГУИД("90a9b18a-1af2-11e9-82b6-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Приходько_Оксана",       ПолучитьПользователяПоГУИД("8f91d844-ad1f-11e9-82d3-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Пеньков_Александр",      ПолучитьПользователяПоГУИД("f9ba1d74-2082-11e9-82b7-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Яковлев_Тимофей",        ПолучитьПользователяПоГУИД("8227aacb-52b6-11e9-82c0-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Могильникова_Наталья",   ПолучитьПользователяПоГУИД("336fcc6c-1af2-11e9-82b6-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Жабина_Анна",  		   ПолучитьПользователяПоГУИД("e76e06f3-f8a8-11ea-8342-1831bf2dc5c0"));		 
	Структура_Пользователи_ГУИД.Вставить("Далюева_Наталья",    	   ПолучитьПользователяПоГУИД("e738b3d3-ef65-11e6-a286-000c29fb98a2"));	
	Структура_Пользователи_ГУИД.Вставить("Кривенко_Татьяна",  	   ПолучитьПользователяПоГУИД("6e8ad2a4-1af2-11e9-82b6-1831bf2dc5c0"));	
	
	// ГРУППЫ ТОВАРОВ
	
	Структура_ГруппыТоваров = Новый Структура;
	
	Структура_ГруппыТоваров.Вставить("Аян",                    Справочники.Номенклатура.НайтиПоКоду("00000001   "));
	Структура_ГруппыТоваров.Вставить("Аян_КЕГИ",               Справочники.Номенклатура.НайтиПоКоду("00001130   "));
	Структура_ГруппыТоваров.Вставить("Аян_КЕГИ_СКИДКА",        Справочники.Номенклатура.НайтиПоКоду("00-00020495"));
	Структура_ГруппыТоваров.Вставить("Аян_ФАС_СКИДКА",         Справочники.Номенклатура.НайтиПоКоду("00-00020493"));
	
	Структура_ГруппыТоваров.Вставить("БПЗ",                    Справочники.Номенклатура.НайтиПоКоду("00001449   "));
	Структура_ГруппыТоваров.Вставить("БПЗ_СКИДКА",             Справочники.Номенклатура.НайтиПоКоду("Ц0009125   "));
	Структура_ГруппыТоваров.Вставить("Заморозка",			   Справочники.Номенклатура.НайтиПоКоду("00-00013589"));
	
	Структура_ГруппыТоваров.Вставить("ЛобановФАС",			   Справочники.Номенклатура.НайтиПоКоду("00-00012776"));
	Структура_ГруппыТоваров.Вставить("Лобанов_СКИДКА",	       Справочники.Номенклатура.НайтиПоКоду("00-00010881"));
	Структура_ГруппыТоваров.Вставить("ЛобановРОЗЛИВ",		   Справочники.Номенклатура.НайтиПоКоду("00-00013698"));
	Структура_ГруппыТоваров.Вставить("ЛобановРОЗЛИВ_СКИДКА",   Справочники.Номенклатура.НайтиПоКоду("00-00013630"));	
	
	Структура_ГруппыТоваров.Вставить("ТрехсосенКВАС",          Справочники.Номенклатура.НайтиПоКоду("00-00021948"));
	Структура_ГруппыТоваров.Вставить("ТрехсосенФАС",           Справочники.Номенклатура.НайтиПоКоду("00-00007943"));
	Структура_ГруппыТоваров.Вставить("Трехсосен_СКИДКА",       Справочники.Номенклатура.НайтиПоКоду("00-00004329"));
	Структура_ГруппыТоваров.Вставить("ТрехсосенРОЗЛИВ",        Справочники.Номенклатура.НайтиПоКоду("00-00013698"));
	Структура_ГруппыТоваров.Вставить("ТрехсосенРОЗЛИВ_СКИДКА", Справочники.Номенклатура.НайтиПоКоду("00-00004324"));
	
	Структура_ГруппыТоваров.Вставить("Альпина_ФАС_СКИДКА", 	   Справочники.Номенклатура.НайтиПоКоду("00-00000539"));
	Структура_ГруппыТоваров.Вставить("Альпина_ФАС", 		   Справочники.Номенклатура.НайтиПоКоду("00-00000612"));
	Структура_ГруппыТоваров.Вставить("Альпина_ЧАЙ", 		   Справочники.Номенклатура.НайтиПоКоду("00002136   "));
	Структура_ГруппыТоваров.Вставить("Альпина_СЫР", 		   Справочники.Номенклатура.НайтиПоКоду("00-00000714"));
	
	Структура_ГруппыТоваров.Вставить("Фрукты", 				   Справочники.Номенклатура.НайтиПоКоду("00-00012416"));	
	
	Структура_ГруппыТоваров.Вставить("ПРИМУС", 				   Справочники.Номенклатура.НайтиПоКоду("00-00021714"));
	
	Структура_ГруппыТоваров.Вставить("СибБарс", 			   Справочники.Номенклатура.НайтиПоКоду("00-00018762"));
	
	Структура_ГруппыТоваров.Вставить("АЯН_Розлив", 			   Справочники.Номенклатура.НайтиПоКоду("00001742   "));
	Структура_ГруппыТоваров.Вставить("Пиво_Скидка", 		   Справочники.Номенклатура.НайтиПоКоду("Ц0007953   "));	
	
	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем привязку групп товаров к агентам...");
	
	// DeviceProductTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("AgentRefID" + Символ(9) + "ProductTreeRefID");
	
	// Полный список групп товаров
	
	мОсновныеИсключения = Новый Массив;
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00001128   ")); // Старые
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000412   ")); // Удаленные
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0005711   ")); // Услуги
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00005433")); // МТЦ	
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00018548")); // _Закупки по ГК
//	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00012416")); // Овощи-Фрукты

	Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
		//мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0008649   ")); // Межениновская птицефабрика
		мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00039901")); // Хорека - Изуми		
	КонецЕсли;	
		
	Если (ИмяСервераМА <> "Sever") И (ИмяСервераМА <> "Tomsk") Тогда
		мОсновныеИсключения.Добавить(Сигареты_Скидка);
	КонецЕсли;	
	
	Если НЕ ИмяСервераМА = "Tomsk" Тогда
		мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00049933")); // МОРОЖЕННОЕ
	КонецЕсли;		
	
	Если ИмяСервераМА = "Novosib" Тогда
		
		ОснИсключения_Новосибирск = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Агент", Справочники.Пользователи.НайтиПоНаименованию("Администратор"));
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_ТоварнаяМатрица.Номенклатура
		               |ИЗ
		               |	РегистрСведений.аян_ТоварнаяМатрица КАК аян_ТоварнаяМатрица
		               |ГДЕ
		               |	аян_ТоварнаяМатрица.Агент = &Агент";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОснИсключения_Новосибирск.Добавить(Выборка.Номенклатура);
		КонецЦикла;	
		
	КонецЕсли;			
	
	мСписокГруппТоваров = Новый Массив;
	
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыИсключения", мОсновныеИсключения);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка КАК ГруппаТовара
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.Наименование <> """"
	               |	И Номенклатура.ЭтоГруппа
	               |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппыИсключения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если ЗначениеЗаполнено(Выборка.ГруппаТовара) Тогда
			мСписокГруппТоваров.Добавить(Выборка.ГруппаТовара);	
		КонецЕсли;	
	КонецЦикла;  
	
	ЗапросАгенты = Новый Запрос;
	ЗапросАгенты.УстановитьПараметр("Сервер", СокрЛП(ИмяСервераМА));
	ЗапросАгенты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                     |	аян_СинхронизацияТТ.Агент
	                     |ИЗ
	                     |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	                     |ГДЕ
	                     |	аян_СинхронизацияТТ.Сервер = &Сервер";
	ТекСтрокаАгент = ЗапросАгенты.Выполнить().Выбрать();					 
		
	Пока ТекСтрокаАгент.Следующий() Цикл
		
		МассивГруппТоваровАгента = ПолучитьМассивГруппТоваровАгента(ТекСтрокаАгент.Агент);
		
		врЭтоОснАгентФокус = аян_СинхронизацияСервер.ФОКУС_ЭтоОсновнойАгент(ТекСтрокаАгент.Агент);
		
		ГруппыФокус = аян_СинхронизацияСервер.ФОКУС_СписокГруппТоваров(аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыОсновногоАгента(ТекСтрокаАгент.Агент));
		
		Если МассивГруппТоваровАгента.Количество() = 0 Тогда
		
			Для Каждого ТекГруппаТовара Из мСписокГруппТоваров Цикл
				
				Если ИмяСервераМА = "Kuzbass" Тогда
					
					Если ГруппаТовараРазрешенаДляПродажи_Кузбасс(ТекСтрокаАгент.Агент, ТекГруппаТовара) Тогда
					
						ФайлВыгрузки.ДобавитьСтроку(
						СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
						ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID					
						
					КонецЕсли;	
					
				ИначеЕсли ИмяСервераМА = "Altai" Тогда
					
					Если ГруппаТовараРазрешенаДляПродажи_Алтай(ТекСтрокаАгент.Агент, ТекГруппаТовара) Тогда
					
						ФайлВыгрузки.ДобавитьСтроку(
						СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
						ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID					
						
					КонецЕсли;	
					
				ИначеЕсли ИмяСервераМА = "Region" Тогда
					
					Если ГруппаТовараРазрешенаДляПродажи_Регион(ТекСтрокаАгент.Агент, ТекГруппаТовара) Тогда
					
						ФайлВыгрузки.ДобавитьСтроку(
						СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
						ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID					
						
					КонецЕсли;						
					
				ИначеЕсли ИмяСервераМА = "Novosib" Тогда
					
					Если ГруппаТовараРазрешенаДляПродажи_Новосибирск(ТекСтрокаАгент.Агент, ТекГруппаТовара) Тогда
					
						ФайлВыгрузки.ДобавитьСтроку(
						СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
						ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID					
						
					КонецЕсли;				
					
				Иначе	
					
					Если врЭтоОснАгентФокус И (НЕ ГруппыФокус.Найти(ТекГруппаТовара) = Неопределено) Тогда
						Продолжить;
					КонецЕсли;	
					
					Если Массив_АгентыРИФ.Найти(ТекСтрокаАгент.Агент) = Неопределено И ТекГруппаТовара = ТоварыРИФ Тогда
						Продолжить;
					КонецЕсли;	
				
					ФайлВыгрузки.ДобавитьСтроку(
					СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
					ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		Иначе
			
			Для Каждого ТекГруппаТовара Из МассивГруппТоваровАгента Цикл
						
				ФайлВыгрузки.ДобавитьСтроку(
				СокрЛП(ТекСтрокаАгент.Агент.УникальныйИдентификатор())		+ Символ(9) +	// AgentRefID 
				ТекГруппаТовара.УникальныйИдентификатор());                     		    // ProductTreeRefID
					
			КонецЦикла;				
			
		КонецЕсли;	
		
	КонецЦикла;	
			
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\DeviceProductTree.txt", КодировкаТекста.ANSI);
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка привязки групп товаров к агентам произведена в " + КаталогВыгрузки + "\DeviceProductTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры 


Функция СписокАктуальныхКартинок()
	
	врмассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", ДобавитьМесяц(ТекущаяДата(), -2));
	Запрос.Текст = "ВЫБРАТЬ
	               |	вложенныйзапрос.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		РеализацияТоваровУслугТовары.Ссылка.Дата > &НачПериода
	               |		И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ПоступлениеТоваровУслугТовары.Номенклатура
	               |	ИЗ
	               |		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |	ГДЕ
	               |		ПоступлениеТоваровУслугТовары.Ссылка.Дата > &НачПериода
	               |		И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА) КАК вложенныйзапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вложенныйзапрос.Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врмассив.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат врмассив;
	
КонецФункции	


// Product.txt, Price.txt, ProductInStock.txt  

Процедура ЭкспортТоваров(толькоОстатки, врСписокПользователей = Неопределено)
	
	ЗамерСтарт = ТекущаяДата();	
	
	ЗапросТоварыБезНДС = Новый Запрос;
	ЗапросТоварыБезНДС.Текст = "ВЫБРАТЬ
	                           |	аян_НоменклатураБезНДС.Номенклатура
	                           |ИЗ
	                           |	РегистрСведений.аян_НоменклатураБезНДС КАК аян_НоменклатураБезНДС";
	врМассивНоменБезНДС = Новый Массив;
	ВыборкаТоварыБезНДС = ЗапросТоварыБезНДС.Выполнить().Выбрать();
	Пока ВыборкаТоварыБезНДС.Следующий() Цикл
		врМассивНоменБезНДС.Добавить(ВыборкаТоварыБезНДС.Номенклатура);
	КонецЦикла;	
	
	врТоварыСегментБисквит = Новый Массив;
	
	ЗапросБисквит = Новый Запрос;
	ЗапросБисквит.УстановитьПараметр("Сегмент", Справочники.СегментыНоменклатуры.НайтиПоКоду("00-00000001"));
	ЗапросБисквит.Текст = "ВЫБРАТЬ
	                      |	НоменклатураСегмента.Номенклатура
	                      |ИЗ
	                      |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	                      |ГДЕ
	                      |	НоменклатураСегмента.Сегмент = &Сегмент";
	ВыборкаБисквит = ЗапросБисквит.Выполнить().Выбрать();
	Пока ВыборкаБисквит.Следующий() Цикл
		врТоварыСегментБисквит.Добавить(ВыборкаБисквит.Номенклатура);
	КонецЦикла;	
	
	врМассивБанкиСкидка = Новый Массив;
	
	врМассивИскл = Новый Массив;
	врМассивИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00021082")); // Ермолаев Банки Скидка
	врМассивИскл.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00019435")); // Скидка Барабенское Банки
		
	ЗапросБанкиСкидка = Новый Запрос;
	ЗапросБанкиСкидка.УстановитьПараметр("Ссылка", врМассивИскл);
	ЗапросБанкиСкидка.Текст = "ВЫБРАТЬ
	                          |	Номенклатура.Ссылка
	                          |ИЗ
	                          |	Справочник.Номенклатура КАК Номенклатура
	                          |ГДЕ
	                          |	НЕ Номенклатура.ПометкаУдаления
	                          |	И НЕ Номенклатура.ЭтоГруппа
	                          |	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)";
	ВыборкаБанкиСкидка = ЗапросБанкиСкидка.Выполнить().Выбрать();
	Пока ВыборкаБанкиСкидка.Следующий() Цикл
		врМассивБанкиСкидка.Добавить(ВыборкаБанкиСкидка.Ссылка);
	КонецЦикла;	
	
	врМассивАктуальныхКартинок = СписокАктуальныхКартинок();
	
	// Фиксируем текущую матрицу товаров
	
	//врНЗ_Товары = РегистрыСведений.аян_Синхронизация_Товары.СоздатьНаборЗаписей();
	//врНЗ_Товары.Отбор.Сервер.Установить(ТекСервер);
	
	// Фиксируем текущую матрицу видов цен
	
	//врНЗ_Цены = РегистрыСведений.аян_Синхронизация_Цены.СоздатьНаборЗаписей();
	//врНЗ_Цены.Отбор.Сервер.Установить(ТекСервер);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем товары...");
	
	ТоварыНДС_10 = Новый Массив;
	
	файлВыгрузкиОстатков = Новый ТекстовыйДокумент;  //ProductInStock   //Текущие остатки товаров
	файлВыгрузкиОстатков.ДобавитьСтроку(
	"ProductRefID" 	+ Символ(9) +        //идентификатор товара  в системе
	"StockRefID" 	+ Символ(9) +        //идентификатор склада
	"Volume");                           //остаток товара в базовых единицах
	
	файлВыгрузкиТоваров = Новый ТекстовыйДокумент; //Product //Список всех товаров, с которыми работает хотя бы один агент.
	файлВыгрузкиТоваров.ДобавитьСтроку(
	"ProductRefID"			+ Символ(9) +
	"ProductName"			+ Символ(9) +
	"ProductTreeRefID"		+ Символ(9) +
	"ManufacturerTreeID"	+ Символ(9) +
	"CategoryTreeRefID"		+ Символ(9) +
	"MainMeasureUnitRefID"	+ Символ(9) +    
	"VATRate"				+ Символ(9) +
	"MaxDiscountRate"		+ Символ(9) +  
	"BasePrice"				+ Символ(9) +
	"MinPrice"				+ Символ(9) +
	"UnitsInBlock"			+ Символ(9) +
	"BlocksInBox"			+ Символ(9) +
	"UnitWeight"	        + Символ(9) +
	"ImageFileName"			+ Символ(9) +
	"PresenterTreeRefID"	+ Символ(9) +
	"Factor");
	
	файлЦеныТоваров = Новый ТекстовыйДокумент; //Price  //Список цен товаров.
	файлЦеныТоваров.ДобавитьСтроку(
	"ProductRefID"			+ Символ(9) +
	"PriceTypeRefID"		+ Символ(9) +
	"Price");
	
	врСписокТоваров = СписокДействующихТоваров();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыИскл",    аян_СинхронизацияСервер.Товары_НеИспользуемыеГруппыТоваров());
	Запрос.УстановитьПараметр("СписокТоваров", врСписокТоваров);	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Родитель
	|ПОМЕСТИТЬ вт_СписокНом
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Наименование <> """"
	|	И НЕ Номенклатура.ЭтоГруппа
	//|	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппыИскл)
	|	И Номенклатура.Ссылка В(&СписокТоваров)
	|	И Номенклатура.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвободныеОстаткиОстатки.Склад.Родитель, СвободныеОстаткиОстатки.Склад) КАК Склад,
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
	|	СУММА(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСкладаОстаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			&Период,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						вт_СписокНом КАК Т)
	|				И Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	ЕСТЬNULL(СвободныеОстаткиОстатки.Склад.Родитель, СвободныеОстаткиОстатки.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_СписокНом.Номенклатура КАК Номенклатура,
	|	вт_СписокНом.Родитель КАК Родитель,
	|	ЕСТЬNULL(Остатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток,
	|	ЕСТЬNULL(Остатки.ВРезервеСоСкладаОстаток, 0) КАК ВРезервеСоСкладаОстаток,
	|	Остатки.Склад КАК Склад
	|ИЗ
	|	вт_СписокНом КАК вт_СписокНом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО вт_СписокНом.Номенклатура = Остатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(Родитель),
	|	МАКСИМУМ(ВНаличииОстаток),
	|	МАКСИМУМ(ВРезервеСоСкладаОстаток)
	|ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если толькоОстатки=0 Тогда	
		
		ЗапросПоЦенам = Новый Запрос;
		ЗапросПоЦенам.УстановитьПараметр("Дата",              КонецДня(ТекущаяДата()));
		ЗапросПоЦенам.УстановитьПараметр("ВидЦены",           аян_СинхронизацияСервер.Товары_ВозможныеВидыЦен(врСписокПользователей, ИмяСервераМА));
		ЗапросПоЦенам.УстановитьПараметр("ИсклГруппыТоваров", аян_СинхронизацияСервер.Товары_НеИспользуемыеГруппыТоваров());
		ЗапросПоЦенам.УстановитьПараметр("СписокТоваров",     врСписокТоваров);	
		
		ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование,
		                      |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
		                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		                      |ИЗ
		                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, НЕ Номенклатура В ИЕРАРХИИ (&ИсклГруппыТоваров)) КАК ЦеныНоменклатурыСрезПоследних";
							  
		Если врСписокПользователей <> Неопределено Тогда
								  
			//ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
			//                      |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
			//                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
			//                      |ИЗ
			//                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			//                      |			&Дата,
			//                      |			ВидЦены В (&ВидЦены)
			//                      |				И НЕ Номенклатура В ИЕРАРХИИ (&ИсклГруппыТоваров)) КАК ЦеныНоменклатурыСрезПоследних";	
			
			ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
			                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование,
			                      |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
			                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
			                      |ИЗ
			                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			                      |			&Дата,
			                      |			ВидЦены В (&ВидЦены)
			                      |				И Номенклатура В (&СписокТоваров)) КАК ЦеныНоменклатурыСрезПоследних";									 
			
		КонецЕсли;						  
		
		РезультатЗапроса = ЗапросПоЦенам.Выполнить();
		
		//ТоварыТК = Новый Массив;
		//
		//ЗапросТК = Новый Запрос;
		//ЗапросТК.УстановитьПараметр("Ссылка", Справочники.Номенклатура.НайтиПоКоду("Ц0001120   "));
		//ЗапросТК.Текст = "ВЫБРАТЬ
		//                 |	Номенклатура.Ссылка
		//                 |ИЗ
		//                 |	Справочник.Номенклатура КАК Номенклатура
		//                 |ГДЕ
		//                 |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
		//                 |	И НЕ Номенклатура.ПометкаУдаления
		//                 |	И НЕ Номенклатура.ЭтоГруппа";
		//ВыборкаТК = ЗапросТК.Выполнить().Выбрать();
		//Пока ВыборкаТК.Следующий() Цикл
		//	ТоварыТК.Добавить(ВыборкаТК.Ссылка);
		//КонецЦикла;	
		
		//Если ИмяСервераМА = "Region" Тогда
		//	Омск_СписокТоваровСЦенами = Омск_Транзит_СписокТоваровСЦенами();
		//КонецЕсли;			
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Цена = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ИмяСервераМА <> "Region" Тогда
				
				файлЦеныТоваров.ДобавитьСтроку(
				СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())	+ Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
				СокрЛП(?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидЦены),ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор(),ОсновнойТипЦен.УникальныйИдентификатор()))		+ Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
				СокрЛП(Формат(ВыборкаДетальныеЗаписи.Цена, "ЧРД=.; ЧН=; ЧГ=")));
				
			Иначе
				
			//	Если ТоварыТК.Найти(ВыборкаДетальныеЗаписи.Номенклатура) = Неопределено Тогда
					
					файлЦеныТоваров.ДобавитьСтроку(
					СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())	+ Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
					СокрЛП(?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидЦены),ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор(),ОсновнойТипЦен.УникальныйИдентификатор()))		+ Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
					СокрЛП(Формат(ВыборкаДетальныеЗаписи.Цена, "ЧРД=.; ЧН=; ЧГ=")));					
					
			//	КонецЕсли;	
				
			КонецЕсли;	
			
			//Если ИмяСервераМА = "Region" Тогда
			//	
			//	Если ТоварыТК.Найти(ВыборкаДетальныеЗаписи.Номенклатура) = Неопределено Тогда
			//	
			//		врПоискОмск = Омск_СписокТоваровСЦенами.Найти(ВыборкаДетальныеЗаписи.Номенклатура, "Номенклатура");
			//		Если врПоискОмск <> Неопределено Тогда
			//			Омск_СписокТоваровСЦенами.Удалить(врПоискОмск);
			//		КонецЕсли;	
			//		
			//	КонецЕсли;	
			//	
			//КонецЕсли;				
			
			//НовСтрокаНЗ_Цены = врНЗ_Цены.Добавить();
			//НовСтрокаНЗ_Цены.Сервер        = ТекСервер;
			//НовСтрокаНЗ_Цены.СтатусЗаписи  = Перечисления.аян_Синхронизация_СтатусыЗаписей.Используется;
			//НовСтрокаНЗ_Цены.Номенклатура  = ВыборкаДетальныеЗаписи.Номенклатура;
			//НовСтрокаНЗ_Цены.ВидЦены       = ВыборкаДетальныеЗаписи.ВидЦены;
			//НовСтрокаНЗ_Цены.Цена          = ВыборкаДетальныеЗаписи.Цена;
			//НовСтрокаНЗ_Цены.ДатаИзменения = ТекущаяДата();
			
			//--> (БОВ) 
			
			Для Каждого ТекВидЦеныСкидка Из СкидкиПоВидамЦен Цикл
				
				Если ВыборкаДетальныеЗаписи.ВидЦены  = ТекВидЦеныСкидка.ВидЦен Тогда
					
					врЦенаСоСкидкой = ВыборкаДетальныеЗаписи.Цена - Окр(ВыборкаДетальныеЗаписи.Цена * ТекВидЦеныСкидка.Значение / 100, 2);
					
					файлЦеныТоваров.ДобавитьСтроку(
					СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())	+ Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
					СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор()) + "_" + Строка(ТекВидЦеныСкидка.Значение))		+ Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
					СокрЛП(Формат(врЦенаСоСкидкой, "ЧРД=.; ЧН=; ЧГ=")));
					
				КонецЕсли;
				
			КонецЦикла;	
			
			
			// Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") Тогда
			//	
			//	врЭтоАкционныйТовар = Ложь;
			//	врНаименТовара = ВРЕГ(ВыборкаДетальныеЗаписи.Наименование);
			//	Если СтрЧислоВхождений(врНаименТовара, "АКЦИЯ") > 0 Тогда
			//		врЭтоАкционныйТовар = Истина;	
			//	КонецЕсли;	
			//	Если СтрЧислоВхождений(врНаименТовара, "БОНУС") > 0 Тогда
			//		врЭтоАкционныйТовар = Истина;	
			//	КонецЕсли;	
			//	Если СтрЧислоВхождений(врНаименТовара, "УЦЕНКА") > 0 Тогда
			//		врЭтоАкционныйТовар = Истина;	
			//	КонецЕсли;	
			//
			//	Если (НЕ врЭтоАкционныйТовар) И (врМассивБанкиСкидка.Найти(ВыборкаДетальныеЗаписи.Номенклатура) = Неопределено) И (Товары_СоциальныеГруппыТоваров.Найти(ВыборкаДетальныеЗаписи.Номенклатура) = Неопределено) Тогда
			//		врЦенаСоСкидкой  = ВыборкаДетальныеЗаписи.Цена - Окр(ВыборкаДетальныеЗаписи.Цена * (-8.5) / 100, 2);
			//		врЦенаСоСкидкой2 = ВыборкаДетальныеЗаписи.Цена - Окр(ВыборкаДетальныеЗаписи.Цена * (-5) / 100, 2);
			//	Иначе
			//		врЦенаСоСкидкой  = ВыборкаДетальныеЗаписи.Цена;
			//		врЦенаСоСкидкой2 = ВыборкаДетальныеЗаписи.Цена;
			//	КонецЕсли;	
			//		
			//	файлЦеныТоваров.ДобавитьСтроку(
			//	СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())			  + Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
			//	СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор()) + "_SG1") + Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
			//	СокрЛП(Формат(врЦенаСоСкидкой, "ЧРД=.; ЧН=; ЧГ=")));				
			//	
			//	файлЦеныТоваров.ДобавитьСтроку(
			//	СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())			  + Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
			//	СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор()) + "_SG2") + Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
			//	СокрЛП(Формат(врЦенаСоСкидкой2, "ЧРД=.; ЧН=; ЧГ=")));								
			//	
			//КонецЕсли;	
			
			//Если (ИмяСервераМА <> "Tomsk") И (ИмяСервераМА <> "Sever") Тогда
			//	
			//	Если (врТоварыСегментБисквит.Найти(ВыборкаДетальныеЗаписи.Номенклатура) <> Неопределено) И (Товары_СоциальныеГруппыТоваров.Найти(ВыборкаДетальныеЗаписи.Номенклатура) = Неопределено) Тогда
			//		врЦенаСоСкидкой  = ВыборкаДетальныеЗаписи.Цена - Окр(ВыборкаДетальныеЗаписи.Цена * (10) / 100, 2);
			//	Иначе
			//		врЦенаСоСкидкой  = ВыборкаДетальныеЗаписи.Цена;
			//	КонецЕсли;	
			//		
			//	файлЦеныТоваров.ДобавитьСтроку(
			//	СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор())			  + Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
			//	СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор()) + "_SGR") + Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
			//	СокрЛП(Формат(врЦенаСоСкидкой, "ЧРД=.; ЧН=; ЧГ=")));				
			//					
			//КонецЕсли;				
			
			//<-- (БОВ) 
			
		КонецЦикла;                                                                          
	КонецЕсли;
	
	
	// ОМСК ТРАНЗИТ
	
	
	//Если ИмяСервераМА = "Region" Тогда
	//	
	//	Омск_ВидыЦен = аян_СинхронизацияСервер.Товары_ВозможныеВидыЦен(врСписокПользователей, ИмяСервераМА);
	//	
	//	Для Каждого ОмскТекВидЦены Из Омск_ВидыЦен Цикл
	//	
	//		Для Каждого ОмскТекСтрока Из Омск_СписокТоваровСЦенами Цикл
	//		
	//			ФайлЦеныТоваров.ДобавитьСтроку(
	//			СокрЛП(ОмскТекСтрока.Номенклатура.УникальныйИдентификатор())										+ Символ(9) +  
	//			СокрЛП(ОмскТекВидЦены.УникальныйИдентификатор())													+ Символ(9) + 
	//			СокрЛП(Формат(ОмскТекСтрока.Цена, "ЧРД=.; ЧН=; ЧГ=")));	
	//			
	//			Для Каждого ТекВидЦеныСкидка Из СкидкиПоВидамЦен Цикл
	//								
	//				врЦенаСоСкидкой = ОмскТекСтрока.Цена - Окр(ОмскТекСтрока.Цена * ТекВидЦеныСкидка.Значение / 100, 2);
	//				
	//				ФайлЦеныТоваров.ДобавитьСтроку(
	//				СокрЛП(ОмскТекСтрока.Номенклатура.УникальныйИдентификатор())														+ Символ(9) + 
	//				СокрЛП(Строка(ВыборкаДетальныеЗаписи.ВидЦены.УникальныйИдентификатор()) + "_" + Строка(ТекВидЦеныСкидка.Значение))	+ Символ(9) +  
	//				СокрЛП(Формат(врЦенаСоСкидкой, "ЧРД=.; ЧН=; ЧГ=")));
	//				
	//			КонецЦикла;
	//			
	//		КонецЦикла;	
	//					
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	
	
	// ОМСК ТРАНЗИТ
	
	
	Запрос.УстановитьПараметр("Период",		КонецДня(ТекущаяДата())); 
	Если толькоОстатки=1 Тогда 
		Если ЗначениеЗаполнено(СкладАгента) Тогда
			Запрос.УстановитьПараметр("Склады", ПолучитьМассивСкладов(СкладАгента));
		Иначе 
			ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+"<-Выгрузка текущих остатков не выполнена, так как не указан склад у Агента: """ + ТекАгент+"""");
			Возврат;
		КонецЕсли;
	Иначе 
		Запрос.УстановитьПараметр("Склады", ПолучитьМассивСкладов(Склады)); 
	КонецЕсли;
	
	КартинкаЕсть = Ложь;
	РубрикиСФото.Очистить();	
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаНоменклатура.Следующий() Цикл
		//Product
		Если толькоОстатки = 0 Тогда
			
			КартинкаЕсть = Истина;
						
			Попытка
				
				Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура.ФайлКартинки) Тогда
					
					врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
					
					Если врТекущийЧас < 1 Тогда
				
						ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаНоменклатура.Номенклатура.ФайлКартинки);
				
						Если ДанныеФайла.СсылкаНаДвоичныеДанныеФайла <> Неопределено Тогда
						
							РазмерФайлаМб = Окр(ДанныеФайла.Размер / 1024 / 1024, 2, 1);
					
							ПутьККартинке            = РабочийКаталог + "Product\Pictures" + "\" + Строка(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) + ".jpg";						
							ПутьККартинке2           = РабочийКаталог + "Product\NewImages" + "\" + Строка(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) + ".jpg";						
							ПутьКНеформатнойКартинке = РабочийКаталог + "Product\BigPictures" + "\" + Строка(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) + ".jpg";						
					
							Файл = Новый Файл(ПутьККартинке);
							Если НЕ Файл.Существует() Тогда
							
								Картинка = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);	
							
								//Если РазмерФайлаМб > 1 Тогда
								//
								//	Картинка.Записать(ПутьКНеформатнойКартинке);										
								//	ЗаписатьИнформацию1СвЛогФайл("Большой размер картинки", "Размер: " + Строка(РазмерФайлаМб) + " - " + Строка(ВыборкаНоменклатура.Номенклатура.Наименование));
								//
								//Иначе	
								
									Картинка.Записать(ПутьККартинке);	
									Картинка.Записать(ПутьККартинке2);	
									
									КартинкаЕсть = Истина;
								
								//КонецЕсли;
							
								УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
						
							Иначе
							//
							//	Если РазмерФайлаМб > 1 Тогда
							//	
							//		Картинка = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);	
							//		Картинка.Записать(ПутьКНеформатнойКартинке);
							//	//	ЗаписатьИнформацию1СвЛогФайл("Большой размер картинки", "Размер: " + Строка(РазмерФайлаМб) + " - " + Строка(ВыборкаНоменклатура.Номенклатура.Наименование));
							//		
							//		УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
							//	
							//	Иначе
								
									Если ДанныеФайла.ДатаМодификацииУниверсальная > Файл.ПолучитьУниверсальноеВремяИзменения() Тогда
								
										Картинка = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);	
										Картинка.Записать(ПутьККартинке);	
										Картинка.Записать(ПутьККартинке2);	
										
										УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
										
									КонецЕсли;	
								
							//	КонецЕсли;	
							
								КартинкаЕсть =  Истина;
							
							КонецЕсли;					
							
						КонецЕсли;	
																
						Если КартинкаЕсть Тогда
							ДобавитьРубрикуСФото(ВыборкаНоменклатура.Родитель);				
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЕсли;					
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл("Выгрузка картинок презентера", Строка(ВыборкаНоменклатура.Номенклатура), ИнформацияОбОшибке(), Истина);
				
				КартинкаЕсть = Ложь;
				
			КонецПопытки;
			
			//Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Region")Тогда
				Если врМассивАктуальныхКартинок.Найти(ВыборкаНоменклатура.Номенклатура) = Неопределено Тогда
					КартинкаЕсть = Ложь;
				КонецЕсли;	
			//КонецЕсли;	
			
			врКратностьТовара = аян_СинхронизацияСервер.Товары_КратностьЗаказа(ВыборкаНоменклатура.Номенклатура);
			
			Если ТоварыБонусБезКратности.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
				врКратностьТовара = 0;	
			КонецЕсли;	
			
			врКратностьТовара = Цел(врКратностьТовара);
				
			//Если ИмяСервераМА = "Region" Тогда
			//	врКратностьТовара = 0;
			//КонецЕсли;	  
			
			врНаимен = СокрЛП(ВыборкаНоменклатура.Номенклатура.Наименование);
			врСрок   = ВыборкаНоменклатура.Номенклатура.СрокГодности;
			Если врСрок > 0 Тогда
				врНаимен = врНаимен + " (" + Формат(врСрок, "ЧГ=") + "сут)";
			КонецЕсли;	
			Если врМассивНоменБезНДС.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
				врНаимен = "$" + врНаимен;
			КонецЕсли;	
			
			файлВыгрузкиТоваров.ДобавитьСтроку(
			СокрЛП(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор())		+ Символ(9) +  //ProductRefID  			- Идентификатор товара в системе учета заказчика
			//СокрЛП(ВыборкаНоменклатура.Номенклатура.Наименование)					+ Символ(9) +  //ProductName			- Название товара
			врНаимен                                                                + Символ(9) + 
			СокрЛП(?(ЗначениеЗаполнено(ВыборкаНоменклатура.Родитель),ВыборкаНоменклатура.Родитель.УникальныйИдентификатор(),""))			+ Символ(9) +  //ProductTreeRefID		- Идентификатор группы товаров, к которой принадлежит товар
			""																		+ Символ(9) +  //ManufacturerTreeID		- Идентификатор производителя товаров, к которому принадлежит товар
		//	""																		+ Символ(9) +  //CategoryTreeRefID		- Идентификатор категории товаров, к которой принадлежит товар
			СокрЛП(?(ЗначениеЗаполнено(ВыборкаНоменклатура.Родитель), "CTG_" + ВыборкаНоменклатура.Родитель.УникальныйИдентификатор(), ""))			+ Символ(9) +  ////CategoryTreeRefID
			СокрЛП(ВыборкаНоменклатура.Номенклатура.ЕдиницаИзмерения.УникальныйИдентификатор())	+ Символ(9) +  //MainMeasureUnitRefID	- Идентификатор единицы измерения
			?(ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура.СтавкаНДС),Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ="),0) + Символ(9) + //VATRate - НДС, от 0 до 1. По умолчанию 0
			"0"												+ Символ(9) +                          //MaxDiscountRate        - Максимально допустимая скидка. По умолчанию 0
			"0"												+ Символ(9) +                          //BasePrice              - Базовая (розничная) цена. По умолчанию 0
			"0"												+ Символ(9) +                          //MinPrice               - Минимальная цена на товар. По умолчанию 0
			"0"												+ Символ(9) +                          //MinPrice               - Минимальная цена на товар. По умолчанию 0
			"9999"											+ Символ(9) +  							//BlocksInBox            - Количество упаковок в коробке, например, количество блоков сигарет в коробке. Если не используется, запишите 0 (ранее было 9999 или 99999)			
			Формат(ВыборкаНоменклатура.Номенклатура.Вес, "ЧРД=.; ЧГ=")   + Символ(9) +
			?(КартинкаЕсть, СокрЛП(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) + ".jpg","") + Символ(9) + // ImageFileName
			?(КартинкаЕсть, ВыборкаНоменклатура.Родитель.УникальныйИдентификатор(), "") + Символ(9) +
			Формат(врКратностьТовара, "ЧРД=.; ЧГ="));			
			
			//НовСтрокаНЗ_Товары = врНЗ_Товары.Добавить();
			//НовСтрокаНЗ_Товары.Сервер        = ТекСервер;
			//НовСтрокаНЗ_Товары.СтатусЗаписи  = Перечисления.аян_Синхронизация_СтатусыЗаписей.Используется;
			//НовСтрокаНЗ_Товары.Родитель      = ВыборкаНоменклатура.Номенклатура.Родитель;
			//НовСтрокаНЗ_Товары.Номенклатура  = ВыборкаНоменклатура.Номенклатура;
			//НовСтрокаНЗ_Товары.ДатаИзменения = ТекущаяДата();			
			
			//Если ВыборкаНоменклатура.Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
			//	ТоварыНДС_10.Добавить(ВыборкаНоменклатура.Номенклатура);
			//КонецЕсли;	
			
			//Запрос50 = Новый Запрос;
			//Запрос50.УстановитьПараметр("Сервер", ПолучитьТекущийСервер(ИмяСервераМА));
			//Запрос50.Текст = "ВЫБРАТЬ
			//                 |	аян_Синхронизация_ТОП50.Номенклатура,
			//                 |	аян_Синхронизация_ТОП50.Порядок
			//                 |ИЗ
			//                 |	РегистрСведений.аян_Синхронизация_ТОП50 КАК аян_Синхронизация_ТОП50
			//                 |ГДЕ
			//                 |	аян_Синхронизация_ТОП50.Сервер = &Сервер";
			//Выборка50 = Запрос50.Выполнить().Выбрать();
			//Пока Выборка50.Следующий() Цикл
			//	
			//	врКратностьТовара = аян_СинхронизацияСервер.Товары_КратностьЗаказа(Выборка50.Номенклатура);
			//
			//	Если ТоварыБонусБезКратности.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
			//		врКратностьТовара = 0;	
			//	КонецЕсли;	
			//
			//	врКратностьТовара = Цел(врКратностьТовара);
			//	
			//	врНаименование = Формат(Выборка50.Порядок, "ЧЦ=2; ЧВН=") + "_" + Выборка50.Номенклатура.Наименование;
			//	
			//	файлВыгрузкиТоваров.ДобавитьСтроку(
			//	СокрЛП(Выборка50.Номенклатура.УникальныйИдентификатор() + "_T50")		+ Символ(9) +  //ProductRefID  			- Идентификатор товара в системе учета заказчика
			//	СокрЛП(врНаименование)					+ Символ(9) +  //ProductName			- Название товара
			//	СокрЛП(?(ЗначениеЗаполнено(Выборка50.Родитель),Выборка50.Родитель.УникальныйИдентификатор(),""))			+ Символ(9) +  //ProductTreeRefID		- Идентификатор группы товаров, к которой принадлежит товар
			//	""																		+ Символ(9) +  //ManufacturerTreeID		- Идентификатор производителя товаров, к которому принадлежит товар
			//	//	""																		+ Символ(9) +  //CategoryTreeRefID		- Идентификатор категории товаров, к которой принадлежит товар
			//	СокрЛП(?(ЗначениеЗаполнено(Выборка50.Родитель), "CTG_" + Выборка50.Родитель.УникальныйИдентификатор(), ""))			+ Символ(9) +  ////CategoryTreeRefID
			//	СокрЛП(Выборка50.Номенклатура.ЕдиницаИзмерения.УникальныйИдентификатор())	+ Символ(9) +  //MainMeasureUnitRefID	- Идентификатор единицы измерения
			//	?(ЗначениеЗаполнено(Выборка50.Номенклатура.СтавкаНДС),Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка50.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ="),0) + Символ(9) + //VATRate - НДС, от 0 до 1. По умолчанию 0
			//	"0"												+ Символ(9) +                          //MaxDiscountRate        - Максимально допустимая скидка. По умолчанию 0
			//	"0"												+ Символ(9) +                          //BasePrice              - Базовая (розничная) цена. По умолчанию 0
			//	"0"												+ Символ(9) +                          //MinPrice               - Минимальная цена на товар. По умолчанию 0
			//	"0"												+ Символ(9) +                          //MinPrice               - Минимальная цена на товар. По умолчанию 0
			//	"9999"											+ Символ(9) +  							//BlocksInBox            - Количество упаковок в коробке, например, количество блоков сигарет в коробке. Если не используется, запишите 0 (ранее было 9999 или 99999)			
			//	Формат(Выборка50.Номенклатура.Вес, "ЧРД=.; ЧГ=")   + Символ(9) +
			//	?(Истина, СокрЛП(Выборка50.Номенклатура.УникальныйИдентификатор()) + ".jpg","") + Символ(9) + // ImageFileName
			//	?(Истина, Выборка50.Родитель.УникальныйИдентификатор(), "") + Символ(9) +
			//	Формат(врКратностьТовара, "ЧРД=.; ЧГ="));			
			//	
			//КонецЦикла;	
			
			ВыборПоСкладам = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборПоСкладам.Следующий() Цикл 
				ВРезервеОстаток = ?(ВыборПоСкладам.ВРезервеСоСкладаОстаток < 0, 0, ВыборПоСкладам.ВРезервеСоСкладаОстаток);
				Если ВыборПоСкладам.ВНаличииОстаток - ВРезервеОстаток > 0 Тогда
					файлВыгрузкиОстатков.ДобавитьСтроку(
					СокрЛП(ВыборПоСкладам.Номенклатура.УникальныйИдентификатор()) 	+ Символ(9) + 
					СокрЛП(ВыборПоСкладам.Склад.УникальныйИдентификатор())			+ Символ(9) +
					Формат(ВыборПоСкладам.ВНаличииОстаток - ВРезервеОстаток, "ЧРД=.; ЧГ="));
					//Формат(1, "ЧРД=.; ЧГ="));
				КонецЕсли;
				
				
				
				
				//ВыборкаЦен = ВыборПоСкладам.Выбрать();
				//Пока ВыборкаЦен.Следующий() Цикл 
				//	Если ВыборкаЦен.Цена>0 Тогда  
				//		файлЦеныТоваров.ДобавитьСтроку(
				//		СокрЛП(ВыборкаЦен.Номенклатура.УникальныйИдентификатор())	+ Символ(9) +  //ProductRefID 	- Идентификатор товара в системе учета заказчика
				//		СокрЛП(?(ЗначениеЗаполнено(ВыборкаЦен.ВидЦены),ВыборкаЦен.ВидЦены.УникальныйИдентификатор(),ОсновнойТипЦен.УникальныйИдентификатор()))		+ Символ(9) +  //PriceTypeRefID	- Идентификатор типа цены в системе учета заказчика
				//		СокрЛП(Формат(ВыборкаЦен.Цена, "ЧРД=.; ЧН=; ЧГ=")));
				//	КонецЕсли;
				//КонецЦикла;
			КонецЦикла;
			
		Иначе
			ВыборПоСкладам = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборПоСкладам.Следующий() Цикл 
				ВРезервеОстаток = ?(ВыборПоСкладам.ВРезервеСоСкладаОстаток < 0, 0, ВыборПоСкладам.ВРезервеСоСкладаОстаток);
				Если ВыборПоСкладам.ВНаличииОстаток - ВРезервеОстаток > 0 Тогда
					файлВыгрузкиОстатков.ДобавитьСтроку(
					СокрЛП(ВыборПоСкладам.Номенклатура.УникальныйИдентификатор()) 	+ Символ(9) + 
					СокрЛП(ВыборПоСкладам.Склад.УникальныйИдентификатор())			+ Символ(9) +
					Формат(ВыборПоСкладам.ВНаличииОстаток - ВРезервеОстаток, "ЧРД=.; ЧГ="));
					//Формат(1, "ЧРД=.; ЧГ="));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		//MeasureUnit	
		//файлЕдИзмТоваров.ДобавитьСтроку(
		//	СокрЛП(ВыборкаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Код)						+ Символ(9) +
		//	СокрЛП(ВыборкаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код)+ Символ(9) +
		//	Формат(ВыборкаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, "ЧРД=.; ЧГ=")	+ Символ(9) +
		//	?(ВыборкаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору = ВыборкаНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения,"True","False"));
		
		//Выборка = ВыборкаНоменклатура.Выбрать();	
		//Пока Выборка.Следующий() Цикл
		//	Если Выборка.КоличествоОстаток - Выборка.КоличествоРезерв > 0 Тогда
		//		файлВыгрузкиОстатков.ДобавитьСтроку(СокрЛП(Выборка.Номенклатура.Код) 	+ Символ(9) + 
		//		СокрЛП(Выборка.Склад.УникальныйИдентификатор())							+ Символ(9) +
		//		Формат(Выборка.КоличествоОстаток - Выборка.КоличествоРезерв, "ЧРД=.; ЧГ="));
		//	КонецЕсли;
		//КонецЦикла;	
		
		//терехин++
		//отключем контроль остатков
		//терехин--
		
	КонецЦикла;	
	
	//Если толькоОстатки = 0 Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	
	//	"ВЫБРАТЬ
	//	|	Номенклатура.Ссылка КАК Номенклатура
	//	|ПОМЕСТИТЬ вт_СписокНом
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	НЕ Номенклатура.ПометкаУдаления
	//	|	И Номенклатура.Наименование <> """"
	//	|	И НЕ Номенклатура.ЭтоГруппа
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	//	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	//	|ИЗ
	//	|	вт_СписокНом КАК вт_СписокНом
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//	|				КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
	//	//		|				ВидЦены В (&СписокТиповЦен)
	//	|				ВидЦены = &ОсновнойТипЦен
	//	|					И Номенклатура В
	//	|						(ВЫБРАТЬ
	//	|							вт_СписокНом.Номенклатура
	//	|						ИЗ
	//	|							вт_СписокНом)) КАК ЦеныНоменклатурыСрезПоследних
	//	|		ПО вт_СписокНом.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	//	
	//	Запрос.УстановитьПараметр("Период",		КонецДня(ТекущаяДата())); 
	//	//Запрос.УстановитьПараметр("СписокТиповЦен",	СписокТиповЦен); 
	//	Запрос.УстановитьПараметр("ОсновнойТипЦен",	ОсновнойТипЦен); 
	//	
	//	//ТЗ = Новый ТаблицаЗначений;
	//	//ТЗ = Запрос.Выполнить().Выгрузить();
	//	//ТЗ = "";
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.Цена > 0 Тогда
	//			файлЦеныТоваров.ДобавитьСтроку(СокрЛП(Выборка.Номенклатура.Код) 	+ Символ(9) + 
	//			СокрЛП(Выборка.ВидЦены.УникальныйИдентификатор())					+ Символ(9) +
	//			СокрЛП(Формат(Выборка.Цена, "ЧРД=.; ЧН=; ЧГ=")));	
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;		
	
	//Попытка
	//	врНЗ_Цены.Записать(Истина);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("Price.txt", "Исключение при записи набора аян_Синхронизация_Цены", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;	
	//
	//Попытка
	//	врНЗ_Товары.Записать(Истина);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("Product.txt", "Исключение при записи набора аян_Синхронизация_Товары", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;		
	
	Если толькоОстатки = 0 тогда
		файлВыгрузкиТоваров.ВставитьСтроку(1, Формат(файлВыгрузкиТоваров.КоличествоСтрок() - 1, "ЧГ="));
		файлВыгрузкиТоваров.Записать(каталогВыгрузки + "\Product.txt",КодировкаТекста.ANSI);
		
	//	файлВыгрузкиТоваров.Записать(РабочийКаталог + "DailyOriginal\Product.txt", КодировкаТекста.ANSI);								
		
		//Сообщить("<-Выгрузка продуктов произведена в " + каталогВыгрузки + "\Product.txt");
		ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка продуктов произведена в " + каталогВыгрузки + "\Product.txt");
		
		//файлЕдИзмТоваров.ВставитьСтроку(1, Формат(файлЕдИзмТоваров.КоличествоСтрок() - 1, "ЧГ="));
		//файлЕдИзмТоваров.Записать(каталогВыгрузки + "\ProductMeasureUnit.txt",КодировкаТекста.ANSI);
		//Сообщить("<-Выгрузка единиц измерения товаров произведена в " + каталогВыгрузки + "\ProductMeasureUnit.txt");
		//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка единиц измерения товаров произведена в " + каталогВыгрузки + "\ProductMeasureUnit.txt");
		
		файлЦеныТоваров.ВставитьСтроку(1, Формат(файлЦеныТоваров.КоличествоСтрок() - 1, "ЧГ="));
		файлЦеныТоваров.Записать(каталогВыгрузки + "\Price.txt",КодировкаТекста.ANSI);
		
	//	файлЦеныТоваров.Записать(РабочийКаталог + "DailyOriginal\Price.txt", КодировкаТекста.ANSI);						
		
		//Сообщить("<-Выгрузка цен продуктов произведена в " + каталогВыгрузки + "\Price.txt");
		ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка цен продуктов произведена в " + каталогВыгрузки + "\Price.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");		
	КонецЕсли;	
	
	//файлВыгрузкиОстатков.ВставитьСтроку(1, Формат(файлВыгрузкиОстатков.КоличествоСтрок() - 1, "ЧГ="));
	//файлВыгрузкиОстатков.Записать(каталогВыгрузки + "\ProductInStock.txt",КодировкаТекста.ANSI); 
	////Сообщить("<-Выгрузка текущих остатков товара на складе произведена в " + каталогВыгрузки + "\ProductInStock.txt");
	//
	//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка текущих остатков товара на складе произведена в " + каталогВыгрузки + "\ProductInStock.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры   


// Экспорт цен при оперативной синхронизации

Процедура ЭкспортЦен_Оперативная()
	
	ЗамерСтарт = ТекущаяДата();
	
	ФайлЦеныТоваров = Новый ТекстовыйДокумент; 
	ФайлЦеныТоваров.ДобавитьСтроку(
	"ProductRefID"			+ Символ(9) +
	"PriceTypeRefID"		+ Символ(9) +
	"Price"                 + Символ(9) +
	"IsDeleted");
	
	СписокСтатусовЗаписей = Новый СписокЗначений;
	СписокСтатусовЗаписей.Добавить(Перечисления.аян_Синхронизация_СтатусыЗаписей.Выгрузить);
	СписокСтатусовЗаписей.Добавить(Перечисления.аян_Синхронизация_СтатусыЗаписей.Добавить);
	СписокСтатусовЗаписей.Добавить(Перечисления.аян_Синхронизация_СтатусыЗаписей.Удалить);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",       ТекСервер);
	Запрос.УстановитьПараметр("СтатусЗаписи", СписокСтатусовЗаписей);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_Синхронизация_Цены.СтатусЗаписи,
	               |	аян_Синхронизация_Цены.Номенклатура,
	               |	аян_Синхронизация_Цены.ВидЦены,
	               |	аян_Синхронизация_Цены.Цена
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_Цены КАК аян_Синхронизация_Цены
	               |ГДЕ
	               |	аян_Синхронизация_Цены.Сервер = &Сервер
	               |	И аян_Синхронизация_Цены.СтатусЗаписи В(&СтатусЗаписи)";
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РЗ.Выбрать();
	
	ЗапросСкидки = Новый Запрос;
	ЗапросСкидки.УстановитьПараметр("Сервер", ИмяСервераМА);
	ЗапросСкидки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                     |	ЕСТЬNULL(аян_СинхронизацияТТ.Скидка, 0) КАК Скидка
	                     |ИЗ
	                     |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	                     |ГДЕ
	                     |	аян_СинхронизацияТТ.Сервер = &Сервер
	                     |	И аян_СинхронизацияТТ.ВидЦены = &ВидЦены";
	
	Пока Выборка.Следующий() Цикл
		
		ЗапросСкидки.УстановитьПараметр("ВидЦены", Выборка.ВидЦены);
		ВыборкаСкидки = ЗапросСкидки.Выполнить().Выбрать();
		
		Пока ВыборкаСкидки.Следующий() Цикл
			
			врЦена = Выборка.Цена;
			
			Если ВыборкаСкидки.Скидка = 0 Тогда
				врВидЦены = Выборка.ВидЦены.УникальныйИдентификатор();
			Иначе
				врВидЦены = СокрЛП(Выборка.ВидЦены.УникальныйИдентификатор()) + "_" + Строка(ВыборкаСкидки.Скидка);
				врЦена    = Выборка.Цена - Окр(Выборка.Цена * ВыборкаСкидки.Скидка / 100, 2);
			КонецЕсли;	
			
			врФлагУдаления = ?(Выборка.СтатусЗаписи = Перечисления.аян_Синхронизация_СтатусыЗаписей.Удалить, "True", "False");
			
			ФайлЦеныТоваров.ДобавитьСтроку(
			СокрЛП(Выборка.Номенклатура.УникальныйИдентификатор())	+ Символ(9) 	+  
			СокрЛП(врВидЦены)										+ Символ(9) 	+  
			СокрЛП(Формат(врЦена, "ЧРД=.; ЧН=; ЧГ="))               + Символ(9) 	+  
			СокрЛП(врФлагУдаления));
			
			ЗаписатьИнформацию1СвЛогФайл("ЦЕНЫ (ИЗМЕНЕНИЕ)", "Сервер: " + СокрЛП(ТекСервер) + "; Статус: " + СокрЛП(Выборка.СтатусЗаписи) + "; Товар: " + СокрЛП(Выборка.Номенклатура) + "; Вид цены: " + СокрЛП(Выборка.ВидЦены) + "; Скидка: " + СокрЛП(ВыборкаСкидки.Скидка) + "; Цена: "  + СокрЛП(врЦена));
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	врДанныеВыгружены = Ложь;
	
	Попытка
		ФайлЦеныТоваров.ВставитьСтроку(1, Формат(ФайлЦеныТоваров.КоличествоСтрок() - 1, "ЧГ="));
		ФайлЦеныТоваров.Записать(КаталогВыгрузки + "\Price.txt", КодировкаТекста.ANSI);
		врДанныеВыгружены = Истина;
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка цен (ОПЕРАТИВНАЯ) " + КаталогВыгрузки + "\Price.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Выгрузка ЦЕН (ОПЕРАТИВНАЯ)", "Исключение при записи файла...", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Если врДанныеВыгружены Тогда
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтатусЗаписи <> Перечисления.аян_Синхронизация_СтатусыЗаписей.Удалить Тогда
				МЗ = РегистрыСведений.аян_Синхронизация_Цены.СоздатьМенеджерЗаписи();
				МЗ.Сервер        = ТекСервер ;
				МЗ.СтатусЗаписи  = Выборка.СтатусЗаписи;
				МЗ.Номенклатура  = Выборка.Номенклатура;
				МЗ.ВидЦены       = Выборка.ВидЦены;
				МЗ.ДатаИзменения = ТекущаяДата();
				МЗ.Прочитать();
				Если МЗ.Выбран() Тогда
					МЗ.СтатусЗаписи = Перечисления.аян_Синхронизация_СтатусыЗаписей.Используется;
					МЗ.Записать(Истина);
				КонецЕсли;	
			Иначе
				МЗ = РегистрыСведений.аян_Синхронизация_Цены.СоздатьМенеджерЗаписи();
				МЗ.Сервер        = ТекСервер ;
				МЗ.СтатусЗаписи  = Перечисления.аян_Синхронизация_СтатусыЗаписей.Удалить;
				МЗ.Номенклатура  = Выборка.Номенклатура;
				МЗ.ВидЦены       = Выборка.ВидЦены;
				МЗ.Цена          = Выборка.Цена;
				МЗ.Удалить();
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

	
// ProductInStock.txt  

Процедура ЭкспортОстатковТоваров()
	
	Возврат;
	
	Событие1С = "Выгрузка остатков товаров (ProductInStock.txt)";
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем остатки товаров...");
	
	Попытка 
		
		ДатаВыгрузкиОстатков = Константы.аян_СинхронизацияДатаВыгрузкиОстатков.Получить();
		
		Если (ТекущаяДата() - ДатаВыгрузкиОстатков) < 180 Тогда
			КопироватьФайл(РабочийКаталог + "DevEmu\ProductInStock.txt", КаталогВыгрузки + "\ProductInStock.txt");
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Файл остатков товаров скопирован... ");
			Возврат;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Копирование файла остатков товаров. Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	// Кратность товаров
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Кратность заказа"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Товар,
	               |	НоменклатураДополнительныеРеквизиты.Значение КАК Кратность
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НЕ НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	               |	И НЕ НоменклатураДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	               |	И НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
	               |	И НоменклатураДополнительныеРеквизиты.Значение > 0";
	ТЗКратностьТоваров = Запрос.Выполнить().Выгрузить();		
	
	//ProductInStock.txt
	
	файлВыгрузкиОстатков = Новый ТекстовыйДокумент;     
	файлВыгрузкиОстатков.ДобавитьСтроку(
	"ProductRefID" 		+ Символ(9) +        // Идентификатор товара  в системе
	"StockRefID" 		+ Символ(9) +        // Идентификатор склада
	"Volume");          	                 // Остаток товара в базовых единицах
	
	// Реальные склады
	
	РеалСкладГруппаТомск  = Справочники.Склады.НайтиПоНаименованию("Томск",            Истина);
	РеалСкладГруппаОмск   = Справочники.Склады.НайтиПоНаименованию("Омск",             Истина);
	РеалСкладТомскПиво    = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий",   Истина);
//	РеалСкладТомскРИФПлюс = Справочники.Склады.НайтиПоНаименованию("Томск РИФ+ общий", Истина);
	РеалСкладТомскРИФПлюс = СкладРИФПлюс;
		
	// Виртуальные склады
	
	ВиртСклад_АТЛогистик_ID   = "VR_STOCK_ATLOG";
	ВиртСклад_РИФПлюс_ID      = "VR_STOCK_RIFPLUS";
	ВиртСклад_ТОП17_ID        = "VR_STOCK_TOP17";
	ВиртСклад_Меркурий_ID     = "VR_STOCK_MERCURY";
	ВиртСклад_Марс_ID  	      = "VR_STOCK_MARS";
	ВиртСклад_Сигма_ID  	  = "VR_STOCK_SIGMA";
	ВиртСклад_АТЛАНТ_ТОМСК_ID = "VR_STOCK_ATLANT_TOMSK";
	ВиртСклад_АТЛАНТ_ID       = "VR_STOCK_ATLANT";
	
	// Таблица значений - ОСТАТКИ
	
	ТЗОстатки = Новый ТаблицаЗначений;
	ТЗОстатки.Колонки.Добавить("Товар",   ОписаниеТипаСтрока(40));
	ТЗОстатки.Колонки.Добавить("Склад",   ОписаниеТипаСтрока(40));
	ТЗОстатки.Колонки.Добавить("Остаток", ОписаниеТипаСтрока(40));
	
	ОМСК_ТЗОстатки = Новый ТаблицаЗначений;
	ОМСК_ТЗОстатки.Колонки.Добавить("Номенклатура", ОписаниеТипаСтрока(40));
	ОМСК_ТЗОстатки.Колонки.Добавить("Склад",        ОписаниеТипаСтрока(40));
	ОМСК_ТЗОстатки.Колонки.Добавить("Остаток",      ОписаниеТипаЧисло(15,3));	
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.Склад,
	               |	ВложенныйЗапрос.Номенклатура,
	               |	СУММА(ВложенныйЗапрос.ВНаличииОстаток) КАК ВНаличииОстаток,
	               |	СУММА(ВложенныйЗапрос.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСкладаОстаток,
	               |	ВложенныйЗапрос.СкладОстатка,
	               |	ВложенныйЗапрос.НоменклатураНаименование,
	               |	ВложенныйЗапрос.НоменклатураВидНоменклатуры
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЕСТЬNULL(СвободныеОстаткиОстатки.Склад.Родитель, СвободныеОстаткиОстатки.Склад) КАК Склад,
	               |		СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	               |		СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
	               |		СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток КАК ВРезервеСоСкладаОстаток,
	               |		СвободныеОстаткиОстатки.Склад КАК СкладОстатка,
	               |		СвободныеОстаткиОстатки.Номенклатура.Наименование КАК НоменклатураНаименование,
	               |		СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры
	               |	ИЗ
	               |		РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(СвободныеОстаткиОстатки.Склад.Родитель, СвободныеОстаткиОстатки.Склад),
	               |		СвободныеОстаткиОстатки.Номенклатура,
	               |		СвободныеОстаткиОстатки.ВНаличииОстаток,
	               |		СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	               |		СвободныеОстаткиОстатки.Склад,
	               |		СвободныеОстаткиОстатки.Номенклатура.Наименование,
	               |		СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	               |	ИЗ
	               |		РегистрНакопления.СвободныеОстатки.Остатки(
	               |				,
	               |				Склад = &СкладАТАлкоголь
	               |					И НЕ Номенклатура.ВидНоменклатуры В (&ВидыНоменИсклАлк)) КАК СвободныеОстаткиОстатки) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Склад,
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.СкладОстатка,
	               |	ВложенныйЗапрос.НоменклатураНаименование,
	               |	ВложенныйЗапрос.НоменклатураВидНоменклатуры";
		
	ВсеСклады = ПолучитьВсеСклады();
	
	//НомПоз = ВсеСклады.Найти(СкладТомскПиво);
	//Если НомПоз <> Неопределено Тогда
	//	ВсеСклады.Удалить(НомПоз);
	//КонецЕсли;	
	
	НомПоз = ВсеСклады.Найти(СкладРИФПлюсАлкоголь);
	Если НомПоз <> Неопределено Тогда
		ВсеСклады.Удалить(НомПоз);
	КонецЕсли;		

	МассивВидовНоменИскл = Новый Массив;
	МассивВидовНоменИскл.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее", Истина));
	МассивВидовНоменИскл.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики",          Истина));	
	
	МассивВидовНоменИсклАлк = Новый Массив;
	МассивВидовНоменИсклАлк.Добавить(ВидНоменклатуры_Бисквит);
	МассивВидовНоменИсклАлк.Добавить(ВидНоменклатуры_Молочка);		
	МассивВидовНоменИсклАлк.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар",         Истина));	
	МассивВидовНоменИсклАлк.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары ВЕТИС",  Истина));	
	
	Запрос.УстановитьПараметр("Склады",             ВсеСклады);
	Запрос.УстановитьПараметр("СкладРИФПлюс",       СкладРИФПлюс);
	Запрос.УстановитьПараметр("СкладТомскПиво",     СкладТомскПиво);
	Запрос.УстановитьПараметр("СкладАТАлкоголь",    СкладАТАлкоголь);
	Запрос.УстановитьПараметр("ТоварыБезНДС",       ТоварыБезНДС);
	Запрос.УстановитьПараметр("ВидыНоменИскл",      МассивВидовНоменИскл);
	Запрос.УстановитьПараметр("ВидыНоменИсклАлк",   МассивВидовНоменИсклАлк);
	Запрос.УстановитьПараметр("Оборудование",       Справочники.Номенклатура.НайтиПоКоду("00001500   "));
	Запрос.УстановитьПараметр("ТомскПивоСтарый",    Справочники.Склады.НайтиПоНаименованию("Томск Пиво", Истина));
	Запрос.УстановитьПараметр("МногооборотнаяТара", ВидНоменклатурыМногооборотнаяТара);
	Запрос.УстановитьПараметр("МолочкаПредзаказ",   Справочники.Номенклатура.НайтиПоКоду("00-00008949"));
	
	врМахорка = Справочники.Номенклатура.НайтиПоКоду("00-00011199");
	врТабак   = Справочники.Номенклатура.НайтиПоКоду("00-00017008");
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ТоварыСигареты.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
			
			врПродолжить = Истина;
			
			Если (ВыборкаНоменклатура.Номенклатура.Родитель = врМахорка) ИЛИ (ВыборкаНоменклатура.Номенклатура.Родитель = врТабак) Тогда
				врПродолжить = Ложь;
			КонецЕсли;	
			
			Если врПродолжить Тогда
				Если СтрЧислоВхождений(ВыборкаНоменклатура.НоменклатураНаименование, "Сигариллы") > 0 Тогда
					врПродолжить = Ложь;
				КонецЕсли;
			КонецЕсли;	
			
			Если врПродолжить Тогда
				Если СтрЧислоВхождений(ВыборкаНоменклатура.НоменклатураНаименование, "Стики") > 0 Тогда
					врПродолжить = Ложь;
				КонецЕсли;
			КонецЕсли;				
			
			Если врПродолжить Тогда
				Если СтрЧислоВхождений(ВыборкаНоменклатура.НоменклатураНаименование, "СКИДКА") > 0 Тогда
					врПродолжить = Ложь;
				КонецЕсли;
			КонецЕсли;				
			
			Если врПродолжить Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;			
		
		Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
		
			НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
		
			Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ВыборкаНоменклатура.Номенклатура.Код = "00-00013637" Тогда
		//	ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Есть запрет");
			Продолжить;
		КонецЕсли;	
			
		ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);
		
		ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
				
		Если ОстатокСУчетомКратности > 0 Тогда
			
			СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
			Если СтрокаКратностиТовара <> Неопределено Тогда
				КратностьТовара = СтрокаКратностиТовара.Кратность;
				Если ОстатокСУчетомКратности < КратностьТовара Тогда
					ОстатокСУчетомКратности	= КратностьТовара;
				КонецЕсли;	
			КонецЕсли;			
			
			Если ВыборкаНоменклатура.Склад = РеалСкладГруппаОмск Тогда
				
				//ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
				//ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
				//ОМСК_НоваяСтрока.Склад        = ВыборкаНоменклатура.Склад.УникальныйИдентификатор();
				//ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;
				
			Иначе	
			
				ФайлВыгрузкиОстатков.ДобавитьСтроку(
				СокрЛП(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) 				+ Символ(9) + 	// ProductRefID
				СокрЛП(ВыборкаНоменклатура.Склад.УникальныйИдентификатор())						+ Символ(9) +   // StockRefID
				Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ="));  								                // Volume
				
			КонецЕсли;	
			
			// Виртуальные склады
		
			Если ВыборкаНоменклатура.Склад = РеалСкладГруппаТомск Тогда
				
				//Если ТоварыСигареты.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
				//	Продолжить;
				//КонецЕсли;	
				
				// АТ-Логистик
				
				НовСтрокаТовар = ТЗОстатки.Добавить();
				
				НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
				НовСтрокаТовар.Склад   = ВиртСклад_АТЛогистик_ID;
				НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");						
				
				// РИФ+, ТОП-17, Меркурий
				
				Если (ВыборкаНоменклатура.СкладОстатка = СкладАТАлкоголь) Тогда
					
					Если (ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ (ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) Тогда
				
					//	НовСтрокаТовар = ТЗОстатки.Добавить();
					//
					//	НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					//	НовСтрокаТовар.Склад   = ВиртСклад_РИФПлюс_ID;
					//	НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");			
						
						НовСтрокаТовар = ТЗОстатки.Добавить();
					
						НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
						НовСтрокаТовар.Склад   = ВиртСклад_ТОП17_ID;
						НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");									
						
						НовСтрокаТовар = ТЗОстатки.Добавить();
					
						НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
						НовСтрокаТовар.Склад   = ВиртСклад_Меркурий_ID;
						НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");															
						
					//	НовСтрокаТовар = ТЗОстатки.Добавить();
					//
					//	НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					//	НовСтрокаТовар.Склад   = ВиртСклад_Марс_ID;
					//	НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");																					
						
						//НовСтрокаТовар = ТЗОстатки.Добавить();
						//
						//НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
						//НовСтрокаТовар.Склад   = ВиртСклад_Сигма_ID;
						//НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
						
						НовСтрокаТовар = ТЗОстатки.Добавить();
						
						НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
						НовСтрокаТовар.Склад   = ВиртСклад_АТЛАНТ_ТОМСК_ID;
						НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");						
						
					КонецЕсли;	
					
				Иначе
					
					//НовСтрокаТовар = ТЗОстатки.Добавить();
					//
					//НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					//НовСтрокаТовар.Склад   = ВиртСклад_РИФПлюс_ID;
					//НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");								
					
					НовСтрокаТовар = ТЗОстатки.Добавить();
					
					НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					НовСтрокаТовар.Склад   = ВиртСклад_ТОП17_ID;
					НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
					
					НовСтрокаТовар = ТЗОстатки.Добавить();
					
					НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					НовСтрокаТовар.Склад   = ВиртСклад_Меркурий_ID;
					НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");					
					
					//НовСтрокаТовар = ТЗОстатки.Добавить();
					//
					//НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					//НовСтрокаТовар.Склад   = ВиртСклад_Марс_ID;
					//НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");	
					//
					//НовСтрокаТовар = ТЗОстатки.Добавить();
					//
					//НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					//НовСтрокаТовар.Склад   = ВиртСклад_Сигма_ID;
					//НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");	
					
					НовСтрокаТовар = ТЗОстатки.Добавить();
					
					НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
					НовСтрокаТовар.Склад   = ВиртСклад_АТЛАНТ_ТОМСК_ID;
					НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");											
					
				КонецЕсли;	
				
			КонецЕсли;				
			
			//Если ВыборкаНоменклатура.Склад = РеалСкладГруппаОмск Тогда
			//	
			//	//Если ТоварыСигареты.Найти(ВыборкаНоменклатура.Номенклатура) <> Неопределено Тогда
			//	//	Продолжить;
			//	//КонецЕсли;					
			//	
			//	// АТЛАНТ
			//	
			//	Если ВыборкаНоменклатура.Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ <> Перечисления.алкВидыЭлементовТМЦ.Алкоголь Тогда
			//	
			//	//	НовСтрокаТовар = ТЗОстатки.Добавить();
			//	//
			//	//	НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			//	//	НовСтрокаТовар.Склад   = ВиртСклад_АТЛАНТ_ID;
			//	//	НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");	
			//	
			//	ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
			//	ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			//	ОМСК_НоваяСтрока.Склад        = ВиртСклад_АТЛАНТ_ID;
			//	ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;				
			//		
			//	КонецЕсли;	
			//	
			//КонецЕсли;	
			//
		КонецЕсли;
						
	КонецЦикла;	
	
	// Остатки Джолики ТОП-17
	
	//ЗапросДжолики = Новый Запрос;
	//ЗапросДжолики.УстановитьПараметр("Склад",                  СкладТОП_17);
	//ЗапросДжолики.УстановитьПараметр("ВидНоменклатурыДжолики", ВидНоменклатуры_Джолики);
	//ЗапросДжолики.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                  |	СвободныеОстаткиОстатки.Номенклатура,
	//                  |	СвободныеОстаткиОстатки.Склад,
	//                  |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                  |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                  |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                  |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                  |ИЗ
	//                  |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                  |			,
	//                  |			Склад = &Склад
	//                  |				И Номенклатура.ВидНоменклатуры = &ВидНоменклатурыДжолики) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = ЗапросДжолики.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//		
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//							
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_РИФПлюс_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");								
	//									
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//			
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_Меркурий_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");					
	//				
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//				
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_Марс_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");										
	//		
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//				
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_Сигма_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");										
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;		
	
	// Остатки по алгоколю РИФ+
	
	//ЗапросРИФ = Новый Запрос;
	//ЗапросРИФ.УстановитьПараметр("Склад", СкладРИФПлюсАлкоголь);
	//ЗапросРИФ.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                  |	СвободныеОстаткиОстатки.Номенклатура,
	//                  |	СвободныеОстаткиОстатки.Склад,
	//                  |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                  |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                  |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                  |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                  |ИЗ
	//                  |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                  |			,
	//                  |			Склад = &Склад
	//                  |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = ЗапросРИФ.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//		
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//				
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_РИФПлюс_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;	
	
	// Остатки по алгоколю ТОП-17
	
	ЗапросРИФ = Новый Запрос;
	ЗапросРИФ.УстановитьПараметр("Склад", СкладТОП_17);
	ЗапросРИФ.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	СвободныеОстаткиОстатки.Номенклатура,
	                  |	СвободныеОстаткиОстатки.Склад,
	                  |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	                  |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	                  |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	                  |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	                  |ИЗ
	                  |	РегистрНакопления.СвободныеОстатки.Остатки(
	                  |			,
	                  |			Склад = &Склад
	                  |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
					  
	ВыборкаНоменклатура = ЗапросРИФ.Выполнить().Выбрать();	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
		
			НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
		
			Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;			
					
		ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
		
		ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
		
		Если ОстатокСУчетомКратности > 0 Тогда
			
			СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
			Если СтрокаКратностиТовара <> Неопределено Тогда
				КратностьТовара = СтрокаКратностиТовара.Кратность;
				Если ОстатокСУчетомКратности < КратностьТовара Тогда
					ОстатокСУчетомКратности	= КратностьТовара;
				КонецЕсли;	
			КонецЕсли;			
			
			НовСтрокаТовар = ТЗОстатки.Добавить();
					
			НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			НовСтрокаТовар.Склад   = ВиртСклад_ТОП17_ID;
			НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
			
		КонецЕсли;
		
	КонецЦикла;	
		
	// Остатки по алгоколю Меркурий
	
	ЗапросМеркурий = Новый Запрос;
	ЗапросМеркурий.УстановитьПараметр("Склад", СкладМеркурийАлкоголь);
	ЗапросМеркурий.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СвободныеОстаткиОстатки.Номенклатура,
	                       |	СвободныеОстаткиОстатки.Склад,
	                       |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	                       |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	                       |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	                       |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	                       |ИЗ
	                       |	РегистрНакопления.СвободныеОстатки.Остатки(
	                       |			,
	                       |			Склад = &Склад
	                       |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
					  
	ВыборкаНоменклатура = ЗапросМеркурий.Выполнить().Выбрать();	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
		
			НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
		
			Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;			
					
		ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
		
		ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
		
		Если ОстатокСУчетомКратности > 0 Тогда
			
			СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
			Если СтрокаКратностиТовара <> Неопределено Тогда
				КратностьТовара = СтрокаКратностиТовара.Кратность;
				Если ОстатокСУчетомКратности < КратностьТовара Тогда
					ОстатокСУчетомКратности	= КратностьТовара;
				КонецЕсли;	
			КонецЕсли;			
			
			НовСтрокаТовар = ТЗОстатки.Добавить();
					
			НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			НовСтрокаТовар.Склад   = ВиртСклад_Меркурий_ID;
			НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
			
		КонецЕсли;
		
	КонецЦикла;		
	
	// Остатки по алгоколю Марс
	
	//ЗапросМеркурий = Новый Запрос;
	//ЗапросМеркурий.УстановитьПараметр("Склад", СкладМарсАлкоголь);
	//ЗапросМеркурий.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                       |	СвободныеОстаткиОстатки.Номенклатура,
	//                       |	СвободныеОстаткиОстатки.Склад,
	//                       |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                       |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                       |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                       |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                       |ИЗ
	//                       |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                       |			,
	//                       |			Склад = &Склад
	//                       |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = ЗапросМеркурий.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//		
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//				
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_Марс_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;			
	
	// Остатки по алгоколю Сигма
	
	//ЗапросМеркурий = Новый Запрос;
	//ЗапросМеркурий.УстановитьПараметр("Склад", СкладСигмаАлкоголь);
	//ЗапросМеркурий.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                       |	СвободныеОстаткиОстатки.Номенклатура,
	//                       |	СвободныеОстаткиОстатки.Склад,
	//                       |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                       |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                       |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                       |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                       |ИЗ
	//                       |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                       |			,
	//                       |			Склад = &Склад
	//                       |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = ЗапросМеркурий.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//		
	//		НовСтрокаТовар = ТЗОстатки.Добавить();
	//				
	//		НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		НовСтрокаТовар.Склад   = ВиртСклад_Сигма_ID;
	//		НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;				
	
	// Остатки по алгоколю АТЛАНТ
	
	ЗапросМеркурий = Новый Запрос;
	ЗапросМеркурий.УстановитьПараметр("Склад", СкладАтлантАлкоголь);
	ЗапросМеркурий.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СвободныеОстаткиОстатки.Номенклатура,
	                       |	СвободныеОстаткиОстатки.Склад,
	                       |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	                       |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	                       |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	                       |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	                       |ИЗ
	                       |	РегистрНакопления.СвободныеОстатки.Остатки(
	                       |			,
	                       |			Склад = &Склад
	                       |				И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)) КАК СвободныеОстаткиОстатки";
					  
	ВыборкаНоменклатура = ЗапросМеркурий.Выполнить().Выбрать();	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
		
			НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
		
			Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;			
					
		ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
		
		ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
		
		Если ОстатокСУчетомКратности > 0 Тогда
			
			СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
			Если СтрокаКратностиТовара <> Неопределено Тогда
				КратностьТовара = СтрокаКратностиТовара.Кратность;
				Если ОстатокСУчетомКратности < КратностьТовара Тогда
					ОстатокСУчетомКратности	= КратностьТовара;
				КонецЕсли;	
			КонецЕсли;			
			
			//НовСтрокаТовар = ТЗОстатки.Добавить();
			//		
			//НовСтрокаТовар.Товар   = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			//НовСтрокаТовар.Склад   = ВиртСклад_АТЛАНТ_ID;
			//НовСтрокаТовар.Остаток = Формат(ОстатокСУчетомКратности, "ЧРД=.; ЧГ=");
			
			ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
			ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			ОМСК_НоваяСтрока.Склад        = ВиртСклад_АТЛАНТ_ТОМСК_ID;
			ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;				
			
		КонецЕсли;
		
	КонецЦикла;			
	
//	МассивТоваровИсключений = аян_АкцииСервер.СписокТовараДляИсключенияИзОстатковГУИД();
	
	Для Каждого ТекСтрока Из ТЗОстатки Цикл
		
		//ФлагИсключения = Ложь;
		//
		//Если (ТекСтрока.Склад = ВиртСклад_АТЛогистик_ID) ИЛИ (ТекСтрока.Склад = ВиртСклад_РИФПлюс_ID) Тогда
		//				
		//	Для Каждого ТекИсключение Из МассивТоваровИсключений Цикл
		//		
		//		Если СокрЛП(ТекСтрока.Товар) = СокрЛП(ТекИсключение) Тогда
		//			
		//			ФлагИсключения = Истина;
		//			
		//			Прервать;
		//			
		//		КонецЕсли;	
		//		
		//	КонецЦикла;	
		//	
		//КонецЕсли;	
		//
		//Если Не ФлагИсключения Тогда
					
			ФайлВыгрузкиОстатков.ДобавитьСтроку(
			СокрЛП(ТекСтрока.Товар) 					+ Символ(9) + 	// ProductRefID
			СокрЛП(ТекСтрока.Склад)						+ Символ(9) +   // StockRefID
			СокрЛП(ТекСтрока.Остаток));  				                // Volume
			
	//	КонецЕсли;	
			
	КонецЦикла;	

    // ОМСК
	
	//врСписокТоваров_ОМСК = Омск_Транзит_СписокТоваровСЦенами();
	//
	//// Томск АТЛ Алкоголь
	//
	//врОМСК_ВидыНоменклатуры = Новый Массив;
	//врОМСК_ВидыНоменклатуры.Добавить(ВидНоменклатуры_ЛосьоныДубль);
	//врОМСК_ВидыНоменклатуры.Добавить(ВидНоменклатуры_ПивоДубль);
	//
	//Запрос_ОМСК = Новый Запрос;
	//Запрос_ОМСК.УстановитьПараметр("Склад",           СкладАТАлкоголь);
	//Запрос_ОМСК.УстановитьПараметр("ВидыНомеклатуры", врОМСК_ВидыНоменклатуры);
	//Запрос_ОМСК.УстановитьПараметр("Номенклатура",    врСписокТоваров_ОМСК);
	//Запрос_ОМСК.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                    |	СвободныеОстаткиОстатки.Номенклатура,
	//                    |	СвободныеОстаткиОстатки.Склад,
	//                    |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                    |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                    |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                    |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                    |ИЗ
	//                    |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                    |			,
	//                    |			Склад = &Склад
	//                    |				И Номенклатура В (&Номенклатура)
	//                    |				И Номенклатура.ВидНоменклатуры В (&ВидыНомеклатуры)) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = Запрос_ОМСК.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//					
	//		ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
	//		ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		ОМСК_НоваяСтрока.Склад        = ВиртСклад_АТЛАНТ_ID;
	//		ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;				
	//		
	//		ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
	//		ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		ОМСК_НоваяСтрока.Склад        = СкладОмскЦентральный;
	//		ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;							
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;		
	//
	//// Томск АТ Общий
	//
	//Запрос_ОМСК = Новый Запрос;
	//Запрос_ОМСК.УстановитьПараметр("Склад",           СкладТомскПиво);
	//Запрос_ОМСК.УстановитьПараметр("Номенклатура",    врСписокТоваров_ОМСК);
	//Запрос_ОМСК.УстановитьПараметр("ВЕС",             ТоварыВесовые);
	//Запрос_ОМСК.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                    |	СвободныеОстаткиОстатки.Номенклатура,
	//                    |	СвободныеОстаткиОстатки.Склад,
	//                    |	СвободныеОстаткиОстатки.ВНаличииОстаток,
	//                    |	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток,
	//                    |	СвободныеОстаткиОстатки.Номенклатура.Наименование,
	//                    |	СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры
	//                    |ИЗ
	//                    |	РегистрНакопления.СвободныеОстатки.Остатки(
	//                    |			,
	//                    |			Склад = &Склад
	//                    |				И Номенклатура В (&Номенклатура)
	//                    |				И НЕ Номенклатура В (&ВЕС)) КАК СвободныеОстаткиОстатки";
	//				  
	//ВыборкаНоменклатура = Запрос_ОМСК.Выполнить().Выбрать();	
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	Если ВыборкаНоменклатура.НоменклатураВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
	//	
	//		НаименованиеНоменклатуры = ВыборкаНоменклатура.НоменклатураНаименование;
	//	
	//		Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;			
	//				
	//	ВРезервеОстаток = ?(ВыборкаНоменклатура.ВРезервеСоСкладаОстаток < 0, 0, ВыборкаНоменклатура.ВРезервеСоСкладаОстаток);	
	//	
	//	ОстатокСУчетомКратности = ВыборкаНоменклатура.ВНаличииОстаток - ВРезервеОстаток;
	//	
	//	Если ОстатокСУчетомКратности > 0 Тогда
	//		
	//		СтрокаКратностиТовара = ТЗКратностьТоваров.Найти(ВыборкаНоменклатура.Номенклатура, "Товар");
	//		Если СтрокаКратностиТовара <> Неопределено Тогда
	//			КратностьТовара = СтрокаКратностиТовара.Кратность;
	//			Если ОстатокСУчетомКратности < КратностьТовара Тогда
	//				ОстатокСУчетомКратности	= КратностьТовара;
	//			КонецЕсли;	
	//		КонецЕсли;			
	//					
	//		ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
	//		ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		ОМСК_НоваяСтрока.Склад        = ВиртСклад_АТЛАНТ_ID;
	//		ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;				
	//		
	//		ОМСК_НоваяСтрока = ОМСК_ТЗОстатки.Добавить();
	//		ОМСК_НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
	//		ОМСК_НоваяСтрока.Склад        = СкладОмскЦентральный;
	//		ОМСК_НоваяСтрока.Остаток      = ОстатокСУчетомКратности;							
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;				

	ОМСК_ТЗОстатки.Свернуть("Номенклатура, Склад", "Остаток");
	
	Для Каждого ТекСтрока Из ОМСК_ТЗОстатки Цикл
		
		ФайлВыгрузкиОстатков.ДобавитьСтроку(
		СокрЛП(ТекСтрока.Номенклатура)				+ Символ(9) + 	// ProductRefID
		СокрЛП(ТекСтрока.Склад)						+ Символ(9) +   // StockRefID
		Формат(ТекСтрока.Остаток, "ЧРД=.; ЧГ="));	                // Volume
			
	КонецЦикла;	

    // Борта агентов
	
	//МассивБортовАгентов = Новый Массив;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	Склады.Ссылка,
	//               |	Склады.Наименование
	//               |ИЗ
	//               |	Справочник.Склады КАК Склады
	//               |ГДЕ
	//               |	НЕ Склады.ПометкаУдаления
	//               |	И НЕ Склады.ЭтоГруппа";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	врСтрЛев7 = Лев(Выборка.Наименование, 7);
	//	Если врСтрЛев7 = "БОРТ - " Тогда
	//		МассивБортовАгентов.Добавить(Выборка.Ссылка);
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//ЗапросБортаАгентов = Новый Запрос;
	//ЗапросБортаАгентов.УстановитьПараметр("Склад", МассивБортовАгентов);
	//ЗапросБортаАгентов.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                           |	СвободныеОстаткиОстатки.Склад,
	//                           |	СвободныеОстаткиОстатки.Склад.Родитель,
	//                           |	СвободныеОстаткиОстатки.Склад.Наименование,
	//                           |	СвободныеОстаткиОстатки.Номенклатура,
	//                           |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток
	//                           |ИЗ
	//                           |	РегистрНакопления.СвободныеОстатки.Остатки КАК СвободныеОстаткиОстатки
	//                           |ГДЕ
	//                           |	СвободныеОстаткиОстатки.Склад В(&Склад)";
	//ВыборкаБортаАгентов = ЗапросБортаАгентов.Выполнить().Выбрать();
	//Пока ВыборкаБортаАгентов.Следующий() Цикл
	//	
	//	ФИОАгента = Прав(ВыборкаБортаАгентов.СкладНаименование, СтрДлина(ВыборкаБортаАгентов.СкладНаименование) - 7);
	//	врАгент   = Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(ФИОАгента));
	//	Если ЗначениеЗаполнено(врАгент) Тогда
	//		
	//		Если ВыборкаБортаАгентов.СкладРодитель = Справочники.Склады.НайтиПоНаименованию("Томск (борта агентов)", Истина) Тогда
	//			
	//			ГУИД_БортАгента = "SKW_" + СокрЛП(врАгент.УникальныйИдентификатор());
	//		
	//			ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//			СокрЛП(ВыборкаБортаАгентов.Номенклатура.УникальныйИдентификатор())			+ Символ(9) + 	// ProductRefID
	//			СокрЛП(ГУИД_БортАгента)														+ Символ(9) +  	// StockRefID
	//			Формат(ВыборкаБортаАгентов.Остаток, "ЧРД=.; ЧГ="));  				              			// Volume			
	//			
	//			ГУИД_БортАгента = "SKB_" + СокрЛП(врАгент.УникальныйИдентификатор());
	//		
	//			ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//			СокрЛП(ВыборкаБортаАгентов.Номенклатура.УникальныйИдентификатор())			+ Символ(9) + 	// ProductRefID
	//			СокрЛП(ГУИД_БортАгента)														+ Символ(9) +  	// StockRefID
	//			Формат(ВыборкаБортаАгентов.Остаток, "ЧРД=.; ЧГ="));  				              			// Volume							
	//			
	//		Иначе	
	//		
	//			ГУИД_БортАгента = "SKL_" + СокрЛП(врАгент.УникальныйИдентификатор());
	//		
	//			ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//			СокрЛП(ВыборкаБортаАгентов.Номенклатура.УникальныйИдентификатор())			+ Символ(9) + 	// ProductRefID
	//			СокрЛП(ГУИД_БортАгента)														+ Символ(9) +  	// StockRefID
	//			Формат(ВыборкаБортаАгентов.Остаток, "ЧРД=.; ЧГ="));  				              			// Volume			
	//			
	//		КонецЕсли;	
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;
				
	ФайлВыгрузкиОстатков.ВставитьСтроку(1, Формат(ФайлВыгрузкиОстатков.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузкиОстатков.Записать(КаталогВыгрузки + "\ProductInStock.txt", КодировкаТекста.ANSI); 
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка текущих остатков товара на складе произведена в " + КаталогВыгрузки + "ProductInStock.txt");
	
	Попытка
		ФайлВыгрузкиОстатков.Записать(РабочийКаталог + "DevEmu\ProductInStock.txt", КодировкаТекста.ANSI); 
		Константы.аян_СинхронизацияДатаВыгрузкиОстатков.Установить(ТекущаяДата());
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при копировании остатков в DevEmu", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	ЗамерКопированиеОстатовСтарт = ТекущаяДата();
	
	МассивКаталоговАгентов = Сканирование_МассивКаталоговDev();
	
	Для Каждого ТекКаталогАгента Из МассивКаталоговАгентов Цикл
		
		Если (СокрЛП(ТекКаталогАгента) + "\ToDevice") <> КаталогВыгрузки Тогда
		
			Попытка
			
			//	ФайлВыгрузкиОстатков.Записать(СокрЛП(ТекКаталогАгента) + "\ToDevice\ProductInStock.txt", КодировкаТекста.ANSI); 
			
				КопироватьФайл(РабочийКаталог + "DevEmu\ProductInStock.txt", СокрЛП(ТекКаталогАгента) + "\ToDevice\ProductInStock.txt");
			
			Исключение	
			
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Запись остатков в каталог агента: " + СокрЛП(ТекКаталогАгента), ИнформацияОбОшибке(), Истина);
			
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Копирование остатков по агентам выполнено ("  + Строка(ТекущаяДата() - ЗамерКопированиеОстатовСтарт) + " секунд)");		
		
КонецПроцедуры  


// ShopProductPrice.txt

Процедура ЭкспортИндивидуальныхЦенТоваровВТорговыхТочках(ФайлВыгрузкиОстатков)
	
	ЗамерСтарт = ТекущаяДата();
	
	Если ИндивидуальныеЦеныНаТоварВТочке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Событие1С = "Выгрузка индивидуальных цен товаров в точке (ShopProductPrice.txt)";
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем индивидуальные цены на товары в точке... " + Строка(ФайлВыгрузкиОстатков.КоличествоСтрок()));
	
	КоличествоСтрок = 0;
	
	// ShopProductPrice.txt
	
	//ФайлВыгрузкиОстатков = Новый ТекстовыйДокумент;     
	//ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//"ShopRefID" 		+ Символ(9) +       
	//"ProductRefID" 		+ Символ(9) +       
	//"Price");		
	
	ТЗПроверка = Новый ТаблицаЗначений;
	ТЗПроверка.Колонки.Добавить("Точка", ПолучитьОписаниеТиповСтроки(40));
	ТЗПроверка.Колонки.Добавить("Товар", ПолучитьОписаниеТиповСтроки(40));
	
	//// Акция МАЙОНЕЗ по второму прайсу
	//
	//МассивАгентовВторогоПрайса = Новый Массив;
	//МассивАгентовВторогоПрайса.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Горковенко Дмитрий Евгеньевич"));
	//МассивАгентовВторогоПрайса.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Пуговкин Юрий Александрович"));
	//МассивАгентовВторогоПрайса.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Липняев Денис Викторович"));
	//МассивАгентовВторогоПрайса.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Коломина Нина Валерьевна"));
	//
	//ЗапросАкция = Новый Запрос;
	//ЗапросАкция.УстановитьПараметр("СписокАгентов", МассивАгентовВторогоПрайса);
	//ЗапросАкция.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                    |	аян_СинхронизацияТТ.ТорговаяТочка,
	//                    |	аян_СинхронизацияТТ.IDТочки,
	//                    |	аян_СинхронизацияТТ.Скидка
	//                    |ИЗ
	//                    |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	//                    |ГДЕ
	//                    |	аян_СинхронизацияТТ.Агент В(&СписокАгентов)";
	//ВыборкаАкция = ЗапросАкция.Выполнить().Выбрать();
	//Пока ВыборкаАкция.Следующий() Цикл
	//	
	//	
	//	ЦенаАкция = ?(ВыборкаАкция.Скидка = 0, 64.05, Окр( (100 - ВыборкаАкция.Скидка) * 64.05 / 100, 2, 1));
	//	
	//	
	//	// Майонез "Миладора" 50% Оливковый 800г*8 пэт-бан (Нэфис)
	//	
	//	НоменклатураАкция = Справочники.Номенклатура.НайтиПоКоду("00-00007586");
	//	
	//	ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//	СокрЛП(ВыборкаАкция.IDТочки)													+ Символ(9) + 	// ShopRefID
	//	СокрЛП(НоменклатураАкция.УникальныйИдентификатор())								+ Символ(9) +   // ProductRefID
	//	СокрЛП(Формат(ЦенаАкция, "ЧРД=.; ЧН=; ЧГ=")));									                // Price			
	//	
	//	НовСтрока = ТЗПроверка.Добавить();
	//	НовСтрока.Точка = СокрЛП(ВыборкаАкция.IDТочки);
	//	НовСтрока.Товар = СокрЛП(НоменклатураАкция.УникальныйИдентификатор());
	//				
	//	КоличествоСтрок = КоличествоСтрок + 1;		
	//	
	//	
	//	// Майонез "Миладора" 50% Провансаль 800г*8 пэт-бан (Нэфис)
	//	
	//	НоменклатураАкция = Справочники.Номенклатура.НайтиПоКоду("00-00007418");
	//	
	//	ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//	СокрЛП(ВыборкаАкция.IDТочки)													+ Символ(9) + 	// ShopRefID
	//	СокрЛП(НоменклатураАкция.УникальныйИдентификатор())								+ Символ(9) +   // ProductRefID
	//	СокрЛП(Формат(ЦенаАкция, "ЧРД=.; ЧН=; ЧГ=")));									                // Price			
	//	
	//	НовСтрока = ТЗПроверка.Добавить();
	//	НовСтрока.Точка = СокрЛП(ВыборкаАкция.IDТочки);
	//	НовСтрока.Товар = СокрЛП(НоменклатураАкция.УникальныйИдентификатор());		
	//	
	//	КоличествоСтрок = КоличествоСтрок + 1;				
	//	
	//	
	//	// Майонез "Миладора" 50% С лимонным соком 800г*8 пэт-бан (Нэфис)
	//	
	//	НоменклатураАкция = Справочники.Номенклатура.НайтиПоКоду("00-00004712");
	//	
	//	ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//	СокрЛП(ВыборкаАкция.IDТочки)													+ Символ(9) + 	// ShopRefID
	//	СокрЛП(НоменклатураАкция.УникальныйИдентификатор())								+ Символ(9) +   // ProductRefID
	//	СокрЛП(Формат(ЦенаАкция, "ЧРД=.; ЧН=; ЧГ=")));									                // Price
	//	
	//	НовСтрока = ТЗПроверка.Добавить();
	//	НовСтрока.Точка = СокрЛП(ВыборкаАкция.IDТочки);
	//	НовСтрока.Товар = СокрЛП(НоменклатураАкция.УникальныйИдентификатор());		
	//				
	//	КоличествоСтрок = КоличествоСтрок + 1;				
	//	
	//			
	//КонецЦикла;	
	
		
	ЗапросПоЦенам = Новый Запрос;
	ЗапросПоЦенам.УстановитьПараметр("Дата", КонецДня(ТекущаяДата()));
	ЗапросПоЦенам.УстановитьПараметр("ТЗ",   ИндивидуальныеЦеныНаТоварВТочке);
	ЗапросПоЦенам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТЗ.Номенклатура,
	                      |	ТЗ.ВидЦены
	                      |ПОМЕСТИТЬ СписокНоменклатуры
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	                      |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			(Номенклатура, ВидЦены) В
	                      |				(ВЫБРАТЬ
	                      |					СписокНоменклатуры.Номенклатура,
	                      |					СписокНоменклатуры.ВидЦены
	                      |				ИЗ
	                      |					СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
	ТЗЦены = ЗапросПоЦенам.Выполнить().Выгрузить();					  
						  
	Для Каждого ТекСтрока Из ИндивидуальныеЦеныНаТоварВТочке Цикл
		
		ИскСтрокиПроверка = ТЗПроверка.НайтиСтроки(Новый Структура("Точка, Товар", СокрЛП(ТекСтрока.ГУИДТочки), СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор())));		
		Если ИскСтрокиПроверка.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекСтрока.ВидЦены) Тогда
							  
			ИскСтроки = ТЗЦены.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", ТекСтрока.Номенклатура, ТекСтрока.ВидЦены));
			Если ИскСтроки.Количество() > 0 Тогда
			
				ТекЦена = ИскСтроки[0];
			
				Если ТекЦена.Цена > 0 Тогда
				
					ФайлВыгрузкиОстатков.ДобавитьСтроку(
					СокрЛП(ТекСтрока.ГУИДТочки) 													+ Символ(9) + 	// ShopRefID
					СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор())						+ Символ(9) +   // ProductRefID
					СокрЛП(Формат(ТекЦена.Цена, "ЧРД=.; ЧН=; ЧГ=")));								                // Price			
					
					КоличествоСтрок = КоличествоСтрок + 1;
				
				КонецЕсли;	
				
			КонецЕсли;
			
		Иначе
			
			ФайлВыгрузкиОстатков.ДобавитьСтроку(
			СокрЛП(ТекСтрока.ГУИДТочки) 													+ Символ(9) + 	// ShopRefID
			СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор())						+ Символ(9) +   // ProductRefID
			СокрЛП(Формат(ТекСтрока.Цена, "ЧРД=.; ЧН=; ЧГ=")));								                // Price						
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЕсли;	
	
	КонецЦикла;	
	
	ИндивидуальныеЦеныНаТоварВТочке.Очистить();
	
	//Если ИмяСервераМА = "Tomsk" Тогда
	//	
	//	Для Каждого ТекТоварНДС_10 Из ТоварыНДС_10 Цикл	
	//	
	//		ФайлВыгрузкиОстатков.ДобавитьСтроку(
	//		СокрЛП("3cf16c17-3e23-11e8-8263-1831bf2dc5c0")									+ Символ(9) + 	// ShopRefID
	//		СокрЛП(ТекТоварНДС_10.УникальныйИдентификатор())								+ Символ(9) +   // ProductRefID
	//		СокрЛП(Формат(0, "ЧРД=.; ЧН=; ЧГ=")));								           			        // Price						
	//		
	//		КоличествоСтрок = КоличествоСтрок + 1;
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
		
	//Если КоличествоСтрок > 0 Тогда
	//
	//	ФайлВыгрузкиОстатков.ВставитьСтроку(1, Формат(ФайлВыгрузкиОстатков.КоличествоСтрок() - 1, "ЧГ="));
	//	ФайлВыгрузкиОстатков.Записать(КаталогВыгрузки + "\ShopProductPrice.txt", КодировкаТекста.ANSI); 
	//	
	//	//Если ИмяСервераМА = "Tomsk" Тогда
	//	//	ФайлВыгрузкиОстатков.Записать(РабочийКаталог + "DailyOriginal\ShopProductPrice.txt", КодировкаТекста.ANSI);								
	//	//КонецЕсли;	
	//	
	//	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных цен на товары в точке произведена в " + КаталогВыгрузки + "\ShopProductPrice.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	//	
	//Иначе	
	//	
	//	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных цен на товары в точке НЕ произведена! Отсутствуют данные для выгрузки...");	
	//			
	//КонецЕсли;	
	
КонецПроцедуры	


// ShopProductTreeDiscount.txt

Процедура ЭкспортИндивидуальныхСкидокНаГруппуТоваровВТорговойТочке_NEW()
	
	ЗамерСтарт = ТекущаяДата();
		
	ЕстьДанныеДляВыгрузки = Ложь;
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке...");	
	
	врТЗСкидкиПоСегменту = СКИДКИ_ПолучитьСкикдиПоСегментуКлиентов();
		
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("ShopRefID" + Символ(9) + "ProductTreeRefID" + Символ(9) + "DiscountRate");	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",           ИмяСервераМА);
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.Соглашение
	               |ПОМЕСТИТЬ ТТ
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	               |	И аян_СинхронизацияТТ.Соглашение.Статус = &СтатусСоглашения
	               |	И НЕ аян_СинхронизацияТТ.Соглашение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.Партнер КАК Партнер,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен КАК ВидЦен,
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = &Статус
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник В
	               |			(ВЫБРАТЬ
	               |				ТТ.Соглашение
	               |			ИЗ
	               |				ТТ КАК ТТ)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.УсловияПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	Скидка";
	ВыборкаСкидки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкидки.Следующий() Цикл
		
		Для Каждого ТекУсловиеПредоставления Из ВыборкаСкидки.Скидка.УсловияПредоставления Цикл
				
			врСегментНомен = ТекУсловиеПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения;
								
			Если ЗначениеЗаполнено(врСегментНомен) Тогда
				
				врСписокТоваров = Новый Массив;
	
				ЗапросСегмент = Новый Запрос;
				ЗапросСегмент.УстановитьПараметр("Сегмент", врСегментНомен);
				ЗапросСегмент.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	НоменклатураСегмента.Номенклатура.Родитель КАК Родитель
				                      |ИЗ
				                      |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				                      |ГДЕ
				                      |	НоменклатураСегмента.Сегмент = &Сегмент
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	НоменклатураСегмента.Номенклатура.Родитель";
				ВыборкаСегмент = ЗапросСегмент.Выполнить().Выбрать();
				Пока ВыборкаСегмент.Следующий() Цикл
					врСписокТоваров.Добавить(ВыборкаСегмент.Родитель);
				КонецЦикла;	
				
				ВыборкаКлиенты = ВыборкаСкидки.Выбрать();
				Пока ВыборкаКлиенты.Следующий() Цикл
						
					врОбщаяСкидка = 0;
						
					ЗапросСкидка = Новый Запрос;
					ЗапросСкидка.УстановитьПараметр("ТорговаяТочка", ВыборкаКлиенты.Партнер);
					ЗапросСкидка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					                     |	ЕСТЬNULL(аян_СинхронизацияТТ.Скидка, 0) КАК Скидка
					                     |ИЗ
					                     |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
					                     |ГДЕ
					                     |	аян_СинхронизацияТТ.ТорговаяТочка = &ТорговаяТочка";
					РЗСкидка = ЗапросСкидка.Выполнить();
					Если Не РЗСкидка.Пустой() Тогда
						ВыборкаСкидка = РЗСкидка.Выбрать();
						ВыборкаСкидка.Следующий();
						врОбщаяСкидка = ВыборкаСкидка.Скидка;
					КонецЕсли;
						
					врСкидка = ВыборкаСкидки.Скидка.ЗначениеСкидкиНаценки;
						
					Если врСкидка = врОбщаяСкидка Тогда
						Продолжить;
					КонецЕсли;	
											
					врИтоговаяСкидка = ?(врОбщаяСкидка = 0, врСкидка/100, (врСкидка - врОбщаяСкидка)/100);
					
					Для Каждого ВыборкаТовары Из врСписокТоваров Цикл
						
						врОтбор = Новый Структура("Партнер, Номенклатура", ВыборкаКлиенты.Партнер, ВыборкаТовары);
						
						врМассивСтрокПоиск = врТЗСкидкиПоСегменту.НайтиСтроки(врОтбор);
						
						Если врМассивСтрокПоиск.Количество() = 0 Тогда
							
							ФайлВыгрузки.ДобавитьСтроку(
							СокрЛП(ВыборкаКлиенты.Партнер.УникальныйИдентификатор())	+ Символ(9) + 	// ShopRefID
							СокрЛП(ВыборкаТовары.УникальныйИдентификатор())				+ Символ(9) +   // ProductRefID
							СокрЛП(Формат(врИтоговаяСкидка, "ЧРД=.; ЧН=; ЧГ=")));			            // Price											
						
							ЕстьДанныеДляВыгрузки = Истина;
							
						КонецЕсли;	
						
					КонецЦикла;	
												
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для Каждого ТекСтрокаТЗ Из врТЗСкидкиПоСегменту Цикл
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(ТекСтрокаТЗ.Партнер.УникальныйИдентификатор())					+ Символ(9) + 	// ShopRefID
		СокрЛП(ТекСтрокаТЗ.Номенклатура.УникальныйИдентификатор())				+ Символ(9) +   // ProductRefID
		СокрЛП(Формат(ТекСтрокаТЗ.Скидка, "ЧРД=.; ЧН=; ЧГ=")));			        				// Price											
						
		ЕстьДанныеДляВыгрузки = Истина;		
		
	КонецЦикла;	
	
	Если Не ЕстьДанныеДляВыгрузки Тогда
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке - НЕТ ДАННЫХ ДЛЯ ВЫГРУЗКИ...");	
		Возврат;
	КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));	
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopProductTreeDiscount.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке произведена в " + КаталогВыгрузки + "\ShopProductTreeDiscount.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
КонецПроцедуры	


Процедура ЭкспортИндивидуальныхСкидокНаГруппуТоваровВТорговойТочке_OLD()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке...");	
	
	ЕстьДанныеДляВыгрузки = Ложь;
	
	врТЗСкидкиПоСегменту = СКИДКИ_ПолучитьСкикдиПоСегментуКлиентов();
		
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("ShopRefID" + Символ(9) + "ProductTreeRefID" + Символ(9) + "DiscountRate");	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",           ИмяСервераМА);
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.Соглашение
	               |ПОМЕСТИТЬ ТТ
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	               |	И аян_СинхронизацияТТ.Соглашение.Статус = &СтатусСоглашения
	               |	И НЕ аян_СинхронизацияТТ.Соглашение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.Партнер КАК Партнер,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен КАК ВидЦен,
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = &Статус
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник В
	               |			(ВЫБРАТЬ
	               |				ТТ.Соглашение
	               |			ИЗ
	               |				ТТ КАК ТТ)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.УсловияПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	Скидка";
	ВыборкаСкидки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкидки.Следующий() Цикл
		
		Для Каждого ТекУсловиеПредоставления Из ВыборкаСкидки.Скидка.УсловияПредоставления Цикл
				
			врСегментНомен = ТекУсловиеПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения;
								
			Если ЗначениеЗаполнено(врСегментНомен) Тогда
				
				врСписокТоваров = Новый Массив;
	
				ЗапросСегмент = Новый Запрос;
				ЗапросСегмент.УстановитьПараметр("Сегмент", врСегментНомен);
				ЗапросСегмент.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	НоменклатураСегмента.Номенклатура.Родитель КАК Родитель
				                      |ИЗ
				                      |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				                      |ГДЕ
				                      |	НоменклатураСегмента.Сегмент = &Сегмент
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	НоменклатураСегмента.Номенклатура.Родитель";
				ВыборкаСегмент = ЗапросСегмент.Выполнить().Выбрать();
				Пока ВыборкаСегмент.Следующий() Цикл
					врСписокТоваров.Добавить(ВыборкаСегмент.Родитель);
				КонецЦикла;	
				
				ВыборкаКлиенты = ВыборкаСкидки.Выбрать();
				Пока ВыборкаКлиенты.Следующий() Цикл
						
					врОбщаяСкидка = 0;
						
					ЗапросСкидка = Новый Запрос;
					ЗапросСкидка.УстановитьПараметр("ТорговаяТочка", ВыборкаКлиенты.Партнер);
					ЗапросСкидка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					                     |	ЕСТЬNULL(аян_СинхронизацияТТ.Скидка, 0) КАК Скидка
					                     |ИЗ
					                     |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
					                     |ГДЕ
					                     |	аян_СинхронизацияТТ.ТорговаяТочка = &ТорговаяТочка";
					РЗСкидка = ЗапросСкидка.Выполнить();
					Если Не РЗСкидка.Пустой() Тогда
						ВыборкаСкидка = РЗСкидка.Выбрать();
						ВыборкаСкидка.Следующий();
						врОбщаяСкидка = ВыборкаСкидка.Скидка;
					КонецЕсли;
						
					врСкидка = ВыборкаСкидки.Скидка.ЗначениеСкидкиНаценки;
						
					Если врСкидка = врОбщаяСкидка Тогда
						Продолжить;
					КонецЕсли;	
											
					врИтоговаяСкидка = ?(врОбщаяСкидка = 0, врСкидка/100, (врСкидка - врОбщаяСкидка)/100);
					
					Для Каждого ВыборкаТовары Из врСписокТоваров Цикл
						
						врОтбор = Новый Структура("Партнер, Номенклатура", ВыборкаКлиенты.Партнер, ВыборкаТовары);
						
						врМассивСтрокПоиск = врТЗСкидкиПоСегменту.НайтиСтроки(врОтбор);
						
						Если врМассивСтрокПоиск.Количество() = 0 Тогда
					
							ФайлВыгрузки.ДобавитьСтроку(
							СокрЛП(ВыборкаКлиенты.Партнер.УникальныйИдентификатор())	+ Символ(9) + 	// ShopRefID
							СокрЛП(ВыборкаТовары.УникальныйИдентификатор())				+ Символ(9) +   // ProductRefID
							СокрЛП(Формат(врИтоговаяСкидка, "ЧРД=.; ЧН=; ЧГ=")));			            // Price											
						
							ЕстьДанныеДляВыгрузки = Истина;
							
						КонецЕсли;	
						
					КонецЦикла;	
												
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Не ЕстьДанныеДляВыгрузки Тогда
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке - НЕТ ДАННЫХ ДЛЯ ВЫГРУЗКИ...");	
		Возврат;
	КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopProductTreeDiscount.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке произведена в " + КаталогВыгрузки + "\ShopProductTreeDiscount.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


Процедура ЭкспортИндивидуальныхСкидокНаГруппуТоваровВТорговойТочке()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке...");	
	
	ЕстьДанныеДляВыгрузки = Ложь;
		
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("ShopRefID" + Символ(9) + "ProductTreeRefID" + Символ(9) + "DiscountRate");	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",           ИмяСервераМА);
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.Соглашение
	               |ПОМЕСТИТЬ ТТ
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	               |	И аян_СинхронизацияТТ.Соглашение.Статус = &СтатусСоглашения
	               |	И НЕ аян_СинхронизацияТТ.Соглашение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.Партнер КАК Партнер,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен КАК ВидЦен,
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = &Статус
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник В
	               |			(ВЫБРАТЬ
	               |				ТТ.Соглашение
	               |			ИЗ
	               |				ТТ КАК ТТ)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.УсловияПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	Скидка";
	ВыборкаСкидки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкидки.Следующий() Цикл
		
		Для Каждого ТекУсловиеПредоставления Из ВыборкаСкидки.Скидка.УсловияПредоставления Цикл
				
			врСегментНомен = ТекУсловиеПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения;
								
			Если ЗначениеЗаполнено(врСегментНомен) Тогда
				
				
				врМассивНеиспл = аян_СинхронизацияСервер.Товары_НеИспользуемыеГруппыТоваров();
				Если НЕ ИмяСервераМА = "Sever" Тогда
					Для Каждого ТекСоциал Из Товары_СоциальныеГруппы Цикл
						врМассивНеиспл.Добавить(ТекСоциал);
					КонецЦикла;	
				КонецЕсли;	
				
				врСписокТоваров = Новый Массив;
	
				ЗапросСегмент = Новый Запрос;
				ЗапросСегмент.УстановитьПараметр("Сегмент", врСегментНомен);
				ЗапросСегмент.УстановитьПараметр("Искл",    врМассивНеиспл);
				ЗапросСегмент.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	НоменклатураСегмента.Номенклатура.Родитель КАК Родитель
				                      |ИЗ
				                      |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				                      |ГДЕ
				                      |	НоменклатураСегмента.Сегмент = &Сегмент
				                      |	И НЕ НоменклатураСегмента.Номенклатура В ИЕРАРХИИ (&Искл)
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	НоменклатураСегмента.Номенклатура.Родитель";
				ВыборкаСегмент = ЗапросСегмент.Выполнить().Выбрать();
				Пока ВыборкаСегмент.Следующий() Цикл
					врСписокТоваров.Добавить(ВыборкаСегмент.Родитель);
				КонецЦикла;	
				
				ВыборкаКлиенты = ВыборкаСкидки.Выбрать();
				Пока ВыборкаКлиенты.Следующий() Цикл
						
					врОбщаяСкидка = 0;
						
					ЗапросСкидка = Новый Запрос;
					ЗапросСкидка.УстановитьПараметр("ТорговаяТочка", ВыборкаКлиенты.Партнер);
					ЗапросСкидка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					                     |	ЕСТЬNULL(аян_СинхронизацияТТ.Скидка, 0) КАК Скидка
					                     |ИЗ
					                     |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
					                     |ГДЕ
					                     |	аян_СинхронизацияТТ.ТорговаяТочка = &ТорговаяТочка";
					РЗСкидка = ЗапросСкидка.Выполнить();
					Если Не РЗСкидка.Пустой() Тогда
						ВыборкаСкидка = РЗСкидка.Выбрать();
						ВыборкаСкидка.Следующий();
						врОбщаяСкидка = ВыборкаСкидка.Скидка;
					КонецЕсли;
						
					врСкидка = ВыборкаСкидки.Скидка.ЗначениеСкидкиНаценки;
						
					Если врСкидка = врОбщаяСкидка Тогда
						Продолжить;
					КонецЕсли;	
											
					врИтоговаяСкидка = ?(врОбщаяСкидка = 0, врСкидка/100, (врСкидка - врОбщаяСкидка)/100);
					
					Для Каждого ВыборкаТовары Из врСписокТоваров Цикл
					
						ФайлВыгрузки.ДобавитьСтроку(
						СокрЛП(ВыборкаКлиенты.Партнер.УникальныйИдентификатор())	+ Символ(9) + 	// ShopRefID
						СокрЛП(ВыборкаТовары.УникальныйИдентификатор())				+ Символ(9) +   // ProductRefID
						СокрЛП(Формат(врИтоговаяСкидка, "ЧРД=.; ЧН=; ЧГ=")));			            // Price											
						
						ЕстьДанныеДляВыгрузки = Истина;
						
					КонецЦикла;	
												
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Не ЕстьДанныеДляВыгрузки Тогда
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке - НЕТ ДАННЫХ ДЛЯ ВЫГРУЗКИ...");	
		Возврат;
	КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopProductTreeDiscount.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных скидок товаров в торговой точке произведена в " + КаталогВыгрузки + "\ShopProductTreeDiscount.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры	


Процедура ЭкспортЦенПоЦеновымГруппам()
	
	врФайл = Новый ТекстовыйДокумент;
	
	врФайл.Прочитать(КаталогВыгрузки + "\ShopProductPrice.txt", КодировкаТекста.ANSI);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",           ИмяСервераМА);
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.Соглашение
	               |ПОМЕСТИТЬ ТТ
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	               |	И аян_СинхронизацияТТ.Соглашение.Статус = &СтатусСоглашения
	               |	И НЕ аян_СинхронизацияТТ.Соглашение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.Партнер КАК Партнер,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен КАК ВидЦен,
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = &Статус
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник В
	               |			(ВЫБРАТЬ
	               |				ТТ.Соглашение
	               |			ИЗ
	               |				ТТ КАК ТТ)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки = 0
	               |ИТОГИ ПО
	               |	Скидка";
	ВыборкаСкидки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкидки.Следующий() Цикл
		
		Если ВыборкаСкидки.Скидка.ЦеновыеГруппы.Количество() > 0 Тогда
			
			Для Каждого ТекЦеноваяГруппа Из ВыборкаСкидки.Скидка.ЦеновыеГруппы Цикл
				
				ЗапросТовары = Новый Запрос;
				ЗапросТовары.УстановитьПараметр("ЦеноваяГруппа", ТекЦеноваяГруппа.ЦеноваяГруппа);
				ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                     |	Номенклатура.Ссылка КАК Товар
				                     |ИЗ
				                     |	Справочник.Номенклатура КАК Номенклатура
				                     |ГДЕ
				                     |	Номенклатура.ЦеноваяГруппа = &ЦеноваяГруппа
				                     |	И НЕ Номенклатура.ПометкаУдаления
				                     |	И НЕ Номенклатура.ЭтоГруппа";
				ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					
					ВыборкаКлиенты = ВыборкаСкидки.Выбрать();
					Пока ВыборкаКлиенты.Следующий() Цикл
						
						врСоглашение = ВыборкаКлиенты.Соглашение;
						Если врСоглашение.Товары.Найти(ВыборкаТовары.Товар, "Номенклатура") = Неопределено Тогда
						
							врЦена          = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ВыборкаТовары.Товар, ВыборкаКлиенты.ВидЦен);
							
							Если врЦена > 0 Тогда
								
								врСкидка        = ТекЦеноваяГруппа.ЗначениеСкидкиНаценки;
								врСкидкаСуммой  = Окр(врЦена / 100 * врСкидка, 2, 1);
								врЦенаСоСкидкой = врЦена - врСкидкаСуммой;
															
								врФайл.ДобавитьСтроку(
								СокрЛП(ВыборкаКлиенты.Партнер.УникальныйИдентификатор())	+ Символ(9) + 	// ShopRefID
								СокрЛП(ВыборкаТовары.Товар.УникальныйИдентификатор())		+ Символ(9) +   // ProductRefID
								СокрЛП(Формат(врЦенаСоСкидкой, "ЧРД=.; ЧН=; ЧГ=")));			            // Price											
								
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				КонецЦикла;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	врФайл.ЗаменитьСтроку(1, Формат(врФайл.КоличествоСтрок() - 1, "ЧГ="));
	врФайл.Записать(КаталогВыгрузки + "\ShopProductPrice.txt", КодировкаТекста.ANSI);    
	
КонецПроцедуры


#КонецОбласти


#Область ТОРГОВЫЕ_ТОЧКИ_И_СОГЛАШЕНИЯ


// ShopType.txt

Процедура ЭкспортКатегорийТорговыхТочек() 
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Категории торговых точек...");
	
	// ShopType.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("ShopTypeRefID" + Символ(9) + "ShopTypeName");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФлюгерКатегории.Код КАК Код,
	               |	ФлюгерКатегории.Наименование,
	               |	ФлюгерКатегории.Ссылка
	               |ИЗ
	               |	Справочник.ФлюгерКатегории КАК ФлюгерКатегории
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())	+ Символ(9) +		// ShopTypeRefID
		СокрЛП(Выборка.Наименование));										    // ShopTypeName
		
	КонецЦикла;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopType.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка категорий торговых точек произведена в " + КаталогВыгрузки + "\ShopType.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
КонецПроцедуры 


// Получить сумму минимального заказа

Функция СуммаМинимальногоЗаказа(врКлиент)
	
	Если ИмяСервераМА = "Kuzbass" Тогда
		
		Если ВРег(Лев(СокрЛП(врКлиент.Наименование), 7))  = "БЕГЕМОТ" Тогда
			
			Возврат 0;
			
		КонецЕсли;	
		
		Возврат 1500;
		
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции


// Остаток по таре по клиенту

Функция ПолучитьОстатокПоТареСтрокой(Клиент)
	
	КолСтрок = 0;
	
	ВозврСтрока = "";
	
	МинЗаказ = СуммаМинимальногоЗаказа(Клиент);	
	Если МинЗаказ > 0 Тогда
		ВозврСтрока = "Мин. заказ: @@@" + Формат(МинЗаказ, "ЧРД=.; ЧГ=");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	Запрос.УстановитьПараметр("Клиент",        Клиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура,
	               |	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(&МоментВремени, Партнер = &Клиент) КАК ПереданнаяВозвратнаяТараОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПереданнаяВозвратнаяТараОстатки.Номенклатура.Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если КолСтрок >= 5 Тогда
			ВозврСтрока = ВозврСтрока + "Остальное оборуд-ние см. в отчете!!!" + "@@@" + "в тт " + Строка(0) + " | " + "возв " + Строка(0) + " | " + "долг " + Строка(0);			
			Прервать;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ВозврСтрока) Тогда
			ВозврСтрока = ВозврСтрока + "###";
		КонецЕсли;	
		
		ВозврСтрока = ВозврСтрока + СокрЛП(Выборка.Номенклатура.Наименование) + "@@@" + "в тт " + Строка(Выборка.КоличествоОстаток) + " | " + "возв " + Строка(Выборка.КоличествоОстаток) + " | " + "долг " + Строка(Выборка.КоличествоОстаток);			
		
		КолСтрок = КолСтрок + 1;
		
	КонецЦикла;
	
	Возврат ВозврСтрока;
	
КонецФункции	


// Подсветка ТТ в маршруте

Функция ПолучитьЦветПодсветкиКлиента(Клиент)
	
	Если НЕ КонтрагентПодключенКЕГАИС(Клиент) Тогда
		Возврат "25600";
	КонецЕсли;
	
	Возврат "";
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Партнер",    Клиент);
	//Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - 30 * ДеньВСекундах);
	//Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	РеализацияТоваровУслуг.Ссылка
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |ГДЕ
	//               |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	//               |	И РеализацияТоваровУслуг.Партнер = &Партнер
	//               |	И РеализацияТоваровУслуг.Проведен";
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Возврат "14423100";
	//КонецЕсли;	
	//
	//Если Лев(Клиент.Наименование, 6) = "Петров" Тогда
	//	ВидКонтИнф = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес", Истина, Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Контактная информация справочника ""Партнеры"""));		
	//	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Клиент, ВидКонтИнф);
	//	Если ПустаяСтрока(Адрес) Тогда
	//		Возврат "4557568";
	//	КонецЕсли;	
	//КонецЕсли;	
	
КонецФункции	


// Получаем соглашение для Клиента и Торгового представителя
// Возврат: СТРУКТУРА (ГУИДПартнера, Соглашение, ВидЦен)

Функция ПолучитьСоглашениеСКлиентом_OLD(Клиент, ТорговыйПредставитель)
	
	Событие1С = "Определение соглашения с клиентом";
	
	// Если соглашение указано в условии обслуживания партнеров, то берем из него
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",                Клиент);
	Запрос.УстановитьПараметр("ТорговыйПредставитель", ТорговыйПредставитель);
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Ссылка,
	//               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Соглашение
	//               |ИЗ
	//               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	//               |ГДЕ
	//               |	НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
	//               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель = &ТорговыйПредставитель
	//               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец = &Клиент";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(Выборка.Соглашение) Тогда
	//		Если (Не Выборка.Соглашение.ПометкаУдаления) И (Выборка.Соглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует) И (ЗначениеЗаполнено(Выборка.Соглашение.ВидЦен)) Тогда
	//			Если ПользовательДобавленВРазделениеТочек(ТорговыйПредставитель) Тогда
	//				Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", СокрЛП(Выборка.Ссылка.УникальныйИдентификатор()) + "_AGR", Выборка.Соглашение, Выборка.Соглашение.ВидЦен);
	//			Иначе
	//				Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", СокрЛП(Клиент.УникальныйИдентификатор()), Выборка.Соглашение, Выборка.Соглашение.ВидЦен);
	//			КонецЕсли;	
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;	
	
	// Если нет, то берем первое действующее соглашение
	                                    
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоглашенияСКлиентами.Ссылка,
	               |	СоглашенияСКлиентами.ВидЦен
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	               |ГДЕ
	               |	СоглашенияСКлиентами.Партнер = &Клиент
	               |	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |	И НЕ СоглашенияСКлиентами.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
			Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", СокрЛП(Клиент.УникальныйИдентификатор()), Выборка.Ссылка, Выборка.ВидЦен);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", Клиент.УникальныйИдентификатор(), Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Справочники.ВидыЦен.ПустаяСсылка());
	
КонецФункции	


Функция ПолучитьСоглашениеСКлиентом(Клиент, ТорговыйПредставитель)
	
	Событие1С = "Определение соглашения с клиентом";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",                Клиент);
	Запрос.УстановитьПараметр("ТорговыйПредставитель", ТорговыйПредставитель);
	                                    
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоглашенияСКлиентами.Ссылка,
	               |	СоглашенияСКлиентами.ВидЦен
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	               |ГДЕ
	               |	СоглашенияСКлиентами.Партнер = &Клиент
	               |	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |	И НЕ СоглашенияСКлиентами.ПометкаУдаления";
	
	Если ИмяСервераМА = "Tomsk" Тогда
		Если аян_СинхронизацияСервер.ФОКУС_АгентВФокуснойСхеме(ТорговыйПредставитель) Тогда
			Если аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(ТорговыйПредставитель) Тогда
				врСегмент = аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыАгента(ТорговыйПредставитель);
				ТекстЗамены = "И НЕ СоглашенияСКлиентами.ПометкаУдаления И СоглашенияСКлиентами.СегментНоменклатуры = &Сегмент";
				Запрос.Текст = СтрЗаменить(запрос.Текст, "И НЕ СоглашенияСКлиентами.ПометкаУдаления", ТекстЗамены);	
				Запрос.УстановитьПараметр("Сегмент", врСегмент);
			Иначе 
				ТекстЗамены = "И НЕ СоглашенияСКлиентами.ПометкаУдаления И СоглашенияСКлиентами.СегментНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)";
				Запрос.Текст = СтрЗаменить(запрос.Текст, "И НЕ СоглашенияСКлиентами.ПометкаУдаления", ТекстЗамены);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	врГУИДПартнера = КлиентыКонтрагенты_ГУИДПартнера(Клиент, ТорговыйПредставитель, ИмяСервераМА);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
			Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", врГУИДПартнера, Выборка.Ссылка, Выборка.ВидЦен);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Новый Структура("ГУИДПартнера, Соглашение, ВидЦен", врГУИДПартнера, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Справочники.ВидыЦен.ПустаяСсылка());
	
КонецФункции	


// Получаем торговые точки для выгрузки в виде таблицы значений

Функция ПолучитьСписокТТ(ПоАгенту = Ложь, врСписокПользователей = Неопределено)
	
	ЗамерСтарт = ТекущаяДата();
	
	// ShopProductPrice.txt
	
	ФайлВыгрузкиИндивидуальныхЦен = Новый ТекстовыйДокумент;     
	ФайлВыгрузкиИндивидуальныхЦен.ДобавитьСтроку(
	"ShopRefID" 		+ Символ(9) +       
	"ProductRefID" 		+ Символ(9) +       
	"Price");			
	
	ИндивидуальныеЦеныНаТоварВТочке = Новый ТаблицаЗначений;
	ИндивидуальныеЦеныНаТоварВТочке.Колонки.Добавить("ГУИДТочки",	  ОписаниеТипаСтрока(40));
	ИндивидуальныеЦеныНаТоварВТочке.Колонки.Добавить("Номенклатура",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИндивидуальныеЦеныНаТоварВТочке.Колонки.Добавить("ВидЦены",       Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ИндивидуальныеЦеныНаТоварВТочке.Колонки.Добавить("Цена", 	      ОписаниеТипаЧисло(15,2));
	
	ТЗ_ТТ = Новый ТаблицаЗначений;
	ТЗ_ТТ.Колонки.Добавить("Агент",                Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ_ТТ.Колонки.Добавить("ТорговаяТочка",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ_ТТ.Колонки.Добавить("ГУИДТочки",		       ОписаниеТипаСтрока(40));
	ТЗ_ТТ.Колонки.Добавить("Контрагент",	       Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗ_ТТ.Колонки.Добавить("Соглашение",           Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	ТЗ_ТТ.Колонки.Добавить("ВидЦены", 			   Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	Запрос = Новый Запрос;
	
	врМассивАгентов = Новый Массив;
	Если НЕ Пользователи_ЭтоСупервайзер(ТекАгент) Тогда
		врМассивАгентов.Добавить(ТекАгент);
	Иначе
		врМассивАгентов = Пользователи_СписокАгентовСупервайзера(ТекАгент);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТорговыйПредставитель", врМассивАгентов);
	Запрос.УстановитьПараметр("НашиТочки",             Клиенты_НашиТочки);
	
	СтрДопОтбор = "";
	Если ПоАгенту Тогда
		СтрДопОтбор = " И УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель В (&ТорговыйПредставитель)";
	Иначе
		СтрДопОтбор = " И НЕ Партнеры.Ссылка В ИЕРАРХИИ (&НашиТочки)";
	КонецЕсли;	
	
	Если врСписокПользователей <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТорговыйПредставитель", врСписокПользователей);
		СтрДопОтбор = " И УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель В (&ТорговыйПредставитель)";
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Партнеры.Ссылка КАК Партнер,
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель КАК ТорговыйПредставитель
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |		ПО (УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец = Партнеры.Ссылка)
	               |ГДЕ
	               |	НЕ Партнеры.ПометкаУдаления
	               |	И НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
	               |	И Партнеры.Клиент
	               |	И Партнеры.ОбслуживаетсяТорговымиПредставителями
				   |	И Партнеры.ОсновнойМенеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)"  + СтрДопОтбор + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Партнер
	               |ИТОГИ ПО
	               |	Партнер";
				   
	ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		
		Если Не ПоАгенту Тогда
			Если ИндивидуальныеЦеныНаТоварВТочке.Количество() > 5000 Тогда
				ЭкспортИндивидуальныхЦенТоваровВТорговыхТочках(ФайлВыгрузкиИндивидуальныхЦен);
			КонецЕсли;	
		КонецЕсли;	
		
		//Если Не ЗначениеЗаполнено(ВыборкаПартнер.Партнер.ОсновнойМенеджер) Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		Контрагент 	= ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ВыборкаПартнер.Партнер);
									
		Если (Контрагент = Неопределено) ИЛИ (НЕ ЗначениеЗаполнено(Контрагент)) Тогда
			Продолжить;
		КонецЕсли;	
		
		Выборка = ВыборкаПартнер.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ТорговыйПредставитель) Тогда
				Продолжить;
			КонецЕсли;	
			
			СоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(ВыборкаПартнер.Партнер, Выборка.ТорговыйПредставитель);
			
			Если Не ЗначениеЗаполнено(СоглашениеСКлиентом.Соглашение) Тогда
				//ЗаписатьОшибку1СвЛогФайл("СписокТТ - НЕТ СОГЛАШЕНИЯ:", Строка(ВыборкаПартнер.Партнер));
				Продолжить;
			КонецЕсли;	
			
			//Если СоглашениеСКлиентом.Соглашение.Организация = оргАТ_ЛогистикЕКТ Тогда
			//	Продолжить;
			//КонецЕсли;	
			
			//СтруктураПоиска = Новый Структура("Агент, ГУИДТочки", Выборка.ТорговыйПредставитель, СоглашениеСКлиентом.ГУИДПартнера);
			Если ТЗ_ТТ.Найти(СоглашениеСКлиентом.ГУИДПартнера, "ГУИДТочки") =  Неопределено Тогда
			//Если ТЗ_ТТ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда 
			
				НовСтрока = ТЗ_ТТ.Добавить();
				НовСтрока.Агент         = Выборка.ТорговыйПредставитель;
				НовСтрока.ТорговаяТочка = ВыборкаПартнер.Партнер;
				НовСтрока.ГУИДТочки     = СоглашениеСКлиентом.ГУИДПартнера;
				НовСтрока.Контрагент    = Контрагент;
				НовСтрока.Соглашение    = СоглашениеСКлиентом.Соглашение;
				НовСтрока.ВидЦены       = СоглашениеСКлиентом.ВидЦен;
				
				Если Не ПоАгенту Тогда
				
					Если СоглашениеСКлиентом.Соглашение.Товары.Количество() > 0 Тогда
						
					//	ЗаписатьОшибку1СвЛогФайл("Индивидуальные цены на товар в точке", Строка(ВыборкаПартнер.Партнер));
					
						Для Каждого ТекСтрокаИндив Из СоглашениеСКлиентом.Соглашение.Товары Цикл
							
							Если ЗначениеЗаполнено(ТекСтрокаИндив.ВидЦены) Тогда
							
								НовСтрокаИндив = ИндивидуальныеЦеныНаТоварВТочке.Добавить();
								НовСтрокаИндив.ГУИДТочки    = СоглашениеСКлиентом.ГУИДПартнера;
								НовСтрокаИндив.Номенклатура = ТекСтрокаИндив.Номенклатура;
								НовСтрокаИндив.ВидЦены      = ТекСтрокаИндив.ВидЦены;
								НовСтрокаИндив.Цена		    = ТекСтрокаИндив.Цена;
								
							Иначе
								
								НовСтрокаИндив = ИндивидуальныеЦеныНаТоварВТочке.Добавить();
								НовСтрокаИндив.ГУИДТочки    = СоглашениеСКлиентом.ГУИДПартнера;
								НовСтрокаИндив.Номенклатура = ТекСтрокаИндив.Номенклатура;
								НовСтрокаИндив.ВидЦены      = Справочники.ВидыЦен.ПустаяСсылка();	
								НовСтрокаИндив.Цена		    = ТекСтрокаИндив.Цена;
								
							КонецЕсли;	
								
						КонецЦикла;	
					
					КонецЕсли;	
					
				КонецЕсли;					
				
			Иначе
				
			//	ЗаписатьОшибку1СвЛогФайл("Формирование списка ТТ", "Точка с ГУИД """ + Строка(СоглашениеСКлиентом.ГУИДПартнера) + """ уже присутствует в списке ТТ. Клиент: " + Строка(ВыборкаПартнер.Партнер));
				
			КонецЕсли;	
						
		КонецЦикла;
		
	КонецЦикла;		
	
	Если Не ПоАгенту Тогда
		
		ЭкспортИндивидуальныхЦенТоваровВТорговыхТочках(ФайлВыгрузкиИндивидуальныхЦен);	
	
		Если ФайлВыгрузкиИндивидуальныхЦен.КоличествоСтрок() > 1 Тогда
	
			ФайлВыгрузкиИндивидуальныхЦен.ВставитьСтроку(1, Формат(ФайлВыгрузкиИндивидуальныхЦен.КоличествоСтрок() - 1, "ЧГ="));
			ФайлВыгрузкиИндивидуальныхЦен.Записать(КаталогВыгрузки + "\ShopProductPrice.txt", КодировкаТекста.ANSI);     
			
			Если ИмяСервераМА = "Tomsk" Тогда
				ФайлВыгрузкиИндивидуальныхЦен.Записать(РабочийКаталог + "DailyOriginal\ShopProductPrice.txt", КодировкаТекста.ANSI);								
			КонецЕсли;	
			
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных цен на товары в точке произведена в " + КаталогВыгрузки + "\ShopProductPrice.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
		Иначе	
		
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка индивидуальных цен на товары в точке НЕ произведена! Отсутствуют данные для выгрузки...");	
				
		КонецЕсли;		
	
	КонецЕсли;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Получение списка торговых точек ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	Возврат ТЗ_ТТ;
	
КонецФункции	


Функция ТранзитныеСклады_ОрганизацияПоУмолчанию(врПартнер, врОрганизацияГУИД) Экспорт
	
	врПараметрыТранзита = аян_СинхронизацияСервер.ТранзитныеСклады_ТочкаОтгружаетсяЧерезТранзит(врПартнер);
	
	Если врПараметрыТранзита.Транзит Тогда
		
		Для Каждого ТекТранзитСклад Из ТЗ_ТранзитныеСклады Цикл
			
			Если (ТекТранзитСклад.Склад = врПараметрыТранзита.Склад) И (СокрЛП(ТекТранзитСклад.Организация.УникальныйИдентификатор()) = врОрганизацияГУИД) Тогда
				Возврат ТекТранзитСклад.оргГУИД;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат врОрганизацияГУИД;
	
КонецФункции

	
// Shop.txt

Функция ЭкспортТорговыхТочек(врСписокПользователей = Неопределено)
	
	ЗамерСтарт = ТекущаяДата();
	
	Событие1С = "Экспорт торговых точек";
	
	ПросроченныеДолгиКлиентов = ЗаполнитьПросроченныеДолгиТТ();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем контрагентов...");
		
	// DeviceShop.txt
	
	ФайлВыгрузкиАТ = Новый ТекстовыйДокумент; 
	ФайлВыгрузкиАТ.ДобавитьСтроку("AgentRefID" + Символ(9) + "ShopRefID");	
	
	// Shop.txt - Торговые точки
	
	ФайлВыгрузки = Новый ТекстовыйДокумент; 
	ФайлВыгрузки.ДобавитьСтроку(                                                   
	"ShopRefID"	 			+ Символ(9) +
	"ShopName"	 			+ Символ(9) +
	"ShopTypeRefID"			+ Символ(9) +
	"LegalForm"	 			+ Символ(9) +
	"PasportSerias"			+ Символ(9) +
	"PasportNo"				+ Символ(9) +
	"PasportIssuePlace"		+ Символ(9) +
	"LegalAddress"	 		+ Символ(9) +
	"CertificateNo"			+ Символ(9) +
	"CertificateIssueDate"	+ Символ(9) +
	"CertificateIssuePlace"	+ Символ(9) +
	"Address"	 			+ Символ(9) +
	"Phone"	 				+ Символ(9) +
	"ContactPerson"	 		+ Символ(9) +
	"INN"	 				+ Символ(9) +
	"KPP"	 				+ Символ(9) +
	"OKPO"	 				+ Символ(9) +
	"OKONH"	 				+ Символ(9) +
	"BIK"			 		+ Символ(9) +
	"BankName"	 			+ Символ(9) +
	"SettlementAccount"	 	+ Символ(9) +
	"CorrespondentAccount"	+ Символ(9) +
	"DOB"	 				+ Символ(9) +
	"DirectorName"	 		+ Символ(9) +
	"ChiefAccountantName"	+ Символ(9) +
	"PaymentDelay"	 		+ Символ(9) +
	"DiscountRate"	 		+ Символ(9) +
	"MinDiscountRate"	 	+ Символ(9) +
	"MaxDiscountRate"	 	+ Символ(9) +
	"CurDebtAmount"	 		+ Символ(9) +
	"MaxDebtAmount"	 		+ Символ(9) +
	"OverdueDebtAmount"		+ Символ(9) +
	"DiscountAmount"	 	+ Символ(9) +
	"Note"	 				+ Символ(9) +
	"IsLegal"				+ Символ(9) +
	"IsBlocked"				+ Символ(9) +
	"IsDebtLimited"			+ Символ(9) +
	"DefaultPriceTypeRefID"	+ Символ(9) +
	"DefaultSellerRefID"    + Символ(9) +  
	"CustomFields"          + Символ(9) +  
	"Color"     		    + Символ(9) +  
	"MaxOverdueDebtAmount"  + Символ(9) +  
	"AgentNote");
	
	НЗ_СинхронизацияТТ = РегистрыСведений.аян_СинхронизацияТТ.СоздатьНаборЗаписей();
	НЗ_СинхронизацияТТ.Отбор.Сервер.Установить(ИмяСервераМА);
	
	ТЗ_СинхронизацияТТ = Новый ТаблицаЗначений;
	ТЗ_СинхронизацияТТ.Колонки.Добавить("Агент",                Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("ТорговаяТочка",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("Контрагент", 		    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("IDТочки", 			    ОписаниеТипаСтрока(40));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("Соглашение",           Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("ВидЦены", 			    Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("Скидка",   		    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));		
	ТЗ_СинхронизацияТТ.Колонки.Добавить("ЗапретОтгрузки",       Новый ОписаниеТипов("Булево"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("CurDebtAmount",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	ТЗ_СинхронизацияТТ.Колонки.Добавить("OverdueDebtAmount",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	ТЗ_СинхронизацияТТ.Колонки.Добавить("MaxOverdueDebtAmount", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));		
	ТЗ_СинхронизацияТТ.Колонки.Добавить("ДатаСинхронизации",    Новый ОписаниеТипов("Дата"));
	
	//ФлагЕжедневкаУтро = Истина;
	//
	//Попытка
	//	ЗапросТипСинхр = Новый Запрос;
	//	ЗапросТипСинхр.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата()));
	//	ЗапросТипСинхр.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));
	//	ЗапросТипСинхр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	                       |	аян_СинхронизацияТТ.ТипСинхронизации
	//	                       |ИЗ
	//	                       |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	//	                       |ГДЕ
	//	                       |	аян_СинхронизацияТТ.ТипСинхронизации = ""ЕЖЕД""
	//	                       |	И аян_СинхронизацияТТ.ДатаСинхронизации МЕЖДУ &НачПериода И &КонПериода";
	//	РезультатЗапросаТипСинхр = ЗапросТипСинхр.Выполнить();
	//	Если Не РезультатЗапросаТипСинхр.Пустой() Тогда
	//		ФлагЕжедневкаУтро = Ложь;
	//	КонецЕсли;	
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при определении Флага ежедневки (утро)", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;	
	//					   
	//Если ФлагЕжедневкаУтро Тогда
		ТЗТочки = ПолучитьСписокТТ(Ложь, врСписокПользователей);
	//Иначе
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Выгрузка списка ТТ по матрице ТТ");
	//	ТЗТочки = ПолучитьСписокТТПоМатрицеТТ();		
	//КонецЕсли;	
		
	МассивКонтрагентов = ТЗТочки.ВыгрузитьКолонку("Контрагент");
	
	// Контактная информация
	
	МассивКИ_Контрагентов = Новый Массив;
	МассивКИ_Контрагентов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);	
	
	МассивКИ_Партнеров = Новый Массив;
	МассивКИ_Партнеров.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	МассивКИ_Партнеров.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);

    ТЗ_КИ_Контрагенты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивКонтрагентов,   						, МассивКИ_Контрагентов);
	ТЗ_КИ_Партнеры    = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ТЗТочки.ВыгрузитьКолонку("ТорговаяТочка"), , МассивКИ_Партнеров);	
	
	// Банковские счета
	
	ЗапросБанки = Новый Запрос;
	ЗапросБанки.УстановитьПараметр("Владелец", МассивКонтрагентов);
	ЗапросБанки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	БанковскиеСчетаОрганизаций.Банк.Наименование КАК Наименование,
	                    |	БанковскиеСчетаОрганизаций.Банк.Код КАК БИК,
	                    |	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	                    |	БанковскиеСчетаОрганизаций.Банк.КоррСчет КАК КоррСчет,
	                    |	БанковскиеСчетаОрганизаций.Владелец
	                    |ИЗ
	                    |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	                    |ГДЕ
	                    |	БанковскиеСчетаОрганизаций.Владелец В(&Владелец)";
	ТЗБанки = ЗапросБанки.Выполнить().Выгрузить();	
	
	врАгентКозлов = Справочники.Пользователи.НайтиПоНаименованию("Козлов Владимир Николаевич");
	
	Для Каждого ТекТочка Из ТЗТочки Цикл
		
		Если ИмяСервераМА = "Tomsk" Тогда
			
		//	Если ТекАгент = врАгентКозлов Тогда
				
				Если ТекТочка.ТорговаяТочка.ПринадлежитЭлементу(Клиенты_грПетров) Тогда
				
					врОснТочкаПетрова = Петров_ПолучитьОсновнуюТочкуПетрова(ТекТочка.ТорговаяТочка);
					
					Если ЗначениеЗаполнено(врОснТочкаПетрова) Тогда
						Продолжить;
					КонецЕсли;	
					
				КонецЕсли;	
				
		//	КонецЕсли;	
			
		КонецЕсли;	
		
		Если ТекТочка.Агент = Агент_Заяц Тогда
			ФайлВыгрузкиАТ.ДобавитьСтроку("cffe2a2d-b2ae-11e5-80c6-00155d000c03" + Символ(9) + СокрЛП(ТекТочка.ГУИДТочки));
		Иначе	
			ФайлВыгрузкиАТ.ДобавитьСтроку(СокрЛП(ТекТочка.Агент.УникальныйИдентификатор())	+ Символ(9) + СокрЛП(ТекТочка.ГУИДТочки));	
		КонецЕсли;	
			
		Партнер 	= ТекТочка.ТорговаяТочка;
		Контрагент 	= ТекТочка.Контрагент;
		
		ОтгрузкаЗапрещена    = "False";
		
		CurDebtAmount	 	 = ПолучитьПросроченныйДолгКлиента(Партнер, ?(ИспользоватьРазделениеПоСоглашениям, ТекТочка.Соглашение, Неопределено), "Долг");
		MaxDebtAmount	 	 = 0;	
		OverdueDebtAmount	 = ПолучитьПросроченныйДолгКлиента(Партнер, ?(ИспользоватьРазделениеПоСоглашениям, ТекТочка.Соглашение, Неопределено), "ПросроченныйДолг");
		MaxOverdueDebtAmount = Получить_MaxOverdueDebtAmount(Партнер, OverdueDebtAmount);	
		
		//Если ЭтоГруппаПользователяОмск(ТекТочка.Агент) И (OverdueDebtAmount > 0) Тогда
			MaxOverdueDebtAmount = 50;
		//КонецЕсли;	
											
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
			IsLegal = "true";
		Иначе	
			IsLegal = "false";
		КонецЕсли;	
		
		КомментарийТочки = СтрЗаменить(Лев(Партнер, 200), Символ(13) + Символ(10), " ");
		
		РазмерСкидки = ПолучитьСкидкуКлиента(Партнер, ТекТочка.ВидЦены);
		
		Отбор_СинхронизацияТТ = Новый Структура("Агент, ТорговаяТочка", ТекТочка.Агент, Партнер);
		МассивНайденныхСтрок = ТЗ_СинхронизацияТТ.НайтиСтроки(Отбор_СинхронизацияТТ);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			НовЗаписьСинхронизацияТТ = ТЗ_СинхронизацияТТ.Добавить();
			НовЗаписьСинхронизацияТТ.Агент                = ТекТочка.Агент;
			НовЗаписьСинхронизацияТТ.ТорговаяТочка        = Партнер;
			НовЗаписьСинхронизацияТТ.Контрагент		      = Контрагент;
			НовЗаписьСинхронизацияТТ.IDТочки              = СокрЛП(ТекТочка.ГУИДТочки);
			НовЗаписьСинхронизацияТТ.Соглашение           = ТекТочка.Соглашение;
			НовЗаписьСинхронизацияТТ.ВидЦены              = ТекТочка.ВидЦены;
			НовЗаписьСинхронизацияТТ.Скидка               = РазмерСкидки;
			НовЗаписьСинхронизацияТТ.ЗапретОтгрузки       = ОтгрузкаЗапрещена;
			НовЗаписьСинхронизацияТТ.CurDebtAmount	 	  = CurDebtAmount;
			НовЗаписьСинхронизацияТТ.OverdueDebtAmount	  = OverdueDebtAmount;
			НовЗаписьСинхронизацияТТ.MaxOverdueDebtAmount = MaxOverdueDebtAmount;
			НовЗаписьСинхронизацияТТ.ДатаСинхронизации    = ТекущаяДата();
		Иначе
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "АЯН_СИНХРОНИЗАЦИЯ_ТТ - ДУБЛЬ СТРОК!!!", ТекТочка.Агент, Партнер);
		КонецЕсли;			
				
		ОсновнаяФирмаАгента = ПолучитьОсновнуюОрганизацию(ТекТочка.Агент);
		
		Наименование = СокрЛП(Партнер.Наименование);
		
		// Юридический адрес контрагента
		
		ЮрАдресКонтрагента = "";
		ИскСтрокаТЗ = ТЗ_КИ_Контрагенты.Найти(Контрагент, "Объект");
		Если ИскСтрокаТЗ <> Неопределено Тогда
			ЮрАдресКонтрагента = СтрЗаменить(ИскСтрокаТЗ.Представление, Символ(13) + Символ(10), " ");
		КонецЕсли;	
		
		// Адрес партнера, телефон партнера
		
		АдресПартнера 	= "";
		ТелефонПартнера = "";
		
		ИскСтрокиМассив = ТЗ_КИ_Партнеры.НайтиСтроки(Новый Структура("Объект", Партнер));
		Если ИскСтрокиМассив.Количество() > 0 Тогда
			Для Каждого ТекИскСтрока Из ИскСтрокиМассив Цикл
				Если ТекИскСтрока.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера Тогда
					АдресПартнера = СтрЗаменить(ТекИскСтрока.Представление, Символ(13) + Символ(10), " ");
				КонецЕсли;	
				Если ТекИскСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
					ТелефонПартнера = СтрЗаменить(ТекИскСтрока.Представление, Символ(13) + Символ(10), " ");
				КонецЕсли;					
			КонецЦикла;	
		КонецЕсли;	
		
		// Банковские счета
		
		БИК = ""; НаименованиеБанка = ""; НомерСчета = ""; КоррСчет = "";
		//ИскСтрокаТЗ = ТЗБанки.Найти(Контрагент, "Владелец");
		//Если ИскСтрокаТЗ <> Неопределено Тогда
		//	БИК = ИскСтрокаТЗ.БИК; НаименованиеБанка = ИскСтрокаТЗ.Наименование; НомерСчета = ИскСтрокаТЗ.НомерСчета; КоррСчет = ИскСтрокаТЗ.КоррСчет;
		//КонецЕсли;	
		
		врОргСоглашение = ТекТочка.Соглашение.Организация;
		
		ФирмаПоУмолчанию = СокрЛП(ОсновнаяФирмаАгента.УникальныйИдентификатор());
		Если ЭтоГруппаПользователяСевер(ТекТочка.Агент) ИЛИ ЭтоГруппаПользователяТомск(ТекТочка.Агент) Тогда
			Попытка
				Если врОргСоглашение = оргАТ_Логистик Тогда
					ФирмаПоУмолчанию = СокрЛП(оргАТ_Логистик.УникальныйИдентификатор());
				ИначеЕсли врОргСоглашение = оргРИФПлюс Тогда
					ФирмаПоУмолчанию = СокрЛП(оргРИФПлюс.УникальныйИдентификатор());
				ИначеЕсли врОргСоглашение = оргТОП_17 Тогда
					ФирмаПоУмолчанию = СокрЛП(оргТОП_17.УникальныйИдентификатор());
				ИначеЕсли врОргСоглашение = оргМеркурий Тогда
					ФирмаПоУмолчанию = СокрЛП(оргМеркурий.УникальныйИдентификатор());										
				ИначеЕсли врОргСоглашение = оргМарс Тогда
					ФирмаПоУмолчанию = СокрЛП(оргМарс.УникальныйИдентификатор());															
				ИначеЕсли врОргСоглашение = оргСигма Тогда
					ФирмаПоУмолчанию = СокрЛП(оргСигма.УникальныйИдентификатор());																				
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Фирма по умолчанию Север", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
		КонецЕсли;	
		
		Если врОргСоглашение = оргАТЛАНТОмск Тогда
			ФирмаПоУмолчанию = СокрЛП(оргАТЛАНТОмск.УникальныйИдентификатор());										
		КонецЕсли;	
		
		
		ФирмаПоУмолчанию = ТранзитныеСклады_ОрганизацияПоУмолчанию(Партнер, ФирмаПоУмолчанию);
		
		
	//	врКатегория = ?(ЗначениеЗаполнено(Партнер.ФлюгерКатегория), Партнер.ФлюгерКатегория.УникальныйИдентификатор(), "1");
	
		врКатегория = "1";
		
		врВидЦены = СокрЛП(ТекТочка.ВидЦены.УникальныйИдентификатор()) + ?(РазмерСкидки = 0, "", "_" + Строка(РазмерСкидки));
		
		//Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") Тогда
		//	Если Массив_Сегмент_Доставка.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТочка.ВидЦены.УникальныйИдентификатор()) + "_SG1";		
		//	КонецЕсли;	
		//	Если Массив_Сегмент_Доставка2.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТочка.ВидЦены.УникальныйИдентификатор()) + "_SG2";		
		//	КонецЕсли;				
		//КонецЕсли;	
		
		//Если (ИмяСервераМА <> "Tomsk") И (ИмяСервераМА <> "Sever") Тогда
		//	Если Массив_Сегмент_ПереподключениеРегионов.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТочка.ВидЦены.УникальныйИдентификатор()) + "_SGR";		
		//	КонецЕсли;				
		//КонецЕсли;	

		OverdueDebtAmount    = CurDebtAmount;
		MaxDebtAmount        = 50;
		MaxOverdueDebtAmount = 50;
				
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(ТекТочка.ГУИДТочки)													+ Символ(9) + 	// ShopRefID 
		Наименование																+ Символ(9) +   // ShopName
	//	"1"																			+ Символ(9) +   // ShopTypeRefID
		врКатегория							                                        + Символ(9) +   // ShopTypeRefID
		""																			+ Символ(9) +   // LegalForm
		""																			+ Символ(9) + 	// PasportSerias
		""																			+ Символ(9) + 	// PasportNo
		""																			+ Символ(9) + 	// PasportIssuePlace
		СокрЛП(ЮрАдресКонтрагента)													+ Символ(9) + 	// LegalAddress
		""																			+ Символ(9) + 	// CertificateNo
		""																			+ Символ(9) + 	// CertificateIssueDate
		""																			+ Символ(9) + 	// CertificateIssuePlace
		СокрЛП(АдресПартнера)														+ Символ(9) + 	// Address
		СокрЛП(ТелефонПартнера)														+ Символ(9) + 	// Phone
		""																			+ Символ(9) + 	// ContactPerson
		СокрЛП(Контрагент.ИНН)														+ Символ(9) +   // INN
		СокрЛП(Контрагент.КПП)														+ Символ(9) +   // KPP
		СокрЛП(Контрагент.КодПоОКПО)												+ Символ(9) +   // OKPO
		""																			+ Символ(9) + 	// OKONH
		СокрЛП(БИК)																	+ Символ(9) +   // BIK
		СокрЛП(НаименованиеБанка)													+ Символ(9) +   // BankName
		СокрЛП(НомерСчета)															+ Символ(9) +   // SettlementAccount
		СокрЛП(КоррСчет)															+ Символ(9) +   // CorrespondentAccount
		""																			+ Символ(9) + 	// DOB
		""																			+ Символ(9) + 	// DirectorName
		""																			+ Символ(9) + 	// ChiefAccountantNam
		"0"																			+ Символ(9) + 	// PaymentDelay
		"0" 																		+ Символ(9) + 	// DiscountRate 
		"0"																			+ Символ(9) + 	// MinDiscountRate
		"0"																			+ Символ(9) + 	// MaxDiscountRate
		Формат(CurDebtAmount, "ЧРД=.; ЧГ=")											+ Символ(9) + 	// CurDebtAmount
		"0"																			+ Символ(9) + 	// MaxDebtAmount
		Формат(OverdueDebtAmount, "ЧРД=.; ЧГ=")										+ Символ(9) + 	// OverdueDebtAmount
		"0"																			+ Символ(9) + 	// DiscountAmount
		КомментарийТочки															+ Символ(9) + 	// Note
		IsLegal																		+ Символ(9) + 	// IsLegal	
		ОтгрузкаЗапрещена															+ Символ(9) + 	// IsBlocked
		ОтгрузкаЗапрещена															+ Символ(9) + 	// IsDebtLimited
		//СокрЛП(ТекТочка.ВидЦены.УникальныйИдентификатор()) + ?(РазмерСкидки = 0, "", "_" + Строка(РазмерСкидки)) + Символ(9) + 	// DefaultPriceTypeRefID
		СокрЛП(врВидЦены)                                                           + Символ(9) + 	// DefaultPriceTypeRefID
		СокрЛП(ФирмаПоУмолчанию)  								                    + Символ(9) +	// DefaultSellerRefID 
		ПолучитьОстатокПоТареСтрокой(Партнер)                                       + Символ(9) +   // CustomFields
		""									                                        + Символ(9) +   // Color
		Формат(MaxOverdueDebtAmount, "ЧРД=.; ЧГ=")           		                + Символ(9) +   // MaxOverdueDebtAmount
		"");                                                                                        // AgentNote
		
	КонецЦикла;
	
	ТЗАгентыТовары = Новый ТаблицаЗначений;
	ТЗАгентыТовары.Колонки.Добавить("Агент", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗАгентыТовары.Колонки.Добавить("МассивРазрешенные");
	ТЗАгентыТовары.Колонки.Добавить("МассивИсключения");
	
	Для Каждого ТекСтрокаСинхронизации Из ТЗ_СинхронизацияТТ Цикл
		Если ТЗАгентыТовары.Найти(ТекСтрокаСинхронизации.Агент) = Неопределено Тогда
			НовСтрокаТЗАгентыТовары = ТЗАгентыТовары.Добавить();
			НовСтрокаТЗАгентыТовары.Агент = ТекСтрокаСинхронизации.Агент;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ТекСтрокаСинхронизации Из ТЗ_СинхронизацияТТ Цикл
	
		НовЗаписьСинхронизацияТТ = НЗ_СинхронизацияТТ.Добавить();
		НовЗаписьСинхронизацияТТ.Сервер                     = ИмяСервераМА;
		НовЗаписьСинхронизацияТТ.Агент                		= ТекСтрокаСинхронизации.Агент;
		НовЗаписьСинхронизацияТТ.Соглашение           		= ТекСтрокаСинхронизации.Соглашение;
		НовЗаписьСинхронизацияТТ.ТорговаяТочка        		= ТекСтрокаСинхронизации.ТорговаяТочка;
		НовЗаписьСинхронизацияТТ.Контрагент			  		= ТекСтрокаСинхронизации.Контрагент;
		НовЗаписьСинхронизацияТТ.IDТочки              		= СокрЛП(ТекСтрокаСинхронизации.IDТочки);
		НовЗаписьСинхронизацияТТ.ВидЦены		      		= ТекСтрокаСинхронизации.ВидЦены;
		НовЗаписьСинхронизацияТТ.Скидка			      		= ТекСтрокаСинхронизации.Скидка;
		НовЗаписьСинхронизацияТТ.ЗапретОтгрузки 		    = ТекСтрокаСинхронизации.ЗапретОтгрузки;
		НовЗаписьСинхронизацияТТ.CurDebtAmount	 	  		= ТекСтрокаСинхронизации.CurDebtAmount;
		НовЗаписьСинхронизацияТТ.OverdueDebtAmount	  		= ТекСтрокаСинхронизации.OverdueDebtAmount;
		НовЗаписьСинхронизацияТТ.MaxOverdueDebtAmount 		= ТекСтрокаСинхронизации.MaxOverdueDebtAmount;
		НовЗаписьСинхронизацияТТ.ДатаСинхронизации    		= ТекСтрокаСинхронизации.ДатаСинхронизации;
		НовЗаписьСинхронизацияТТ.КоличествоПовторовВыгрузки = 0;
		НовЗаписьСинхронизацияТТ.ТипСинхронизации           = "ЕЖЕД";
		
	КонецЦикла;	
		
	Попытка
		НЗ_СинхронизацияТТ.Записать(Истина);
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Экспорт торговых точек", "Ошибка записи данных в регистр синхронизации ТТ.", ИнформацияОбОшибке(), Истина);	
	КонецПопытки;
	
	// Борта агентов
	
	//Если ИмяСервераМА = "Kuzbass" Тогда
	//	
	//	МассивПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(ИмяСервераМА);
	//	Для Каждого ТекПользовательСервера Из МассивПользователейСервера Цикл
	//	
	//		врБорт_ОсновнаяФирма = ПолучитьОсновнуюОрганизацию(ТекПользовательСервера).УникальныйИдентификатор();
	//		врБорт_ВидЦены       = Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово борт");
	//		врБорт_ТТ            = "TT_" + СокрЛП(ТекПользовательСервера.УникальныйИдентификатор());
	//		
	//		ФайлВыгрузкиАТ.ДобавитьСтроку(СокрЛП(ТекПользовательСервера.УникальныйИдентификатор())	+ Символ(9) + СокрЛП(врБорт_ТТ));	
	//	
	//		ФайлВыгрузки.ДобавитьСтроку(
	//		СокрЛП(врБорт_ТТ)															+ Символ(9) +	// ShopRefID  
	//		"БОРТ (" + СокрЛП(ТекПользовательСервера.Наименование) + ")"				+ Символ(9) +   // ShopName
	//		"1"																			+ Символ(9) +   // ShopTypeRefID
	//		""																			+ Символ(9) +   // LegalForm
	//		""																			+ Символ(9) +   // PasportSerias 
	//		""																			+ Символ(9) +   // PasportNo 
	//		""																			+ Символ(9) +   // PasportIssuePlace
	//		""																			+ Символ(9) + 	// LegalAddress
	//		""																			+ Символ(9) + 	// CertificateNo
	//		""																			+ Символ(9) + 	// CertificateIssueDate
	//		""																			+ Символ(9) + 	// CertificateIssuePlace
	//		""																			+ Символ(9) + 	// Address
	//		""																			+ Символ(9) +   // Phone
	//		""																			+ Символ(9) + 	// ContactPerson
	//		""																			+ Символ(9) +   // INN
	//		""																			+ Символ(9) +   // KPP
	//		""																			+ Символ(9) +   // OKPO
	//		""																			+ Символ(9) + 	// OKONH
	//		""																			+ Символ(9) +   // BIK
	//		""																			+ Символ(9) +   // BankName
	//		""																			+ Символ(9) +   // SettlementAccount
	//		""																			+ Символ(9) +   // CorrespondentAccount
	//		""																			+ Символ(9) + 	// DOB
	//		""																			+ Символ(9) + 	// DirectorName
	//		""																			+ Символ(9) + 	// ChiefAccountantName
	//		"0"																			+ Символ(9) + 	// PaymentDelay
	//		"0" 																		+ Символ(9) + 	// DiscountRate 
	//		"0"																			+ Символ(9) + 	// MinDiscountRate
	//		"0"																			+ Символ(9) + 	// MaxDiscountRate
	//		Формат(0,"ЧРД=.; ЧГ=")														+ Символ(9) + 	// CurDebtAmount
	//		"0"																			+ Символ(9) + 	// MaxDebtAmount
	//		Формат(0,"ЧРД=.; ЧГ=")														+ Символ(9) + 	// OverdueDebtAmount
	//		"0"																			+ Символ(9) + 	// DiscountAmount
	//		""																			+ Символ(9) + 	// Note
	//		"False"																		+ Символ(9) + 	// IsLegal
	//		"False"																		+ Символ(9) + 	// IsBlocked
	//		"False"																		+ Символ(9) + 	// IsDebtLimited 
	//		СокрЛП(врБорт_ВидЦены.УникальныйИдентификатор())							+ Символ(9) + 	// DefaultPriceTypeRefID	
	//		врБорт_ОсновнаяФирма									                    + Символ(9) + 	// DefaultSellerRefID
	//		""			  							                                    + Символ(9) +   // CustomFields
	//		"25600"								 	                                    + Символ(9) +   // Color
	//		Формат(0,"ЧРД=.; ЧГ=")    					    							+ Символ(9) +	// MaxOverdueDebtAmount
	//		"");                                        						                        // AgentNote
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	
	
	ФайлВыгрузкиАТ.ВставитьСтроку(1, Формат(ФайлВыгрузкиАТ.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузкиАТ.Записать(КаталогВыгрузки + "\DeviceShop.txt", КодировкаТекста.ANSI);
	
//	ФайлВыгрузкиАТ.Записать(РабочийКаталог + "DailyOriginal\DeviceShop.txt", КодировкаТекста.ANSI);									
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка привязки к агентам торговых точек произведена в " + КаталогВыгрузки + "\DeviceShop.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Shop.txt", КодировкаТекста.ANSI);
	
//  ФайлВыгрузки.Записать(РабочийКаталог + "DailyOriginal\Shop.txt", КодировкаТекста.ANSI);								
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка торговых точек произведена в " + КаталогВыгрузки + "\Shop.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
	Возврат ТЗАгентыТовары;
		
КонецФункции 


// Shop2.txt

Процедура ЭкспортТорговыхТочекОперативная(РЗНеоплаченныеНакладные, ТЗНеоплаченныеНакладные, врСервер = Ложь)
	
	КоличествоДнейПросрочки = 1;
	Если ИмяСервераМА = "Sever" Тогда
		КоличествоДнейПросрочки = 3;
	КонецЕсли;	
	
	ЗамерСтарт = ТекущаяДата();
		
	Событие1С = "Выгрузка торговых точек (оперативная)";
	
	Если ТекАгент = Справочники.Пользователи.ПустаяСсылка() Тогда
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не определен Агент!");
		Возврат;
	КонецЕсли;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем контрагентов (оперативная)...");
	
	ФлагВыгрузкиShop2 = Ложь;
	
	// Добавляем новые торговые точки, если они были добавлены с даты последней синхронизации
	
	Если ИмяСервераМА = "Tomsk" И аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(ТекАгент) Тогда
		врСегментФокус = аян_СинхронизацияСервер.ФОКУС_СегментНоменклатурыАгента(ТекАгент);
		//ЗаписатьОшибку1СвЛогФайл(Событие1С, "Сегмент = " + Строка(врСегментФокус));
		врОсновнойАгент = аян_СинхронизацияСервер.ФОКУС_ПолучитьОсновногоАгента(ТекАгент);
		//ЗаписатьОшибку1СвЛогФайл(Событие1С, "Осн. агент = " + Строка(врОсновнойАгент));				
		Если ЗначениеЗаполнено(врОсновнойАгент) И ЗначениеЗаполнено(врСегментФокус) Тогда
			КЭШАгент = ТекАгент;
			ТекАгент = врОсновнойАгент;
			ТЗТочки = ПолучитьСписокТТ(Истина);	
			//ЗаписатьОшибку1СвЛогФайл(Событие1С, "Кол. точек = " + Строка(ТЗТочки.Количество()));				
			Для Каждого ТекТочка Из ТЗТочки Цикл
				//ЗаписатьОшибку1СвЛогФайл(Событие1С, "Точка = " + Строка(ТекТочка.ТорговаяТочка));
				врФокусСогл = ПолучитьСоглашениеСКлиентом(ТекТочка.ТорговаяТочка, КЭШАгент);
				Если НЕ ЗначениеЗаполнено(врФокусСогл.Соглашение) Тогда
					врСоглФокус = аян_СинхронизацияСервер.ФОКУС_СоздатьФокусноеСоглашение(КЭШАгент, ТекТочка.Соглашение, врСегментФокус);
					//ЗаписатьОшибку1СвЛогФайл(Событие1С, "Создано согл. = " + Строка(врФокусСогл));
				КонецЕсли;					
			КонецЦикла;	
			ТекАгент = КЭШАгент;
		КонецЕсли;	
	КонецЕсли;	
	
	ТЗТочки = ПолучитьСписокТТ(Истина);
	Для Каждого ТекТочка Из ТЗТочки Цикл
		
		Если ИмяСервераМА = "Tomsk" Тогда
			
			Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(ТекТочка.ТорговаяТочка) Тогда
				
				врОснТочкаПетрова = Петров_ПолучитьОсновнуюТочкуПетрова(ТекТочка.ТорговаяТочка);
					
				Если ЗначениеЗаполнено(врОснТочкаПетрова) Тогда
					Продолжить;
				КонецЕсли;	
					
			КонецЕсли;	
				
		КонецЕсли;		
				
  		НЗ_СинхронизацияТТ = РегистрыСведений.аян_СинхронизацияТТ.СоздатьНаборЗаписей();
		НЗ_СинхронизацияТТ.Отбор.Агент.Установить(ТекАгент);
		НЗ_СинхронизацияТТ.Отбор.ТорговаяТОчка.Установить(ТекТочка.ТорговаяТочка);
		НЗ_СинхронизацияТТ.Прочитать();
		
		Если НЗ_СинхронизацияТТ.Количество() = 0 Тогда
			
			НовЗаписьСинхронизацияТТ = НЗ_СинхронизацияТТ.Добавить();
			НовЗаписьСинхронизацияТТ.Сервер                     = ИмяСервераМА; 
			НовЗаписьСинхронизацияТТ.Агент                		= ТекАгент;
			НовЗаписьСинхронизацияТТ.Соглашение           		= ТекТочка.Соглашение;
			НовЗаписьСинхронизацияТТ.ТорговаяТочка        		= ТекТочка.ТорговаяТочка;
			НовЗаписьСинхронизацияТТ.Контрагент           		= ТекТочка.Контрагент;
			НовЗаписьСинхронизацияТТ.IDТочки              		= СокрЛП(ТекТочка.ГУИДТочки);
			НовЗаписьСинхронизацияТТ.ВидЦены		      		= ТекТочка.ВидЦены;
			НовЗаписьСинхронизацияТТ.Скидка			      		= ПолучитьСкидкуКлиента(ТекТочка.ТорговаяТочка, ТекТочка.ВидЦены);
			НовЗаписьСинхронизацияТТ.ЗапретОтгрузки       		= Ложь;
			НовЗаписьСинхронизацияТТ.CurDebtAmount	 	  		= 0;
			НовЗаписьСинхронизацияТТ.OverdueDebtAmount	  		= 0;
			НовЗаписьСинхронизацияТТ.MaxOverdueDebtAmount 		= 0;
			НовЗаписьСинхронизацияТТ.ДатаСинхронизации    		= ТекущаяДата();
			НовЗаписьСинхронизацияТТ.КоличествоПовторовВыгрузки = 5;
			
			Попытка
				НЗ_СинхронизацияТТ.Записать(Истина);
				ФлагВыгрузкиShop2 = Истина;
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи новой торговой точки в регистр ""НЗ_СинхронизацияТТ""", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
			
		Иначе
			
			ФлагИзменения = Ложь;
			
			Для Каждого ТекЗапись Из НЗ_СинхронизацияТТ Цикл
				Если ТекЗапись.ВидЦены <> ТекТочка.ВидЦены Тогда
					ТекЗапись.ЗапретОтгрузки    		 = Истина;
					ТекЗапись.ВидЦены           		 = ТекТочка.ВидЦены; 
					ТекЗапись.ДатаСинхронизации 		 = ТекущаяДата();
					ТекЗапись.КоличествоПовторовВыгрузки = 5;
					ФлагИзменения = Истина;					
				КонецЕсли;	
			КонецЦикла;	
			
			Если ФлагИзменения Тогда
				Попытка
					НЗ_СинхронизацияТТ.Записать(Истина);
					ФлагВыгрузкиShop2 = Истина;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи изменений торговой точки в регистр ""НЗ_СинхронизацияТТ""", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;	
	
	врЗамер_1 = ТекущаяДата() - ЗамерСтарт;
		
	// Shop2.txt
	
	файлВыгрузки = Новый ТекстовыйДокумент; 
	файлВыгрузки.ДобавитьСтроку(                                                   
	"ShopRefID"	 			+ Символ(9) +
	"ShopName"	 			+ Символ(9) +
	"ShopTypeRefID"			+ Символ(9) +
	"LegalForm"	 			+ Символ(9) +
	"PasportSerias"			+ Символ(9) +
	"PasportNo"				+ Символ(9) +
	"PasportIssuePlace"		+ Символ(9) +
	"LegalAddress"	 		+ Символ(9) +
	"CertificateNo"			+ Символ(9) +
	"CertificateIssueDate"	+ Символ(9) +
	"CertificateIssuePlace"	+ Символ(9) +
	"Address"	 			+ Символ(9) +
	"Phone"	 				+ Символ(9) +
	"ContactPerson"	 		+ Символ(9) +
	"INN"	 				+ Символ(9) +
	"KPP"	 				+ Символ(9) +
	"OKPO"	 				+ Символ(9) +
	"OKONH"	 				+ Символ(9) +
	"BIK"			 		+ Символ(9) +
	"BankName"	 			+ Символ(9) +
	"SettlementAccount"	 	+ Символ(9) +
	"CorrespondentAccount"	+ Символ(9) +
	"DOB"	 				+ Символ(9) +
	"DirectorName"	 		+ Символ(9) +
	"ChiefAccountantName"	+ Символ(9) +
	"PaymentDelay"	 		+ Символ(9) +
	"DiscountRate"	 		+ Символ(9) +
	"MinDiscountRate"	 	+ Символ(9) +
	"MaxDiscountRate"	 	+ Символ(9) +
	"CurDebtAmount"	 		+ Символ(9) +
	"MaxDebtAmount"	 		+ Символ(9) +
	"OverdueDebtAmount"		+ Символ(9) +
	"DiscountAmount"	 	+ Символ(9) +
	"Note"	 				+ Символ(9) +
	"IsLegal"				+ Символ(9) +
	"IsBlocked"				+ Символ(9) +
	"IsDebtLimited"			+ Символ(9) +
	"DefaultPriceTypeRefID"	+ Символ(9) +
	"DefaultSellerRefID"    + Символ(9) +  
	"CustomFields"          + Символ(9) +  
	"Color"          		+ Символ(9) +  
	"MaxOverdueDebtAmount"  + Символ(9) +  
	"AgentNote");
	
	// Данные по торговым точкам
	
	//врПросрочкаДней = 2;
	//
	//Если ИмяСервераМА = "Sever" Тогда
	//	врПросрочкаДней = КоличествоДнейПросрочки;
	//КонецЕсли;	
	//
	//Если ИмяСервераМА = "Tomsk" Тогда
	//	врПросрочкаДней = 1;
	//КонецЕсли;	

	врПросрочкаДней = КоличествоДнейПросрочки;

	
	//Если ТекАгент = Агент_Валишев Тогда
	//	врПросрочкаДней = 7;
	//ИначеЕсли ИмяСервераМА = "Sever" Тогда
	//ИначеЕсли ИмяСервераМА = "Region" Тогда
	//	врПросрочкаДней = 9;
	//ИначеЕсли ИмяСервераМА = "Altai" Тогда
	//	врПросрочкаДней = 9;
	//ИначеЕсли ИмяСервераМА = "Novosib" Тогда
	//	врПросрочкаДней = 9;
	//ИначеЕсли ИмяСервераМА = "Kuzbass" Тогда
	//	Если ЭтоГруппаПользователяАчинск(ТекАгент) Тогда
	//		врПросрочкаДней = 10;		
	//	КонецЕсли;	
	//ИначеЕсли ИмяСервераМА = "Tomsk" Тогда
	//	Если ЭтоГруппаПользователяКЕГИУТРО_НЕ_Томск(ТекАгент) Тогда
	//		врПросрочкаДней = 9;
	//	КонецЕсли;	
	//КонецЕсли;	
			
	ТЗ_СинхронизацияТТ = Новый ТаблицаЗначений;
	ТЗ_СинхронизацияТТ.Колонки.Добавить("ТорговаяТочка",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗ_СинхронизацияТТ.Колонки.Добавить("CurDebtAmount",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	ТЗ_СинхронизацияТТ.Колонки.Добавить("OverdueDebtAmount",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	ТЗ_СинхронизацияТТ.Колонки.Добавить("MaxOverdueDebtAmount", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	Для Каждого Выборка Из ТЗНеоплаченныеНакладные Цикл	
		
		//Если ИмяСервераМА = "Tomsk" Тогда
		//	Если Массив_Сегмент_Отсрочка7.Найти(Выборка.Партнер) <> Неопределено Тогда
		//		врПросрочкаДней = 7;
		//	Иначе
		//		врПросрочкаДней = 1;
		//	КонецЕсли;
		//КонецЕсли;
		
		НовСтрокаТЗ = ТЗ_СинхронизацияТТ.Добавить();
		НовСтрокаТЗ.ТорговаяТочка 		 = Выборка.Партнер;
		НовСтрокаТЗ.CurDebtAmount        = Выборка.Долг;				
		НовСтрокаТЗ.OverdueDebtAmount    = ?(Выборка.ПросрочкаДней > врПросрочкаДней, Выборка.Долг, 0);
		НовСтрокаТЗ.MaxOverdueDebtAmount = 0;
		
	КонецЦикла;
	
	ТЗ_СинхронизацияТТ.Свернуть("ТорговаяТочка", "CurDebtAmount, OverdueDebtAmount, MaxOverdueDebtAmount");
	
	врЗамер_2_1 = ТекущаяДата() - ЗамерСтарт;
	
	Для Каждого ТекСтрокаТЗ Из ТЗ_СинхронизацияТТ Цикл
		ТекСтрокаТЗ.MaxOverdueDebtAmount = Получить_MaxOverdueDebtAmount(ТекСтрокаТЗ.ТорговаяТочка, ТекСтрокаТЗ.OverdueDebtAmount);
	КонецЦикла;	
	
	врЗамер_2_2 = ТекущаяДата() - ЗамерСтарт;
	
	// Определяем партнеров по которым произошли изменения
			
	НЗ_СинхронизацияТТ = РегистрыСведений.аян_СинхронизацияТТ.СоздатьНаборЗаписей();
	НЗ_СинхронизацияТТ.Отбор.Агент.Установить(ТекАгент);
	НЗ_СинхронизацияТТ.Прочитать();
	
	Если НЗ_СинхронизацияТТ.Количество() = 0 Тогда		
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Нет измененных торговых точек для выгрузки в " + КаталогВыгрузки + "Shop2.txt("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		Возврат;
	КонецЕсли;	
	
	МассивКонтрагентов = НЗ_СинхронизацияТТ.ВыгрузитьКолонку("Контрагент");
	МассивПартнеров    = НЗ_СинхронизацияТТ.ВыгрузитьКолонку("ТорговаяТочка");
	
	ТЗ_ДанныеКонтрагентов = КлиентыКонтрагенты_ПолучитьДанныеКонтрагентов(МассивКонтрагентов);
		
	// Остатки по таре партнеров
	
	Если ИмяСервераМА = "Tomsk" Тогда
		ТЗ_Тара = Тара_ОстаткиПоТареВТорговыхТочках_New(МассивПартнеров);
	Иначе	
		ТЗ_Тара = Тара_ОстаткиПоТареВТорговыхТочках(МассивПартнеров);
	КонецЕсли;	
	
	врЗамер_3 = ТекущаяДата() - ЗамерСтарт;
	
	врЭтоСВ = Пользователи_ЭтоСупервайзер(ТекАгент);
	
	Для Каждого ТекТТ Из НЗ_СинхронизацияТТ Цикл
				
		Если ИмяСервераМА = "Tomsk" Тогда
			
			Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(ТекТТ.ТорговаяТочка) Тогда
				
				врОснТочкаПетрова = Петров_ПолучитьОсновнуюТочкуПетрова(ТекТТ.ТорговаяТочка);
					
				Если ЗначениеЗаполнено(врОснТочкаПетрова) Тогда
					Продолжить;
				КонецЕсли;	
					
			КонецЕсли;	
			
		КонецЕсли;	
					
		CurDebtAmount        = 0;
		OverdueDebtAmount    = 0;
		MaxOverdueDebtAmount = 0;	
		СтрокаТЗ = ТЗ_СинхронизацияТТ.Найти(ТекТТ.ТорговаяТочка, "ТорговаяТочка");
		Если СтрокаТЗ <> Неопределено Тогда
			CurDebtAmount        = СтрокаТЗ.CurDebtAmount;
			OverdueDebtAmount    = СтрокаТЗ.OverdueDebtAmount;
			MaxOverdueDebtAmount = СтрокаТЗ.MaxOverdueDebtAmount;					
		КонецЕсли;	
		
		ФлагИзмененияТТ = Истина;	
		
		врДанныеПартнера = КлиентыКонтрагенты_ПолучитьИнформациюПартнер(ТекТТ.ТорговаяТочка);
		
		// Запрет отгрузки
		
		ТекТТ.ЗапретОтгрузки = Ложь;
		
		ТекТТ.CurDebtAmount        = CurDebtAmount;		
		ТекТТ.OverdueDebtAmount    = OverdueDebtAmount;		
		ТекТТ.MaxOverdueDebtAmount = MaxOverdueDebtAmount;
		
		// БЕЗ СТОПОВ - ВОСКРЕСЕНИЕ
		
		//Если ДеньНедели(ТекущаяДата()) = 7 Тогда
		//	
		//	врГруппаПользователя = ПолучитьГруппуПользователя(ТекАгент);
		////	
		//
		//Если ТекущаяДата() <= КонецДня('20220419') Тогда
		//	врМассивВС_Воскресение = Новый Массив;
		//	врМассивВС_Воскресение.Добавить(Структура_СВ.Меленцова);
		////	врМассивВС_Воскресение.Добавить(Структура_СВ.Думченко);
		//	врМассивВС_Воскресение.Добавить(Структура_СВ.Абакумов);
		////	врМассивВС_Воскресение.Добавить(Структура_СВ.Мирусина);
		//	врМассивВС_Воскресение.Добавить(Структура_СВ.Либрихт);			
		//
		//	Если врМассивВС_Воскресение.Найти(врГруппаПользователя) <> Неопределено Тогда
		//		OverdueDebtAmount          = 0;
		//		MaxOverdueDebtAmount       = 0;
		//		ТекТТ.OverdueDebtAmount    = 0;
		//		ТекТТ.MaxOverdueDebtAmount = 0;			
		//	КонецЕсли;	
		//	
		//КонецЕсли;	
		
		Если (ТекТТ.ТорговаяТочка.Родитель = Клиенты_Роснефть) ИЛИ врЭтоСВ Тогда
			OverdueDebtAmount          = 0;
			MaxOverdueDebtAmount       = 0;
			ТекТТ.OverdueDebtAmount    = 0;
			ТекТТ.MaxOverdueDebtAmount = 0;			
		КонецЕсли;	
		
		// Киселёва Л.Э. ИП Осенняя ул, дом № 8
		Если (ДеньНедели(ТекущаяДата()) = 7) И (ТекТТ.ТорговаяТочка.Код = "00-00045080") Тогда
			OverdueDebtAmount          = 0;
			MaxOverdueDebtAmount       = 0;
			ТекТТ.OverdueDebtAmount    = 0;
			ТекТТ.MaxOverdueDebtAmount = 0;						
		КонецЕсли;	
		
		// Гарипов В.М. ИП маг. Бухта
		Если (ДеньНедели(ТекущаяДата()) = 7) И (ТекТТ.ТорговаяТочка.Код = "00-00040685") Тогда
			OverdueDebtAmount          = 0;
			MaxOverdueDebtAmount       = 0;
			ТекТТ.OverdueDebtAmount    = 0;
			ТекТТ.MaxOverdueDebtAmount = 0;						
		КонецЕсли;	
		
		// Соколова Ю.Г. ИП Гагарина ул, дом № 29
		Если (ДеньНедели(ТекущаяДата()) = 7) И (ТекТТ.ТорговаяТочка.Код = "00-00048496") Тогда
			OverdueDebtAmount          = 0;
			MaxOverdueDebtAmount       = 0;
			ТекТТ.OverdueDebtAmount    = 0;
			ТекТТ.MaxOverdueDebtAmount = 0;						
		КонецЕсли;	
		
		Если ТекАгент = Агент_БезСтопа Тогда
			OverdueDebtAmount          = 0;
			MaxOverdueDebtAmount       = 0;
			ТекТТ.OverdueDebtAmount    = 0;
			ТекТТ.MaxOverdueDebtAmount = 0;						
		КонецЕсли;			
				                                                                                  		
		// IsBlocked
		
		IsBlocked = "False"; 
		
		// Переплата
		
	//	ТекТТ.Переплата = ПереплатаПоТочке(ТекТТ.ТорговаяТочка);
		ТекТТ.Переплата = 0;
		
		// ИНН, КПП, КодПоОКПО
		
		Контрагент_ИНН = ""; Контрагент_КПП = ""; Контрагент_КодПоОКПО = ""; Контрагент_НастроенЭДО = ""; Контрагент_НастроенСБИС = "";
		
		ИскСтрокиМассив = ТЗ_ДанныеКонтрагентов.НайтиСтроки(Новый Структура("Ссылка", ТекТТ.Контрагент));
		Если ИскСтрокиМассив.Количество() > 0 Тогда
			врДанныеКонтрагента     = ИскСтрокиМассив[0];
			Контрагент_ИНН          = врДанныеКонтрагента.ИНН; 
			Контрагент_КПП          = врДанныеКонтрагента.КПП; 
			Контрагент_КодПоОКПО    = врДанныеКонтрагента.КодПоОКПО;
			Контрагент_НастроенЭДО  = врДанныеКонтрагента.НастроенЭДО;
			Контрагент_НастроенСБИС = ТекТТ.Контрагент.НастроенЭДОСБИС;
		КонецЕсли;		
		
        // AgentNote
		
		//врЭтоКегиУтро = Ложь;
		//Если ИмяСервераМА = "Tomsk" Тогда
		//	Если Доставка_ЭтоРозливДень(ТекТТ.ТорговаяТочка, ТекАгент) Тогда
		//		врЗонаДоставки = Доставка_РозливДень_ЗонаДоставки(ТекТТ.ТорговаяТочка);
		//		Если ЗначениеЗаполнено(врЗонаДоставки) Тогда
		//			врЭтоКегиУтро = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;	
		
		//AgentNote = ?(врЭтоКегиУтро, "КЕГИ УТРО ! ", "") + Формат(ТекущаяДата(), "ДФ='dd MMM HH:mm'") + " ";
		
		//AgentNote = ?(Контрагент_НастроенЭДО, "СИГАРЕТЫ ", "") + Формат(ТекущаяДата(), "ДФ='dd MMM HH:mm'") + " ";
		
		AgentNote = Формат(ТекущаяДата(), "ДФ='dd MMM HH:mm'") + " ";
	
		// Не верно указана организация в соглашении
		                                              
		врОргСоглашение = ТекТТ.Соглашение.Организация;
		
		врБлок = Истина; 
		Если (врОргСоглашение = оргАТ_Логистик) Тогда
			врБлок = Ложь;
		КонецЕсли;	
		Если (врОргСоглашение = оргМирНапитковТомск) Тогда 
			врБлок = Ложь;
		КонецЕсли;	
		
		Если врБлок Тогда 
			AgentNote = "НЕВЕРНАЯ ОРГАНИЗАЦИЯ В СОГЛАШЕНИИ!!! ";
			IsBlocked = "True"; 
			ТекТТ.MaxOverdueDebtAmount = 50;
		КонецЕсли;		
		
		//Если ТекТТ.OverdueDebtAmount > 50 Тогда
		//	Если (ИмяСервераМА = "Tomsk") И (Не ЭтоГруппаПользователяКЕГИУТРО_НЕ_Томск(ТекАгент)) Тогда
		//		 Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(ТекТТ.ТорговаяТочка) Тогда
		//			IsBlocked = "True"; 			
		//		КонецЕсли;	
		//	КонецЕсли;	
		//КонецЕсли;	
		
		Если ЧерныйСписок(ТекТТ.ТорговаяТочка) Тогда
			AgentNote = "ЧЕРНЫЙ СПИСОК (ОТГРУЗКА ЗАПРЕЩЕНА)!!! ";
			IsBlocked = "True"; 
			ТекТТ.MaxOverdueDebtAmount = 50;
		КонецЕсли;				
		
		Если Сегмент_ОтгрузкаЗапрещенаКлиенту(ТекТТ.ТорговаяТочка) Тогда
			AgentNote = "ОТГРУЗКА ЗАПРЕЩЕНА!!! ";
			IsBlocked = "True"; 
			ТекТТ.MaxOverdueDebtAmount = 50;
		КонецЕсли;						
							
		ДнейОтсрочки = врДанныеПартнера.Отсрочка;
				
		ПредставлениеСкидки = "";
				
		AgentNote = AgentNote + "[" + СокрЛП(ТекТТ.ВидЦены.Наименование) + ПредставлениеСкидки + "] Отср. " + Строка(ДнейОтсрочки) + " (дн). ";
		
		// Всегда за НАЛ
		
		//Если ВсегдаЗаНАЛ(ТекТТ.ТорговаяТочка) Тогда
		//	AgentNote = AgentNote + "ВСЕГДА ЗА НАЛ. ";
		//КонецЕсли;			
				
		// Бизнес-регион
		
		врБизнесРегион = ТекТТ.ТорговаяТочка.БизнесРегион;
		
		Если ЗначениеЗаполнено(врБизнесРегион) Тогда
			AgentNote = AgentNote + "БР: " + СокрЛП(врБизнесРегион.Наименование) + ". ";
		Иначе	
			AgentNote = AgentNote + "БР: НЕ УКАЗАН!!! ";
		КонецЕсли;	
		
		// Основная организация реализация
			
		Если врОргСоглашение = оргТОП_17 Тогда
			AgentNote = AgentNote + "ТОП-17. ";
		ИначеЕсли врОргСоглашение = оргМеркурий Тогда
			AgentNote = AgentNote + "Меркурий. ";
		ИначеЕсли врОргСоглашение = оргАТЛАНТОмск Тогда
			AgentNote = AgentNote + "АТЛАНТ. ";
		Иначе
			AgentNote = AgentNote + "АТЛ. ";
		КонецЕсли;			
					
		AgentNote = AgentNote + врДанныеПартнера.Договоры;
		
		Партнер 	= ТекТТ.ТорговаяТочка;
		Контрагент 	= ТекТТ.Контрагент;		
						
		// ЕГАИС
		
		Наименование = СокрЛП(Партнер.Наименование);
		
		врЭтоПетров = Ложь;
		
		ТочкаПодключенаКЕГАИС = Истина;
		врЛев_7 = Лев(Наименование, 7) = "Петров(";
		врЛев_8 = Лев(Наименование, 8) = "Петров (";
		Если врЛев_7 ИЛИ врЛев_8 Тогда
			ТочкаПодключенаКЕГАИС = Истина;
			врЭтоПетров = Истина;
		Иначе	
			ТочкаПодключенаКЕГАИС = КонтрагентПодключенКЕГАИС(ТекТТ.ТорговаяТочка, Ложь);
		КонецЕсли;			
			
		//Если Не ТочкаПодключенаКЕГАИС Тогда
		//	AgentNote = AgentNote + " " + "Точка НЕ ПОДКЛЮЧЕНА к ЕГАИС!!! ";
		//Иначе
		//	AgentNote = AgentNote + " " + "Точка в ЕГАИС. ";
		//КонецЕсли;
						
		// Дебиторская задолженность
		
		AgentNote = AgentNote + СформироватьAgentNote(ТекТТ.ТорговаяТочка, ТЗНеоплаченныеНакладные);
		
		// Записываем данные в файл выгрузки		
		
		ФлагВыгрузкиShop2 = Истина;
		
		ТекТТ.ДатаСинхронизации = ТекущаяДата();
		ТекТТ.AgentNote         = AgentNote;
		ТекТТ.ТипСинхронизации  = "ОПЕР";
					
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
			IsLegal = "true";
		Иначе	
			IsLegal = "false";
		КонецЕсли;	
		
		// Юридический адрес контрагента
		
		ЮрАдресКонтрагента = врДанныеПартнера.АдресКонтрагента;
		
		АдресПартнера 	= врДанныеПартнера.АдресПартнера;
		ТелефонПартнера = врДанныеПартнера.Телефон;
				
		врГрафикРаботы = врДанныеПартнера.Расписание;
		
		ОстатокПоТаре = "";
		ИскСтрокаТЗ = ТЗ_Тара.Найти(Партнер, "Партнер");
		Если ИскСтрокаТЗ <> Неопределено Тогда
			ОстатокПоТаре = СокрЛП(ИскСтрокаТЗ.Тара);
		КонецЕсли;		
		
		СтрокаЗапреты = ?(ВсегдаЗаНАЛ(ТекТТ.ТорговаяТочка), "ВСЕГДА ЗА НАЛ, ", "") + ?(ТочкаПодключенаКЕГАИС, "ЕГАИС, ", "") + ?(Контрагент_НастроенСБИС, "СИГАРЕТЫ, МАРКИРОВКА (МОЛОЧКА)", "");  
		
		врСтрДлинаЗапреты = СтрДлина(СтрокаЗапреты);
		Если врСтрДлинаЗапреты > 2 Тогда
			врПослДваСимвола = Прав(СтрокаЗапреты, 2);
			Если врПослДваСимвола = ", " Тогда
				СтрокаЗапреты = Лев(СтрокаЗапреты, врСтрДлинаЗапреты - 2);
			КонецЕсли;	
		КонецЕсли;	
		
		Если ПустаяСтрока(СтрокаЗапреты) Тогда
			СтрокаЗапреты = "отсутствуют";
		КонецЕсли;	
		
		ОстатокПоТаре = "РАЗРЕШЕНО: " + "@@@" + СтрокаЗапреты + "###" + "ПЕТРУШКА: " + "@@@" + Петрушка_ИнформацияМА(Партнер) + "###" + "Приемка товара: " + "@@@" + врГрафикРаботы + "###" + ОстатокПоТаре;
		
		КомментарийТочки = СтрЗаменить(Лев(Партнер, 200), Символ(13) + Символ(10), " ");		
						
		БИК = ""; НаименованиеБанка = ""; НомерСчета = ""; КоррСчет = "";
				
		РазмерСкидки = ТекТТ.Скидка;
		
		ФирмаПоУмолчанию = СокрЛП(ОсновнаяФирма.УникальныйИдентификатор());
		
		Попытка
			Если врСервер Тогда
				Если врОргСоглашение = оргАТ_Логистик Тогда
					ФирмаПоУмолчанию = СокрЛП(оргАТ_Логистик.УникальныйИдентификатор());
				ИначеЕсли врОргСоглашение = оргТОП_17 Тогда
					ФирмаПоУмолчанию = СокрЛП(оргТОП_17.УникальныйИдентификатор());					
				ИначеЕсли врОргСоглашение = оргМеркурий Тогда
					ФирмаПоУмолчанию = СокрЛП(оргМеркурий.УникальныйИдентификатор());										
				ИначеЕсли врОргСоглашение = оргАТЛАНТОмск Тогда
					ФирмаПоУмолчанию = СокрЛП(оргАТЛАНТОмск.УникальныйИдентификатор());															
				КонецЕсли;	
			КонецЕсли;
		Исключение
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Фирма по умолчанию Север", ИнформацияОбОшибке(), Истина);
		КонецПопытки;			
				
		ФирмаПоУмолчанию = ТранзитныеСклады_ОрганизацияПоУмолчанию(Партнер, ФирмаПоУмолчанию);
		
		врКатегория = "1";
		
		врЦветТочки = "";
		
		Если Не ТочкаПодключенаКЕГАИС Тогда
			врЦветТочки = "25600";
		КонецЕсли;     
		
		врВидЦены = СокрЛП(ТекТТ.ВидЦены.УникальныйИдентификатор()) + ?(РазмерСкидки = 0, "", "_" + Строка(РазмерСкидки));
		
		//Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") Тогда
		//	Если Массив_Сегмент_Доставка.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТТ.ВидЦены.УникальныйИдентификатор()) + "_SG1";
		//	КонецЕсли;	
		//	Если Массив_Сегмент_Доставка2.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТТ.ВидЦены.УникальныйИдентификатор()) + "_SG2";
		//	КонецЕсли;				
		//КонецЕсли;	
		
		//Если (ИмяСервераМА <> "Tomsk") И (ИмяСервераМА <> "Sever") Тогда
		//	Если Массив_Сегмент_ПереподключениеРегионов.Найти(Партнер) <> Неопределено Тогда
		//		врВидЦены = СокрЛП(ТекТТ.ВидЦены.УникальныйИдентификатор()) + "_SGR";		
		//	КонецЕсли;				
		//КонецЕсли;	
							
		ФайлВыгрузки.ДобавитьСтроку(
		СокрЛП(ТекТТ.IDТочки)														+ Символ(9) +	// ShopRefID  
		Наименование																+ Символ(9) +   // ShopName
	//	"1"																			+ Символ(9) +   // ShopTypeRefID
		врКатегория 																+ Символ(9) +   // ShopTypeRefID
		""																			+ Символ(9) +   // LegalForm
		""																			+ Символ(9) +   // PasportSerias 
		""																			+ Символ(9) +   // PasportNo 
		""																			+ Символ(9) +   // PasportIssuePlace
		СокрЛП(ЮрАдресКонтрагента)													+ Символ(9) + 	// LegalAddress
		""																			+ Символ(9) + 	// CertificateNo
		""																			+ Символ(9) + 	// CertificateIssueDate
		""																			+ Символ(9) + 	// CertificateIssuePlace
		?(врЭтоПетров, СокрЛП(АдресПартнера), "ИНН: " + СокрЛП(Контрагент_ИНН) + "; " + СокрЛП(АдресПартнера))		+ Символ(9) + 	// Address
		СокрЛП(ТелефонПартнера)														+ Символ(9) +   // Phone
		""																			+ Символ(9) + 	// ContactPerson
		СокрЛП(Контрагент_ИНН)														+ Символ(9) +   // INN
		СокрЛП(Контрагент_КПП)														+ Символ(9) +   // KPP
		СокрЛП(Контрагент_КодПоОКПО)												+ Символ(9) +   // OKPO
		""																			+ Символ(9) + 	// OKONH
		СокрЛП(БИК)																	+ Символ(9) +   // BIK
		СокрЛП(НаименованиеБанка)													+ Символ(9) +   // BankName
		СокрЛП(НомерСчета)															+ Символ(9) +   // SettlementAccount
		СокрЛП(КоррСчет)															+ Символ(9) +   // CorrespondentAccount
		""																			+ Символ(9) + 	// DOB
		""																			+ Символ(9) + 	// DirectorName
		""																			+ Символ(9) + 	// ChiefAccountantName
		"0"																			+ Символ(9) + 	// PaymentDelay
		"0" 																		+ Символ(9) + 	// DiscountRate 
		"0"																			+ Символ(9) + 	// MinDiscountRate
		"0"																			+ Символ(9) + 	// MaxDiscountRate
		Формат(CurDebtAmount,"ЧРД=.; ЧГ=")											+ Символ(9) + 	// CurDebtAmount
		"0"																			+ Символ(9) + 	// MaxDebtAmount
		Формат(OverdueDebtAmount,"ЧРД=.; ЧГ=")										+ Символ(9) + 	// OverdueDebtAmount
		"0"																			+ Символ(9) + 	// DiscountAmount
		КомментарийТочки															+ Символ(9) + 	// Note
		IsLegal																		+ Символ(9) + 	// IsLegal
		IsBlocked																	+ Символ(9) + 	// IsBlocked
		"False"																		+ Символ(9) + 	// IsDebtLimited 
		//СокрЛП(ТекТТ.ВидЦены.УникальныйИдентификатор()) + ?(РазмерСкидки = 0, "", "_" + Строка(РазмерСкидки)) + Символ(9) + 	// DefaultPriceTypeRefID	
		СокрЛП(врВидЦены) 															+ Символ(9) + 	// DefaultPriceTypeRefID	
		ФирмаПоУмолчанию 										                    + Символ(9) + 	// DefaultSellerRefID
		ОстатокПоТаре  							                                    + Символ(9) +   // CustomFields
	//	?(ТочкаПодключенаКЕГАИС, "", "25600") 	                                    + Символ(9) +   // Color
		врЦветТочки							 	                                    + Символ(9) +   // Color
		Формат(MaxOverdueDebtAmount,"ЧРД=.; ЧГ=")        							+ Символ(9) +	// MaxOverdueDebtAmount
		СокрЛП(Лев(AgentNote, 500)));                                                               // AgentNote
				
	КонецЦикла;
	
	врЗамер_4 = ТекущаяДата() - ЗамерСтарт;
		
	врЗамер_5 = ТекущаяДата() - ЗамерСтарт;
	
	//// ОСТАТКИ
	//
	//врВидЦеныСевер        = Справочники.ВидыЦен.НайтиПоНаименованию("СЕВЕР");
	//врВидЦеныРозничная    = Справочники.ВидыЦен.НайтиПоНаименованию("Розничная");
	//
	//ТЗОстатки = Новый ТаблицаЗначений;
	//ТЗОстатки.Колонки.Добавить("Сервер", 	   ОписаниеТипаСтрока(40));
	//ТЗОстатки.Колонки.Добавить("ГУИД",         ОписаниеТипаСтрока(40));
	//ТЗОстатки.Колонки.Добавить("Наименование", ОписаниеТипаСтрока(150));
	//ТЗОстатки.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	//ТЗОстатки.Колонки.Добавить("ВидЦены", 	   Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	//
	//// СЕВЕР
	//	
	//НовСтрока = ТЗОстатки.Добавить();
	//НовСтрока.Сервер       = "Sever";
	//НовСтрока.ГУИД         = "TT_OSTATKI_ATL";
	//НовСтрока.Наименование = "_Остатки АТЛ [Север]";
	//НовСтрока.Организация  = оргАТ_Логистик;
	//НовСтрока.ВидЦены      = врВидЦеныСевер;
	//	
	//// ТОМСК
	//	
	//НовСтрока = ТЗОстатки.Добавить();
	//НовСтрока.Сервер       = "Tomsk";
	//НовСтрока.ГУИД         = "TT_OSTATKI_ATL";
	//НовСтрока.Наименование = "_Остатки АТЛ [Розничная]";
	//НовСтрока.Организация  = оргАТ_Логистик;
	//НовСтрока.ВидЦены      = врВидЦеныРозничная;		
	//
	//НовСтрока = ТЗОстатки.Добавить();
	//НовСтрока.Сервер       = "Tomsk";
	//НовСтрока.ГУИД         = "TT_OSTATKI_ATL_SEVER";
	//НовСтрока.Наименование = "_Остатки АТЛ [Север]";
	//НовСтрока.Организация  = оргАТ_Логистик;
	//НовСтрока.ВидЦены      = врВидЦеныСевер;	
	//	
	//Если (ИмяСервераМА = "Sever") ИЛИ (ИмяСервераМА = "Tomsk") Тогда
	//	
	//	Для Каждого ТекСтрокаОстатки Из ТЗОстатки Цикл
	//		
	//		Если СокрЛП(ТекСтрокаОстатки.Сервер) = СокрЛП(ИмяСервераМА) Тогда
	//	
	//			ФайлВыгрузки.ДобавитьСтроку(
	//			ТекСтрокаОстатки.ГУИД														+ Символ(9) +	// ShopRefID  
	//			ТекСтрокаОстатки.Наименование												+ Символ(9) +   // ShopName
	//			"1"																			+ Символ(9) +   // ShopTypeRefID
	//			""																			+ Символ(9) +   // LegalForm
	//			""																			+ Символ(9) +   // PasportSerias 
	//			""																			+ Символ(9) +   // PasportNo 
	//			""																			+ Символ(9) +   // PasportIssuePlace
	//			""																			+ Символ(9) + 	// LegalAddress
	//			""																			+ Символ(9) + 	// CertificateNo
	//			""																			+ Символ(9) + 	// CertificateIssueDate
	//			""																			+ Символ(9) + 	// CertificateIssuePlace
	//			""																			+ Символ(9) + 	// Address
	//			""																			+ Символ(9) +   // Phone
	//			""																			+ Символ(9) + 	// ContactPerson
	//			""																			+ Символ(9) +   // INN
	//			""																			+ Символ(9) +   // KPP
	//			""																			+ Символ(9) +   // OKPO
	//			""																			+ Символ(9) + 	// OKONH
	//			""																			+ Символ(9) +   // BIK
	//			""																			+ Символ(9) +   // BankName
	//			""																			+ Символ(9) +   // SettlementAccount
	//			""																			+ Символ(9) +   // CorrespondentAccount
	//			""																			+ Символ(9) + 	// DOB
	//			""																			+ Символ(9) + 	// DirectorName
	//			""																			+ Символ(9) + 	// ChiefAccountantName
	//			"0"																			+ Символ(9) + 	// PaymentDelay
	//			"0" 																		+ Символ(9) + 	// DiscountRate 
	//			"0"																			+ Символ(9) + 	// MinDiscountRate
	//			"0"																			+ Символ(9) + 	// MaxDiscountRate
	//			Формат(0,"ЧРД=.; ЧГ=")														+ Символ(9) + 	// CurDebtAmount
	//			"0"																			+ Символ(9) + 	// MaxDebtAmount
	//			Формат(0,"ЧРД=.; ЧГ=")														+ Символ(9) + 	// OverdueDebtAmount
	//			"0"																			+ Символ(9) + 	// DiscountAmount
	//			""																			+ Символ(9) + 	// Note
	//			"False"																		+ Символ(9) + 	// IsLegal
	//			"False"																		+ Символ(9) + 	// IsBlocked
	//			"False"																		+ Символ(9) + 	// IsDebtLimited 
	//			СокрЛП(ТекСтрокаОстатки.ВидЦены.УникальныйИдентификатор())					+ Символ(9) + 	// DefaultPriceTypeRefID	
	//			СокрЛП(ТекСтрокаОстатки.Организация.УникальныйИдентификатор())	            + Символ(9) + 	// DefaultSellerRefID
	//			""			  							                                    + Символ(9) +   // CustomFields
	//			"12533503"							 	                                    + Символ(9) +   // Color
	//			Формат(0,"ЧРД=.; ЧГ=")    					    							+ Символ(9) +	// MaxOverdueDebtAmount
	//			"");        																				// AgentNote
	//			
	//		КонецЕсли;	
	//	
	//	КонецЦикла;
	//	
	//КонецЕсли;	

		
	врЗамер_6 = ТекущаяДата() - ЗамерСтарт;
	
	Попытка
		ЛогФайл.ЗаписатьСтроку("ЗАМЕР: 1 = " + СокрЛП(врЗамер_1) + "; 2_1 = " + СокрЛП(врЗамер_2_1) + "; 2_2 = " + СокрЛП(врЗамер_2_2) + "; 3 = " + СокрЛП(врЗамер_3) + "; 4 = " + СокрЛП(врЗамер_4) + "; 5 = " + СокрЛП(врЗамер_5) + "; 6 = " + СокрЛП(врЗамер_6));					
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАМЕР", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(файлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	
	Если ФлагВыгрузкиShop2 Тогда
	
		Попытка
			
			Если ЭтоНовыйСерверМА Тогда
				ФайлВыгрузки.Записать(КаталогВыгрузки + "\Shop.txt", КодировкаТекста.ANSI);
			Иначе
				ФайлВыгрузки.Записать(КаталогВыгрузки + "\Shop2.txt", КодировкаТекста.ANSI);
			КонецЕсли;	
		                                                                                                   
			НЗ_СинхронизацияТТ.Записать(Истина);
			
			Если ЭтоНовыйСерверМА Тогда
				ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Обновление торговых точек произведено в " + КаталогВыгрузки + "Shop.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
			Иначе	
				ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Обновление торговых точек произведено в " + КаталогВыгрузки + "Shop2.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
			КонецЕсли;	
		
		Исключение
		
			ЗаписатьОшибку1СвЛогФайл("Обновление торговых точек (оперативная)", "Ошибка обновления торговых точек (оперативная)!", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;	
		
	Иначе	
		
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Нет измененных торговых точек для выгрузки в " + КаталогВыгрузки + "Shop2.txt("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
	КонецЕсли;	
	
КонецПроцедуры 


// Специальные группы товаров - ExtProductTree.txt

Процедура ЭкспортСпециальныхГруппТоваров()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем специальные группы товаров...");
	
	// ExtProductTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ExtProductTreeRefID" 	+ Символ(9) +
	"ExtProductTreeName" 	+ Символ(9) +
	"Color"                 + Символ(9) +
	"Visible");
	
	ФайлВыгрузки.ДобавитьСтроку(
	"EXT_PRODUCT_SPEC"			+ Символ(9) +    
	"_СПЕЦИАЛЬНЫЕ ЗАДАЧИ"		+ Символ(9) +    
	//"14882573" 					+ Символ(9) +
	""		 					+ Символ(9) +
	"True");                                                                    
	
	ФайлВыгрузки.ДобавитьСтроку(
	"EXT_PRODUCT_BONUS"			+ Символ(9) +    
	"_БОНУСНЫЕ ТОВАРЫ"			+ Символ(9) +    
	"12533503" 					+ Символ(9) +
	"True");  
	
	ФайлВыгрузки.ДобавитьСтроку(
	"EXT_PRODUCT_TOP50"			+ Символ(9) +    
	"_ТОП 50"					+ Символ(9) +    
	""		 					+ Символ(9) +
	"True");        
	
	ФайлВыгрузки.ДобавитьСтроку(
	"EXT_PRODUCT_HISTORY"		+ Символ(9) +    
	"_ИСТОРИЯ ЗАКАЗОВ"			+ Символ(9) +    
	"25600"						+ Символ(9) +
	"True");                                                                    	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ExtProductTree.txt", КодировкаТекста.ANSI); 
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка специальных групп товаров произведена в " + КаталогВыгрузки + "\ExtProductTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
КонецПроцедуры


// Специальные группы товаров - ExtProductTree.txt - !!! БОРТА АГЕНТОВ !!!

Процедура ЭкспортСпециальныхГруппТоваров_БОРТ()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем специальные группы товаров (БОРТА АГЕНТОВ)...");
	
	// ExtProductTree.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ExtProductTreeRefID" 	+ Символ(9) +
	"ExtProductTreeName" 	+ Символ(9) +
	"Color"                 + Символ(9) +
	"Visible");
	
	ФайлВыгрузки.ДобавитьСтроку(
	"EXT_PRODUCT_TREE_BOARD"				+ Символ(9) +    
	"Товары для продажи с бортов агентов"	+ Символ(9) +    
	"25600"									+ Символ(9) +
	"True");                                                                    
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ExtProductTree.txt", КодировкаТекста.ANSI); 
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка специальных групп товаров (БОРТА АГЕНТОВ) произведена в " + КаталогВыгрузки + "\ExtProductTree.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
КонецПроцедуры

	
// Привязка товаров к специальным группа - ExtProduct.txt

Процедура ЭкспортПривязкиТоваровКСпециальнымГруппамТоваров()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем привязки товаров к специальным группам товаров...");
	
	// ExtProduct.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ExtProductTreeRefID" 		+ Символ(9) +
	"AgentRefID" 				+ Символ(9) +
	"ShopRefID"                 + Символ(9) +
	"ProductTreeRefID"			+ Символ(9) +
	"ProductRefID");
	
	АкцияНЭФИС = Новый Массив;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	аян_Синхронизация_СпециальныеГруппыТоваров.Номенклатура
	//               |ИЗ
	//               |	РегистрСведений.аян_Синхронизация_СпециальныеГруппыТоваров КАК аян_Синхронизация_СпециальныеГруппыТоваров";
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	АкцияНЭФИС.Добавить(Выборка.Номенклатура);
	//КонецЦикла;	

	//Для Каждого ТекТоварНДС_10 Из АкцияНЭФИС Цикл	
	//	
	//	ФайлВыгрузки.ДобавитьСтроку(
	//	"EXT_PRODUCT_TREE_NDS_10"                                   + Символ(9) + 
	//	""                                                          + Символ(9) + 
	//	""															+ Символ(9) + 
	//	""	                                                        + Символ(9) + 
	//	СокрЛП(ТекТоварНДС_10.УникальныйИдентификатор()));								      
	//		
	//КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер", ПолучитьТекущийСервер(ИмяСервераМА));
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Синхронизация_ТОП50.Номенклатура,
	               |	аян_Синхронизация_ТОП50.Порядок КАК Порядок
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_ТОП50 КАК аян_Синхронизация_ТОП50
	               |ГДЕ
	               |	аян_Синхронизация_ТОП50.Сервер = &Сервер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		АкцияНЭФИС.Добавить(Выборка.Номенклатура);
	КонецЦикла;	

	//Для Каждого ТекТоварНДС_10 Из АкцияНЭФИС Цикл	
	//	
	//	ФайлВыгрузки.ДобавитьСтроку(
	//	"EXT_PRODUCT_TREE_TOP_50"                                   + Символ(9) + 
	//	""                                                          + Символ(9) + 
	//	""															+ Символ(9) + 
	//	""	                                                        + Символ(9) + 
	//	СокрЛП(ТекТоварНДС_10.УникальныйИдентификатор()) + "_T50");								      
	//		
	//КонецЦикла;	
	
	ЗапросБонус = Новый Запрос;
	ЗапросБонус.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Номенклатура.Ссылка
	                    |ИЗ
	                    |	Справочник.Номенклатура КАК Номенклатура
	                    |ГДЕ
	                    |	НЕ Номенклатура.ЭтоГруппа
	                    |	И НЕ Номенклатура.ПометкаУдаления
	                    |	И Номенклатура.Ссылка В ИЕРАРХИИ
	                    |			(ВЫБРАТЬ
	                    |				аян_Синхронизация_БонусныеТовары.Номенклатура
	                    |			ИЗ
	                    |				РегистрСведений.аян_Синхронизация_БонусныеТовары КАК аян_Синхронизация_БонусныеТовары)";
	ВыборкаБонус = ЗапросБонус.Выполнить().Выбрать();
	Пока ВыборкаБонус.Следующий() Цикл
		
		ФайлВыгрузки.ДобавитьСтроку(
		"EXT_PRODUCT_BONUS" 		                                + Символ(9) + 
		""                                                          + Символ(9) + 
		""															+ Символ(9) + 
		""	                                                        + Символ(9) + 
		СокрЛП(ВыборкаБонус.Ссылка.УникальныйИдентификатор()));								      
		
	КонецЦикла;	
		
	ЗапросСпец = Новый Запрос;
	ЗапросСпец.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                   |	аян_Синхронизация_СпециальныеЗадачи.Номенклатура,
	                   |	аян_Синхронизация_СпециальныеЗадачи.ДействуетДо
	                   |ИЗ
	                   |	РегистрСведений.аян_Синхронизация_СпециальныеЗадачи КАК аян_Синхронизация_СпециальныеЗадачи";
	ВыборкаСпец = ЗапросСпец.Выполнить().Выбрать();
	Пока ВыборкаСпец.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаСпец.ДействуетДо) Тогда
			
			Если ВыборкаСпец.ДействуетДо < ТекущаяДата() Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ФайлВыгрузки.ДобавитьСтроку(
		"EXT_PRODUCT_SPEC"	 		                                + Символ(9) + 
		""                                                          + Символ(9) + 
		""															+ Символ(9) + 
		""	                                                        + Символ(9) + 
		СокрЛП(ВыборкаСпец.Номенклатура.УникальныйИдентификатор()));								      
			
	КонецЦикла;		
	
	// ТОП 50
	
	//ЗапросБонус = Новый Запрос;
	//ЗапросБонус.УстановитьПараметр("Сервер", ПолучитьТекущийСервер(ИмяСервераМА));
	//ЗапросБонус.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                    |	аян_Синхронизация_ТОП50.Номенклатура,
	//                    |	аян_Синхронизация_ТОП50.Порядок
	//                    |ИЗ
	//                    |	РегистрСведений.аян_Синхронизация_ТОП50 КАК аян_Синхронизация_ТОП50
	//                    |ГДЕ
	//                    |	аян_Синхронизация_ТОП50.Сервер = &Сервер";
	//ВыборкаБонус = ЗапросБонус.Выполнить().Выбрать();
	//Пока ВыборкаБонус.Следующий() Цикл
	//	
	//	ФайлВыгрузки.ДобавитьСтроку(
	//	"EXT_PRODUCT_TOP50" 		                                + Символ(9) + 
	//	""                                                          + Символ(9) + 
	//	""															+ Символ(9) + 
	//	""	                                                        + Символ(9) + 
	//	СокрЛП(ВыборкаБонус.Ссылка.УникальныйИдентификатор()) + "_T50");								      
	//	
	//КонецЦикла;	
	
	// ИСТОРИЯ ЗАКАЗОВ
	
	//Если ИмяСервераМА = "Tomsk" Тогда
		
		ЗапросТочки = Новый Запрос;
		ЗапросТочки.УстановитьПараметр("Сервер", ИмяСервераМА);
		ЗапросТочки.Текст = "ВЫБРАТЬ
		                    |	аян_СинхронизацияТТ.ТорговаяТочка,
		                    |	аян_СинхронизацияТТ.Агент
		                    |ИЗ
		                    |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
		                    |ГДЕ
		                    |	аян_СинхронизацияТТ.Сервер = &Сервер";
		ВыборкаТочки = ЗапросТочки.Выполнить().Выбрать();
		Пока ВыборкаТочки.Следующий() Цикл
			
			врТоварыИстория = ИсторияЗаказовТочки(ВыборкаТочки.ТорговаяТочка, ВыборкаТочки.Агент);
			
			Для Каждого ТекТоварИстория Из врТоварыИстория Цикл
				
				ГУИДПартнера = КлиентыКонтрагенты_ГУИДПартнера(ВыборкаТочки.ТорговаяТочка, ВыборкаТочки.Агент, ИмяСервераМА);
			
				ФайлВыгрузки.ДобавитьСтроку(
				"EXT_PRODUCT_HISTORY" 		                                		+ Символ(9) + 
				СокрЛП(ВыборкаТочки.Агент.УникальныйИдентификатор())  				+ Символ(9) + 
				СокрЛП(ГУИДПартнера)												+ Символ(9) + 
				""	                                                        		+ Символ(9) + 
				СокрЛП(ТекТоварИстория.УникальныйИдентификатор()));								      
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	//КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ExtProduct.txt", КодировкаТекста.ANSI); 
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка привязки товаров к специальным группам товаров произведена в " + КаталогВыгрузки + "\ExtProduct.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
КонецПроцедуры


// Привязка товаров к специальным группа - ExtProduct.txt - !!! Борта агентов !!!

Процедура ЭкспортПривязкиТоваровКСпециальнымГруппамТоваров_БОРТ()
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем привязки товаров к специальным группам товаров (БОРТА АГЕНТОВ)...");
	
	// ExtProduct.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"ExtProductTreeRefID" 		+ Символ(9) +
	"AgentRefID" 				+ Символ(9) +
	"ShopRefID"                 + Символ(9) +
	"ProductTreeRefID"			+ Символ(9) +
	"ProductRefID");
	
	МассивПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(ИмяСервераМА);
	
	Для Каждого ТекПользовательСервера Из МассивПользователейСервера Цикл
	
		Для Каждого ТекТоварНДС_10 Из Товары_Борт Цикл	
		
			ФайлВыгрузки.ДобавитьСтроку(
			"EXT_PRODUCT_TREE_BOARD"                                    		+ Символ(9) + 
			""                                                          		+ Символ(9) + 
			"TT_" + СокрЛП(ТекПользовательСервера.УникальныйИдентификатор())	+ Символ(9) + 
			""	                                                        		+ Символ(9) + 
			СокрЛП(ТекТоварНДС_10.УникальныйИдентификатор()));								      
			
		КонецЦикла;	
			
	КонецЦикла;	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ExtProduct.txt", КодировкаТекста.ANSI); 
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка привязки товаров к специальным группам товаров (БОРТА АГЕНТОВ) произведена в " + КаталогВыгрузки + "\ExtProduct.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
		
КонецПроцедуры


// Запрет групп товаров в точке - ShopProductTreeBlocked.txt

Процедура ЭкспортЗапретаГруппТоваровВТочках_OLD()

	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем запрещенные группы товаров...");
	
	врМассивГруппРазрешенныхТоваров = Новый Массив;
	
	мОсновныеИсключения = Новый Массив;
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00001128   ")); // Старые
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000412   ")); // Удаленные
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0005711   ")); // Услуги
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00005433")); // МТЦ
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00018548")); // _Закупки по ГК
	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0003741   ")); // Пиво спец.
	
	//Если (ИмяСервераМА = "Sever") ИЛИ (ИмяСервераМА = "Tomsk") Тогда
	//	мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0008649   ")); // Межениновская птицефабрика
	//КонецЕсли;	
	
	Если ИмяСервераМА = "Sever" Тогда
		мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0007953   ")); // Дублирующее пиво фас
		мОсновныеИсключения.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00023166")); // Сигареты (СКИДКА)
	КонецЕсли;	
		
	ВидыНоменИскл = Новый Массив;
	ВидыНоменИскл.Добавить(ВидНоменклатуры_Джолики);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновИскл",        мОсновныеИсключения);
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменИскл);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Родитель
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И НЕ Номенклатура.ЭтоГруппа
	               |	И Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
	               |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ОсновИскл)
	               |	И НЕ Номенклатура.ВидНоменклатуры В (&ВидыНоменклатуры)
	               |	И Номенклатура.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.Родитель";
	
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		врМассивГруппРазрешенныхТоваров = РЗ.Выгрузить().ВыгрузитьКолонку("Родитель");
	КонецЕсли;	
		
	// ShopProductTreeBlocked.txt
	
	врМассивЗапрещенныхГруппТоваров = Новый Массив;
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку("AgentRefID" + Символ(9) + "ShopRefID" + Символ(9) + "ProductTreeRefID");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа
	               |	И НЕ Номенклатура.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врВыгрузка = Истина;
		
		Для Каждого ТекРазрешеннаяГруппа Из врМассивГруппРазрешенныхТоваров Цикл
			
			Если ТекРазрешеннаяГруппа = Выборка.Ссылка Тогда
				врВыгрузка = Ложь;
				Прервать;
			КонецЕсли;	
			
			Если ТекРазрешеннаяГруппа.ПринадлежитЭлементу(Выборка.Ссылка) Тогда
				врВыгрузка = Ложь;
				Прервать;
			КонецЕсли;
						
		КонецЦикла;	
		
		Если врВыгрузка Тогда
		//	Сообщить(Выборка.Ссылка.Код + " = " + Выборка.Ссылка + " = " + Выборка.Ссылка.Родитель + " = " + Выборка.Ссылка.Родитель.Родитель);
			врМассивЗапрещенныхГруппТоваров.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;	
	
	врДалюев = Справочники.Пользователи.НайтиПоНаименованию("Далюев Евгений Васильевич");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",        ИмяСервераМА);
	Запрос.УстановитьПараметр("ТорговаяТочка", Справочники.Партнеры.НайтиПоКоду("00-00009655"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_СинхронизацияТТ.Агент,
	               |	аян_СинхронизацияТТ.IDТочки
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Сервер = &Сервер
	               |	И аян_СинхронизацияТТ.ТорговаяТочка В ИЕРАРХИИ(&ТорговаяТочка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	аян_СинхронизацияТТ.Агент,
	               |	аян_СинхронизацияТТ.IDТочки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//Если Выборка.Агент = врДалюев Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		Попытка
			Если (Выборка.IDТочки = "41f01216-8868-11e5-af91-00155d000c04") ИЛИ 
				 (Выборка.IDТочки = "ba71fbc8-8868-11e5-af91-00155d000c04") Тогда
				 Продолжить;
			 КонецЕсли;
		 Исключение
			 ЗаписатьОшибку1СвЛогФайл("Экспорт запрета групп товаров в точке", "Дружба", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	 
		
		Для Каждого ТекГруппаЗапрета Из врМассивЗапрещенныхГруппТоваров Цикл
		
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП(Выборка.Агент.УникальныйИдентификатор())				+ Символ(9) +    
			СокрЛП(Выборка.IDТочки)										+ Символ(9) +    
			СокрЛП(ТекГруппаЗапрета.УникальныйИдентификатор()));   
			
		КонецЦикла;	
		
	КонецЦикла;		
	
	//Если ИмяСервераМА = "Novosib" Тогда
	//	
		врТЗ = СписокЗапрещенныхГруппТоваровАгента(врДалюев, Справочники.ВидыЦен.НайтиПоНаименованию("Новосибирск область")); 
	//	
	//	Для Каждого ТекСтрокаТЗ Из врТЗ Цикл
	//		
	//		ФайлВыгрузки.ДобавитьСтроку(
	//		СокрЛП(врДалюев.УникальныйИдентификатор())				+ Символ(9) +    
	//		СокрЛП(ТекСтрокаТЗ.Клиент.УникальныйИдентификатор())	+ Символ(9) +    
	//		СокрЛП(ТекСтрокаТЗ.Группа.УникальныйИдентификатор()));   
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopProductTreeBlocked.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка запрещенных групп товаров произведена в " + КаталогВыгрузки + "\ShopProductTreeBlocked.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");		
	
КонецПроцедуры	


Процедура ЭкспортЗапретаГруппТоваровВТочках()

	ЗамерСтарт = ТекущаяДата();	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем запрещенные группы товаров...");
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	
	ФайлВыгрузки.ДобавитьСтроку("AgentRefID" + Символ(9) + "ShopRefID" + Символ(9) + "ProductTreeRefID");
	
	ФлагЕстьДанные = Ложь;
	
	Если (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") Тогда
		
		ФлагЕстьДанные = Истина;
	
		врМассивПапокЗапрета = Новый Массив;
		врМассивПапокЗапрета.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00021714"));
		врМассивПапокЗапрета.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00025584"));
	
		врМассивБР = Новый Массив;
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Рубцовск",   Истина));
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Рубцовск 1", Истина));
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Рубцовск 2", Истина));
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Купино",     Истина));
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Карасук",    Истина));		
		врМассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Чулым",      Истина));
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесРегион", врМассивБР);
		Запрос.Текст = "ВЫБРАТЬ
		               |	аян_СинхронизацияТТ.ТорговаяТочка
		               |ПОМЕСТИТЬ ВТ_ТТ
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
		               |ГДЕ
		               |	аян_СинхронизацияТТ.ТорговаяТочка.БизнесРегион В(&БизнесРегион)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	аян_СинхронизацияТТ.ТорговаяТочка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТТ.ТорговаяТочка,
		               |	ВТ_ТТ.ТорговаяТочка.ОсновнойМенеджер КАК Менеджер
		               |ИЗ
		               |	ВТ_ТТ КАК ВТ_ТТ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Для Каждого ТекГруппаЗапрета Из врМассивПапокЗапрета Цикл
				
				ГУИДДПартнера = КлиентыКонтрагенты_ГУИДПартнера(Выборка.ТорговаяТочка, Выборка.Менеджер, ИмяСервераМА); 
		
				ФайлВыгрузки.ДобавитьСтроку(
				СокрЛП(Выборка.Менеджер.УникальныйИдентификатор())			+ Символ(9) +    
				СокрЛП(ГУИДДПартнера)										+ Символ(9) +    
				СокрЛП(ТекГруппаЗапрета.УникальныйИдентификатор()));                                                                    
				
			КонецЦикла;	
		
		КонецЦикла;	
		
	КонецЕсли;	
	
	// Почта России
	
	врВидЦеныПочтаРоссии = Справочники.ВидыЦен.НайтиПоНаименованию("Почта России");
	
	врГруппыЗапретаПочтаРоссии = СписокЗапрещенныхГруппТоваровДляВидаЦены(врВидЦеныПочтаРоссии);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦены",       врВидЦеныПочтаРоссии);
	Запрос.УстановитьПараметр("Сервер",        ИмяСервераМА);
	Запрос.УстановитьПараметр("ТорговаяТочка", Справочники.Партнеры.НайтиПоКоду("00-00001658"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_СинхронизацияТТ.Агент,
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.ВидЦены = &ВидЦены
	               |	И аян_СинхронизацияТТ.Сервер = &Сервер";
					 //|	И аян_СинхронизацияТТ.ТорговаяТочка В ИЕРАРХИИ(&ТорговаяТочка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ТекГруппаЗапрета Из врГруппыЗапретаПочтаРоссии Цикл
			
			ГУИДПартнера = КлиентыКонтрагенты_ГУИДПартнера(Выборка.ТорговаяТочка, Выборка.Агент, ИмяСервераМА); 
			
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП(Выборка.Агент.УникальныйИдентификатор())				+ Символ(9) +    
			СокрЛП(ГУИДПартнера)										+ Символ(9) +    
			СокрЛП(ТекГруппаЗапрета.УникальныйИдентификатор()));   
			
			ФлагЕстьДанные = Истина;
			
		КонецЦикла;	
		
	КонецЦикла;		
	
	Если НЕ ФлагЕстьДанные Тогда
		Возврат;
	КонецЕсли;	
		
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\ShopProductTreeBlocked.txt", КодировкаТекста.ANSI);
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка запрещенных групп товаров произведена в " + КаталогВыгрузки + "\ShopProductTreeBlocked.txt ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");		
	
КонецПроцедуры	


Процедура ДобавитьДеревоИерархииВМассив(врМассив, врРодитель)
	
	сч = 0;
	
	ТекЭлемент = врРодитель.Родитель;
	Пока ЗначениеЗаполнено(ТекЭлемент) Цикл
		
		Если врМассив.Найти(ТекЭлемент) = Неопределено Тогда
			врМассив.Добавить(ТекЭлемент);
		КонецЕсли;
		
		ТекЭлемент = ТекЭлемент.Родитель;	
				
	КонецЦикла;	
	
КонецПроцедуры	


Функция СписокЗапрещенныхГруппТоваровАгента(врАгент, врВидЦены)
	
	врМассивГруппСЦенами = Новый Массив;
	
	врМассивВидовЦен = Новый Массив;
	врМассивВидовЦен.Добавить(врВидЦены);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",  ТекущаяДата());
	Запрос.УстановитьПараметр("ВидыЦен", врМассивВидовЦен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Цена <> 0 Тогда
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				Если врМассивГруппСЦенами.Найти(Выборка.Родитель) = Неопределено Тогда
					врМассивГруппСЦенами.Добавить(Выборка.Родитель);
					ДобавитьДеревоИерархииВМассив(врМассивГруппСЦенами, Выборка.Родитель);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	врМассивЗапрещенныхГруппТоваров = Новый Массив;
		
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", аян_СинхронизацияСервер.Товары_НеИспользуемыеГруппыТоваров());
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.ЭтоГруппа
	               |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Ссылка ИЕРАРХИЯ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если врМассивГруппСЦенами.Найти(Выборка.Ссылка) = Неопределено Тогда
												
			врМассивЗапрещенныхГруппТоваров.Добавить(Выборка.Ссылка);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	врТЗ = Новый ТаблицаЗначений;
	врТЗ.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врТЗ.Колонки.Добавить("Группа", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", врАгент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_СинхронизацияТТ.ТорговаяТочка
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Агент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ТекГруппа Из врМассивЗапрещенныхГруппТоваров Цикл
			
			НовСтрока = врТЗ.Добавить();
			НовСтрока.Клиент = Выборка.ТорговаяТочка;
			НовСтрока.Группа = ТекГруппа;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат врТЗ;
		
КонецФункции	


Функция СписокЗапрещенныхГруппТоваровДляВидаЦены(врВидЦены)
	
	врМассивГруппСЦенами = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",  ТекущаяДата());
	Запрос.УстановитьПараметр("ВидыЦен", врВидЦены);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Цена <> 0 Тогда
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				Если врМассивГруппСЦенами.Найти(Выборка.Родитель) = Неопределено Тогда
					врМассивГруппСЦенами.Добавить(Выборка.Родитель);
					ДобавитьДеревоИерархииВМассив(врМассивГруппСЦенами, Выборка.Родитель);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	врМассивЗапрещенныхГруппТоваров = Новый Массив;
		
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", аян_СинхронизацияСервер.Товары_НеИспользуемыеГруппыТоваров());
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.ЭтоГруппа
	               |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура.Ссылка ИЕРАРХИЯ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если врМассивГруппСЦенами.Найти(Выборка.Ссылка) = Неопределено Тогда
												
			врМассивЗапрещенныхГруппТоваров.Добавить(Выборка.Ссылка);
			
		КонецЕсли;	
		
	КонецЦикла;
			
	Возврат врМассивЗапрещенныхГруппТоваров;
		
КонецФункции	


Функция ТекстСкидкиНаценки(врСоглашение)
	
	врОбщаяСкидка  = "";
	врСкидкаГруппы = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", врСоглашение);
	Запрос.УстановитьПараметр("Статус",   Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.УстановитьПараметр("Период",   ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&Период, Источник = &Источник) КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = &Статус";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		врСкидка = Выборка.СкидкаНаценка;
		
		врЭтоСкидкаПоГруппе = Ложь;
		
		Для Каждого ТекУсловие Из  врСкидка.УсловияПредоставления Цикл
			Если ЗначениеЗаполнено(ТекУсловие.УсловиеПредоставления.СегментНоменклатурыОграничения) Тогда
				врЭтоСкидкаПоГруппе = Истина;
				врСкидкаГруппы = ?(ПустаяСтрока(врСкидкаГруппы), СокрЛП(Выборка.СкидкаНаценка.Наименование), врСкидкаГруппы + ";" + СокрЛП(Выборка.СкидкаНаценка.Наименование));
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не врЭтоСкидкаПоГруппе Тогда
			Если Выборка.СкидкаНаценка.ЗначениеСкидкиНаценки > 0 Тогда
				врОбщаяСкидка  = "-" + СокрЛП(Выборка.СкидкаНаценка.ЗначениеСкидкиНаценки) + "%";
			Иначе
				врОбщаяСкидка  = "+" + СокрЛП(-Выборка.СкидкаНаценка.ЗначениеСкидкиНаценки) + "%";
			КонецЕсли;	
		КонецЕсли;	
			
	КонецЦикла;	
	
	Если ПустаяСтрока(врОбщаяСкидка) Тогда
		Возврат врСкидкаГруппы;
	КонецЕсли;	
	
	Если ПустаяСтрока(врСкидкаГруппы) Тогда
		Возврат врОбщаяСкидка;
	КонецЕсли;
	
	Возврат врОбщаяСкидка + "; " + врСкидкаГруппы;
	
КонецФункции	


Функция СписокТорговыхТочекАгента(врАгент)
	
	врСписокТочекАгента = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", 	           ПВХ_ОсновнойКлиентПоКегам);
	Запрос.УстановитьПараметр("ТорговыйПредставитель", врАгент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец КАК Клиент
	               |ПОМЕСТИТЬ ВТ_ОсновныеТочки
	               |ИЗ
	               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |ГДЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель = &ТорговыйПредставитель
	               |	И НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Клиент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПартнерыДополнительныеРеквизиты.Ссылка КАК Клиент
	               |	ИЗ
	               |		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	               |	ГДЕ
	               |		ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
	               |		И ПартнерыДополнительныеРеквизиты.Значение В
	               |				(ВЫБРАТЬ
	               |					ВТ_ОсновныеТочки.Клиент
	               |				ИЗ
	               |					ВТ_ОсновныеТочки КАК ВТ_ОсновныеТочки)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ОсновныеТочки.Клиент
	               |	ИЗ
	               |		ВТ_ОсновныеТочки КАК ВТ_ОсновныеТочки) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Клиент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врСписокТочекАгента.Добавить(Выборка.Клиент);
	КонецЦикла;	
	
	Возврат врСписокТочекАгента;
	
КонецФункции	


Функция СписокТорговыхТочекАгента_OLD(врАгент)
	
	врСписокТочекАгента = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйПредставитель", врАгент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец КАК Клиент
	               |ИЗ
	               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	               |ГДЕ
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель = &ТорговыйПредставитель
	               |	И НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врСписокТочекАгента.Добавить(Выборка.Клиент);
		врПетров = Петров_ПолучитьОсновногоКлиентаПоКегам(Выборка.Клиент);
		Если ЗначениеЗаполнено(врПетров) Тогда
			Если врСписокТочекАгента.Найти(врПетров) = Неопределено Тогда
				врСписокТочекАгента.Добавить(врПетров);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат врСписокТочекАгента;
	
КонецФункции	


Функция СуммаРеализацийПоПетрушке(врКлиент)
	
	врСумма = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",    врКлиент);
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ТекущаяДата()));
	Запрос.Текст ="ВЫБРАТЬ
	              |	РеализацияТоваровУслуг.СуммаДокумента
	              |ИЗ
	              |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              |ГДЕ
	              |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	              |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	              |	И РеализацияТоваровУслуг.Партнер = &Партнер
	              |	И РеализацияТоваровУслуг.ЗаказПетрушка = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врСумма = врСумма + Выборка.СуммаДокумента;
	КонецЦикла;	
	
	Возврат врСумма; 
	
КонецФункции	


#КонецОбласти                                


#Область ЛИМИТ_ЗАКАЗОВ


Процедура ЛимитЗаказов_ОбработатьТЗ(врТЗ, врЛимит)
	
	Попытка
		
		ЗапросПетрушка = Новый Запрос;
		ЗапросПетрушка.УстановитьПараметр("НачПериода",   НачалоДня(ТекущаяДата()) - ДеньВСекундах);
		ЗапросПетрушка.УстановитьПараметр("КонПериода",   КонецДня(ТекущаяДата()));
		ЗапросПетрушка.УстановитьПараметр("СтатусЗаказа", Перечисления.СтатусыЗаказовПриложения.Отменен);
		ЗапросПетрушка.Текст = "ВЫБРАТЬ
		                       |	ЗаказыПриложения.Сумма
		                       |ИЗ
		                       |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
		                       |ГДЕ
		                       |	ЗаказыПриложения.Клиент = &Клиент
		                       |	И НЕ ЗаказыПриложения.ПометкаУдаления
		                       |	И ЗаказыПриложения.Дата МЕЖДУ &НачПериода И &КонПериода
		                       |	И ЗаказыПриложения.СтатусЗаказа <> &СтатусЗаказа";
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода",  НачалоДня(ТекущаяДата()) - ДеньВСекундах);
		Запрос.УстановитьПараметр("КонПериода",  КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Организация", ОргБонусТомск);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКлиента.СуммаДокумента
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
		               |	И ЗаказКлиента.Проведен
		               |	И ЗаказКлиента.Партнер = &Партнер
		               |	И ЗаказКлиента.Организация <> &Организация";
		
		врТЗ.Свернуть("ГУИД", "Сумма");
		
		Для Каждого ТекСтрока Из врТЗ Цикл
			
			врСуммаЗаказов         = 0;
			врСуммаЗаказовПетрушка = 0;
				
			врПартнер = ПолучитьПартнераПоГУИД(СокрЛП(ТекСтрока.ГУИД));
				
			Запрос.УстановитьПараметр("Партнер", врПартнер);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				врСуммаЗаказов = врСуммаЗаказов + Выборка.СуммаДокумента;
			КонецЦикла;
			
			ЗапросПетрушка.УстановитьПараметр("Клиент", врПартнер);
			ВыборкаПетрушка = ЗапросПетрушка.Выполнить().Выбрать();
			Пока ВыборкаПетрушка.Следующий() Цикл
				врСуммаЗаказовПетрушка = врСуммаЗаказовПетрушка + ВыборкаПетрушка.Сумма;
			КонецЦикла;	
				
			Если (ТекСтрока.Сумма + врСуммаЗаказовПетрушка) < врЛимит Тогда
				
				Если врСуммаЗаказов = 0 Тогда
					ЗаписатьИнформацию1СвЛогФайл("Лимит заявки", СокрЛП(врПартнер) + " = " + Строка(ТекСтрока.Сумма) + "; Сумма заявок = " + Строка(врСуммаЗаказов) + "; Петрушка = " + Строка(врСуммаЗаказовПетрушка));
				КонецЕсли;	
					
			КонецЕсли;	
			
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Лимит заявок", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	


#КонецОбласти


#Область ОТЛОЖЕННЫЕ_ЗАЯВКИ


Процедура ОтложенныеЗаявки_ЗарегистрироватьЗаявку(врЗаявка, врЗаНаличные)
	
	Попытка
		
		МЗОтветыНаЗаказы = РегистрыСведений.аян_ОтложенныеЗаявки.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.ДатаРегистрации    = ТекущаяДата();
		МЗОтветыНаЗаказы.Агент              = ТекАгент;
		МЗОтветыНаЗаказы.Заявка             = врЗаявка;
		МЗОтветыНаЗаказы.ЗаНаличные         = врЗаНаличные;
		МЗОтветыНаЗаказы.Записать(Истина);
	
	Исключение

		ЗаписатьОшибку1СвЛогФайл("Отложенные заявки", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	
	
	
#КонецОбласти


#Область ОТЛОЖЕННОЕ_ПРОВЕДЕНИЕ


Процедура ОтложенноеПроведение_ЗарегистрироватьПКО(врПКО)
	
	Попытка
		
		МЗОтветыНаЗаказы = РегистрыСведений.аян_Синхронизация_ПКО_Фоновые.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.Документ = врПКО;
		
		МЗОтветыНаЗаказы.Записать(Истина);
	
	Исключение

		ЗаписатьОшибку1СвЛогФайл("Отложенное проведение ПКО", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры


Процедура ОтложенноеПроведение_ЗарегистрироватьЗаказ(врЗаказ, врРеализация, врДатаРеализации, врОтложенноеПроведение, врСозданиеПКО, врПетрушка = Ложь)
	
	Попытка
		
		МЗОтветыНаЗаказы = РегистрыСведений.аян_Синнхронизация_ФоновыйПоток.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.Заказ                = врЗаказ;
		МЗОтветыНаЗаказы.Реализация           = врРеализация;
		МЗОтветыНаЗаказы.Перемещение          = Документы.ПеремещениеТоваров.ПустаяСсылка();
		МЗОтветыНаЗаказы.Агент                = ТекАгент;
		МЗОтветыНаЗаказы.ДатаРеализации       = врДатаРеализации;
		МЗОтветыНаЗаказы.ОтложенноеПроведение = врОтложенноеПроведение;
		МЗОтветыНаЗаказы.СозданиеПКО          = врСозданиеПКО;
		МЗОтветыНаЗаказы.ИмяСервера           = ИмяСервераМА;
		МЗОтветыНаЗаказы.Петрушка             = врПетрушка;
		
		МЗОтветыНаЗаказы.Записать(Истина);
	
	Исключение

		ЗаписатьОшибку1СвЛогФайл("Отложенное проведение", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры


Процедура ОтложенноеПроведение_ЗарегистрироватьДокумент(врРеализация)
	
	Попытка
		
		МЗОтветыНаЗаказы = РегистрыСведений.аян_Акции_Документы.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.ДокументРеализации = врРеализация;
		МЗОтветыНаЗаказы.Записать(Истина);
	
	Исключение

		ЗаписатьОшибку1СвЛогФайл("Отложенное проведение", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	
	
	
#КонецОбласти


#Область ОБЪЕДИНЕНИЕ_ЗАЯВОК


Процедура ОбъединениеЗаявок_ВыровнятьОстатки(врОрг, врСклад)
	
	ТЗ_Тара = Новый ТаблицаЗначений;
	ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));	
	
	СписокВидовНоменклатуры = Новый Массив;
	СписокВидовНоменклатуры.Добавить(ВидНоменклатуры_Бисквит);
	СписокВидовНоменклатуры.Добавить(ВидНоменклатуры_Молочка);
	СписокВидовНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар"));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",                   врСклад);
	Запрос.УстановитьПараметр("СписокВидовНоменклатуры", СписокВидовНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			,
	               |			Склад = &Склад
	               |				И Номенклатура.ВидНоменклатуры В (&СписокВидовНоменклатуры)) КАК СвободныеОстаткиОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
				
		НужноПроводитьДокумент = Ложь;
	
		Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		Док.Дата                  = ТекущаяДата();
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Док.Организация           = врОрг;
		Док.СкладОтправитель      = врСклад;
		Док.СкладПолучатель       = СкладТомскПиво;
		Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
		Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
		Док.Комментарий           = "Суточная корреляция";
				
		ВыборкаТовары = РЗ.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
				
			ТекОстаток = ?(ВыборкаТовары.Резерв <= 0, ВыборкаТовары.Остаток, ВыборкаТовары.Остаток - ВыборкаТовары.Резерв);
				
			Если ТекОстаток > 0 Тогда
					
				НужноПроводитьДокумент = Истина;
						
				НовТовар = Док.Товары.Добавить();
				НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
				НовТовар.Количество		    = ТекОстаток;
				НовТовар.КоличествоУпаковок = ТекОстаток;
			
				Если ВыборкаТовары.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
					Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
						
						НовСтрокаТара = ТЗ_Тара.Добавить();
						НовСтрокаТара.Тара       = ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара;
						НовСтрокаТара.Количество = ТекОстаток;
						
					КонецЕсли;	
				КонецЕсли;	
			
			КонецЕсли;	
			
		КонецЦикла;
	
		Если Не НужноПроводитьДокумент Тогда
			Возврат;
		КонецЕсли;	
		
		ТЗ_Тара.Свернуть("Тара", "Количество");
	
		Для Каждого ТекТара Из ТЗ_Тара Цикл
		
			НовТовар = Док.Товары.Добавить();
			НовТовар.Номенклатура       = ТекТара.Тара;
			НовТовар.Количество		    = ТекТара.Количество;
			НовТовар.КоличествоУпаковок = ТекТара.Количество;
			
		КонецЦикла;	
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
		
		Для Каждого ТекСтрокаТовар Из Док.Товары Цикл
			
			Если ТекСтрокаТовар.СтатусУказанияСерий = 0 Тогда
				ТекСтрокаТовар.СтатусУказанияСерийОтправитель = 0;
				ТекСтрокаТовар.СтатусУказанияСерийПолучатель  = 0;
			Иначе 
				ТекСтрокаТовар.СтатусУказанияСерийОтправитель = 6;
				ТекСтрокаТовар.СтатусУказанияСерийПолучатель  = 8;
			КонецЕсли;
			
		КонецЦикла;		
	
		Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Док.Товары) Тогда
			НоменклатураСервер.ЗаполнитьСерииПоFEFO(Док, ПараметрыУказанияСерий);	
		КонецЕсли;			
		
		ДокПроведен = Ложь;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ДокПроведен = Истина;
		Исключение
		КонецПопытки;	
		
		//Если ДокПроведен Тогда
		//
		//	Попытка
		//
		//		врОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		//		врОрдер.Дата = ТекущаяДата();			
		//		врОрдер.Заполнить(Док.Ссылка);
		//		врОрдер.Товары.Очистить();			
		//		ОбъединениеЗаявок_ЗаполнитьТоварыПриходногоОрдераНаОснованииПеремещенияТоваров(врОрдер, Док.Ссылка); 			
		//		врОрдер.НомерВходящегоДокумента = Док.Номер;
		//		врОрдер.ДатаВходящегоДокумента  = Док.Дата;
		//		врОрдер.Статус                  = Перечисления.СтатусыПриходныхОрдеров.Принят;
		//		врОрдер.Записать(РежимЗаписиДокумента.Проведение);	
		//		врОрдерСоздан = Истина;
		//		ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПРИХОДНЫЙ ОРДЕР НА ТОВАРЫ записан и проведен " + Строка(врОрдер.Ссылка));
		//			
		//	Исключение
		//		
		//		ЗаписатьОшибку1СвЛогФайл("Суточная корреляция", "Склад = " + СокрЛП(врСклад), ИнформацияОбОшибке(), Истина);
		//	
		//	КонецПопытки;	
		//	
		//КонецЕсли;	
			
	КонецЕсли;	
		
КонецПроцедуры


Процедура ОбъединениеЗаявок_ВыровнятьОстатки_ОМСК(врСклад)
	
	ТЗ_Тара = Новый ТаблицаЗначений;
	ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));	
	
	СписокВидовНоменклатуры = Новый Массив;
	СписокВидовНоменклатуры.Добавить(ВидНоменклатуры_Бисквит);
	СписокВидовНоменклатуры.Добавить(ВидНоменклатуры_Молочка);
	СписокВидовНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар"));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",                   врСклад);
	Запрос.УстановитьПараметр("СписокВидовНоменклатуры", СписокВидовНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			,
	               |			Склад = &Склад
	               |				И Номенклатура.ВидНоменклатуры В (&СписокВидовНоменклатуры)) КАК СвободныеОстаткиОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
				
		НужноПроводитьДокумент = Ложь;
	
		Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		Док.Дата                  = ТекущаяДата();
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Док.Организация           = оргАтлантОмск;
		Док.СкладОтправитель      = врСклад;
		Док.СкладПолучатель       = СкладОмскЦентральный;
		Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
		Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
		Док.Комментарий           = "Суточная корреляция";
				
		ВыборкаТовары = РЗ.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
				
			ТекОстаток = ?(ВыборкаТовары.Резерв <= 0, ВыборкаТовары.Остаток, ВыборкаТовары.Остаток - ВыборкаТовары.Резерв);
				
			Если ТекОстаток > 0 Тогда
					
				НужноПроводитьДокумент = Истина;
						
				НовТовар = Док.Товары.Добавить();
				НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
				НовТовар.Количество		    = ТекОстаток;
				НовТовар.КоличествоУпаковок = ТекОстаток;
			
				Если ВыборкаТовары.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
					Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
						
						НовСтрокаТара = ТЗ_Тара.Добавить();
						НовСтрокаТара.Тара       = ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара;
						НовСтрокаТара.Количество = ТекОстаток;
						
					КонецЕсли;	
				КонецЕсли;	
			
			КонецЕсли;	
			
		КонецЦикла;
	
		Если Не НужноПроводитьДокумент Тогда
			Возврат;
		КонецЕсли;	
		
		ТЗ_Тара.Свернуть("Тара", "Количество");
	
		Для Каждого ТекТара Из ТЗ_Тара Цикл
		
			НовТовар = Док.Товары.Добавить();
			НовТовар.Номенклатура       = ТекТара.Тара;
			НовТовар.Количество		    = ТекТара.Количество;
			НовТовар.КоличествоУпаковок = ТекТара.Количество;
			
		КонецЦикла;	
	
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;	
		
	КонецЕсли;	
		
КонецПроцедуры


Процедура ОбъединениеЗаявок_УдалитьБелыйАлкогольИзЗаявки(врТЗ, врКлиент, врКомментарий)
	
		Сч = врТЗ.Количество() - 1;
		
		Пока Сч >= 0 Цикл
			
			ТекСтрока = врТЗ[Сч];
			
			Если ТекСтрока.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь Тогда
				
				МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
				МЗОтказы.Агент         = ТекАгент;
				МЗОтказы.ДатаОтказа    = ТекущаяДата();
				МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
				МЗОтказы.Клиент        = врКлиент;
				МЗОтказы.Номенклатура  = ТекСтрока.Номенклатура;
				МЗОтказы.Количество    = ТекСтрока.Количество;
				МЗОтказы.Комментарий   = врКомментарий;
				МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НеЕГАИС;							
				МЗОтказы.Записать();			
					
				врТЗ.Удалить(ТекСтрока);
								
			КонецЕсли;	
			
			Сч = Сч - 1;
				
		КонецЦикла;	
	
КонецПроцедуры	


Функция ОбъединениеЗаявок_НужноСоздатьПеремещениеТоваров(врТЧ, врЭтоБонус, врВыделятьСигареты, врНеПеремещатьТоварыБезНДС)
	
	Если врЭтоБонус Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	врТовары = врТЧ.Скопировать();
	
	Сч = врТовары.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		ТекСтрокаТЗ = врТовары[Сч];
		
		Если (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_Джолики) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара) ИЛИ
	 		 (ТоварыВесовые.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено) ИЛИ 
			 (ТоварыВесовыеБезНДС.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено) ИЛИ
			 (врНеПеремещатьТоварыБезНДС И (ТоварыБезНДС.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено)) ИЛИ
			 (врВыделятьСигареты И (ТоварыСигареты.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено)) Тогда
			 
			 врТовары.Удалить(ТекСтрокаТЗ);
			 
		КонецЕсли;	 
		 		
		Сч = Сч - 1;
		
	КонецЦикла;	

	ЕстьТоварыСкладаАлкоголь = Ложь;
	ЕстьТоварыСкладаОбщий    = Ложь;
	
	Для Каждого ТекСтрокаТЗ Из врТовары Цикл
				
		Если (ТекСтрокаТЗ.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь) Тогда
			 
			 ЕстьТоварыСкладаАлкоголь = Истина;
			 			 
		Иначе	 
			 
			 ЕстьТоварыСкладаОбщий = Истина;
			 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если ЕстьТоварыСкладаАлкоголь И ЕстьТоварыСкладаОбщий Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


Функция ОбъединениеЗаявок_НужноСоздатьПеремещениеТоваров_ОМСК(врТЧ, врЭтоБонус)
	
	Если врЭтоБонус Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	врТовары = врТЧ.Скопировать();
	
	Сч = врТовары.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		ТекСтрокаТЗ = врТовары[Сч];
		
		Если (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_Джолики) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара) Тогда
			 
			 врТовары.Удалить(ТекСтрокаТЗ);
			 
		КонецЕсли;	 
		 		
		Сч = Сч - 1;
		
	КонецЦикла;	

	ЕстьТоварыСкладаАлкоголь = Ложь;
	ЕстьТоварыСкладаОбщий    = Ложь;
	
	Для Каждого ТекСтрокаТЗ Из врТовары Цикл
				
		Если (ТекСтрокаТЗ.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь) Тогда
			 
			 ЕстьТоварыСкладаАлкоголь = Истина;
			 			 
		Иначе	 
			 
			 ЕстьТоварыСкладаОбщий = Истина;
			 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если ЕстьТоварыСкладаАлкоголь И ЕстьТоварыСкладаОбщий Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


Процедура ОбъединениеЗаявок_ЗаполнитьТоварыПриходногоОрдераНаОснованииПеремещенияТоваров(врДок, врДокОснование)
		
	Для Каждого ТекСтрока Из врДокОснование.Товары Цикл
		
		НовСтрока = врДок.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.Количество         = ТекСтрока.Количество;
		НовСтрока.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок;
		НовСтрока.Номенклатура       = ТекСтрока.Номенклатура;
		Если ЗначениеЗаполнено(ТекСтрока.Серия) Тогда
			НовСтрокаСерии                    = врДок.Серии.Добавить();
			НовСтрокаСерии.Количество         = ТекСтрока.Количество;
			НовСтрокаСерии.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок;
			НовСтрокаСерии.Номенклатура       = ТекСтрока.Номенклатура;
			НовСтрокаСерии.Серия              = ТекСтрока.Серия;
		КонецЕсли	
	
	КонецЦикла;	
		
КонецПроцедуры	


Функция ОбъединениеЗаявок_СоздатьПеремещениеТоваров(врОрганизация, врСкладОтправитель, врСкладПолучатель, врТЧ, врКомментарий, врВыделятьСигареты, врНеПеремещатьТоварыБезНДС)
	
	Событие1С = "Объединение заявок";
	
	врТовары = врТЧ.Скопировать();
	
	Сч = врТовары.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		ТекСтрокаТЗ = врТовары[Сч];
		
		Если (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_Джолики) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь) ИЛИ
	 		 (ТоварыВесовые.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено) ИЛИ 
			 (ТоварыВесовыеБезНДС.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено) ИЛИ 
			 (врНеПеремещатьТоварыБезНДС И (ТоварыБезНДС.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено)) ИЛИ
			 (врВыделятьСигареты И (ТоварыСигареты.Найти(ТекСтрокаТЗ.Номенклатура) <> Неопределено)) Тогда			 
			 
			 врТовары.Удалить(ТекСтрокаТЗ);
			 
		КонецЕсли;	 
		 
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	Если врТовары.Количество() = 0 Тогда
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецЕсли;	
	
	ТЗ_Тара = Новый ТаблицаЗначений;
	ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));
	
	ТЗ_Поступ = Новый ТаблицаЗначений;
	ТЗ_Поступ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Поступ.Колонки.Добавить("Количество",   ОписаниеТипаЧисло(15, 2));	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           ТекущаяДата());
	Запрос.УстановитьПараметр("ТЧ",               врТовары);
	Запрос.УстановитьПараметр("СкладОтправитель", врСкладОтправитель);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество
	               |ПОМЕСТИТЬ ВрТовары
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв,
	               |	ВрТовары.Количество
	               |ИЗ
	               |	ВрТовары КАК ВрТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				&Период,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВрТовары.Номенклатура
	               |						ИЗ
	               |							ВрТовары КАК ВрТовары)
	               |					И Склад = &СкладОтправитель) КАК СвободныеОстаткиОстатки
	               |		ПО ВрТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура";
	
	НужноПроводитьДокумент = Ложь;
	
	Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
	Док.Дата                  = ТекущаяДата();
//	Док.Дата                  = '20190131235959';
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Док.Организация           = врОрганизация;
	Док.СкладОтправитель      = врСкладОтправитель;
	Док.СкладПолучатель       = врСкладПолучатель;
	Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
	Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
	Док.Комментарий           = врКомментарий;
				
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		врОстаток = ВыборкаТовары.Остаток - ?(ВыборкаТовары.Резерв < 0, 0, ВыборкаТовары.Резерв);
			
		Если врОстаток > 0 Тогда
			
			НужноПроводитьДокумент = Истина;
			
			КоличествоКЗаказу = ВыборкаТовары.Количество;
			
			Если ВыборкаТовары.Количество > врОстаток Тогда
				КоличествоКЗаказу = врОстаток;
			КонецЕсли;				
			
			НовТовар = Док.Товары.Добавить();
			НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
			НовТовар.Количество		    = КоличествоКЗаказу;
			НовТовар.КоличествоУпаковок = КоличествоКЗаказу;
			
			НовТоварПоступ = ТЗ_Поступ.Добавить();
			НовТоварПоступ.Номенклатура = ВыборкаТовары.Номенклатура;
			НовТоварПоступ.Количество	= КоличествоКЗаказу;
			
			Если ВыборкаТовары.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
				Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
					
					НовСтрокаТара = ТЗ_Тара.Добавить();
					НовСтрокаТара.Тара       = ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара;
					НовСтрокаТара.Количество = КоличествоКЗаказу;
					
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Если Не НужноПроводитьДокумент Тогда
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецЕсли;	
		
	ТЗ_Тара.Свернуть("Тара", "Количество");
	
	Для Каждого ТекТара Из ТЗ_Тара Цикл
		
		НовТовар = Док.Товары.Добавить();
		НовТовар.Номенклатура       = ТекТара.Тара;
		НовТовар.Количество		    = ТекТара.Количество;
		НовТовар.КоличествоУпаковок = ТекТара.Количество;
		
	КонецЦикла;	
	
	//Попытка
	//	СоздатьПоступлениеКЕГ(ТЗ_Поступ, врСкладОтправитель, Ложь);
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Создание поступления КЕГ", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	
	Для Каждого ТекСтрокаТовар Из Док.Товары Цикл
		
		Если ТекСтрокаТовар.СтатусУказанияСерий = 0 Тогда
			ТекСтрокаТовар.СтатусУказанияСерийОтправитель = 0;
			ТекСтрокаТовар.СтатусУказанияСерийПолучатель  = 0;
		Иначе 
			ТекСтрокаТовар.СтатусУказанияСерийОтправитель = 6;
			ТекСтрокаТовар.СтатусУказанияСерийПолучатель  = 8;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Док.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Док, ПараметрыУказанияСерий);	
	КонецЕсли;	
		
	ДокСоздан = Ложь;
		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ записан и проведен " + Строка(Док.Ссылка));
		ДокСоздан = Истина;		
	Исключение
		Док.Комментарий = "НЕ ПРОВЕДЕННЫЙ !!!";
		Док.Записать(РежимЗаписиДокумента.Запись);
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проведение документа. Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Если ДокСоздан Тогда
		
		//врОрдерСоздан = Ложь;
		//
		//Попытка
		//	врОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		//	врОрдер.Дата = ТекущаяДата();			
		//	врОрдер.Заполнить(Док.Ссылка);
		//	врОрдер.Товары.Очистить();			
		//	ОбъединениеЗаявок_ЗаполнитьТоварыПриходногоОрдераНаОснованииПеремещенияТоваров(врОрдер, Док.Ссылка); 			
		//	врОрдер.НомерВходящегоДокумента = Док.Номер;
		//	врОрдер.ДатаВходящегоДокумента  = Док.Дата;
		//	врОрдер.Статус                  = Перечисления.СтатусыПриходныхОрдеров.Принят;			
		//	врОрдер.Записать(РежимЗаписиДокумента.Проведение);	
		//	врОрдерСоздан = Истина;
		//	ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПРИХОДНЫЙ ОРДЕР НА ТОВАРЫ записан и проведен " + Строка(врОрдер.Ссылка));
		//Исключение		
		//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Создание ПРИХОДНОГО ОРДЕРА на товары. ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина);
		//КонецПопытки;	
		//
		//Если Не врОрдерСоздан Тогда
		//	Док.УстановитьПометкуУдаления(Истина);
		//	Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
		//КонецЕсли;	
		
		Возврат Док.Ссылка;
		
	КонецЕсли;	
		
	Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
		
КонецФункции


Функция ОбъединениеЗаявок_СоздатьПеремещениеТоваров_ОМСК(врОрганизация, врСкладОтправитель, врСкладПолучатель, врТЧ, врКомментарий)
	
	Событие1С = "Объединение заявок";
	
	врТовары = врТЧ.Скопировать();
	
	Сч = врТовары.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		
		ТекСтрокаТЗ = врТовары[Сч];
		
		Если (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_Джолики) ИЛИ 
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара) ИЛИ
			 (ТекСтрокаТЗ.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь) Тогда
			 
			 врТовары.Удалить(ТекСтрокаТЗ);
			 
		КонецЕсли;	 
		 
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	Если врТовары.Количество() = 0 Тогда
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецЕсли;	
	
	ТЗ_Тара = Новый ТаблицаЗначений;
	ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));
	
	ТЗ_Поступ = Новый ТаблицаЗначений;
	ТЗ_Поступ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Поступ.Колонки.Добавить("Количество",   ОписаниеТипаЧисло(15, 2));	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           ТекущаяДата());
	Запрос.УстановитьПараметр("ТЧ",               врТовары);
	Запрос.УстановитьПараметр("СкладОтправитель", врСкладОтправитель);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество
	               |ПОМЕСТИТЬ ВрТовары
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв,
	               |	ВрТовары.Количество
	               |ИЗ
	               |	ВрТовары КАК ВрТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				&Период,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВрТовары.Номенклатура
	               |						ИЗ
	               |							ВрТовары КАК ВрТовары)
	               |					И Склад = &СкладОтправитель) КАК СвободныеОстаткиОстатки
	               |		ПО ВрТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура";
	
	НужноПроводитьДокумент = Ложь;
	
	Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
	Док.Дата                  = ТекущаяДата();
//	Док.Дата                  = '20190131235959';
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Док.Организация           = врОрганизация;
	Док.СкладОтправитель      = врСкладОтправитель;
	Док.СкладПолучатель       = врСкладПолучатель;
	Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
	Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
	Док.Комментарий           = врКомментарий;
				
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		врОстаток = ВыборкаТовары.Остаток - ?(ВыборкаТовары.Резерв < 0, 0, ВыборкаТовары.Резерв);
			
		Если врОстаток > 0 Тогда
			
			НужноПроводитьДокумент = Истина;
			
			КоличествоКЗаказу = ВыборкаТовары.Количество;
			
			Если ВыборкаТовары.Количество > врОстаток Тогда
				КоличествоКЗаказу = врОстаток;
			КонецЕсли;				
			
			НовТовар = Док.Товары.Добавить();
			НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
			НовТовар.Количество		    = КоличествоКЗаказу;
			НовТовар.КоличествоУпаковок = КоличествоКЗаказу;
			
			НовТоварПоступ = ТЗ_Поступ.Добавить();
			НовТоварПоступ.Номенклатура = ВыборкаТовары.Номенклатура;
			НовТоварПоступ.Количество	= КоличествоКЗаказу;
			
			Если ВыборкаТовары.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
				Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
					
					НовСтрокаТара = ТЗ_Тара.Добавить();
					НовСтрокаТара.Тара       = ВыборкаТовары.Номенклатура.НоменклатураМногооборотнаяТара;
					НовСтрокаТара.Количество = КоличествоКЗаказу;
					
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Если Не НужноПроводитьДокумент Тогда
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецЕсли;	
		
	ТЗ_Тара.Свернуть("Тара", "Количество");
	
	Для Каждого ТекТара Из ТЗ_Тара Цикл
		
		НовТовар = Док.Товары.Добавить();
		НовТовар.Номенклатура       = ТекТара.Тара;
		НовТовар.Количество		    = ТекТара.Количество;
		НовТовар.КоличествоУпаковок = ТекТара.Количество;
		
	КонецЦикла;	
		
	ДокСоздан = Ложь;
		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ записан и проведен " + Строка(Док.Ссылка));
		ДокСоздан = Истина;		
	Исключение
		Док.Комментарий = "НЕ ПРОВЕДЕННЫЙ !!!";
		Док.Записать(РежимЗаписиДокумента.Запись);
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проведение документа. Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Если ДокСоздан Тогда
				
		Возврат Док.Ссылка;
		
	КонецЕсли;	
		
	Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
		
КонецФункции


Функция ОбъединениеЗаявок_ПолучитьПриходныйОрдерНаОснованииПеремещения(врПеремещение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",              НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонПериода",              КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  НачалоДня(врПеремещение.Дата));
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", врПеремещение.Номер);	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриходныйОрдерНаТовары.Ссылка
	               |ИЗ
	               |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	               |ГДЕ
	               |	ПриходныйОрдерНаТовары.Проведен
	               |	И ПриходныйОрдерНаТовары.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ПриходныйОрдерНаТовары.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	               |	И ПриходныйОрдерНаТовары.НомерВходящегоДокумента = &НомерВходящегоДокумента";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
	
КонецФункции	


Процедура ОбъединениеЗаявок_СкорректироватьПеремещение(врДокПеремещения, врДокРеализации, врТЗ_ЗаказанныеТовары)
	
	Если ЗначениеЗаполнено(врДокПеремещения) Тогда
		
		ТЗ_Тара = Новый ТаблицаЗначений;
		ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));
		
		врДокОбъект = врДокПеремещения.ПолучитьОбъект();
				
		врТЗ_ЗаказанныеТовары.Свернуть("Товар", "Количество");
		
		ФлагПерезаписи = Ложь;
					
		Сч = врДокПеремещения.Товары.Количество() - 1;
			
		Пока Сч >= 0 Цикл			
			
			ТекСтрокаПеремещения = врДокОбъект.Товары[Сч];
			
			Если ТекСтрокаПеремещения.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
				врДокОбъект.Товары.Удалить(ТекСтрокаПеремещения);
				Сч = Сч - 1;
				Продолжить;
			КонецЕсли;	
						
			НайденСтрока = врТЗ_ЗаказанныеТовары.Найти(ТекСтрокаПеремещения.Номенклатура, "Товар"); 
			
			Если НайденСтрока = Неопределено Тогда
				врДокОбъект.Товары.Удалить(ТекСтрокаПеремещения);
				ФлагПерезаписи = Истина;
			Иначе	
				
				Если (ТекСтрокаПеремещения.Количество <> НайденСтрока.Количество) ИЛИ (ТекСтрокаПеремещения.КоличествоУпаковок <> НайденСтрока.Количество) Тогда
					ФлагПерезаписи = Истина;
				КонецЕсли;	
				
				ТекСтрокаПеремещения.Количество         = НайденСтрока.Количество;
				ТекСтрокаПеремещения.КоличествоУпаковок = НайденСтрока.Количество;
				
				Если ТекСтрокаПеремещения.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
					
					Если ЗначениеЗаполнено(ТекСтрокаПеремещения.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
					
						НовСтрокаТара = ТЗ_Тара.Добавить();
						НовСтрокаТара.Тара       = ТекСтрокаПеремещения.Номенклатура.НоменклатураМногооборотнаяТара;
						НовСтрокаТара.Количество = ТекСтрокаПеремещения.Количество;
					
					КонецЕсли;	
				
				КонецЕсли;	
				
			КонецЕсли;	
						
			Сч = Сч - 1;
			
		КонецЦикла;	
		
		Если ФлагПерезаписи Тогда
			ЗаписатьОшибку1СвЛогФайл("Корректировка перемещения", СокрЛП(врДокПеремещения));
		Иначе
			врДокОбъект.ДокументОснование = врДокРеализации;
			врДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Возврат;
		КонецЕсли;	
		
		ТЗ_Тара.Свернуть("Тара", "Количество");
	
		Для Каждого ТекТара Из ТЗ_Тара Цикл
		
			НовТовар = врДокОбъект.Товары.Добавить();
			НовТовар.Номенклатура       = ТекТара.Тара;
			НовТовар.Количество		    = ТекТара.Количество;
			НовТовар.КоличествоУпаковок = ТекТара.Количество;
		
		КонецЦикла;	
		
		врДокОбъект.ДокументОснование = врДокРеализации;
				
		Если врДокОбъект.Товары.Количество() > 0 Тогда
						
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(врДокОбъект, Документы.ПеремещениеТоваров));
	
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(врДокОбъект, ПараметрыУказанияСерий); 			
			
			Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(врДокОбъект.Товары) Тогда
				НоменклатураСервер.ЗаполнитьСерииПоFEFO(врДокОбъект, ПараметрыУказанияСерий);	
			КонецЕсли;	
			
			врДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ скорректирован.... " + Строка(врДокОбъект.Ссылка));
			
			//врОрдер = ОбъединениеЗаявок_ПолучитьПриходныйОрдерНаОснованииПеремещения(врДокОбъект.Ссылка);
			//врОрдерОбъект = врОрдер.ПолучитьОбъект();
			//врОрдерОбъект.Товары.Очистить();
			//врОрдерОбъект.Товары.Очистить();
			//ОбъединениеЗаявок_ЗаполнитьТоварыПриходногоОрдераНаОснованииПеремещенияТоваров(врОрдерОбъект, врДокПеремещения); 
			//врОрдерОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			//
			////ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(врОрдер, Документы.ПриходныйОрдерНаТовары));
			////Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(врОрдер.Товары) Тогда
			////	НоменклатураСервер.ЗаполнитьСерииПоFEFO(врОрдер, ПараметрыУказанияСерий);	
			////КонецЕсли;	
			//
			//врОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);	
			//ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПРИХОДНЫЙ ОРДЕР НА ТОВАРЫ  скорректирован...." + Строка(врОрдер.Ссылка));			
			
		Иначе
			
			врДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			врДокОбъект.УстановитьПометкуУдаления(Истина);
			
			ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ удален.... " + Строка(врДокОбъект.Ссылка));
			
			//врОрдер = ОбъединениеЗаявок_ПолучитьПриходныйОрдерНаОснованииПеремещения(врДокОбъект.Ссылка);
			//врОрдерОбъект = врОрдер.ПолучитьОбъект();
			//врОрдерОбъект.УстановитьПометкуУдаления(Истина);
			//
			//ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПРИХОДНЫЙ ОРДЕР НА ТОВАРЫ удален.... " + Строка(врОрдер));
			
		КонецЕсли;	
			
	КонецЕсли;		
					
КонецПроцедуры					


Процедура ОбъединениеЗаявок_СкорректироватьПеремещение_ОМСК(врДокПеремещения, врДокРеализации, врТЗ_ЗаказанныеТовары)
	
	Если ЗначениеЗаполнено(врДокПеремещения) Тогда
		
		ТЗ_Тара = Новый ТаблицаЗначений;
		ТЗ_Тара.Колонки.Добавить("Тара",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ_Тара.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));
		
		врДокОбъект = врДокПеремещения.ПолучитьОбъект();
				
		врТЗ_ЗаказанныеТовары.Свернуть("Товар", "Количество");
					
		Сч = врДокПеремещения.Товары.Количество() - 1;
			
		Пока Сч >= 0 Цикл			
			
			ТекСтрокаПеремещения = врДокОбъект.Товары[Сч];
			
			Если ТекСтрокаПеремещения.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
				врДокОбъект.Товары.Удалить(ТекСтрокаПеремещения);
				Сч = Сч - 1;
				Продолжить;
			КонецЕсли;	
						
			НайденСтрока = врТЗ_ЗаказанныеТовары.Найти(ТекСтрокаПеремещения.Номенклатура, "Товар"); 
			
			Если НайденСтрока = Неопределено Тогда
				врДокОбъект.Товары.Удалить(ТекСтрокаПеремещения);
			Иначе	
				
				ТекСтрокаПеремещения.Количество         = НайденСтрока.Количество;
				ТекСтрокаПеремещения.КоличествоУпаковок = НайденСтрока.Количество;
				
				Если ТекСтрокаПеремещения.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
					
					Если ЗначениеЗаполнено(ТекСтрокаПеремещения.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
					
						НовСтрокаТара = ТЗ_Тара.Добавить();
						НовСтрокаТара.Тара       = ТекСтрокаПеремещения.Номенклатура.НоменклатураМногооборотнаяТара;
						НовСтрокаТара.Количество = ТекСтрокаПеремещения.Количество;
					
					КонецЕсли;	
				
				КонецЕсли;	
				
			КонецЕсли;	
						
			Сч = Сч - 1;
			
		КонецЦикла;	
		
		ТЗ_Тара.Свернуть("Тара", "Количество");
	
		Для Каждого ТекТара Из ТЗ_Тара Цикл
		
			НовТовар = врДокОбъект.Товары.Добавить();
			НовТовар.Номенклатура       = ТекТара.Тара;
			НовТовар.Количество		    = ТекТара.Количество;
			НовТовар.КоличествоУпаковок = ТекТара.Количество;
		
		КонецЦикла;	
		
		врДокОбъект.ДокументОснование = врДокРеализации;
				
		Если врДокОбъект.Товары.Количество() > 0 Тогда
			
			врДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ скорректирован.... " + Строка(врДокОбъект.Ссылка));
						
		Иначе
			
			врДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			врДокОбъект.УстановитьПометкуУдаления(Истина);
			
			ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ удален.... " + Строка(врДокОбъект.Ссылка));
						
		КонецЕсли;	
			
	КонецЕсли;		
					
КонецПроцедуры					



#КонецОбласти


#Область АВАРИЙНОЕ_ЗАВЕРШЕНИЕ


Процедура АварийноеЗавершение_СоздатьРеализацию(врЗаказ)
	
	ЗапросФон = Новый Запрос;
	ЗапросФон.УстановитьПараметр("Заказ", врЗаказ);
	ЗапросФон.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	аян_Синнхронизация_ФоновыйПоток.Заказ
	                  |ИЗ
	                  |	РегистрСведений.аян_Синнхронизация_ФоновыйПоток КАК аян_Синнхронизация_ФоновыйПоток
	                  |ГДЕ
	                  |	аян_Синнхронизация_ФоновыйПоток.Заказ = &Заказ";
	РЗФон = ЗапросФон.Выполнить();
	Если Не РЗФон.Пустой() Тогда
		ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации", "Проверка! Заказ в ОЧЕРЕДИ !!! Заказ = " + СокрЛП(врЗаказ), ИнформацияОбОшибке(), Истина); 	
		Возврат;		
	КонецЕсли;	
	
	врПроверкаРеал = АварийноеЗавершение_РеализацияДляЗаказа(врЗаказ);
	Если ЗначениеЗаполнено(врПроверкаРеал) Тогда
		ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации", "Проверка! Уже есть реализация для заказа = " + СокрЛП(врЗаказ), ИнформацияОбОшибке(), Истина); 	
		Возврат;
	КонецЕсли;	
	
	// РЕАЛИЗАЦИЯ для ЗАКАЗА
				
	Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				
	Реализация.Заполнить(врЗаказ.Ссылка);	
				
	Реализация.Менеджер             = врЗаказ.Менеджер;
	Реализация.ТребуетсяЗалогЗаТару = Истина;
				
	Реализация.Статус = ?(Константы.ЗапретРезервированияВЗаказе.Получить(), Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке, Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
				
	алкРаботаСДиалогамиСервер.алкЗаполнитьЛицензииИПунктРазгрузки(Реализация, Неопределено, Истина);	
	
	ДопВремя = врЗаказ.Дата - НачалоДня(врЗаказ.Дата);
	
	Реализация.Дата                           = врЗаказ.ДатаОтгрузки + ДопВремя;
	Реализация.ДатаВозвратаМногооборотнойТары = врЗаказ.ДатаОтгрузки + ДопВремя;
								
	// СЕРИИ
				
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
	КонецЕсли;
								
	Реализация.Комментарий 			 = врЗаказ.Комментарий;
	Реализация.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ДокРеализацииЗаписан = Ложь;
	
	Попытка
		
		Реализация.Записать(РежимЗаписиДокумента.Запись);
						
		ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~(АВАРИЙНАЯ) Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(врЗаказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
		ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации", "~(АВАРИЙНАЯ) Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(врЗаказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")"); 
						
		ДокРеалЗаписан = Истина;
											
	Исключение
				
		ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации", "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
					
		Возврат;
		
	КонецПопытки;
				
	Если ДокРеалЗаписан Тогда
		
		Попытка
		
			//Если СтрЧислоВхождений(Реализация.Комментарий, "ОВОЩИ-ФРУКТЫ") > 0 Тогда 
			//	ФРУКТЫ_ОВОЩИ_СоздатьПоступление(Реализация.Ссылка);
			//КонецЕсли;	
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации (ОВОЩИ-ФРУКТЫ)", "Исключение", ИнформацияОбОшибке(), Истина); 
			
		КонецПопытки;
		
	КонецЕсли;					
						
КонецПроцедуры	


Функция АварийноеЗавершение_РеализацияДляЗаказа(врЗаказ)
	
	Если ТипЗнч(врЗаказ) <> ТипЗнч(Документы.ЗаказКлиента.ПустаяСсылка()) Тогда
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", врЗаказ);
	Запрос.УстановитьПараметр("НачПериода",   НачалоДня(врЗаказ.Дата));
	Запрос.УстановитьПараметр("КонПериода",   КонецДня(врЗаказ.Дата));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата > &НачПериода
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;		
	
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
КонецФункции


Функция ПолучитьАварийноЗавершенныйЗаказ(врКПК, Знач врМассивГУИДЗаказов)
	
	Попытка
		
		ID_АварийногоЗаказа = "";
		
		врМассивДокументов = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("InvoiceID",  врМассивГУИДЗаказов);
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ВидДанных",  "Заказ");
		Запрос.УстановитьПараметр("Статус",     "Проведен");
		Запрос.УстановитьПараметр("ID",         врКПК);
		Запрос.Текст = "ВЫБРАТЬ
		               |	аян_СинхронизацияLog.Документ,
		               |	аян_СинхронизацияLog.InvoiceID
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияLog КАК аян_СинхронизацияLog
		               |ГДЕ
		               |	аян_СинхронизацияLog.ДатаЗагрузки МЕЖДУ &НачПериода И &КонПериода
		               |	И аян_СинхронизацияLog.ВидДанных = &ВидДанных
		               |	И аян_СинхронизацияLog.InvoiceID В(&InvoiceID)
		               |	И аян_СинхронизацияLog.Статус = &Статус
		               |	И аян_СинхронизацияLog.ID = &ID
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	аян_СинхронизацияLog.ДатаЗагрузки УБЫВ";
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ID_АварийногоЗаказа) Тогда
				ID_АварийногоЗаказа = Выборка.InvoiceID;
			КонецЕсли;
			
			Если ID_АварийногоЗаказа = Выборка.InvoiceID Тогда
				врМассивДокументов.Добавить(Выборка.Документ);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Для Каждого ТекДок Из врМассивДокументов Цикл
			врДокРеал = АварийноеЗавершение_РеализацияДляЗаказа(ТекДок);
			Если Не ЗначениеЗаполнено(врДокРеал) Тогда
				ЗаписатьОшибку1СвЛогФайл_Alert("Нет реализации. Заказ = ", Строка(ТекДок));	
				Попытка
					АварийноеЗавершение_СоздатьРеализацию(ТекДок);
				Исключение
					ЗаписатьОшибку1СвЛогФайл_Alert("Создание реализации", "Исключение", ИнформацияОбОшибке(), Истина);	
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;
		
		СписокТоваровАварийногоЗаказа = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", врМассивДокументов);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКлиентаТовары.Номенклатура
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Ссылка В(&Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказКлиентаТовары.Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокТоваровАварийногоЗаказа.Добавить(Выборка.Номенклатура);
		КонецЦикла;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл_Alert("ПолучитьАварийноЗавершенныйЗаказ", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Возврат Новый Структура("ID, Товары", ID_АварийногоЗаказа, СписокТоваровАварийногоЗаказа);
	
КонецФункции	


#КонецОбласти


#Область ПРОДАЖИ_БЕЗ_НДС


Функция ПродажиБезНДС_МассивОрганизацийТомск()
	
	врМассив = Новый Массив;
	врМассив.Добавить(оргАТ_Логистик);
	врМассив.Добавить(оргМеркурий);
	врМассив.Добавить(оргМарс);
	врМассив.Добавить(оргРИФПлюс);
	врМассив.Добавить(оргТОП_17);
	врМассив.Добавить(оргАТЛАНТОмск);  
	врМассив.Добавить(оргГалактика);
		
	Возврат врМассив;
	
КонецФункции	


Функция ПродажиБезНДС_МассивПоставщиковИскл()
	
	врМассив = Новый Массив;
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00016027"));    // АТЛ
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00012399"));    // ТОП-17
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00032288"));    // СИГМА
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00027199"));    // Меркурий
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("ОК-Ц04611  "));    // ООО "АТ-ЛОГИСТИК" Томск
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00010214"));    // АВН-70
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00002628"));    // РИФ
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00006357"));    // РИФ+
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00013825"));    // МАРС
	врМассив.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00031513"));    // МАРС
	
	Возврат врМассив;
	
КонецФункции	


Функция ПродажиБезНДС_ОрганизацияОстаткаТовара(врТовар, врДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товар",       врТовар);
	Запрос.УстановитьПараметр("Период",      врДата);
	Запрос.УстановитьПараметр("Организация", БезНДС_МассивОрганизацийТомск);
	Запрос.УстановитьПараметр("Поставщик",   БезНДС_МассивПоставщиковИскл);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ПартииТоваровОрганизаций.Организация
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровОрганизаций КАК ПартииТоваровОрганизаций
	               |ГДЕ
	               |	ПартииТоваровОрганизаций.Период <= &Период
	               |	И ПартииТоваровОрганизаций.Активность
	               |	И ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура = &Товар
	               |	И ПартииТоваровОрганизаций.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |	И ПартииТоваровОрганизаций.Организация В(&Организация)
	               |	И НЕ ПартииТоваровОрганизаций.АналитикаУчетаПартий.Поставщик В (&Поставщик)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПартииТоваровОрганизаций.МоментВремени УБЫВ";
	РЗ = Запрос.Выполнить();
	Если РЗ.Пустой() Тогда	
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РЗ.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Организация;
		
КонецФункции
	

Функция ПроодажиБезНДС_ЭтоТоварБезНДС(врГУИДНомен)
	
	Событие1С = "ПроодажиБезНДС_ЭтоТоварБезНДС";
	
	GUID = СоздатьУникальныйИдентификатор(врГУИДНомен);
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(GUID);
	Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код номенклатуры! '" + Строка(врГУИДНомен) + "'");
		Возврат Ложь;
	КонецЕсли;	
	
	врВидНомен = Номенклатура.ВидНоменклатуры;
	
	Если (врВидНомен = ВидНоменклатуры_ПивоДубль) ИЛИ (врВидНомен = ВидНоменклатуры_ЛосьоныДубль) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	оргПоступления = ПродажиБезНДС_ОрганизацияОстаткаТовара(Номенклатура, ТекущаяДата());
	
	Если ЗначениеЗаполнено(оргПоступления) Тогда
		Если (оргПоступления <> оргАТ_Логистик) И (оргПоступления <> оргГалактика) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	


Процедура ПродажиБезНДС_ОбработатьТаблицуЗагрузки(врТЗ)

	врМассивПартнеров = Новый ТаблицаЗначений;
	врМассивПартнеров.Колонки.Добавить("ГУИД",        ОписаниеТипаСтрока(150));
	врМассивПартнеров.Колонки.Добавить("Партнер",     Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	врМассивПартнеров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	КЧ2	  = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
	КЧ3	  = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
	КЧ4	  = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
	КС20  = ПолучитьОписаниеТиповСтроки(20);
	КС36  = ПолучитьОписаниеТиповСтроки(36);
	КС40  = ПолучитьОписаниеТиповСтроки(40);
	КС100 = ПолучитьОписаниеТиповСтроки(100);
	
	Массив = Новый Массив;
	
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНом = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ОписаниеТиповЕИ = Новый ОписаниеТипов(Массив);	
			
	Для Каждого ТекСтрокаТЗ Из врТЗ Цикл
		
		Если СтрЧислоВхождений(ТекСтрокаТЗ.InvoiceID, "_NDS") > 0 Тогда
			Продолжить;
		КонецЕсли;	
				
		Попытка
			
			врСтрокаПоиска = врМассивПартнеров.Найти(СокрЛП(ТекСтрокаТЗ.ShopRefID), "ГУИД");
						
			Если врСтрокаПоиска <> Неопределено Тогда
				
				врОрганизация = врСтрокаПоиска.Организация;
				
				Если врОрганизация = оргМеркурий Тогда
					Продолжить;
				КонецЕсли;	
				Если врОрганизация = оргАТЛАНТОмск Тогда
					Продолжить;
				КонецЕсли;										
				
			Иначе		
			
				Партнер = ПолучитьПартнераПоГУИД(СокрЛП(ТекСтрокаТЗ.ShopRefID));			
				Если Партнер <> Неопределено Тогда									
					
					врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент);
					врОрганизация         = врСоглашениеСКлиентом.Соглашение.Организация;
					
					врНовСтрокаМассивПартнеров = врМассивПартнеров.Добавить();
					врНовСтрокаМассивПартнеров.ГУИД        = СокрЛП(ТекСтрокаТЗ.ShopRefID); 
					врНовСтрокаМассивПартнеров.Партнер     = Партнер;
					врНовСтрокаМассивПартнеров.Организация = врОрганизация; 
					
					Если врОрганизация = оргМеркурий Тогда
						Продолжить;
					КонецЕсли;	
					Если врОрганизация = оргАТЛАНТОмск Тогда
						Продолжить;
					КонецЕсли;		
					
				КонецЕсли;	
					
			КонецЕсли;	
				
		Исключение
			ЗаписатьОшибку1СвЛогФайл("ПродажиБезНДС_ОбработатьТаблицуЗагрузки()", "Проверка на МЕРКУРИЙ", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
		ТЧСчетаБезНДС = Новый ТаблицаЗначений;               
		ТЧСчетаБезНДС.Колонки.Добавить("ProductRefID",		КС100);
		ТЧСчетаБезНДС.Колонки.Добавить("Price",				КЧ2);
		ТЧСчетаБезНДС.Колонки.Добавить("Volume",			КЧ3);
		ТЧСчетаБезНДС.Колонки.Добавить("VatRate",			КС20);
		ТЧСчетаБезНДС.Колонки.Добавить("DiscountRate",		КЧ4);
		ТЧСчетаБезНДС.Колонки.Добавить("DiscountAmount",  	КЧ3);
		ТЧСчетаБезНДС.Колонки.Добавить("MeasureUnitRefID",	КС20);		
		
		врФлагБезНДС = Ложь;
		
		ТЧСчета = ТекСтрокаТЗ.ТЧ;
		
		врСч = ТЧСчета.Количество() - 1;
		
		Пока врСч >= 0 Цикл
			
			ТекСтрокаТЧ = ТЧСчета[врСч];
		
			Если ПроодажиБезНДС_ЭтоТоварБезНДС(ТекСтрокаТЧ.ProductRefID) Тогда
				
				врФлагБезНДС = Истина;
			
				НоваяСтрокаБезНДС = ТЧСчетаБезНДС.Добавить();
			
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБезНДС, ТекСтрокаТЧ);
				
				ТЧСчета.Удалить(ТекСтрокаТЧ);
				
			КонецЕсли;	
			
			врСч = врСч - 1;
		
		КонецЦикла;
		
		Если врФлагБезНДС Тогда
			
		//	ЗаписатьОшибку1СвЛогФайл("ПРОДАЖИ БЕЗ НДС", "ЕСТЬ ЗАКАЗ");
		
			Если ТЧСчета.Количество() = 0 Тогда
				ТекСтрокаТЗ.InvoiceID = ТекСтрокаТЗ.InvoiceID + "_NDS";
				ТекСтрокаТЗ.ТЧ        = ТЧСчетаБезНДС;
			Иначе
				
				НовСтрокаТЗ = врТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, ТекСтрокаТЗ);
				НовСтрокаТЗ.InvoiceID = НовСтрокаТЗ.InvoiceID + "_NDS";
				НовСтрокаТЗ.ТЧ = ТЧСчетаБезНДС;
				
				Попытка
					
					ТЧТовары = Новый ТаблицаЗначений;
					ТЧТовары.Колонки.Добавить("Номенклатура",		ОписаниеТиповНом);
					ТЧТовары.Колонки.Добавить("Цена",				КЧ2);
					ТЧТовары.Колонки.Добавить("Количество",			КЧ3);
					ТЧТовары.Колонки.Добавить("ЕдиницаИзмерения",	ОписаниеТиповЕИ);
					ТЧТовары.Колонки.Добавить("ПричинаОтказа",		КС20);
				
					НовСтрокаТЗ.Товары = ТЧТовары;
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл("ДУБЛЬ ОТКАЗА ", "ИСКЛЮЧЕНИЕ", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры	


#КонецОбласти


#Область ЗАКАЗЫ_РЕАЛИЗАЦИИ_ВОЗВРАТЫ


Функция БлижайшаяСуббота()
	ТекДата = ТекущаяДата();
	БлижайшаяСуббота = ТекДата + ДеньВСекундах;
	ТекДеньНедели = ДеньНедели(ТекДата);
	Если ТекДеньНедели < 6 Тогда
		БлижайшаяСуббота = ТекДата + (6 - ТекДеньНедели) * ДеньВСекундах;
	ИначеЕсли ТекДеньНедели = 6 Тогда
		БлижайшаяСуббота = ТекДата + 7 * ДеньВСекундах;	
	ИначеЕсли ТекДеньНедели = 7 Тогда
		БлижайшаяСуббота = ТекДата + 6 * ДеньВСекундах;	
	КонецЕсли;	
	Возврат БлижайшаяСуббота;
КонецФункции	


Функция БлижайшийВторник()
	ТекДата = ТекущаяДата();
	БлижайшаяСуббота = ТекДата + ДеньВСекундах;
	ТекДеньНедели = ДеньНедели(ТекДата);
	Если ТекДеньНедели < 2 Тогда
		БлижайшаяСуббота = ТекДата + (2 - ТекДеньНедели) * ДеньВСекундах;
	ИначеЕсли ТекДеньНедели = 2 Тогда
		БлижайшаяСуббота = ТекДата + 7 * ДеньВСекундах;	
	Иначе
		БлижайшаяСуббота = ТекДата + (7 - ТекДеньНедели + 2) * ДеньВСекундах;	
	КонецЕсли;	
	Возврат БлижайшаяСуббота;
КонецФункции	


Функция ПолучитьПричинуБонуса(врПричина)
	
	Попытка
		
		Если врПричина = "1" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.ПросроченоВТТ;
		ИначеЕсли врПричина = "2" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.ПришелПросроченный;
		ИначеЕсли врПричина = "3" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.НеТоварыйВид;
		ИначеЕсли врПричина = "4" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.Пересорт;
		ИначеЕсли врПричина = "5" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.КороткиеСроки;
		ИначеЕсли врПричина = "6" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.СпецЗадача;
		ИначеЕсли врПричина = "7" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.НеПришелБонус;
		ИначеЕсли врПричина = "8" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.ЗаводскойБрак;
		ИначеЕсли врПричина = "9" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.БракКеги;
		ИначеЕсли врПричина = "10" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.Лояльность_СнижениеЦены;
		ИначеЕсли врПричина = "11" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.Развакуум;
		ИначеЕсли врПричина = "12" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.Иное;
		ИначеЕсли врПричина = "" Тогда
			Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.ПустаяСсылка();
		Иначе
			ЗаписатьОшибку1СвЛогФайл("ПРИЧИНА БОНУСА", СокрЛП(врПричина));
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПРИЧИНА БОНУСА", "ИСКЛЮЧЕНИЕ", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Перечисления.аян_Синхронизация_ПричиныБонусов.ПустаяСсылка();
	
КонецФункции	


Функция ЗагрузкаДокументов_БонусБезПроверки(врКлиент, врАгент)
	
	Попытка
		
		// Таразанова
		Если врАгент = ПолучитьПользователяПоГУИД("efee0f88-0e8d-11ee-842f-ac1f6b8732b0") Тогда
			Возврат Истина;
		КонецЕсли;	
		
		// По сегменту БОНУС без ограничений
		
		Если БонусБезОграничений(врКлиент) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		// По Агентам
		
		//МассивАгентов = Новый Массив;
		//
		//врАгентПоиск = ПолучитьПользователяПоГУИД("51f3d78d-f8aa-11ea-8342-1831bf2dc5c0"); // Баляев
		//Если ЗначениеЗаполнено(врАгентПоиск) Тогда МассивАгентов.Добавить(врАгентПоиск) КонецЕсли;
		//
		//Если МассивАгентов.Найти(врАгент) <> Неопределено Тогда  
		//	Возврат Истина;
		//КонецЕсли;	
		
		Если КегиУтро_Хорика.Найти(врАгент) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
		// По БР
		
		МассивБР = Новый Массив;
		
		врБР = Справочники.БизнесРегионы.НайтиПоНаименованию("Хорека", Истина);
		Если ЗначениеЗаполнено(врБР) Тогда МассивБР.Добавить(врБР) КонецЕсли;
		врБР = Справочники.БизнесРегионы.НайтиПоНаименованию("Утро Хорека Северск", Истина);
		Если ЗначениеЗаполнено(врБР) Тогда МассивБР.Добавить(врБР) КонецЕсли;
		
		Если МассивБР.Найти(врКлиент.БизнесРегион) <> Неопределено Тогда  
			Возврат Истина;
		КонецЕсли;	
			
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗагрузкаДокументов_БонусБезПроверки", "Исключение", ИнформацияОбОшибке(), Истина);
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


Процедура ЗагрузкаДокументов_ОбработатьВидЦеныПетрушка(Заказ)
	
	Попытка
		
		врВидЦеныПетрушка = ПолучитьВидЦеныПоГУИД("ee5cd2a2-f902-11eb-83ac-ac1f6b8732b0");
		
		Если (НЕ ЗначениеЗаполнено(врВидЦеныПетрушка)) ИЛИ (врВидЦеныПетрушка = Неопределено) Тогда
			ЗаписатьОшибку1СвЛогФайл("ОбработатьВидЦеныПетрушка()", "Вид цены Петрушка = НЕОПРЕДЕЛЕНО", ИнформацияОбОшибке(), Истина);
			Возврат;
		КонецЕсли;	

		Для Каждого ТекСтрока Из Заказ.Товары Цикл
			
			Если ТекСтрока.Номенклатура.АкционныйТовар Тогда
				
				врЦена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ТекСтрока.Номенклатура, врВидЦеныПетрушка);
				
				Если врЦена > 0 Тогда
					
					ТекСтрока.ВидЦены = врВидЦеныПетрушка;
					ТекСтрока.Цена    = врЦена;
									
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Заказ.НалогообложениеНДС);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Истина, Истина));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено);	
					
					//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Скорректирован вид цены! Клиент = " + СокрЛП(Заказ.Партнер));
					
				КонецЕсли;	
						
			КонецЕсли;	
				
		КонецЦикла;				
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ОбработатьВидЦеныПетрушка()", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	


Функция ЗагрузкаДокументов_ВыделитьЗаморозку(врБР)
	
	МассивБР = Новый Массив;
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Кожевниково", Истина));
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Баткат", Истина));	
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Мельниково", Истина));
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Кривошеино", Истина));
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Молчаново", Истина));
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Парабель пиво", Истина));
	МассивБР.Добавить(Справочники.БизнесРегионы.НайтиПоНаименованию("Каргасок пиво", Истина));
	
	Если МассивБР.Найти(врБР) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	


Функция ЗагрузкаДокументов_НужноПровестиЧерезГалактику(врКлиент)
		
	Если ТекущаяДата() < '20210101' Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// ТОМСКНЕФТЕПРОДУКТ ВНК АО
	//Если врКлиент.ПринадлежитЭлементу(Справочники.Партнеры.НайтиПоКоду("00-00002409")) Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	
	// Почта России филиал УФПС Томской области
	Если врКлиент.ПринадлежитЭлементу(Справочники.Партнеры.НайтиПоКоду("00-00001658")) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// АГРАРНАЯ ГРУППА МП АО 
	Если врКлиент.ПринадлежитЭлементу(Справочники.Партнеры.НайтиПоКоду("00-00037314")) Тогда
		Возврат Ложь;
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	


Функция ЗагрузкаДокументов_НужноПроверитьОстатокПоСериям(врНоменклатура)
	
	врВидНоменклатуры = врНоменклатура.ВидНоменклатуры.Наименование;
	Если (врВидНоменклатуры = "Молочная продукция") ИЛИ (врВидНоменклатуры = "Пиво дублирующее") ИЛИ
		 (врВидНоменклатуры = "Пиво разливное")     ИЛИ (врВидНоменклатуры = "Пиво фасованное")  ИЛИ 
		 (врВидНоменклатуры = "Джолики") Тогда
		 Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	


Функция ЗагрузкаДокументов_ОстатокПоСериям(врПериод, врСклад, врНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",       Новый Граница(врПериод, ВидГраницы.Включая)); 
	Запрос.УстановитьПараметр("Склад",        врСклад); 
	Запрос.УстановитьПараметр("Номенклатура", врНоменклатура); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ТоварыНаСкладахОстатки.Серия
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Период,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	ОбщийОстаток = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщийОстаток = ОбщийОстаток + Выборка.Остаток;
	КонецЦикла;	
	
	Возврат ОбщийОстаток;
	
КонецФункции	


Функция ВозвратТоваров_ВходящийДокумент(врПартнер)
	
	Если Не ЗначениеЗаполнено(врПартнер) Тогда
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врПартнер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |	И РеализацияТоваровУслуг.Партнер = &Партнер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.МоментВремени УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить(Выборка.Ссылка);
		врОписаниеМаршрута = ПолучитьОписаниеМаршрута(Выборка.Ссылка);
		Если врОписаниеМаршрута.ЗаказОтправлен Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;	
	КонецЦикла;
	 
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
КонецФункции


Функция Реализации_ПолучитьДатуРТУ(Знач врДата)
	
	врТекущийЧас = Число(Формат(врДата, "ДФ=H"));
		
	Если (врТекущийЧас >= 0) И (врТекущийЧас < 8) Тогда
		
		Возврат НачалоДня(врДата) + 60*60*8;
				
	КонецЕсли;					
	
	Возврат врДата;
	
КонецФункции


Функция ЭтоРеализацияПеченьеПавлово(врРеализация)
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",       врРеализация);
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду("Ц0006271   "));
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И РеализацияТоваровУслугТовары.Номенклатура В ИЕРАРХИИ(&Номенклатура)"; 
		РЗ = Запрос.Выполнить();
		Если НЕ РЗ.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ЭтоРеализацияПеченьеПавлово", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	


Функция НаименованиеРегионаПоСерверу(врИмяСервера)
	
	Попытка
				
		Если ЭтоГруппаПользователяАлтай(ТекАгент) Тогда
			Возврат "Алтай";
		КонецЕсли;	
				
		врАгентКарасук = ПолучитьПользователяПоГУИД("46d0b696-9b0e-11ea-831e-1831bf2dc5c0");
		
		Если ТекАгент = врАгентКарасук Тогда
			Возврат "Алтай";
		КонецЕсли;	
		                                                                 
		Если врИмяСервера = "Tomsk" Тогда
			Возврат "Томск";
		ИначеЕсли врИмяСервера = "Novosib" Тогда
			Возврат "Новосибирск";
		ИначеЕсли врИмяСервера = "Kuzbass" Тогда
			Возврат "Кузбасс";
		ИначеЕсли врИмяСервера = "Sever" Тогда
			Возврат "Север";
		ИначеЕсли врИмяСервера = "Region" Тогда
			Возврат "Красноярск";	
		ИначеЕсли врИмяСервера = "Altai" Тогда
			Возврат "Хакасия";						
		КонецЕсли;	
		
	Исключение               
		                                                                                            
		ЗаписатьОшибку1СвЛогФайл("Наименование Сервера", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат "";
	
КонецФункции	


Функция ЛимитВремениЗаказа(врЗонаДоставки)
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Направление", врЗонаДоставки);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	МаршрутизацияДляЛогистов.ВремяСбора
	               |ИЗ
	               |	РегистрСведений.МаршрутизацияДляЛогистов КАК МаршрутизацияДляЛогистов
	               |ГДЕ
	               |	МаршрутизацияДляЛогистов.Собирать
	               |	И (МаршрутизацияДляЛогистов.Направление = &Направление
	               |			ИЛИ МаршрутизацияДляЛогистов.Направление1 = &Направление
	               |			ИЛИ МаршрутизацияДляЛогистов.Направление2 = &Направление)";
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВремяСбора;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ЛимитВремениЗаказа()", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции	


Функция ЗонаДоставкиВес(врЗонаДоставки, врОвощиФрукты, врЭтоНашаРозница)
	
	Если Не ЗначениеЗаполнено(врЗонаДоставки) Тогда
		Возврат Справочники.ЗоныДоставки.ПустаяСсылка();
	КонецЕсли;	
	
	врНаим = СокрЛП(врЗонаДоставки.Наименование);
	
	Если ПустаяСтрока(врНаим) Тогда
		Возврат Справочники.ЗоныДоставки.ПустаяСсылка();
	КонецЕсли;	
	
	// Парабель
	Если СтрЧислоВхождений(врНаим, "Парабель") > 0 Тогда
		Если врОвощиФрукты Тогда
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Парабель Овощи", Истина);
		Иначе
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Парабель сыр", Истина);
		КонецЕсли;	
	КонецЕсли;
	
	// Колпашево
	Если СтрЧислоВхождений(врНаим, "Колпашево") > 0 Тогда
		Если врОвощиФрукты Тогда
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Колпашево Овощи", Истина);
		Иначе
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Колпашево Мавр", Истина);
		КонецЕсли;	
	КонецЕсли;	
	
	// Кожевниково	
	Если СтрЧислоВхождений(врНаим, "Кожевниково") > 0 Тогда
		Если Не врОвощиФрукты Тогда
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Кожевня Мавр", Истина);
		КонецЕсли;	
	КонецЕсли;	
	
	// Наша Розница
	Если врЭтоНашаРозница Тогда
		Если (ДеньНедели(ТекущаяДата()) = 7) ИЛИ (ДеньНедели(ТекущаяДата()) = 6) Тогда
			Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("Понедельник сыр", Истина);	
		КонецЕсли;
		Возврат Справочники.ЗоныДоставки.НайтиПоНаименованию("СЫР", Истина);
	КонецЕсли;	
	
	// ДНИ НЕДЕЛИ
	
	врМассивИскл = Новый Массив;
	врМассивИскл.Добавить("Понедельник");
	врМассивИскл.Добавить("Вторник");
	врМассивИскл.Добавить("Среда");
	врМассивИскл.Добавить("Четверг");
	врМассивИскл.Добавить("Пятница");
	врМассивИскл.Добавить("Суббота");
	
	Для Каждого врТекИскл Из врМассивИскл Цикл
		врНаим = СтрЗаменить(врНаим, врТекИскл, "");
	КонецЦикла;	
	
	врНаим = СокрЛП(врНаим);
	
	врПоискСырНач = ВРег("Сыр " + врНаим);
	врПоискСырКон = ВРег(врНаим + " Сыр");
	врПоискМавр   = ВРег(врНаим + " Мавр");
	врПоискОвощи  = ВРег(врНаим + " Овощи");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗоныДоставки.Ссылка,
	               |	ЗоныДоставки.Наименование
	               |ИЗ
	               |	Справочник.ЗоныДоставки КАК ЗоныДоставки
	               |ГДЕ
	               |	НЕ ЗоныДоставки.ЭтоГруппа
	               |	И НЕ ЗоныДоставки.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врВыборкаНаимен = ВРег(СокрЛП(Выборка.Наименование));	
		Если врОвощиФрукты Тогда
			Если (врВыборкаНаимен = врПоискОвощи) Тогда
				Возврат Выборка.Ссылка;	
			КонецЕсли;
		ИначеЕсли (врВыборкаНаимен = врПоискСырНач) ИЛИ (врВыборкаНаимен = врПоискСырКон) ИЛИ (врВыборкаНаимен = врПоискМавр) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаписатьИнформацию1СвЛогФайл("ЗОНА ДОСТАВКИ ВЕС", "Не найдено = " + СокрЛП(врЗонаДоставки) + " (" + СокрЛП(врНаим) + "); ОВОЩИ = " + СокрЛП(врОвощиФрукты)); 
	
	Возврат Справочники.ЗоныДоставки.ПустаяСсылка();
	
КонецФункции


Функция ДеньНеделиЧислом(врДеньНедели)
	
	Если врДеньНедели = Перечисления.ДниНедели.Понедельник Тогда
		Возврат 1;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Вторник Тогда
		Возврат 2;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Среда Тогда
		Возврат 3;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Четверг Тогда
		Возврат 4;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Пятница Тогда
		Возврат 5;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Суббота Тогда
		Возврат 6;
	ИначеЕсли врДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
		Возврат 7;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции	


Функция ДатаДоставкиПоМатрицеМаршрута(врКлиент)
	
	Если ТекущаяДата() < '20230101' Тогда
		Возврат ТекущаяДата() + ДеньВСекундах;
	КонецЕсли;	
		
	Попытка
		
		Если ИмяСервераМА = "Sever" Тогда
			Возврат ТекущаяДата() + ДеньВСекундах;
		КонецЕсли;	
		
		врЗД = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(врКлиент.БизнесРегион.Наименование), Истина);
	
		Если Не ЗначениеЗаполнено(врЗД) Тогда
			ЗаписатьОшибку1СвЛогФайл("Дата доставки по Матрице маршрута", "Не найдена Зона доставки для Партнера = " + СокрЛП(врКлиент));
			Возврат ТекущаяДата() + ДеньВСекундах;
		КонецЕсли;
	
		ТекущийДеньНедели     = ДеньНедели(ТекущаяДата());
		БлижайшийДеньДоставки = 0;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Направление", врЗД);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	МаршрутизацияДляЛогистов.ДеньНедели
		               |ИЗ
		               |	РегистрСведений.МаршрутизацияДляЛогистов КАК МаршрутизацияДляЛогистов
		               |ГДЕ
		               |	(МаршрутизацияДляЛогистов.Направление = &Направление
		               |			ИЛИ МаршрутизацияДляЛогистов.Направление1 = &Направление
	 	               |			ИЛИ МаршрутизацияДляЛогистов.Направление2 = &Направление)";
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Количество() = 0 Тогда
		//	ЗаписатьОшибку1СвЛогФайл("Дата доставки по Матрице маршрута", "Не заполнена Матрица для зоны доставки = " + СокрЛП(врЗД));
			Возврат ТекущаяДата() + ДеньВСекундах;
		КонецЕсли;	
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ДеньДоставки", ОписаниеТипаЧисло(1));
	
		Пока Выборка.Следующий() Цикл
			НовСтрока = ТЗ.Добавить();
			НовСтрока.ДеньДоставки = ДеньНеделиЧислом(Выборка.ДеньНедели);
		КонецЦикла;
		
		Если ТЗ.Количество() = 1 Тогда
			врТекДата = ТекущаяДата();
			Пока ДеньНедели(врТекДата) <> ТЗ[0].ДеньДоставки Цикл
				врТекДата = врТекДата + ДеньВСекундах;
			КонецЦикла;	
			Возврат врТекДата + ДеньВСекундах;
		КонецЕсли;			
		
		ТЗ.Сортировать("ДеньДоставки");
		
		Для Каждого ТекДеньДоставки Из ТЗ Цикл
			Если ТекДеньДоставки.ДеньДоставки >= ТекущийДеньНедели Тогда
				БлижайшийДеньДоставки = ТекДеньДоставки.ДеньДоставки;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	
		врТекДата = ТекущаяДата();
		Пока БлижайшийДеньДоставки > ДеньНедели(врТекДата) Цикл
			врТекДата = врТекДата + ДеньВСекундах;
		КонецЦикла;
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Дата отгрузки по Матрице Маршрута", "Исключение", ИнформацияОбОшибке(), Истина);
		Возврат ТекущаяДата() + ДеньВСекундах;
	КонецПопытки;	
	
	//Если НачалоДня(врТекДата) = НачалоДня(ТекущаяДата()) Тогда
	//	ЗаписатьОшибку1СвЛогФайл("МАТРИЦА МАРШРУТА", "НЕ НАЙДЕНА ЗД = " + СокрЛП(врЗД));
	//КонецЕсли;	
	
	Возврат врТекДата + ДеньВСекундах;
	
КонецФункции	


Процедура ПроверитьЛимитЗаказаИСообщитьСупервайзеру(врТЗ, врКлиент, врЭтоНал)
	
	врСуммаЗаказа = 0;
	
	Для Каждого ТекСтрока Из врТЗ Цикл
		врСуммаЗаказа = врСуммаЗаказа + ТекСтрока.Количество * ТекСтрока.Цена;
	КонецЦикла;	
	
	Если врСуммаЗаказа < 25000 Тогда
		Возврат;
	КонецЕсли;	
	
	врМассивАдресовОтправки = Новый Массив;
	
	врФлагВозврата  = Истина;
	
	Если ЭтоГруппаПользователяНовосибирск(ТекАгент) Тогда
		Если врСуммаЗаказа >= 50000 Тогда
			врФлагВозврата  = Ложь;
			врМассивАдресовОтправки.Добавить("Blackkitty.eat@yahoo.com");
		КонецЕсли;		
	КонецЕсли;
	
	Если ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда
		врФлагВозврата  = Ложь;
		врМассивАдресовОтправки.Добавить("e.vlasov@sibmail.com");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", ТекАгент);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	аян_Агенты.Супервайзер
	               |ИЗ
	               |	РегистрСведений.аян_Агенты КАК аян_Агенты
	               |ГДЕ
	               |	аян_Агенты.Агент = &Агент";
	врРЗ = Запрос.Выполнить();
	Если Не врРЗ.Пустой() Тогда
				
		Выборка = врРЗ.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Турова Ирина Васильевна") Тогда
			врМассивАдресовОтправки.Добавить("T-irina84@mail.ru");	
			врФлагВозврата = Ложь;
		ИначеЕсли Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Абакумов Андрей Геннадьевич") Тогда
			врМассивАдресовОтправки.Добавить("andrey26abakumov18@yandex.ru");	
			врФлагВозврата = Ложь;			
		ИначеЕсли Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Мезенцев Кирилл Николаевич") Тогда
			врМассивАдресовОтправки.Добавить("Kirill.mezentsev.87@mail.ru");	
			врФлагВозврата = Ложь;		
		ИначеЕсли Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Маметьева Юлия Владиславовна") Тогда
			врМассивАдресовОтправки.Добавить("mameteva_yuliya@mail.ru");	
			врФлагВозврата = Ложь;			
		ИначеЕсли Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Лебедева Татьяна Аркадьевна") Тогда
			врМассивАдресовОтправки.Добавить("tanya.leb.1980@mail.ru");	
			врФлагВозврата = Ложь;
		ИначеЕсли Выборка.Супервайзер = Справочники.Пользователи.НайтиПоНаименованию("Храмов Дмитрий Анатольевич") Тогда
			Если врСуммаЗаказа >= 100000 Тогда
				врМассивАдресовОтправки.Добавить("Dxpamov@gmail.com");	
				врФлагВозврата = Ложь;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Если врФлагВозврата Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого врАдресОтправки Из врМассивАдресовОтправки Цикл
		
		//ЗаписатьОшибку1СвЛогФайл("ЛИМИТ", врАдресОтправки);
		
		врТекстПисьма = Символы.ПС + 
						"ПРЕВЫШЕНИЕ СУММЫ ЗАКАЗА" + Символы.ПС       + Символы.ПС +	
						"Вид: "					  + ?(ИдКПК = "DevPetrushka", "ПЕТРУШКА", "КПК Агента") + Символы.ПС + 	
						"Агент: "                 + Строка(ТекАгент) + Символы.ПС +		
						"Дата: "                  + ТекущаяДата()    + Символы.ПС + 
						"Клиент: "                + СокрЛП(врКлиент) + Символы.ПС + 	
						"Оплата: "                + ?(врЭтоНал, "НАЛ", "ОТСРОЧКА") + Символы.ПС + 
						"Сумма: "                 + СокрЛП(врСуммаЗаказа);		
	
		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.ИспользоватьSSLSMTP = Истина;
		Профиль.АдресСервераSMTP    = "connect.smtp.bz"; 
		Профиль.ПортSMTP            = 465;
		Профиль.Пользователь        = "fsrar@ayantomsk.store";
		Профиль.Пароль              = "7mrxuwIW7w1k";
		Профиль.АутентификацияSMTP  = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP          = "7mrxuwIW7w1k";
		Профиль.ПользовательSMTP    = "fsrar@ayantomsk.store"; 
										
		Письмо = Новый ИнтернетПочтовоеСообщение; 
		Письмо.Организация = "АТЛ";
		Письмо.Отправитель = "fsrar@ayantomsk.store";		
		Письмо.Тема        = "Превышение лимита заказа: " + Строка(врКлиент) + ". Сумма заказа = " + Строка(врСуммаЗаказа);
		
		врТекст = Письмо.Тексты.Добавить(врТекстПисьма);
		врТекст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
					
		Письмо.Получатели.Добавить(СокрЛП(врАдресОтправки));
		//Письмо.Получатели.Добавить(СокрЛП("Bt_Oleg@mail.ru"));
		
		ПисьмоОтправлено = Ложь;
		
		Попытка
			Почта = Новый ИнтернетПочта; 
			Почта.Подключиться(Профиль);
			Почта.Послать(Письмо); 
			Почта.Отключиться();
			ПисьмоОтправлено = Истина;
		Исключение
			ЗаписатьОшибку1СвЛогФайл("Логирование. Отправка писем.", "ЛИМИТ СУММЫ ЗАКАЗА", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
	КонецЦикла;	
			
КонецПроцедуры


Функция ЭтоИнвойсНашейТочки()
	
	Попытка
	
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(КаталогЗагрузки + "\Invoice.txt", КодировкаТекста.ANSI);	
				
		КоличествоЗаписей = Число(Файл.ПолучитьСтроку(1));   
	
		Для Сч = 3 По (КоличествоЗаписей + 2) Цикл
		
			СписокАтрибутов = Split(Файл.ПолучитьСтроку(Сч), Символы.Таб);
					
			ShopRefID = СписокАтрибутов[7].Значение;
			
			Партнер = ПолучитьПартнераПоГУИД(СокрЛП(ShopRefID));
			
			Если Партнер.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
				Возврат Истина;
			КонецЕсли;	
				
			Если Партнер = Неопределено Тогда
				ЗаписатьОшибку1СвЛогФайл("ПРОВЕРКА НАША ТОЧКА", "Неопознанный код партнера! '" + Строка(ShopRefID) + "'");
			КонецЕсли;				
						
		КонецЦикла; 
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПРОВЕРКА НАША ТОЧКА", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


&НаСервере
Функция ЗагрузкаДокументов_СтатусыУстановленыВерно(врДок)
	
	Попытка
		
		Для Каждого ТекСтрока Из врДок.Товары Цикл
			Если ТекСтрока.СтатусУказанияСерий = 5 Тогда
				Возврат Ложь;
			КонецЕсли;	
			Если ТекСтрока.Цена = 0 Тогда
				Возврат Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Статус указания серий", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
		
	Возврат Истина;
	
КонецФункции


Процедура СоздатьСчетФактуруВыданный(врДокРеализации)
		
	Попытка
		
		Если Не ЗначениеЗаполнено(врДокРеализации) Тогда
			Возврат;
		КонецЕсли;
		
		//Если ИмяСервераМА <> "Tomsk" Тогда
		//	Возврат;
		//КонецЕсли;	
		
		врФлагСоздания = Ложь;
		
		Если (врДокРеализации.Организация = оргАТ_Логистик) ИЛИ (врДокРеализации.Организация = оргГалактика) Тогда
			врФлагСоздания = Истина;
		Конецесли;			
		
		Если Не врФлагСоздания Тогда
			Возврат;
		КонецЕсли;	
						
		спрГруппаПетров = Справочники.Партнеры.НайтиПоКоду("00-00002248");
		
		Если врДокРеализации.Партнер.ПринадлежитЭлементу(спрГруппаПетров) Тогда
			Возврат;
		КонецЕсли;	
	
		СтруктураОснование = Новый Структура;
		СтруктураОснование.Вставить("ДокументОснование", врДокРеализации.Ссылка);
		СтруктураОснование.Вставить("Организация",       врДокРеализации.Организация);
		СтруктураОснование.Вставить("Дата",              врДокРеализации.Дата);
		СтруктураОснование.Вставить("Исправление",       Ложь);
	
		НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураОснование);
		
		НовыйДокумент.Номер = врДокРеализации.Номер;

		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("СЧЕТ-ФАКТУРА ВЫДАННЫЙ", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
		
КонецПроцедуры	


Функция ЭтоТочкаМеркурий(врКлиент, врАгент)
	
	врЭтоМеркурий = Ложь;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Куликов Алексей Юрьевич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Поваров Максим Дмитриевич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Глинкин Михаил Игоревич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Коликов Евгений Валерьевич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Колчина Татьяна Васильевна") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Махныткина Елена Васильевна") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;	
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Козлов Владимир Николаевич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;
	
	Если врАгент = Справочники.Пользователи.НайтиПоНаименованию("Мальгин Дмитрий Игоревич") Тогда
		врЭтоМеркурий = Истина;
	КонецЕсли;
	
	Если врЭтоМеркурий Тогда
		
		// Прогресс
		
		Если врКлиент.Родитель = Справочники.Партнеры.НайтиПоКоду("00-00000039") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Нестерчук В.А.
		
		Если врКлиент.Родитель = Справочники.Партнеры.НайтиПоКоду("00-00027059") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		// Рыженко А.С.
		
		Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00002581") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат врЭтоМеркурий;
	
КонецФункции	


Функция ЗагрузкаДокументов_ЭтоГаз_OLD(врДокСсылка)
	
	Попытка
	
		// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
		//врГаз40 = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
		врГаз40 = аян_ОбщийМодульСерверПовтИсп.Газ40МассивТоваров();
		// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 

		ЗапросТабЧасть = Новый Запрос;		
		ЗапросТабЧасть.УстановитьПараметр("Ссылка",       врДокСсылка);
		ЗапросТабЧасть.УстановитьПараметр("Номенклатура", врГаз40);
		ЗапросТабЧасть.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	РеализацияТоваровУслугТовары.Ссылка
		                       |ИЗ
		                       |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                       |ГДЕ
		                       |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
							   //|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура";
							   |	И РеализацияТоваровУслугТовары.Номенклатура В (&Номенклатура)";
		
		РЗТабЧасть = ЗапросТабЧасть.Выполнить();
		
		Если Не РЗТабЧасть.Пустой() Тогда
				
			Возврат Истина;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ЗагрузкаДокументов_ЭтоГаз", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции


Функция ЗагрузкаДокументов_ЭтоГаз(врДокСсылка)
	
	Попытка
	
		// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
		//врГаз40 = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
		врГаз40 = аян_ОбщийМодульСерверПовтИсп.Газ40МассивТоваров();
		// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
		ЗапросТабЧасть = Новый Запрос;		
		ЗапросТабЧасть.УстановитьПараметр("Ссылка",       врДокСсылка);
		ЗапросТабЧасть.УстановитьПараметр("Номенклатура", врГаз40);
		ЗапросТабЧасть.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	ЗаказКлиентаТовары.Ссылка
		                       |ИЗ
		                       |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		                       |ГДЕ
		                       |	ЗаказКлиентаТовары.Ссылка = &Ссылка
							   //|	И ЗаказКлиентаТовары.Номенклатура = &Номенклатура
							   |	И ЗаказКлиентаТовары.Номенклатура В (&Номенклатура)
		                       |	И НЕ ЗаказКлиентаТовары.Отменено";
		
		РЗТабЧасть = ЗапросТабЧасть.Выполнить();
		
		Если Не РЗТабЧасть.Пустой() Тогда
				
			Возврат Истина;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ЗагрузкаДокументов_ЭтоГаз", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции


Функция ОкруглитьДоМинимальнойКратностиТовара(врНоменклатура, врКоличество)
	
	Если врКоличество = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(врНоменклатура) Тогда
		Возврат врКоличество;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Кратность заказа"));
	Запрос.УстановитьПараметр("Ссылка",   врНоменклатура);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение, 0) КАК Кратность
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
	               |	И НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка";
	РЗ = Запрос.Выполнить();
	Если НЕ РЗ.Пустой() Тогда
		
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		
		врКратность = Выборка.Кратность;
		
		Если врКратность >= врКоличество Тогда
			Возврат врКратность;
		КонецЕсли;	
		
		врЦелаяЧасть = Цел(врКоличество / врКратность);
		
		Если (врЦелаяЧасть * врКратность) = врКоличество Тогда
			Возврат врКоличество;
		КонецЕсли;			
		
		Возврат (врЦелаяЧасть + 1)* врКратность;
		
	КонецЕсли;	
	
	Возврат врКоличество;
	
КонецФункции	


Функция ПолучитьСоглашениеРИФПлюс(врКлиент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", оргРИФПлюс);
	Запрос.УстановитьПараметр("Партнер",     врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЗаказКлиента.Соглашение
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Проведен
	               |	И ЗаказКлиента.Организация = &Организация
	               |	И ЗаказКлиента.Партнер = &Партнер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказКлиента.МоментВремени УБЫВ";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Соглашение;
	КонецЕсли;	
	
	Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	
КонецФункции


Процедура СоздатьПоступлениеКЕГ(врТЧ, врСклад, врТестовыйРежим)
	
	Событие1С = "Создание поступления КЕГ";
	
	ТЗ_Кеги = Новый ТаблицаЗначений;
	ТЗ_Кеги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Кеги.Колонки.Добавить("Количество",   ОписаниеТипаЧисло(15, 2));	
	
	ТЗ_Тара = Новый ТаблицаЗначений;
	ТЗ_Тара.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Тара.Колонки.Добавить("Количество",   ОписаниеТипаЧисло(15, 2));
	
	Для Каждого ТекСтрока Из врТЧ Цикл	
		Если ТекСтрока.Номенклатура.ПоставляетсяВМногооборотнойТаре Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.НоменклатураМногооборотнаяТара) Тогда
				НовСтрокаТара = ТЗ_Тара.Добавить();
				НовСтрокаТара.Номенклатура = ТекСтрока.Номенклатура.НоменклатураМногооборотнаяТара;
				НовСтрокаТара.Количество   = ТекСтрока.Количество;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТЗ_Тара.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТЗ_Тара.Свернуть("Номенклатура", "Количество");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           ТекущаяДата());
	Запрос.УстановитьПараметр("ТЧ",               ТЗ_Тара);
	Запрос.УстановитьПараметр("СкладОтправитель", врСклад);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество
	               |ПОМЕСТИТЬ ВрТовары
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВрТовары.Номенклатура,
	               |	ВрТовары.Количество,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв
	               |ИЗ
	               |	ВрТовары КАК ВрТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				&Период,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВрТовары.Номенклатура
	               |						ИЗ
	               |							ВрТовары КАК ВрТовары)
	               |					И Склад = &СкладОтправитель) КАК СвободныеОстаткиОстатки
	               |		ПО ВрТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		врОстаток = ВыборкаТовары.Остаток - ?(ВыборкаТовары.Резерв < 0, 0, ВыборкаТовары.Резерв);	
		
		Если врОстаток < ВыборкаТовары.Количество Тогда
			
			НовСтрока = ТЗ_Кеги.Добавить();
			НовСтрока.Номенклатура = ВыборкаТовары.Номенклатура;
			НовСтрока.Количество   = ВыборкаТовары.Количество - врОстаток;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ТЗ_Кеги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТекТест Из ТЗ_Кеги Цикл
	//	Сообщить(СокрЛП(ТекТест.Номенклатура) + " = " + СокрЛП(ТекТест.Количество));
		ЗаписатьИнформацию1СвЛогФайл(Событие1С, СокрЛП(ТекТест.Номенклатура) + " = " + СокрЛП(ТекТест.Количество));
	КонецЦикла;	
	
	Если врТестовыйРежим Тогда
		Возврат;
	КонецЕсли;	
	
	врПоставщик         = Справочники.Партнеры.НайтиПоКоду("00-00018046");
	врВидЦеныЗакупочная = Справочники.ВидыЦен.НайтиПоНаименованию("Закупочная");
	
	ЗапросДок = Новый Запрос;	
	ЗапросДок.УстановитьПараметр("Партнер", врПоставщик);
	ЗапросДок.УстановитьПараметр("Дата",    НачалоМесяца(ТекущаяДата()));
	ЗапросДок.УстановитьПараметр("Склад",   врСклад);
	ЗапросДок.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	ПоступлениеТоваровУслуг.Ссылка
	                  |ИЗ
	                  |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	                  |ГДЕ
	                  |	ПоступлениеТоваровУслуг.Проведен
	                  |	И ПоступлениеТоваровУслуг.Дата = &Дата
	                  |	И ПоступлениеТоваровУслуг.Партнер = &Партнер
	                  |	И ПоступлениеТоваровУслуг.Склад = &Склад";
	РЗДок = ЗапросДок.Выполнить();
	Если Не РЗДок.Пустой() Тогда
		
		ВыборкаДок = РЗДок.Выбрать();
		ВыборкаДок.Следующий();
		
		ДокСсылка = ВыборкаДок.Ссылка;
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		
		Для Каждого ТекТовар Из ТЗ_Кеги Цикл
			ТекСтрока = ДокОбъект.Товары.Найти(ТекТовар.Номенклатура, "Номенклатура");
			Если ТекСтрока <> Неопределено Тогда
				ТекСтрока.Количество         = ТекСтрока.Количество + ТекТовар.Количество;
				ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
				ТекСтрока.Сумма              = ТекСтрока.Количество * ТекСтрока.Цена;
				ТекСтрока.СуммаСНДС          = ТекСтрока.Сумма;				
			Иначе
				НовТовар = ДокОбъект.Товары.Добавить();
				НовТовар.Склад              = ДокОбъект.Склад;
				НовТовар.Номенклатура       = ТекТовар.Номенклатура;
				НовТовар.Количество         = ТекТовар.Количество;
				НовТовар.КоличествоУпаковок = НовТовар.Количество;
				НовТовар.Цена               = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(НовТовар.Номенклатура, врВидЦеныЗакупочная);
				НовТовар.СтавкаНДС          = Перечисления.СтавкиНДС.БезНДС;
				НовТовар.СуммаНДС           = 0;
				НовТовар.Сумма              = НовТовар.Количество * НовТовар.Цена;
				НовТовар.СуммаСНДС          = НовТовар.Сумма;
			КонецЕсли;	
		КонецЦикла;	
		
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("СуммаСНДС");
		
		Попытка		
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗаписатьИнформацию1СвЛогФайл("ПОСТУПЛЕНИЕ КЕГ = КОРРЕКТИРОВКА", СокрЛП(ДокСсылка));
		Исключение
			Сообщить(ИнформацияОбОшибке());
		КонецПопытки;
	
		Возврат;
		
	КонецЕсли;	
	
	ДокПоступления  = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	ДокПоступления.Дата                    = НачалоМесяца(ТекущаяДата());
	ДокПоступления.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокПоступления.Организация             = Справочники.Организации.НайтиПоНаименованию("Мир, напитки (Томск)");
	ДокПоступления.Партнер                 = врПоставщик;
	ДокПоступления.Контрагент              = Справочники.Контрагенты.НайтиПоНаименованию("Поступление КЕГ (синхронизация)");
	ДокПоступления.Склад                   = врСклад;
	ДокПоступления.Валюта                  = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокПоступления.ВалютаВзаиморасчетов    = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокПоступления.НалогообложениеНДС      = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДокПоступления.НомерВходящегоДокумента = "NONE"; 
	ДокПоступления.ДатаВходящегоДокумента  = ДокПоступления.Дата; 
			
	Для Каждого ТекСтрока Из ТЗ_Кеги Цикл
		
		НовТовар = ДокПоступления.Товары.Добавить();
		НовТовар.Склад              = ДокПоступления.Склад;
		НовТовар.Номенклатура       = ТекСтрока.Номенклатура;
		НовТовар.Количество         = ТекСтрока.Количество;
		НовТовар.КоличествоУпаковок = НовТовар.Количество;
		НовТовар.Цена               = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(НовТовар.Номенклатура, врВидЦеныЗакупочная);
		НовТовар.СтавкаНДС          = Перечисления.СтавкиНДС.БезНДС;
		НовТовар.СуммаНДС           = 0;
		НовТовар.Сумма              = НовТовар.Количество * НовТовар.Цена;
		НовТовар.СуммаСНДС          = НовТовар.Сумма;
		
	КонецЦикла;	
	
	Попытка			
		ДокПоступления.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписатьИнформацию1СвЛогФайл("ПОСТУПЛЕНИЕ КЕГ = СОЗДАНИЕ", СокрЛП(ДокПоступления.Ссылка));		
	Исключение
		Сообщить(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры	


Функция Товары_ПоследняяЦенаПродажиТовараВТочку(врКлиент, врНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", врНоменклатура);
	Запрос.УстановитьПараметр("Партнер",      врКлиент);
	Запрос.УстановитьПараметр("ОргБонус",     ПолучитьВсеОрганизацииБонус());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВыручкаИСебестоимостьПродаж.Период КАК Период,
	               |	ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.Количество, 0) КАК Количество,
	               |	ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВВалютеВзаиморасчетов, 0) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	               |ГДЕ
	               |	ВыручкаИСебестоимостьПродаж.Активность
	               |	И ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
	               |	И ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	               |	И НЕ ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам.Организация В (&ОргБонус)
	               |	И ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат ?(Выборка.Количество = 0, 0, Окр(Выборка.Сумма/Выборка.Количество, 2, 1));
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции	


Функция Товары_ПолучитьПриоритетТовара(врНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товар", врНоменклатура);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(аян_ПриоритетТоваров.Приоритет, 100) КАК Приоритет
	               |ИЗ
	               |	РегистрСведений.аян_ПриоритетТоваров КАК аян_ПриоритетТоваров
	               |ГДЕ
	               |	аян_ПриоритетТоваров.Товар = &Товар";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Приоритет;
	КонецЕсли;	
	
	Возврат 100;
	
КонецФункции	


Процедура Товары_ЗаполнитьПриоритетТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_ПриоритетТоваровНастройка.ГруппаТоваров,
	               |	аян_ПриоритетТоваровНастройка.Приоритет
	               |ИЗ
	               |	РегистрСведений.аян_ПриоритетТоваровНастройка КАК аян_ПриоритетТоваровНастройка";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	НЗ = РегистрыСведений.аян_ПриоритетТоваров.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.Родитель,
	               |	Номенклатура.ВидНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоАлкоголь
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И НЕ Номенклатура.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Приоритет = 100;
		
		Если Выборка.ВидНоменклатуры = ВидНоменклатуры_ПивоРозлив Тогда
			Приоритет = 1;
		ИначеЕсли Выборка.ВидНоменклатуры = ВидНоменклатуры_Джолики Тогда
			Приоритет = 2;
		ИначеЕсли Выборка.ЭтоАлкоголь Тогда
			Приоритет = 3;
		ИначеЕсли Выборка.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль Тогда
			Приоритет = 4;
		ИначеЕсли Выборка.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль Тогда
			Приоритет = 5;
		КонецЕсли;
		
		Если Приоритет = 100 Тогда
		
			Для Каждого ТекСтрока Из ТЗ Цикл
				Если Выборка.Родитель = ТекСтрока.ГруппаТоваров Тогда
					Приоритет = ТекСтрока.Приоритет;
					Прервать;
				Иначе
					Если Выборка.Ссылка.ПринадлежитЭлементу(ТекСтрока.ГруппаТоваров) Тогда
						Приоритет = ТекСтрока.Приоритет;					
						Прервать;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
		
		НовСтрока = НЗ.Добавить();
		НовСтрока.Товар     = Выборка.Ссылка;
		НовСтрока.Приоритет = Приоритет;
		
	КонецЦикла;	
	
	НЗ.Записать();
	
КонецПроцедуры


Процедура ПроверитьНаЗаказыЧерезСтопЛист()
	
	Попытка
				
		Для Каждого ТекЗаказ Из МассивЗаказов Цикл
			
			ТекТочкаЗаказ = ТекЗаказ.Партнер;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Агент",         ТекАгент);
			Запрос.УстановитьПараметр("ТорговаяТочка", ТекТочкаЗаказ);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ЕСТЬNULL(аян_СинхронизацияТТ.MaxOverdueDebtAmount, 0) КАК Лимит
			               |ИЗ
			               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
			               |ГДЕ
			               |	аян_СинхронизацияТТ.Агент = &Агент
			               |	И аян_СинхронизацияТТ.ТорговаяТочка = &ТорговаяТочка";
			РЗ = Запрос.Выполнить();
			Если Не РЗ.Пустой() Тогда
				
				Выборка = РЗ.Выбрать();
				Выборка.Следующий();
				Если Выборка.Лимит > 0 Тогда
					ЗаписатьИнформацию1СвЛогФайл("СТОП-ЛИСТ", СокрЛП(ТекТочкаЗаказ));
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Проверка на заказ через СТОП-ЛИСТ", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	


Функция ПолучитьДатуОтложенногоЗаказа(врДатаОтгрузки)
	
	Если НачалоДня(врДатаОтгрузки) <= НачалоДня(ТекущаяДата()) Тогда
		Возврат Новый Структура("ДатаОтложенная, Комментарий", ТекущаяДата(), "");
	КонецЕсли;	
	
	// Заказ на текущий день
	
	Если НачалоДня(врДатаОтгрузки - ДеньВСекундах) = НачалоДня(ТекущаяДата()) Тогда
		Возврат Новый Структура("ДатаОтложенная, Комментарий", ТекущаяДата(), "");
	КонецЕсли;	
	
	// Заказ на понедельник
	
	ДеньНеделиОтгрузки = ДеньНедели(врДатаОтгрузки);
	ДеньНеделиТекущий  = ДеньНедели(ТекущаяДата());
	
	Если ДеньНеделиОтгрузки = 1 Тогда
		Если (ДеньНеделиТекущий = 6) И (ДеньНеделиТекущий = 7) Тогда
			Возврат Новый Структура("ДатаОтложенная, Комментарий", ТекущаяДата(), "НА ПОНЕДЕЛЬНИК");
		Иначе
			Возврат Новый Структура("ДатаОтложенная, Комментарий", врДатаОтгрузки - (3 * ДеньВСекундах), "НА ПОНЕДЕЛЬНИК");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Новый Структура("ДатаОтложенная, Комментарий", врДатаОтгрузки - ДеньВСекундах, "НА " + ВРЕГ(ДеньНеделиПрописью(врДатаОтгрузки)));
	
КонецФункции	


Функция ПустойЗаказ(ДокументЗаказ)
	
	Попытка
		
		ЕстьНеОтмененныеПозиции = Ложь;
		
		Для Каждого ТекСтрока Из ДокументЗаказ.Товары Цикл
			
			Если Не ТекСтрока.Отменено Тогда
			
				Если ТекСтрока.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
					
					НаименованиеНоменклатуры = ТекСтрока.Номенклатура.Наименование;
				
					Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") = 0 Тогда
						
						ЕстьНеОтмененныеПозиции = Истина;
						Прервать;
						
					КонецЕсли;
					
				Иначе	
					
					ЕстьНеОтмененныеПозиции = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ЕстьНеОтмененныеПозиции Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка на пустой заказ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	


Функция МирНапитковЗаНАЛ(врЗаказ)
	
	Попытка
		
		Если (ОсновнаяФирма = оргАТ_ЛогистикОМСК) И (врЗаказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент)) Тогда
			Возврат Истина;
		КонецЕсли;	
	
		Если (ОсновнаяФирма = оргАТ_Логистик) И (врЗаказ.Организация = оргМирНапитковТомск) Тогда
			
			врКлиент = врЗаказ.Партнер;
			
			Если врКлиент.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
				Возврат Ложь;
			КонецЕсли;	
		
		//	Если Лев(СокрЛ(врКлиент.Наименование), 4) = "Аян+" Тогда
		//		Возврат Ложь;
		//	КонецЕсли;
		//
		//	Если Лев(СокрЛ(врКлиент.Наименование), 4) = "РИФ+" Тогда
		//		Возврат Ложь;
		//	КонецЕсли;		
		//	
		//	Если Лев(СокрЛ(врКлиент.Наименование), 4) = "МАРС" Тогда
		//		Возврат Ложь;
		//	КонецЕсли;					
						
			//Если ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда
			//	Возврат Ложь;
			//КонецЕсли;		
			
			//Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Балахнина Наталья Сергеевна") Тогда
			//	Возврат Ложь;
			//КонецЕсли;	
						
			//Если КегиУтро_МассивАгентов.Найти(ТекАгент) <> Неопределено Тогда
			//	Если НЕ врКлиент.ПринадлежитЭлементу(Клиенты_грПетров) Тогда
			//		Возврат Ложь;
			//	КонецЕсли;	
			//КонецЕсли;	
			
			СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000013");
	
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер", врКлиент);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПартнерыСегмента.Сегмент
			               |ИЗ
			               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			               |ГДЕ
			               |	ПартнерыСегмента.Партнер = &Партнер";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
					Возврат Ложь;
				КонецЕсли;	
			КонецЦикла;	
	
			Возврат Истина;
				
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Мир напитков за НАЛ", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;		
	
	Возврат Ложь;
	
КонецФункции	


Функция СигаретыВОтсрочку(врКлиент)
	
	Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Балахнина Наталья Сергеевна") Тогда
		Возврат Истина;
	КонецЕсли;	
			
	Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Новикова Юлия Сергеевна") Тогда
		Возврат Истина;
	КонецЕсли;					
	
	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000015");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция ЗапретПродажиТоваровБезНДС(врКлиент)
	
	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000020");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция ЧерныйСписок(врКлиент)
	
	Если Массив_Сегмент_ЧерныйСписок.Найти(врКлиент) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
//	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000021");
	СегментОптовыеКлиенты = Сегмент_ЧерныйСписок;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция Сегмент_ОтгрузкаЗапрещенаКлиенту(врКлиент)
	
	Если Массив_Сегмент_ЗапретОтгрузки.Найти(врКлиент) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;		
	
	Возврат Ложь;
	
//	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000022");
	СегментОптовыеКлиенты = Сегмент_ОтгрузкаЗапрещена;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции	


Функция ВсегдаЗаНАЛ(врКлиент)
	
	Если Массив_Сегмент_ВсегдаЗаНАЛ.Найти(врКлиент) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000017");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция ТочкаВКегиРозливИсключения(врКлиент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.УстановитьПараметр("Сегмент", Сегмент_КегиОтсрочкаИсключения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер
	               |	И ПартнерыСегмента.Сегмент = &Сегмент";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;	
	
КонецФункции	


Функция БонусБезОграничений(врКлиент)
	
	Если ТекущаяДата() < '20230308' Тогда
		Если ТекАгент = Агент_Кидяева Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Массив_Сегмент_БОНУС.Найти(врКлиент) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;

КонецФункции
	

Функция МирНапитковЗаНал_ТолькоСевер(врКлиент)
	
	Возврат Ложь;
	
	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000019");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция АлкогольОтдельнойФактурой(врКлиент)
	
	Возврат Истина;
	
	СегментОптовыеКлиенты = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000016");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", врКлиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартнерыСегмента.Сегмент
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Партнер = &Партнер";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сегмент = СегментОптовыеКлиенты Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
	
КонецФункции


Функция НашаТочка(врКлиент)
	
	Попытка	
		
		Если врКлиент.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "Аян+" Тогда
		//	Возврат Истина;
		//КонецЕсли;
		//
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "РИФ+" Тогда
		//	Возврат Истина;
		//КонецЕсли;		
		//
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "МАРС" Тогда
		//	Возврат Истина;
		//КонецЕсли;				
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Проверка на нашу точку", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	


// Получить номер заказа по 1С (InvoiceRefID для ответа на заказ)

Функция ПолучитьНомерОтветаНаЗаказ()
	
	Попытка
		
		ТекНомер = Константы.аян_СинхронизацияНомерОтветаНаЗаказ.Получить();
		ТекНомер = ТекНомер + 1;
		Константы.аян_СинхронизацияНомерОтветаНаЗаказ.Установить(ТекНомер);
		
		СтрТекНомер = Строка(ТекНомер);
		СтрТекНомер = СтрЗаменить(СтрТекНомер, Символы.НПП, "");
		
		Возврат ТекНомер;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Ответ на заказ (InvoiceRefID)", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции	


// Получить цену номенклатуры от даты


Функция ЗагрузкаДокументов_ПолучитьЦенуНоменклатурыНаДату(врНоменклатура, врВидЦены, врДата)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", врНоменклатура);
		Запрос.УстановитьПараметр("ВидЦены",      врВидЦены);
		Запрос.УстановитьПараметр("ДатаСреза",    врДата);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&ДатаСреза,
		               |			Номенклатура = &Номенклатура
		               |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Цена;
		КонецЕсли;
	Исключение	
		
	КонецПопытки;	
		
	Возврат 0;
	
КонецФункции


// Получить цену номенклатуры

Функция ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(врНоменклатура, врВидЦены)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", врНоменклатура);
		Запрос.УстановитьПараметр("ВидЦены",      врВидЦены);
		Запрос.УстановитьПараметр("ДатаСреза",    ТекущаяДата());
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&ДатаСреза,
		               |			Номенклатура = &Номенклатура
		               |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			
			Если (Выборка.Цена = 0) И (Лев(врНоменклатура.Наименование,4) = "Кега") Тогда
				
				// Кега CBW 20л А
				Если врНоменклатура = Справочники.Номенклатура.НайтиПоКоду("00-00015285") Тогда
				//	ЗаписатьОшибку1СвЛогФайл("Кега CBW 20л А = 0!!! ЦЕНА НЕ НАЙДЕНА !!!", "Номенклатура = " + СокрЛП(врНоменклатура) + "; Вид цены = " + СокрЛП(врВидЦены));
					Возврат 7000;
				КонецЕсли;	
				
			//	ЗаписатьОшибку1СвЛогФайл("КЕГА = 0", "Номенклатура = " + СокрЛП(врНоменклатура) + "; Вид цены = " + СокрЛП(врВидЦены));
				
				ЗапросКега = Новый Запрос;
				ЗапросКега.УстановитьПараметр("Номенклатура", врНоменклатура);
			//	ЗапросКега.УстановитьПараметр("ВидЦены",      врВидЦены);
				ЗапросКега.УстановитьПараметр("ВидЦены",      Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));
				ЗапросКега.УстановитьПараметр("Период",       ТекущаяДата());
				ЗапросКега.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				                   |	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
				                   |ИЗ
				                   |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
				                   |ГДЕ
				                   |	ЦеныНоменклатуры.Цена > 0
				                   |	И ЦеныНоменклатуры.Активность
				                   |	И ЦеныНоменклатуры.Номенклатура = &Номенклатура
				                   |	И ЦеныНоменклатуры.ВидЦены = &ВидЦены
				                   |	И ЦеныНоменклатуры.Период <= &Период
				                   |
				                   |УПОРЯДОЧИТЬ ПО
				                   |	ЦеныНоменклатуры.Период УБЫВ";
				РЗКега = ЗапросКега.Выполнить();
				Если Не РЗКега.Пустой() Тогда
					ВыборкаКега = РЗКега.Выбрать();
					ВыборкаКега.Следующий();
					Возврат ВыборкаКега.Цена;
				КонецЕсли;	
				
				ЗаписатьОшибку1СвЛогФайл("КЕГА = 0!!! ЦЕНА НЕ НАЙДЕНА !!!", "Номенклатура = " + СокрЛП(врНоменклатура) + "; Вид цены = " + СокрЛП(врВидЦены));
				
			КонецЕсли;	
						
			Возврат Выборка.Цена;
			
		КонецЕсли;
	Исключение	
		ЗаписатьОшибку1СвЛогФайл("Получение цены номенклатуры", "Исключение! Номенклатура: " + Строка(врНоменклатура) + "; Вид цены: " + Строка(врВидЦены), ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
		
	Возврат 0;
	
КонецФункции	


// Проверка наличия договоров РИФ, РИФ+ 

Функция ЗагрузкаДокументов_ЗаказРазрешенКЗагрузке(врЗаказ, врЭтоТоварыБезНДС, врПричинаОтказа, врПетровПетров = Ложь)

	Попытка
		Если ЭтоТестовыйАгент(врЗаказ.Менеджер) И (врЗаказ.Организация = ОргБонусТомск) Тогда
			врПричинаОтказа = "запрет на реализацию";
			Возврат Ложь;
		КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗАКАЗ РАЗРЕШЕН К ЗАГРУЗКЕ", "ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
	//врГаз = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
	врГаз = аян_ОбщийМодульСерверПовтИсп.Газ40();
	врГазАттест = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест();
	// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
	
	Попытка
		Если врЗаказ.Организация = ОргБонусТомск Тогда
			врФлагПроверки = Истина;
			Для Каждого ТекСтрока Из врЗаказ.Товары Цикл
				// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
				//Если ТекСтрока.Номенклатура = врГаз Тогда
				Если ТекСтрока.Номенклатура = врГаз
					ИЛИ ТекСтрока.Номенклатура = врГазАттест Тогда
				// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
					врФлагПроверки = Ложь;
				КонецЕсли;	
			КонецЦикла;	
			Если врФлагПроверки Тогда
				Если НЕ ЗначениеЗаполнено(врЗаказ.ПричинаБонуса) Тогда
					врПричинаОтказа = "Нет причины бонуса";
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗАКАЗ РАЗРЕШЕН К ЗАГРУЗКЕ - ПРИЧИНА БОНУСА", "ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;		
	
	Попытка
		Если ЧерныйСписок(врЗаказ.Партнер) ИЛИ Сегмент_ОтгрузкаЗапрещенаКлиенту(врЗаказ.Партнер) Тогда
			врПричинаОтказа = "Нет соглашения";
			Возврат Ложь;
		КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗАКАЗ РАЗРЕШЕН К ЗАГРУЗКЕ", "ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;		
	
	Попытка
		
		Если Не ЗначениеЗаполнено(врЗаказ.Соглашение) Тогда
			врПричинаОтказа = "Нет соглашения";
			Возврат Ложь;
		КонецЕсли;	
				                            
		Если врПетровПетров Тогда
			врПричинаОтказа = "Петров V Петров";
			Возврат Ложь;
		КонецЕсли;	
				
		Если врЗаказ.Организация = оргРИФ Тогда
			врПричинаОтказа = "нет в ост.";
			Возврат Ложь;
		КонецЕсли;	
	
		Если ОсновнаяФирма <> оргАТ_Логистик Тогда
			Возврат Истина;
		КонецЕсли;	
		
		врСтрЛев7 = Лев(врЗаказ.Склад.Наименование, 7);
		Если врСтрЛев7 = "БОРТ - " Тогда
			Возврат Истина;
		КонецЕсли;
		
		врКлиент = врЗаказ.Партнер;
	
		НаименованиеКлиента = врКлиент.Наименование;
		Если СтрЧислоВхождений(НРег(НаименованиеКлиента), "петров") > 0 Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если врКлиент.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
			Возврат Истина;
		КонецЕсли;	
				
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "Аян+" Тогда
		//	Возврат Истина;
		//КонецЕсли;
		//
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "РИФ+" Тогда
		//	Возврат Истина;
		//КонецЕсли;		
		//
		//Если Лев(СокрЛ(врКлиент.Наименование), 4) = "МАРС" Тогда
		//	Возврат Истина;
		//КонецЕсли;	
		
		врГруппаСотрудники = Справочники.Партнеры.НайтиПоКоду("00-00002880");
		Если врКлиент.ПринадлежитЭлементу(врГруппаСотрудники) Тогда
			Возврат Истина;
		КонецЕсли;	
				
		СегментБезДоговоров = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000014");
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", врКлиент);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПартнерыСегмента.Сегмент
		               |ИЗ
		               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		               |ГДЕ
		               |	ПартнерыСегмента.Партнер = &Партнер";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сегмент = СегментБезДоговоров Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;		
		
		//врЭтоВалишев = ?(ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Валишев Александр Мунирович"), Истина, Ложь);
	
//		Если (врЗаказ.Организация = оргРИФПлюс) И (врЗаказ.Соглашение.Организация = оргРИФПлюс) Тогда
//			Запрос = Новый Запрос;
//			Запрос.УстановитьПараметр("Ссылка",   врКлиент);
////			Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорМарс);
//			Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорРИФПлюс);
//			Запрос.УстановитьПараметр("Значение", Истина);
//			Запрос.Текст = "ВЫБРАТЬ
//			               |	ПартнерыДополнительныеРеквизиты.Ссылка
//			               |ИЗ
//			               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
//			               |ГДЕ
//			               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
//			               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
//			               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
//			Результат = Запрос.Выполнить();
//			Если Не Результат.Пустой() Тогда				
//			//	Возврат Истина;
//			Иначе
//				врПричинаОтказа = "нет д.Риф+";
//			//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
//				Возврат Ложь;
//			КонецЕсли;	
//		КонецЕсли;	
		
			Если (врЗаказ.Организация = оргАТ_Логистик) Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",   врКлиент);
				Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорАТ);
				Запрос.УстановитьПараметр("Значение", Истина);
				Запрос.Текст = "ВЫБРАТЬ
				               |	ПартнерыДополнительныеРеквизиты.Ссылка
				               |ИЗ
				               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
				               |ГДЕ
				               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
				               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
				               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда				
				//	Возврат Истина;
				Иначе
					врПричинаОтказа = "нет д.АТЛ";
				//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;		
		
		//Если врЗаказ.Организация = оргМеркурий Тогда
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Ссылка",   врКлиент);
		//	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор Меркурий"));
		//	Запрос.УстановитьПараметр("Значение", Истина);
		//	Запрос.Текст = "ВЫБРАТЬ
		//	               |	ПартнерыДополнительныеРеквизиты.Ссылка
		//	               |ИЗ
		//	               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		//	               |ГДЕ
		//	               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		//	               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
		//	               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
		//	Результат = Запрос.Выполнить();
		//	Если Не Результат.Пустой() Тогда				
		//	//	Возврат Истина;
		//	Иначе
		//		врПричинаОтказа = "нет д.Меркурий";
		//	//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
		//		Возврат Ложь;
		//	КонецЕсли;	
		//КонецЕсли;	
		
		//Если (врЗаказ.Организация = оргАТЛАНТОмск) Тогда
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Ссылка",   врКлиент);
		//	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор АТЛАНТ"));
		//	Запрос.УстановитьПараметр("Значение", Истина);
		//	Запрос.Текст = "ВЫБРАТЬ
		//	               |	ПартнерыДополнительныеРеквизиты.Ссылка
		//	               |ИЗ
		//	               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		//	               |ГДЕ
		//	               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		//	               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
		//	               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
		//	Результат = Запрос.Выполнить();
		//	Если Не Результат.Пустой() Тогда				
		//	//	Возврат Истина;
		//	Иначе
		//		врПричинаОтказа = "нет д.Атлант";
		//	//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
		//		Возврат Ложь;
		//	КонецЕсли;	
		//КонецЕсли;					
		//
		
			Если врЗаказ.Организация = оргТОП_17 Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",   врКлиент);
				Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорТОП17);
				Запрос.УстановитьПараметр("Значение", Истина);
				Запрос.Текст = "ВЫБРАТЬ
				               |	ПартнерыДополнительныеРеквизиты.Ссылка
				               |ИЗ
				               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
				               |ГДЕ
				               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
				               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
				               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда				
				//	Возврат Истина;
				Иначе
					врПричинаОтказа = "нет д.ТОП_17";
				//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;	
		
		// ГАЛАКТИКА
		
			Если врЗаказ.Организация = оргГалактика Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",   врКлиент);
				Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорГалактика);
				Запрос.УстановитьПараметр("Значение", Истина);
				Запрос.Текст = "ВЫБРАТЬ
				               |	ПартнерыДополнительныеРеквизиты.Ссылка
				               |ИЗ
				               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
				               |ГДЕ
				               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
				               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
				               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда				
				//	Возврат Истина;
				Иначе
					врПричинаОтказа = "нет д.Галактика";
				//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ");
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;	
		
//		Если (врЗаказ.Соглашение.Организация = оргАТ_Логистик) И врЭтоТоварыБезНДС Тогда
//			
//			ЕстьЗамороженнаяЯгода = Ложь;
//			Попытка
//				грЗамороженнаяЯгода = Справочники.Номенклатура.НайтиПоКоду("00-00009868");
//				Для Каждого ТекСтрокаЯгода Из врЗаказ.Товары Цикл
//					Если ТекСтрокаЯгода.Номенклатура.Родитель = грЗамороженнаяЯгода Тогда
//						ЕстьЗамороженнаяЯгода = Истина;
//					КонецЕсли;	
//				КонецЦикла;					
//			Исключение
//				ЗаписатьОшибку1СвЛогФайл("Проверка на договоры", "Замороженная ягода", ИнформацияОбОшибке(), Истина);
//			КонецПопытки;	
//			
//			Если Не ЕстьЗамороженнаяЯгода Тогда
//			
//			Запрос = Новый Запрос;
//			Запрос.УстановитьПараметр("Ссылка",   врКлиент);
////			Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорМарсБезНДС);
//			Запрос.УстановитьПараметр("Свойство", ПВХ_ДоговорРИФПлюсБезНДС);
//			Запрос.УстановитьПараметр("Значение", Истина);
//			Запрос.Текст = "ВЫБРАТЬ
//			               |	ПартнерыДополнительныеРеквизиты.Ссылка
//			               |ИЗ
//			               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
//			               |ГДЕ
//			               |	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
//			               |	И ПартнерыДополнительныеРеквизиты.Значение = &Значение
//			               |	И ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка";			
//			Результат = Запрос.Выполнить();
//			Если Не Результат.Пустой() Тогда
//			//	Возврат Истина;                   
//			Иначе
////				врПричинаОтказа = "нет д.МАРС(безНДС)";
//				врПричинаОтказа = "нет д.РИФ+(безНДС)";
//			//	ИнформационноеСообщение_ДобавитьИнформацию("Блокировки", врЗаказ.Партнер, врЗаказ.СуммаДокумента, "НЕ закл. дог. РИФ+ (без НДС)");
//				Возврат Ложь;
//			КонецЕсли;	
//			
//			КонецЕсли;
//			
//		КонецЕсли;		
		
		Если (врЗаказ.Организация <> ПолучитьОрганизациюВЧерную(ТекАгент)) И (врЗаказ.Организация <> ПолучитьОрганизациюБонус(ТекАгент)) Тогда
			
			врВЗаказеЕстьАлкоголь = Ложь;
			Для Каждого ТекТовар Из врЗаказ.Товары Цикл
				Если ТекТовар.Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь Тогда
					врВЗаказеЕстьАлкоголь = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Если врВЗаказеЕстьАлкоголь Тогда
				
				Если Не КонтрагентПодключенКЕГАИС(врКлиент) Тогда
					врПричинаОтказа = "не ЕГАИС";
					ЗаписатьИнформацию1СвЛогФайл("Не ЕГАИС !!!", СокрЛП(врКлиент));
					Возврат Ложь;
				КонецЕсли;					
				
				Если КонтрагентуЗапрещенаОтгрузкаАлкоголя(врКлиент) Тогда
					врПричинаОтказа = "запрет по ЕГАИС";
					ЗаписатьОшибку1СвЛогФайл("Запрет по ЕГАИС", СокрЛП(врКлиент));
					Возврат Ложь;
				КонецЕсли;	
								
			КонецЕсли;	
			
		КонецЕсли;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка заявки на РИФ, РИФ+", "Исключение!", ИнформацияОбОшибке(), Истина);	
	КонецПопытки;	

	Возврат Истина;
	
КонецФункции


// Получить организацию возврата

Функция ОпределитьОрганизациюВозврата(ДокументВозврат)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        ДокументВозврат.Организация);
	Запрос.УстановитьПараметр("Партнер",            ДокументВозврат.Партнер);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ДокументВозврат.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты КАК ВыручкаИСебестоимостьПродажОбороты
	               |ГДЕ
	               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура В(&СписокНоменклатуры)
	               |	И ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Организация;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции	


// Получить остатки по конкретной номенклатуре и конкретному складу

Функция ПолучитьОстатокТовараПоСкладу(врНоменклатура, врСклад, врДата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 		  врДата);
	Запрос.УстановитьПараметр("Номенклатура", врНоменклатура);
	Запрос.УстановитьПараметр("Склад", 		  врСклад);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад) КАК СвободныеОстаткиОстатки";
				   
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();  
		Если Выборка.Резерв >= 0 Тогда
			Возврат Выборка.Остаток - Выборка.Резерв;
		Иначе
			Возврат Выборка.Остаток;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции	


// Записать в лог.файл данные о заказе 

Процедура ЗаписатьДанныеОЗаказеВЛогФайл(врЗаказ)
	
	Попытка
	
		// Шапка
	
		ТекстИнформация = "Организация: """ + Строка(врЗаказ.Организация) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Партнер: """ + Строка(врЗаказ.Партнер) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Контрагент: """ + Строка(врЗаказ.Контрагент) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Соглашение: """ + Строка(врЗаказ.Соглашение) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Склад: """ + Строка(врЗаказ.Склад) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Договор: """ + Строка(врЗаказ.Договор) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Статус: """ + Строка(врЗаказ.Статус) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Приоритет: """ + Строка(врЗаказ.Приоритет) + """";
		ТекстИнформация = ТекстИнформация + "; " + "Сделка: """ + Строка(врЗаказ.Сделка) + """";
		
		ТекстИнформация = ТекстИнформация + "; " + "Количество строк товаров: """ + Строка(врЗаказ.Товары.Количество()) + """";
		
		ЗаписатьОшибку1СвЛогФайл("Ошибка записи заказа", "ШАПКА: " + ТекстИнформация);
	
		// Табличная часть
	
		ТекстИнформация = "";
		
		Для Каждого ТекТовар Из врЗаказ.Товары Цикл
			
			ТекстИнформация = ?(ПустаяСтрока(ТекстИнформация), "", "; ") + "[" + Строка(ТекТовар.Номенклатура.ВидНоменклатуры) + "] " + Строка(ТекТовар.Номенклатура) + " = " + Строка(ТекТовар.Количество);
			
		КонецЦикла;	
		
		ЗаписатьОшибку1СвЛогФайл("Ошибка записи заказа", "ТАБ.ЧАСТЬ: " + ТекстИнформация);
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Ошибка записи заказа", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки	
	
КонецПроцедуры	


// Рассчет скидок по заявке

Процедура РассчитатьСкидки(Заявка)
	
	Структура=Новый Структура;
	Структура.Вставить("ВосстанавливатьУправляемыеСкидки",Истина);
	Структура.Вставить("ПрименятьКОбъекту",Истина);
	Структура.Вставить("ТолькоПредварительныйРасчет",Ложь);
	Структура.Вставить("УправляемыеСкидки",Новый СписокЗначений);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Заявка, Структура);
	
КонецПроцедуры


// Invoice.txt, InvoiceProduct.txt 


Процедура ЗагрузитьДокументы_All_In_ТОП17(КоличествоЗаявокВСинхронизации)
	
	Событие1С = "Импорт документов";	
		
	Файл = Новый Файл(каталогЗагрузки + "\Invoice.txt");
	Если Файл.Существует() = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		МассивЗаказов.Очистить();
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Очистка СТОП-ЛИСТА", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	файл = Новый ТекстовыйДокумент;
	файл.Прочитать(каталогЗагрузки + "\Invoice.txt", КодировкаТекста.ANSI);	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Обрабатываем " + каталогЗагрузки + "Invoice.txt");
	
	файлВыгрузки   = Новый ТекстовыйДокумент;
	файлВыгрузкиТЧ = Новый ТекстовыйДокумент;
	
	КЧ2		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
	КЧ3		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
	КЧ4		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
	КС20 	= ПолучитьОписаниеТиповСтроки(20);
	КС36 	= ПолучитьОписаниеТиповСтроки(36);
	КС40 	= ПолучитьОписаниеТиповСтроки(40);
	КС100 	= ПолучитьОписаниеТиповСтроки(100);
	
	ТЗ = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТЗ = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНом = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ОписаниеТиповЕИ = Новый ОписаниеТипов(Массив);
	
	МассивГУИДЗаказов = Новый Массив;
	
	Счета = Новый ТаблицаЗначений;
	
	Счета.Колонки.Добавить("DeviceID",				КС20);
	Счета.Колонки.Добавить("InvoiceID",				КС40);
	Счета.Колонки.Добавить("InvoiceRefID",			КС36);
	Счета.Колонки.Добавить("InvoiceTypeRefID",		КС20);
	Счета.Колонки.Добавить("ParentInvoiceID",		КС20);
	Счета.Колонки.Добавить("ParentInvoiceRefID",	КС36);
	Счета.Колонки.Добавить("AgentRefID",			КС36);
	Счета.Колонки.Добавить("ShopRefID",				КС40);
	Счета.Колонки.Добавить("VisitID",				КС36);
	Счета.Колонки.Добавить("InvoiceDateTime",		КС20);
	Счета.Колонки.Добавить("InvoiceNo",				КС20);
	Счета.Колонки.Добавить("InvoiceAmount",			КЧ2);
	Счета.Колонки.Добавить("AmountPaID",			КЧ2);
	Счета.Колонки.Добавить("DeliveryFromDateTime",	КС20);
	Счета.Колонки.Добавить("DeliveryThruDateTime",	КС20);
	Счета.Колонки.Добавить("IsConfidential",		КС20); 
	Счета.Колонки.Добавить("Note",					КС100);	
	Счета.Колонки.Добавить("SellerRefID",			КС100);
	Счета.Колонки.Добавить("PriceTypeRefID",		КС36); 
	Счета.Колонки.Добавить("InvoiceTypeCode",		КС36); 
	Счета.Колонки.Добавить("InvoiceRequired",		КС36); 	
	Счета.Колонки.Добавить("ShopID",				КС36);
	Счета.Колонки.Добавить("GpsLatitude",			КС36);
	Счета.Колонки.Добавить("GpsLongitude",			КС36);
	Счета.Колонки.Добавить("GpsHDOP",				КС36);
	Счета.Колонки.Добавить("GpsIsVisited",			КС36);
	Счета.Колонки.Добавить("InvoiceWeight",			КС36);
	Счета.Колонки.Добавить("InvoiceStatusRefID",	КС36);
	Счета.Колонки.Добавить("StockRefID",			КС36);
	Счета.Колонки.Добавить("InvoiceInitDateTime",   КС20);
	//kirich 13.08.2018
//	Счета.Колонки.Добаивть("ReturnForm",			КЧ2);
	//
	Счета.Колонки.Добавить("IsTTN",					КС36);
	Счета.Колонки.Добавить("IsInvoice",				КС36);
	Счета.Колонки.Добавить("WithouPay",				КС20);	
	Счета.Колонки.Добавить("Return",				КС20);
	Счета.Колонки.Добавить("Petrov",				КС20);
	Счета.Колонки.Добавить("PaymentDate",			КС20);
	Счета.Колонки.Добавить("ТЧ",					ОписаниеТиповТЗ);
	Счета.Колонки.Добавить("Товары",				ОписаниеТиповТЗ);
	
	КоличествоЗаписей = Число(файл.ПолучитьСтроку(1));   
	
	ЗагружатьТЧ = 0;
	Для сч = 3 По КоличествоЗаписей + 2 Цикл
		
		СписокАтрибутов = Split(файл.ПолучитьСтроку(сч), Символы.Таб);
		
		Если СписокАтрибутов.Количество() < 34 Тогда
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена структура файла Invoice.txt!");
			ФайлОшибок.ДобавитьСтроку("Нарушена структура файла Invoice.txt!");
			error = 1;
			Возврат;
			
		Иначе
			
			НоваяСтрока = Счета.Добавить();
			
			НоваяСтрока.DeviceID 				= СписокАтрибутов[0].Значение; //Для связи
			НоваяСтрока.InvoiceID				= СписокАтрибутов[1].Значение;
			
			// НоваяСтрока.InvoiceRefID 			= СписокАтрибутов[2].Значение;
			НоваяСтрока.InvoiceRefID 			= ПолучитьНомерОтветаНаЗаказ();
			
			НоваяСтрока.InvoiceTypeRefID 		= СписокАтрибутов[3].Значение;
			НоваяСтрока.ParentInvoiceID			= СписокАтрибутов[4].Значение; //Для связи
			НоваяСтрока.ParentInvoiceRefID		= СписокАтрибутов[5].Значение;
			НоваяСтрока.AgentRefID 				= СписокАтрибутов[6].Значение;
			НоваяСтрока.ShopRefID 				= СписокАтрибутов[7].Значение;
			НоваяСтрока.VisitID 				= СписокАтрибутов[8].Значение;
			НоваяСтрока.InvoiceDateTime			= СписокАтрибутов[9].Значение;			
			НоваяСтрока.InvoiceNo				= СписокАтрибутов[10].Значение;
			НоваяСтрока.InvoiceAmount			= СписокАтрибутов[11].Значение;
			НоваяСтрока.AmountPaid				= СписокАтрибутов[12].Значение;
			НоваяСтрока.DeliveryFromDateTime	= СписокАтрибутов[13].Значение;
			НоваяСтрока.DeliveryThruDateTime	= СписокАтрибутов[14].Значение;
			НоваяСтрока.IsConfidential			= СписокАтрибутов[15].Значение; 
			НоваяСтрока.Note					= СписокАтрибутов[16].Значение;
			НоваяСтрока.SellerRefID				= СписокАтрибутов[17].Значение;
			НоваяСтрока.PriceTypeRefID	 		= СписокАтрибутов[18].Значение;
			НоваяСтрока.InvoiceTypeCode	 		= СписокАтрибутов[19].Значение;
			НоваяСтрока.InvoiceRequired	 		= СписокАтрибутов[20].Значение;
			НоваяСтрока.ShopID					= СписокАтрибутов[21].Значение;
			НоваяСтрока.GpsLatitude				= СписокАтрибутов[22].Значение;
			НоваяСтрока.GpsLongitude			= СписокАтрибутов[23].Значение;
			НоваяСтрока.GpsHDOP					= СписокАтрибутов[24].Значение;
			НоваяСтрока.GpsIsVisited			= СписокАтрибутов[25].Значение;
			НоваяСтрока.InvoiceWeight			= СписокАтрибутов[26].Значение;
			НоваяСтрока.InvoiceStatusRefID		= СписокАтрибутов[27].Значение;
			НоваяСтрока.StockRefID				= СписокАтрибутов[28].Значение;
			НоваяСтрока.InvoiceInitDateTime		= СписокАтрибутов[29].Значение;
			//kirich 13.08.2018
//			НоваяСтрока.ReturnForm 				= СписокАтрибутов[30].Значение;
			//список сдвинется на 1 значение из-за добавления причины возврата
//			НоваяСтрока.IsTTN					= СписокАтрибутов[31].Значение;//30].Значение;
//			НоваяСтрока.IsInvoice				= СписокАтрибутов[32].Значение;//31].Значение;
//			НоваяСтрока.WithouPay				= СписокАтрибутов[33].Значение;//32].Значение;
//			НоваяСтрока.Return					= СписокАтрибутов[34].Значение;//33].Значение;
//			НоваяСтрока.Petrov					= СписокАтрибутов[35].Значение;//34].Значение;
//			НоваяСтрока.PaymentDate				= СписокАтрибутов[36].Значение;//35].Значение;
			НоваяСтрока.IsTTN					= СписокАтрибутов[31].Значение;
			НоваяСтрока.IsInvoice				= СписокАтрибутов[30].Значение;
			Если ИдКПК <> "DevInsider" Тогда
				Если НЕ ПустаяСтрока(НоваяСтрока.IsInvoice) Тогда
					НоваяСтрока.IsTTN = "True";
				КонецЕсли;	
			КонецЕсли;	
			НоваяСтрока.WithouPay				= СписокАтрибутов[32].Значение;
			НоваяСтрока.Return					= СписокАтрибутов[33].Значение;
			НоваяСтрока.Petrov					= СписокАтрибутов[34].Значение;
			НоваяСтрока.PaymentDate				= СписокАтрибутов[35].Значение;
			
			МассивГУИДЗаказов.Добавить(НоваяСтрока.InvoiceID);
			
	//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТЕСТ ОТВЕТ: " + Строка(НоваяСтрока.InvoiceRefID));
			
			ТЧСчета = Новый ТаблицаЗначений;               
			ТЧСчета.Колонки.Добавить("ProductRefID",		КС100);
			ТЧСчета.Колонки.Добавить("Price",				КЧ2);
			ТЧСчета.Колонки.Добавить("Volume",				КЧ3);
			ТЧСчета.Колонки.Добавить("VatRate",				КС20);
			ТЧСчета.Колонки.Добавить("DiscountRate",		КЧ4);
			ТЧСчета.Колонки.Добавить("DiscountAmount",  	КЧ3);
			ТЧСчета.Колонки.Добавить("MeasureUnitRefID",	КС20);
			
			НоваяСтрока.ТЧ = ТЧСчета;
			
			ТЧТовары = Новый ТаблицаЗначений;
			ТЧТовары.Колонки.Добавить("Номенклатура",		ОписаниеТиповНом);
			ТЧТовары.Колонки.Добавить("Цена",				КЧ2);
			ТЧТовары.Колонки.Добавить("Количество",			КЧ3);
			ТЧТовары.Колонки.Добавить("ЕдиницаИзмерения",	ОписаниеТиповЕИ);
			ТЧТовары.Колонки.Добавить("ПричинаОтказа",		КС20);
			
			НоваяСтрока.Товары = ТЧТовары;
			
			// InvoiceTypeRefID <> 12
			
			Если Число(СписокАтрибутов[3].Значение) <> 12 Тогда 
				ЗагружатьТЧ = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЗагружатьТЧ = 1 Тогда
		
		Файл = Новый Файл(каталогЗагрузки + "\InvoiceProduct.txt");
		Если Файл.Существует() = ЛОЖЬ Тогда
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найден файл для импорта: InvoiceProduct.txt!");
			ФайлОшибок.ДобавитьСтроку("Не найден файл для импорта: InvoiceProduct.txt!");
			error = 1;
			Возврат;
		КонецЕсли;	
		
		файл = Новый ТекстовыйДокумент;
		файл.Прочитать(каталогЗагрузки + "\InvoiceProduct.txt", КодировкаТекста.ANSI);	
		
		КоличествоЗаписей = Число(файл.ПолучитьСтроку(1));                     
		Для сч = 3 По КоличествоЗаписей+2 Цикл //vop поставил 2 вместо 1
			
			СписокАтрибутов = Split(файл.ПолучитьСтроку(сч),Символы.Таб);
			
			Если СписокАтрибутов.Количество() < 10 Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена структура файла InvoiceProduct.txt!");
				ФайлОшибок.ДобавитьСтроку("Нарушена структура файла InvoiceProduct.txt!");
				error = 1;
				Возврат;
			КонецЕсли;
			
			InvoiceID 	 = СписокАтрибутов[2].Значение;  //Для связи
			СтрокаПоиска = Счета.Найти(InvoiceID,"InvoiceID");
			Если СтрокаПоиска = Неопределено Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена связь файла Invoice.txt и InvoiceProduct.txt! InvoiceID = " + Строка(InvoiceID));
				ФайлОшибок.ДобавитьСтроку("Нарушена связь файла Invoice.txt и InvoiceProduct.txt! InvoiceID = " + InvoiceID);
				//Сообщить("Нарушена связь файла Invoice.txt и InvoiceProduct.txt!","!!!");
				error = 1;
				Возврат;
			КонецЕсли;   
			
			ТЧСчета = СтрокаПоиска.ТЧ;
			
			НоваяСтрока = ТЧСчета.Добавить();
			НоваяСтрока.ProductRefID		= СписокАтрибутов[3].Значение;
			НоваяСтрока.Price 				= СписокАтрибутов[4].Значение;
			НоваяСтрока.Volume 				= СписокАтрибутов[5].Значение;
			НоваяСтрока.VatRate 			= СписокАтрибутов[6].Значение;
			НоваяСтрока.DiscountAmount		= СписокАтрибутов[7].Значение;
			НоваяСтрока.DiscountRate 		= СписокАтрибутов[8].Значение;
			НоваяСтрока.MeasureUnitRefID	= СписокАтрибутов[9].Значение;
			
			//НоваяСтрока.ProductRefID = СтрЗаменить(НоваяСтрока.ProductRefID, "_T50", "");
			
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		//Если ЭтоИнвойсНашейТочки() Тогда
			БезНДС_МассивОрганизацийТомск = ПродажиБезНДС_МассивОрганизацийТомск();
			БезНДС_МассивПоставщиковИскл  = ПродажиБезНДС_МассивПоставщиковИскл();
			ПродажиБезНДС_ОбработатьТаблицуЗагрузки(Счета);
		//КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПродажиБезНДС_ОбработатьТаблицуЗагрузки", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Агенты 		 = Справочники.Пользователи;
	Контрагенты  = Справочники.Партнеры;
	Договоры 	 = Справочники.ДоговорыКонтрагентов;
	Единицы		 = Справочники.ЕдиницыИзмерения;
	Номенклатуры = Справочники.Номенклатура;
	ТипыЦен 	 = Справочники.ВидыЦен;
	
	Для Каждого СтрокаТаблицыСчета Из Счета Цикл
		
		Попытка
			Если Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 11 Тогда
				КоличествоЗаявокВСинхронизации = КоличествоЗаявокВСинхронизации + 1;				
			КонецЕсли;	
		Исключение
			ЗаписатьОшибку1СвЛогФайл("КоличествоЗаявокВСинхронизации", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
		//Попытка
		//	Если ДокументУжеЗагруженВБазу(СтрокаТаблицыСчета.InvoiceID) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//Исключение
		//	ЗаписатьОшибку1СвЛогФайл("Проверка на дубли (ДОКУМЕНТЫ)", "Исключение", ИнформацияОбОшибке(), Истина);
		//КонецПопытки;	
		
		ЭтоАварийныйЗаказ = Ложь;
		СписокТоваровАварийногоЗаказа = Новый Массив;
		
		Попытка
			
			Если ДокументУжеЗагруженВБазу(СтрокаТаблицыСчета.InvoiceID) Тогда
				
				СтруктураАварийногоЗаказа = ПолучитьАварийноЗавершенныйЗаказ(ИдКПК, МассивГУИДЗаказов);
				
				Попытка
					
					Если СтруктураАварийногоЗаказа <> Неопределено Тогда
						
						Если СтруктураАварийногоЗаказа.ID = СтрокаТаблицыСчета.InvoiceID Тогда
							
							ЭтоАварийныйЗаказ = Истина;
							Для Каждого ТекТоварАварийногоЗаказа Из СтруктураАварийногоЗаказа.Товары Цикл
								СписокТоваровАварийногоЗаказа.Добавить(ТекТоварАварийногоЗаказа);
							КонецЦикла;	
							
							ЗаписатьОшибку1СвЛогФайл_Alert("Загрузка документов ТОП-17", "Вид документа = " + СокрЛП(СтрокаТаблицыСчета.InvoiceTypeRefID) + "; ID = " + СтрокаТаблицыСчета.InvoiceID);
							
						//	Продолжить;
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;	
						
					Иначе
						
						Продолжить;
						
					КонецЕсли;
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл_Alert("Загрузка документов Кузбасс", "Исключение", ИнформацияОбОшибке(), Истина);
					Продолжить;
				КонецПопытки;				
				
			КонецЕсли;
			
		Исключение
			ЗаписатьОшибку1СвЛогФайл("Проверка на дубли (ДОКУМЕНТЫ)", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
		
		// Агент
		
		Агент = ТекАгент;
		
		// Заказ на борт агента
		
		Попытка
			
			Если СокрЛП(СтрокаТаблицыСчета.ShopRefID) = "TT_" + ТекАгент.УникальныйИдентификатор() Тогда
				
				Массив = Новый Массив;
				Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
				ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);				
				
				ТЧ_ЗаказБорта = Новый ТаблицаЗначений;
				ТЧ_ЗаказБорта.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатуры);
				ТЧ_ЗаказБорта.Колонки.Добавить("Количество",   КЧ3);
				
				Для Каждого СтрокаТЧ Из СтрокаТаблицыСчета.ТЧ Цикл 
					
					Попытка
						
						GUID = СоздатьУникальныйИдентификатор(СтрокаТЧ.ProductRefID);
						Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
						Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
							ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + СтрокаТЧ.ProductRefID + "'");
							error = 1; 
							Возврат;
						КонецЕсли;	
						
						Если ИмяСервераМА = "Region" Тогда
													
							НоваяСтрокаТЧ				= ТЧ_ЗаказБорта.Добавить();				
							НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
							НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
							
						ИначеЕсли ЭтоТоварБорта(Номенклатура) Тогда
							
							НоваяСтрокаТЧ				= ТЧ_ЗаказБорта.Добавить();				
							НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
							НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
							
						КонецЕсли;	
							
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(СтрокаТЧ.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
					
				КонецЦикла;
				
				СоздатьПеремещениеНаБортАгента(ТекАгент, ТЧ_ЗаказБорта, СокрЛП(СтрокаТаблицыСчета.Note)); 
				
				Продолжить;
				
			КонецЕсли;	
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Заказ на БОРТ АГЕНТА", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;			
						
		// Партнер
			
		Попытка 
				
			Партнер = ПолучитьПартнераПоГУИД(СокрЛП(СтрокаТаблицыСчета.ShopRefID));
				
			Если Партнер = Неопределено Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыСчета.ShopRefID) + "'");
				ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыСчета.ShopRefID + "'");
				error = 1; 
				Возврат;
			КонецЕсли;	
				
		Исключение	
				
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОШИБКА ОПРЕДЕЛЕНИЯ ПАРТНЕРА!!!!");
			
			GUID = СоздатьУникальныйИдентификатор(СтрокаТаблицыСчета.ShopRefID);
			Партнер = Контрагенты.ПолучитьСсылку(GUID);
			Если Партнер.ПолучитьОбъект() = Неопределено Тогда 
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыСчета.ShopRefID) + "'");
				ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыСчета.ShopRefID + "'");
				error = 1; 
				Возврат;
			КонецЕсли;
				
		КонецПопытки;	
				
		// Борт агента
		
		ЭтоБортБелый = Ложь;
		
		Склад_БортАгента = Справочники.Склады.ПустаяСсылка();
		
		Попытка 
			
			Если (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKL_") ИЛИ (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKW_") ИЛИ (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKB_") Тогда
			
				Склад_БортАгента = ПолучитьБортАгента(ТекАгент);
				
				Если Склад_БортАгента = Справочники.Склады.ПустаяСсылка() Тогда
					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Пустой склад борта агента = "  + Строка(СтрокаТаблицыСчета.StockRefID));
					Продолжить;
				КонецЕсли;	
				
				Если Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKW_" Тогда
					ЭтоБортБелый = Истина;
				КонецЕсли;	
				
			КонецЕсли;	
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Определение борта (склада) агента", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;			
			
		// Организация
		
		Если ПустаяСтрока(СтрокаТаблицыСчета.SellerRefID) Тогда
			
			Организация = ОсновнаяФирма;
			
		Иначе	
		
			Попытка
				
				Организация = ПолучитьОрганизациюПоГУИД(СтрокаТаблицыСчета.SellerRefID);
				Если Организация = Неопределено Тогда
					Организация = ОсновнаяФирма;
				КонецЕсли;	
				
			Исключение
				Организация = ОсновнаяФирма;
			КонецПопытки;	
			
		КонецЕсли;	
		
		Если ЭтоАварийныйЗаказ Тогда
			ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, "Загружаем документы для " + СтрокаТаблицыСчета.InvoiceID);
		КонецЕсли;		
				
		// ВОЗВРАТ
		
		Если Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 21 Тогда 
			
			Если ЭтоАварийныйЗаказ Тогда 
				Продолжить;
			КонецЕсли;	
			
			//Если Не ЭтоТестовыйАгент(ТекАгент) Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;	
			
			Попытка
								
				НомерВПакете = 0;
				
				// Организация
				
				Организация = ОсновнаяФирма;
				
				// Соглашение
				
				Попытка
					врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент);
					Соглашение = врСоглашениеСКлиентом.Соглашение;
					//Если Соглашение.Организация = оргРИФПлюс Тогда
					//	Организация = оргРИФПлюс;
					//КонецЕсли;	
					Если ЗначениеЗаполнено(Соглашение.Организация) Тогда
						Организация = Соглашение.Организация;
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка опеределения Соглашения при создании Возврата!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				 Если СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0 Тогда
					Организация = оргТОП_17;
				КонецЕсли;	
				
				// Список номенклатуры для возврата
				
				Массив = Новый Массив;
				Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
				ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);
			
				ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
				ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатуры);
				ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",	  КЧ3);
				ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",		  КЧ2);
				
				Для Каждого СтрокаТЧ Из СтрокаТаблицыСчета.ТЧ Цикл 
					
					Попытка
						
						GUID = СоздатьУникальныйИдентификатор(СтрокаТЧ.ProductRefID);
						Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
						Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
							ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + СтрокаТЧ.ProductRefID + "'");
							error = 1; 
							Возврат;
						КонецЕсли;	
						
						НоваяСтрокаТЧ				= ТЧСВидомНоменклатуры.Добавить();				
						НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
						НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
						НоваяСтрокаТЧ.Цена			= Число(СтрокаТЧ.Price);					
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(СтрокаТЧ.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
						
				КонецЦикла;
				
				Попытка
					Если ТЧСВидомНоменклатуры.Количество() = 0 Тогда
						Логирование_Ошибка_ОтсутствуютТоварыДляЗагрузки("ВОЗВРАТ", Партнер, СтрокаТаблицыСчета.InvoiceAmount);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Обработка пустого списка товаров", ИнформацияОбОшибке(), Истина);
				КонецПопытки;					
				
				Попытка
					
					аян_СинхронизацияСервер.Вовраты_ОбработатьТаблицуВозвратов(ТЧСВидомНоменклатуры, ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ИмяСервераМА);
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при обработке таблицы возвратов!", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				// Группировка номенклатуры запросом
			
				МассивЧерныеВидыНоменклатуры = Новый Массив;
				МассивЧерныеВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее", Истина));
				МассивЧерныеВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар ДУБЛЬ",    Истина));												
				
				Запрос = Новый Запрос;
			
				Запрос.УстановитьПараметр("ТЧ", 						  ТЧСВидомНоменклатуры);	
				Запрос.УстановитьПараметр("ТоварыБезНДС",				  ТоварыБезНДС);	
				Запрос.УстановитьПараметр("МногооборотнаяТара",           Справочники.ВидыНоменклатуры.НайтиПоНаименованию("МногооборотнаяТара", Истина));
				Запрос.УстановитьПараметр("Кега", "Кега %");
				Запрос.УстановитьПараметр("МассивЧерныеВидыНоменклатуры", МассивЧерныеВидыНоменклатуры);
				Запрос.УстановитьПараметр("Джолики",			   		  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики", Истина));						
				Запрос.УстановитьПараметр("ОрганизацияВЧерную", 		  ПолучитьОрганизациюВЧерную(ТекАгент));
				Запрос.УстановитьПараметр("Организация",                  Организация);
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
				               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество,
				               |	ВЫРАЗИТЬ(ТЧ.Цена КАК ЧИСЛО) КАК Цена
				               |ПОМЕСТИТЬ ВрТ
				               |ИЗ
				               |	&ТЧ КАК ТЧ
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ВЫБОР
							   //|		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ (&ТоварыБезНДС)
							   //|			ТОГДА ""_ТоварыБезНДС_""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики
				               |			ТОГДА ""_Джолики_""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры В (&МассивЧерныеВидыНоменклатуры)
				               |			ТОГДА &ОрганизацияВЧерную
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
				               |			ТОГДА ""ВозвратАлкоголя""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &МногооборотнаяТара
				               |			ТОГДА ВЫБОР
				               |					КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).Наименование ПОДОБНО &Кега
				               |						ТОГДА ""МногооборотнаяТара""
				               |					ИНАЧЕ ""Оборудование""
				               |				КОНЕЦ
				               |		ИНАЧЕ &Организация
				               |	КОНЕЦ КАК Организация,
				               |	ВрТ.Номенклатура,
				               |	ВрТ.ВидНоменклатуры,
				               |	ВрТ.Количество,
				               |	ВрТ.Цена
				               |ИЗ
				               |	ВрТ КАК ВрТ
				               |ИТОГИ ПО
				               |	Организация
				               |АВТОУПОРЯДОЧИВАНИЕ";
											   
				// Формирование документов
				
				МассивИсключений = Новый Массив;
				
				врСоглашРИФПлюс = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
								
				Попытка
					врСоглашениеСКлиентом = ПолучитьСоглашениеРИФПлюс(Партнер);
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "СОГЛАШЕНИЕ РИФ+ для ВОЗВРАТА", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
								
				ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
				Пока ВыборкаОрганизации.Следующий() Цикл
					
					НомерВПакете = НомерВПакете + 1;
			
					ВозвратОтКлиента = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
					
					// Дата
					
					ВозвратОтКлиента.Дата                   = ТекущаяДата();
					
					Если ИдКПК <> "DevInsider" Тогда
						Если Не ЭтоИнвойсНашейТочки() Тогда
							ВозвратОтКлиента.Дата = ДатаДоставкиПоМатрицеМаршрута(Партнер);
						КонецЕсли;							
					КонецЕсли;										
					
					ВозвратОтКлиента.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;			
					ВозвратОтКлиента.Валюта					= Константы.ВалютаРегламентированногоУчета.Получить();
				
					ВозвратОтКлиента.Партнер 				= Партнер;
					ВозвратОтКлиента.Контрагент             = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ВозвратОтКлиента.Партнер);
					ВозвратОтКлиента.Соглашение 		    = Соглашение;
								
					ВозвратОтКлиента.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(ВозвратОтКлиента.Организация, ОсновнойСклад, ВозвратОтКлиента.Дата);			
					ВозвратОтКлиента.Менеджер				= ТекАгент;
					ВозвратОтКлиента.Комментарий			= "Загружено автоматически " + Строка(ТекущаяДата()) + ". Комментарий: " + СокрЛП(СтрокаТаблицыСчета.Note);
					
					Возврат_оргРИФПлюс                      = Справочники.Организации.НайтиПоНаименованию("РИФ+ ООО", 	    Истина);
					Возврат_СкладРИФПлюс                    = Справочники.Склады.НайтиПоНаименованию("Томск РИФ+ общий",    Истина);					
					
					// Организация и Склад 					
					
					Если ВыборкаОрганизации.Организация = "_ТоварыБезНДС_" Тогда
						
						ВозвратОтКлиента.Организация		= оргРИФПлюс;
					//	ВозвратОтКлиента.Склад 				= СкладРИФПлюс;		
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);	
						
					ИначеЕсли ВыборкаОрганизации.Организация = "_Джолики_" Тогда
						
						ВозвратОтКлиента.Организация		= оргТОП_17;
					//	ВозвратОтКлиента.Склад 				= СкладТОП_17;
						ВозвратОтКлиента.Склад 				= СкладБракТомскАТОбщий;
										
					ИначеЕсли ВыборкаОрганизации.Организация = "ВозвратАлкоголя" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "МногооборотнаяТара" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						//Если Организация = оргРИФПлюс Тогда
						//	ВозвратОтКлиента.Склад = СкладРИФПлюс;
						//Иначе	
						//	ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Пиво", Истина); 
						//КонецЕсли;	
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе	
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина); 
						КонецЕсли;	
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "Оборудование" Тогда	
						
						ВозвратОтКлиента.Организация = Организация;
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Оборудование новый", Истина); 
						КонецЕсли;	
						
					Иначе	
						
						ВозвратОтКлиента.Организация		= ВыборкаОрганизации.Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
						Если ВозвратОтКлиента.Организация = оргАТ_Логистик Тогда
							ВозвратОтКлиента.Организация = оргГалактика;
						КонецЕсли;							
						
					КонецЕсли;											
					
					// Табличная часть
					
				    ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
					Пока ВыборкаНоменклатура.Следующий() Цикл
			
						НоваяСтрока						= ВозвратОтКлиента.Товары.Добавить();				
						НоваяСтрока.Номенклатура		= ВыборкаНоменклатура.Номенклатура;
	
						НоваяСтрока.Количество			= Число(ВыборкаНоменклатура.Количество);
						НоваяСтрока.КоличествоУпаковок	= Число(ВыборкаНоменклатура.Количество);
						НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
						
						Попытка
							Если НоваяСтрока.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
								НоваяСтрока.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура, ВозвратОтКлиента.Соглашение.ВидЦен);
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Определение цены тары. Исключение!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
						СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
							
						КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);					
						
					КонецЦикла;
										
					ВозвратОтКлиента.ЗаполнитьУсловияПродажПоCоглашению();
					
					Если ВыборкаОрганизации.Организация = "_ТоварыБезНДС_" Тогда
						
						ВозвратОтКлиента.Организация		= оргРИФПлюс;
					//	ВозвратОтКлиента.Склад 				= СкладРИФПлюс;	
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);	
						ВозвратОтКлиента.Соглашение         = врСоглашРИФПлюс;
						
					ИначеЕсли ВыборкаОрганизации.Организация = "_Джолики_" Тогда
						
						ВозвратОтКлиента.Организация		= оргТОП_17;
					//	ВозвратОтКлиента.Склад 				= СкладТОП_17;
						ВозвратОтКлиента.Склад 				= СкладБракТомскАТОбщий;
										
					ИначеЕсли ВыборкаОрганизации.Организация = "ВозвратАлкоголя" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						Если ВозвратОтКлиента.Организация = оргРИФПлюс Тогда
							ВозвратОтКлиента.Соглашение = врСоглашРИФПлюс;
						КонецЕсли;	
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "МногооборотнаяТара" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						//Если Организация = оргРИФПлюс Тогда
						//	ВозвратОтКлиента.Склад = СкладРИФПлюс;
						//Иначе	
						//	ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Пиво", Истина); 
						//КонецЕсли;	
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
                        Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина); 
						КонецЕсли;	
						
						ВозвратОтКлиента.ВозвратПереданнойМногооборотнойТары = Истина;
						ВозвратОтКлиента.ПредусмотренЗалогЗаТару             = Истина;
						
						Если ВозвратОтКлиента.Организация = оргРИФПлюс Тогда
							ВозвратОтКлиента.Соглашение = врСоглашРИФПлюс;
						КонецЕсли;							
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "Оборудование" Тогда	
						
						ВозвратОтКлиента.Организация = Организация;
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Оборудование новый", Истина); 
						КонецЕсли;							
						
						ВозвратОтКлиента.ВозвратПереданнойМногооборотнойТары = Истина;
						ВозвратОтКлиента.ПредусмотренЗалогЗаТару             = Истина;						
						
						Если ВозвратОтКлиента.Организация = оргРИФПлюс Тогда
							ВозвратОтКлиента.Соглашение = врСоглашРИФПлюс;
						КонецЕсли;							
												
					Иначе	
						
						ВозвратОтКлиента.Организация		= ВыборкаОрганизации.Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
						Если ВозвратОтКлиента.Организация = оргРИФПлюс Тогда
							ВозвратОтКлиента.Соглашение = врСоглашРИФПлюс;
						КонецЕсли;	
						
						Если ВозвратОтКлиента.Организация = оргАТ_Логистик Тогда
							ВозвратОтКлиента.Организация = оргГалактика;
						КонецЕсли;							
						
					КонецЕсли;																
														
					ПродажиСервер.ЗаполнитьРеализацииИЦены(ВозвратОтКлиента, "Товары");
					
					Если (ВыборкаОрганизации.Организация = "Оборудование") ИЛИ (ВыборкаОрганизации.Организация = "МногооборотнаяТара") Тогда	
					
						Попытка
						
							Для Каждого ТекТоварВозврата Из ВозвратОтКлиента.Товары Цикл
								
								ТекТоварВозврата.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ТекТоварВозврата.Номенклатура, ВозвратОтКлиента.Соглашение.ВидЦен);
						
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
									
								КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварВозврата, СтруктураДействий, КэшированныеЗначения);					
								
							КонецЦикла;	
							
						Исключение
								
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Установка цен тары. Исключение!", ИнформацияОбОшибке(), Истина);

						КонецПопытки;
						
					КонецЕсли;	
					
					// Определяем реальную организацию возврата
					
					//Попытка
					//	
					//	Если ВозвратОтКлиента.Склад <> Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина) Тогда 
					//	
					//		ФлагПустыеЦены = Истина;
					//		Для Каждого ТекСтрока Из ВозвратОтКлиента.Товары Цикл
					//			Если ЗначениеЗаполнено(ТекСтрока.ДокументРеализации) Тогда
					//				ФлагПустыеЦены = Ложь;
					//				Прервать;
					//			КонецЕсли;	
					//		КонецЦикла;	
					//		
					//		Если ФлагПустыеЦены Тогда
					//			
					//			ОргВозврата = ОпределитьОрганизациюВозврата(ВозвратОтКлиента);
					//			Если ЗначениеЗаполнено(ОргВозврата) Тогда
					//				ВозвратОтКлиента.Организация = ОргВозврата;
					//				Если ВозвратОтКлиента.Организация = оргРИФПлюс Тогда
					//					ВозвратОтКлиента.Соглашение = врСоглашРИФПлюс;
					//				КонецЕсли;										
					//				ПродажиСервер.ЗаполнитьРеализацииИЦены(ВозвратОтКлиента, "Товары");
					//			КонецЕсли;	
					//			
					//		КонецЕсли;
					//		
					//	КонецЕсли;	
					//	
					//Исключение
					//	
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при определении Организации Возврата", ИнформацияОбОшибке(), Истина);
					//	
					//КонецПопытки;	
					
					Попытка
						
						Для Каждого ТекТоварВозврата Из ВозвратОтКлиента.Товары Цикл
							
							Если ТекТоварВозврата.Цена = 0 Тогда
							
								ТекТоварВозврата.Цена = Товары_ПоследняяЦенаПродажиТовараВТочку(ВозвратОтКлиента.Партнер, ТекТоварВозврата.Номенклатура);
							
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
								
								КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварВозврата, СтруктураДействий, КэшированныеЗначения);					
								
							КонецЕсли;	
							
						КонецЦикла;	
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Установка последних цен продажи. Исключение!", ИнформацияОбОшибке(), Истина);							
					КонецПопытки;						
										
					//// Проверяем на отказанные позиции
					//
					//ЛогОтветов = Новый ЗаписьТекста(РабочийКаталог + "\" + "LogAnswers" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
					//
					//СчСтрок = ВозвратОтКлиента.Товары.Количество() - 1;
					//Пока СчСтрок >= 0 Цикл
					//	ТекСтрока = ВозвратОтКлиента.Товары[СчСтрок];
					//	Если Не ЗначениеЗаполнено(ТекСтрока.ДокументРеализации) Тогда
					//		ЛогОтветов.ЗаписатьСтроку("ВОЗВРАТ ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + СокрЛП(ТекСтрока.Номенклатура) + " ## Количество: " + Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ="));	
					//		ВозвратОтКлиента.Комментарий = ВозвратОтКлиента.Комментарий + Символы.ПС + "Отказ: " + СокрЛП(ТекСтрока.Номенклатура) + " ## Количество: " + Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ=");
					//		ВозвратОтКлиента.Товары.Удалить(ТекСтрока);
					//	КонецЕсли;
					//	СчСтрок = СчСтрок - 1;
					//КонецЦикла;						
					//
					//ЛогОтветов.Закрыть();
					//
					//Если ВозвратОтКлиента.Товары.Количество() = 0 Тогда
					//	Продолжить;
					//КонецЕсли;						
				
					ВозвратОтКлиента.алкПунктРазгрузки = ВозвратОтКлиента.Партнер.алкОсновнойПунктРазгрузки;
					Если ЗначениеЗаполнено(ВозвратОтКлиента.алкПунктРазгрузки) Тогда
						ВозвратОтКлиента.алкЛицензияКонтрагента = ВозвратОтКлиента.алкПунктРазгрузки.алкОсновнаяЛицензия;
					КонецЕсли;				
					
					// Данные для маршрута
					
					ВозвратОтКлиента.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ВозвратОтКлиента.Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
					
					врЗонаДоставки = ВозвратОтКлиента.Партнер.ЗонаДоставки;
					
					Если Не ЗначениеЗаполнено(врЗонаДоставки) Тогда
						
						спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(ВозвратОтКлиента.Партнер.БизнесРегион.Наименование), Истина);
						Если спрДоставка.Наименование = "" Тогда
							спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
							спрДоставка.Наименование = СокрЛП(ВозвратОтКлиента.Партнер.БизнесРегион.Наименование);
							спрДоставка.Записать();
						КонецЕсли;
						
						ВозвратОтКлиента.ЗонаДоставки = спрДоставка;
						
					Иначе	
					
						ВозвратОтКлиента.ЗонаДоставки = врЗонаДоставки; 
					
					КонецЕсли;	
					
					ВозвратОтКлиента.ДоставкаОтКлиента = Истина;
					
					//Попытка
					//	Если ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина) Тогда
					//		РТУВходящий = ВозвратТоваров_ВходящийДокумент(ВозвратОтКлиента.Партнер);
					//		Если ЗначениеЗаполнено(РТУВходящий) Тогда
					//			ВозвратОтКлиента.НомерВходящегоДокумента = РТУВходящий.Номер;
					//			ВозвратОтКлиента.ДатаВходящегоДокумента  = РТУВходящий.Дата;
					//		КонецЕсли;	
					//	КонецЕсли;	
					//Исключение
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "РТУ Входящий", ИнформацияОбОшибке(), Истина);
					//КонецПопытки;
					
					// Запись документа без проведения
					
					Попытка
						Если ЭтоДубльВозврата(ВозвратОтКлиента.Партнер, ВозвратОтКлиента.Соглашение, ВозвратОтКлиента.СуммаДокумента, МассивИсключений) Тогда
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДУБЛЬ ВОЗВРАТА!!! Клиент: " + Строка(ВозвратОтКлиента.Партнер) + "; Соглашение: " + Строка(ВозвратОтКлиента.Соглашение) + "; Сумма: " + Строка(ВозвратОтКлиента.СуммаДокумента));
							Продолжить;							
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДУБЛЬ ВОЗВРАТА!!! ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина); 
					КонецПопытки;	
					
					Попытка
						
//						Попытка
//							
//							ВозвратОтКлиента.Записать(РежимЗаписиДокумента.Проведение);
//						
//							ЛогФайл.ЗаписатьСтроку("~Документ ВОЗВРАТА ТОВАРОВ записан " + Строка(ВозвратОтКлиента.Ссылка) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")");
//							
//							СтатусЗаписиДокумента = "Записан";
//						
//							ЗаписатьДанныеВЛогЗагрузкиДокументов("Возврат", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, ВозвратОтКлиента.Ссылка, ВозвратОтКлиента.Организация, ВозвратОтКлиента.Партнер, СтатусЗаписиДокумента);
//						
//							МассивИсключений.Добавить(ВозвратОтКлиента.Ссылка);
//							
//						Исключение
										
							ВозвратОтКлиента.Записать(РежимЗаписиДокумента.Запись);
							
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ВОЗВРАТА ТОВАРОВ записан " + Строка(ВозвратОтКлиента.Ссылка) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")");
							
							СтатусЗаписиДокумента = "Записан";
							
							ЗаписатьДанныеВЛогЗагрузкиДокументов("Возврат", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, ВозвратОтКлиента.Ссылка, ВозвратОтКлиента.Организация, ВозвратОтКлиента.Партнер, СтатусЗаписиДокумента);
							
							МассивИсключений.Добавить(ВозвратОтКлиента.Ссылка);
						
//						КонецПопытки;
						
												
					Исключение
					
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи документа ВОЗВРАТА ТОВАРОВ!"  + Строка(ВозвратОтКлиента.Номер) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")", ИнформацияОбОшибке(), Истина);		
						
					КонецПопытки;
				
				КонецЦикла;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при формировании Возврата товаров!", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки	
			
		// ЗАКАЗ КЛИЕНТА	
			
		ИначеЕсли Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 11 Тогда 
		
		    ФлюгерЭтоПервыйЗаказ = Истина;
			
			ЭтоБортАгента = Ложь;
			Если Склад_БортАгента <> Справочники.Склады.ПустаяСсылка() Тогда
				ЭтоБортАгента = Истина;
			КонецЕсли;				
		
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
			ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
			ОписаниеТиповВидНоменклатуры = Новый ОписаниеТипов(Массив);			
	
			ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
			ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура",	 ОписаниеТиповНоменклатуры);
			ТЧСВидомНоменклатуры.Колонки.Добавить("ВидНоменклатуры", ОписаниеТиповВидНоменклатуры);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",		 КЧ3);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",			 КЧ2);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Приоритет",		 КЧ2);
			
			Для Каждого стр из СтрокаТаблицыСчета.ТЧ Цикл 
				
				Попытка 
					
					GUID = СоздатьУникальныйИдентификатор(стр.ProductRefID);
					Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
					Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код номенклатуры! '" + Строка(стр.ProductRefID) + "'");
						ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + стр.ProductRefID + "'");
						error = 1; 
						Возврат;
					КонецЕсли;	
					
					Попытка
						Если ЭтоИнвойсНашейТочки() Тогда
							врВидЦеныЗакуп = Справочники.ВидыЦен.НайтиПоНаименованию("Закупочная", Истина);
							Если ЗначениеЗаполнено(врВидЦеныЗакуп) Тогда
								врЦенаНомен = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(Номенклатура, врВидЦеныЗакуп);
								Если врЦенаНомен = 0 Тогда
									ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЦЕНА = 0. " + СокрЛП(Номенклатура));
									Продолжить;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЦЕНА = 0. Исключение !!!", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
					
					Попытка
						
						НаименованиеНоменклатуры = Номенклатура.Наименование;
						Если Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
							Если СтрЧислоВхождений(ВРег(НаименованиеНоменклатуры), "КЕГА ") > 0 Тогда
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГА в заказе: " + СокрЛП(НаименованиеНоменклатуры));
							КонецЕсли;
						КонецЕсли;
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка на КЕГИ. Исключение!", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
					
					Попытка
						
						Если ТЧСВидомНоменклатуры.Найти(Номенклатура, "Номенклатура") <> Неопределено Тогда
							ЗаписатьИнформацию1СвЛогФайл(Событие1С, "ДУБЛЬ НОМЕНКЛАТУРЫ: " + Строка(Номенклатура) + ". Клиент: " + СокрЛП(Партнер));
							Продолжить;
						КонецЕсли;	
						
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка на дубли номенклатуры. Исключение!", ИнформацияОбОшибке(), Истина);
						
					КонецПопытки;	
				
					новстр						= ТЧСВидомНоменклатуры.Добавить();				
					новстр.Номенклатура			= Номенклатура;				
					новстр.ВидНоменклатуры		= Номенклатура.ВидНоменклатуры;
					Попытка
						// Газ 40 л
						// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
						//Если Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ") Тогда
						Если Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40() ИЛИ
							 Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест() Тогда
						// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
							новстр.ВидНоменклатуры		= ВидНоменклатурыМногооборотнаяТара;
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Вид номенклатуры ГАЗ 40", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
 					новстр.Количество			= Число(стр.Volume);
					новстр.Цена					= Число(стр.Price);
					новстр.Приоритет            = Товары_ПолучитьПриоритетТовара(Номенклатура);
					
					Попытка
						//Если ИдКПК = "DevInsider" Тогда
						Если СтрокаТаблицыСчета.IsTTN <> "True" Тогда
							врСтароеКоличество = новстр.Количество;
							новстр.Количество = ОкруглитьДоМинимальнойКратностиТовара(новстр.Номенклатура, новстр.Количество);
							Если врСтароеКоличество <> новстр.Количество Тогда
								ЗаписатьИнформацию1СвЛогФайл(Событие1С, "КОРРЕКТИРОВКА КРАТНОСТИ: " + СокрЛП(новстр.Номенклатура) + "; Количество в заказе = " + СокрЛП(врСтароеКоличество) + "; Количество с учетом кратности = " + СокрЛП(новстр.Количество));
							КонецЕсли;	
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "КОРРЕКТИРОВКА ПО КРАТНОСТИ", ИнформацияОбОшибке(), Истина);
					КонецПопытки;						
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(стр.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
				КонецПопытки;						
				
			КонецЦикла;
			
			// НДС Клиенты
			
			Попытка
				
				врГруппаНДСКлиенты = Справочники.Партнеры.НайтиПоКоду("00-00032838");
								
				Если (СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0) И (Партнер.ПринадлежитЭлементу(врГруппаНДСКлиенты) ИЛИ ЗапретПродажиТоваровБезНДС(Партнер)) Тогда
								
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
						МЗОтказы.Агент         = ТекАгент;
						МЗОтказы.ДатаОтказа    = ТекущаяДата();
						МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
						МЗОтказы.Клиент        = Партнер;
						МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
						МЗОтказы.Количество    = врТекСтрока.Количество;
						МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
						МЗОтказы.Записать();			
											
						врСч = врСч - 1;
				
					КонецЦикла;	
					
					Продолжить;
					
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "БЕЗ НДС - НДС Клиенты", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			Попытка
				
				Если ЭтоАварийныйЗаказ Тогда
										
					врКолСтрокТЗНомен = ТЧСВидомНоменклатуры.Количество() - 1;
					Пока врКолСтрокТЗНомен >=0 Цикл
						
						врТекСтрокаТЧНомен = ТЧСВидомНоменклатуры[врКолСтрокТЗНомен];
						Если СписокТоваровАварийногоЗаказа.Найти(врТекСтрокаТЧНомен.Номенклатура) <> Неопределено Тогда
							ТЧСВидомНоменклатуры.Удалить(врТекСтрокаТЧНомен);
						КонецЕсли;	
						
						врКолСтрокТЗНомен = врКолСтрокТЗНомен - 1;
						
					КонецЦикла;	
					
					СтрТоварыДляДоЗагрузки = "";
					Для Каждого ТекСтрокаТЧНомен Из ТЧСВидомНоменклатуры Цикл
						СтрТоварыДляДоЗагрузки = СтрТоварыДляДоЗагрузки + СокрЛП(ТекСтрокаТЧНомен.Номенклатура) + "; ";
					КонецЦикла;	
					
					ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, СтрТоварыДляДоЗагрузки);
					
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, "Проверка товаров. Исключение", ИнформацияОбОшибке(), Истина);
				Продолжить;
			КонецПопытки;				
			
			Попытка
				Если ТЧСВидомНоменклатуры.Количество() = 0 Тогда
					Если ЭтоАварийныйЗаказ Тогда
						Продолжить;
					Иначе	
						Логирование_Ошибка_ОтсутствуютТоварыДляЗагрузки("ЗАКАЗ", Партнер, СтрокаТаблицыСчета.InvoiceAmount);
					КонецЕсли;	
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Обработка пустого списка товаров", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			//Попытка
			//	
			//	КОПИЯ_ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
			//	КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура",	   ОписаниеТиповНоменклатуры);
			//	КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("ВидНоменклатуры", ОписаниеТиповВидНоменклатуры);
			//	КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",	   КЧ3);
			//	КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",			   КЧ2);
			//	
			//	Для Каждого ТекСтрокаТЧ Из ТЧСВидомНоменклатуры Цикл
			//		
			//		КОПИЯ_НовСтрока = КОПИЯ_ТЧСВидомНоменклатуры.Добавить();
			//		КОПИЯ_НовСтрока.Номенклатура    = ТекСтрокаТЧ.Номенклатура;
			//		КОПИЯ_НовСтрока.ВидНоменклатуры = ТекСтрокаТЧ.ВидНоменклатуры;
			//		КОПИЯ_НовСтрока.Количество      = ТекСтрокаТЧ.Количество;
			//		КОПИЯ_НовСтрока.Цена            = ТекСтрокаТЧ.Цена;
			//		
			//	КонецЦикла;	
			//	
			//	аян_СинхронизацияСервер.ВторойПрайс_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), КОПИЯ_ТЧСВидомНоменклатуры);
			//	
			//Исключение
			//	
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ТОВАРОВ ВТОРОГО ПРАЙСА", ИнформацияОбОшибке(), Истина);
			//	
			//КонецПопытки;	
			
			//Попытка
			//	
			//	Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(ТекАгент) Тогда 
			//	
			//		аян_АкцииСервер.ПроверитьЗаказ(ТЧСВидомНоменклатуры, ТекАгент, Партнер);
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка АКЦИЯ КРАТНОСТЬ", ИнформацияОбОшибке(), Истина);
			//	
			//КонецПопытки;	
			
			Попытка 
				
				аян_СинхронизацияСервер.ЗагрузкаДокументов_ПроверитьНаУстановленнуюЦену(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
										
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка НА ЦЕНЫ = 0", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
			
			Попытка 
				
				врКонтрагентСигареты = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
				
				Если НЕ врКонтрагентСигареты.НастроенЭДОСБИС Тогда
				
					аян_СинхронизацияСервер.СИГАРЕТЫ_УдалитьСигаретыИзЗаказа(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры, ТоварыСигареты);	
					
				КонецЕсли;	
										
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "СИГАРЕТЫ - УДАЛЕНИЕ", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;			
			
			Попытка 
				
				Если ОсновнаяФирма = оргАТ_Логистик Тогда
					
					Если КлиентыКонтрагенты_ЭтоПетровБезДоговораДляКег(Партнер) Тогда
				
						аян_СинхронизацияСервер.КЕГИ_ПроверитьТаблицуЗаказов(ИмяСервераМА, ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка НА КЕГИ", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
			
			
			Попытка 
				
				Если ОсновнаяФирма <> оргАТ_ЛогистикОМСК Тогда
				
					аян_СинхронизацияСервер.ВторойПрайс_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
					
				КонецЕсли;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ТОВАРОВ ВТОРОГО ПРАЙСА", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
			
			Попытка
				Если ИдКПК = "DevInsider" Тогда
					Если ЭтоИнвойсНашейТочки() Тогда
						аян_СинхронизацияСервер.НашаРозница_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);
					КонецЕсли;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "НАША РОЗНИЦА - ЗАПРЕТ НА РЕАЛИЗАЦИЮ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
			
			// Борихинский 
			
			Попытка
				
				Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
					
					Если ИдКПК <> "DevInsider" Тогда
						
						Если Не ЭтоИнвойсНашейТочки() Тогда
									
							Если НЕ КлиентыКонтрагенты_ЭтоБорихинский(Партнер) Тогда
					
								врБорихинский       = Справочники.Номенклатура.НайтиПоКоду("Ц0006337   ");
								врБорихинскийСкидка = Справочники.Номенклатура.НайтиПоКоду("00-00013859");  
						
								врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
								Пока врСч >= 0 Цикл
			
									врТекСтрока = ТЧСВидомНоменклатуры[врСч];
				
									Если врТекСтрока.Номенклатура.ПринадлежитЭлементу(врБорихинский) ИЛИ врТекСтрока.Номенклатура.ПринадлежитЭлементу(врБорихинскийСкидка) Тогда
								
										МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
										МЗОтказы.Агент         = ТекАгент;
										МЗОтказы.ДатаОтказа    = ТекущаяДата();
										МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
										МЗОтказы.Клиент        = Партнер;
										МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
										МЗОтказы.Количество    = врТекСтрока.Количество;
										МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
										МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
										МЗОтказы.Записать();			
									
										ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
										//ЗаписатьИнформацию1СвЛогФайл(Событие1С, "БОРИХИНСКИЙ - ЕСТЬ ЗАПРЕТ !!!");
			
									КонецЕсли;	
		
									врСч = врСч - 1;
								
								КонецЦикла;
								
							КонецЕсли;	
							
						КонецЕсли;	
							
					КонецЕсли;		
						
				КонецЕсли;
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРИХИНСКИЙ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			// БОНУС
			
			Попытка
				
				Если (СтрокаТаблицыСчета.IsTTN = "True")  И (НЕ ЗагрузкаДокументов_БонусБезПроверки(Партнер, ТекАгент)) Тогда
				
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						Если ТоварыБонус.Найти(врТекСтрока.Номенклатура) = Неопределено Тогда
							
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = ТекАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
							МЗОтказы.Клиент        = Партнер;
							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
							МЗОтказы.Количество    = врТекСтрока.Количество;
							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаБонус;							
							МЗОтказы.Записать();			
								
							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
						КонецЕсли;	
			
						врСч = врСч - 1;
				
					КонецЦикла;	
					
				КонецЕсли;
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАПРЕТ НА БОНУС", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			// ТОВАРЫ С НЕВЕРНЫМ НДС
			
			Попытка
				
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						Если Товары_НеверныйНДС.Найти(врТекСтрока.Номенклатура) <> Неопределено Тогда
							
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = ТекАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
							МЗОтказы.Клиент        = Партнер;
							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
							МЗОтказы.Количество    = врТекСтрока.Количество;
							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НеУказанНДС;							
							МЗОтказы.Записать();			
								
							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
						КонецЕсли;	
			
						врСч = врСч - 1;
				
					КонецЦикла;	
					
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТОВАРЫ С НЕВЕРНЫМ НДС", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			// ТЕКСТИЛЬ ОТДЕЛЬНО
			
			ТекстильОтдельно = Ложь;
			
			//Попытка
			//	
			//	Если (НЕ Партнер.ПринадлежитЭлементу(Клиенты_грПетров)) Тогда
			//		
			//		Если (СтрокаТаблицыСчета.IsTTN <> "True") И (СтрокаТаблицыСчета.WithouPay = "False") И (СтрокаТаблицыСчета.IsInvoice = "False") И (НЕ ВсегдаЗаНАЛ(Партнер)) Тогда
			//			
			//			ТекстильОтдельно = Истина;
			//			
			//		//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТЕКСТИЛЬ ОТДЕЛЬНО = " + Строка(Партнер));
			//				
			//		КонецЕсли;	
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГИ ВТОРОЙ ПРАЙС - ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
			//КонецПопытки;							
			
			Если НЕ ЗначениеЗаполнено(СкладАгента) Тогда 
				error = 1;
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Загрузка заказов не выполнена, так как не указан основной склад у Агента: """ + ТекАгент + """");
				ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан основной склад у Агента: """ + ТекАгент+"""");
				ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				Возврат;	
			КонецЕсли;
			
			ЗапросОрг = Новый Запрос;
			ЗапросОрг.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПользователей.Пользователь,
			|	НастройкиПользователей.Настройка,
			|	НастройкиПользователей.Значение		
			|ИЗ
			|	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
			|ГДЕ
			|	НастройкиПользователей.Пользователь = &Пользователь
			|	И НастройкиПользователей.Настройка = &Настройка";
			
			ЗапросОрг.Параметры.Вставить("Пользователь",ТекАгент);
			ЗапросОрг.Параметры.Вставить("Настройка",ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнаяОрганизация);
			ВыборкаОрг = ЗапросОрг.Выполнить().Выбрать();
			Если ВыборкаОрг.Следующий() Тогда 
				ОрганизацияАгента = ВыборкаОрг.Значение;
			КонецЕсли;
			
			ВыделятьДжолики = Ложь;
			ЭтоРИФПлюс      = Ложь;
			
			Если ОсновнаяФирма = оргАТ_Логистик Тогда
				
				ВыделятьДжолики = Истина;
				
				Попытка
					врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент);
					Если врСоглашениеСКлиентом.Соглашение.Организация = оргТОП_17 Тогда
						ЭтоРИФПлюс = Истина;
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Определение флага ЭтоРИФПлюс", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
			КонецЕсли;		
			
			// СИГАРЕТЫ
			
			ВыделятьСигареты    = Ложь;
			СигаретыЗаНАЛ       = Истина;
			
			Попытка
				
				Если СигаретыВОтсрочку(Партнер) Тогда
					СигаретыЗаНАЛ = Ложь;					
				КонецЕсли;	
				
				Если ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда
					СигаретыЗаНАЛ = Ложь;
				КонецЕсли;	
				
				Если (СтрокаТаблицыСчета.WithouPay = "True") ИЛИ (СтрокаТаблицыСчета.IsTTN = "True") ИЛИ (КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Партнер)) ИЛИ СигаретыВОтсрочку(Партнер) ИЛИ ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда

				Иначе
					
					Для Каждого ТекСтрокаТЗТовары Из ТЧСВидомНоменклатуры Цикл
						
						Для Каждого ТекСтрокаСигареты Из ТоварыСигареты Цикл
						
							Если ТекСтрокаТЗТовары.Номенклатура = ТекСтрокаСигареты Тогда
								
								ВыделятьСигареты = Истина;
								
							КонецЕсли;
							
						КонецЦикла;	
						
					КонецЦикла;	
					
				КонецЕсли;
								
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Сигареты!", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;	
			
			ВыделятьСигареты = Истина;
			
			ВыделятьЗаморозку = ЗагрузкаДокументов_ВыделитьЗаморозку(Партнер.БизнесРегион);
			
			МаркировкаАТЛ = Истина;
			ЗапросВставкаМаркировка = " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Маркировка ТОГДА ""_ОтдельныйЗаказ_"" ";
			Если Партнер.ПринадлежитЭлементу(Клиенты_Роснефть) Тогда
				МаркировкаАТЛ = Ложь;
				ЗапросВставкаМаркировка = "";
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТЧ.ВидНоменклатуры КАК Справочник.ВидыНоменклатуры) КАК ВидНоменклатуры,
			|	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество,
			|	ВЫРАЗИТЬ(ТЧ.Цена КАК ЧИСЛО) КАК Цена,
			|	ВЫРАЗИТЬ(ТЧ.Приоритет КАК ЧИСЛО) КАК Приоритет
			|ПОМЕСТИТЬ ВрТ
			|ИЗ
			|	&ТЧ КАК ТЧ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	аянСоответствиеОрганизацийИСкладов.ВидНоменклатуры КАК ВидНоменклатурыРег,
			|	аянСоответствиеОрганизацийИСкладов.Склад КАК Склад
			|ПОМЕСТИТЬ РегистрСкладов
			|ИЗ
			|	РегистрСведений.аянСоответствиеОрганизацийИСкладов КАК аянСоответствиеОрганизацийИСкладов
			|ГДЕ
			|	аянСоответствиеОрганизацийИСкладов.Организация = &Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Склад КАК Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		//	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0)) КАК КоличествоОстаток
			|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ВЫБОР КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0) <= 0 ТОГДА 0 ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0) КОНЕЦ) КАК КоличествоОстаток			
			|ПОМЕСТИТЬ Остатки
			|ИЗ
		//	|	РегистрНакопления.СвободныеОстатки.Остатки(&Дата, Склад В ИЕРАРХИИ (&Склад)) КАК ТоварыНаСкладахОстатки
			|	РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК ТоварыНаСкладахОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВрТ.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ВрТ.Номенклатура.ПоставляетсяВМногооборотнойТаре
			|			ТОГДА ВрТ.Номенклатура.НоменклатураМногооборотнаяТара
			|		ИНАЧЕ &ПустаяТара
			|	КОНЕЦ КАК НоменклатураМногооборотнаяТара,
			|	ВрТ.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|	РегистрСкладов.ВидНоменклатурыРег КАК ВидНоменклатурыРег,
			|	ВрТ.Количество КАК Количество,
			|	ВрТ.Цена КАК Цена,
			|   ВрТ.Приоритет КАК Приоритет,";
			
				Если ВыделятьДжолики Тогда
							   
					Запрос.Текст = Запрос.Текст + "
			               |	ВЫБОР
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыОвощиФрукты) 
						   |			ТОГДА ""_ТоварыОвощиФрукты_"" " + 
					       			?(ВыделятьЗаморозку, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыЗаморозкаВЕС) ТОГДА ""_ТоварыЗаморозкаВЕС_"" ", " ") +
					                ?(ВыделятьЗаморозку, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыЗаморозка) ТОГДА ""_ТоварыЗаморозка_"" ", " ") + 
									?(ТекстильОтдельно,  " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В (&ТоварыТекстиль) ТОГДА ""_ТоварыТекстиль_"" ", " ") + 
					                " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ДеревенскоеМолочко) ТОГДА ""_ДеревенскоеМолочко_"" " + 									
						   //|		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыВесовые) 
						   //|			ТОГДА ""_ТоварыВесовые_""						   
						   //|		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыВесовыеБезНДС) 
						   //|			ТОГДА ""_ТоварыВесовыеБезНДС_""	" +
						            ?(ЭтоРИФПлюс, " ", " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыБезНДС) ТОГДА ""_ТоварыБезНДС_"" ") +
						   			?(ВыделятьСигареты, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыСигареты) ТОГДА ""_ТоварыСигареты_"" ", " ") + "						   						   						   
						   |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики
						   |			ТОГДА ""_Джолики_""
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее
						   |			ТОГДА ""_ЧерныйЗаказ_""
						   |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
						   |			ТОГДА ""_Алкоголь_""" + ЗапросВставкаМаркировка + " 						   
			               |		ИНАЧЕ РегистрСкладов.Склад
			               |	КОНЕЦ КАК Склад,
			               |	ЕСТЬNULL(РегистрСкладов.Склад, &ПустойСклад) КАК СкладЗаказа";
					
				Иначе
						   
				   Запрос.Текст = Запрос.Текст + "
			               |	ВЫБОР
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоРазливное
			               |			ТОГДА ""_ОтдельныйЗаказ_""						   
			               |	ИНАЧЕ ВЫБОР
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее
			               |	      ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее
			               |			ТОГДА ""_ЧерныйЗаказ_""
			               |	ИНАЧЕ РегистрСкладов.Склад
						   |	КОНЕЦ
			               |	КОНЕЦ КАК Склад,
			               |	ЕСТЬNULL(РегистрСкладов.Склад, &ПустойСклад) КАК СкладЗаказа";
						   
			   КонецЕсли;
						   
			Запрос.Текст = Запрос.Текст + "  			
			|ПОМЕСТИТЬ ТаблТоваровИСкладов
			|ИЗ
			|	ВрТ КАК ВрТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСкладов КАК РегистрСкладов
			|		ПО ВрТ.ВидНоменклатуры = РегистрСкладов.ВидНоменклатурыРег
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблТоваровИСкладов.Номенклатура КАК Номенклатура,
			|	ТаблТоваровИСкладов.НоменклатураМногооборотнаяТара КАК НоменклатураМногооборотнаяТара,
			|	ТаблТоваровИСкладов.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|	ТаблТоваровИСкладов.ВидНоменклатурыРег КАК ВидНоменклатурыРег,
			|	ТаблТоваровИСкладов.Количество КАК Количество,
			|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			|	ТаблТоваровИСкладов.Цена КАК Цена,
			
			|	ТаблТоваровИСкладов.Приоритет КАК Приоритет,
						
			|	ТаблТоваровИСкладов.Склад КАК Склад,
			|	ТаблТоваровИСкладов.СкладЗаказа КАК СкладЗаказа
			|ИЗ
			|	ТаблТоваровИСкладов КАК ТаблТоваровИСкладов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
			|		ПО ТаблТоваровИСкладов.Номенклатура = Остатки.Номенклатура
			|			И ТаблТоваровИСкладов.СкладЗаказа = Остатки.Склад
			|
			|УПОРЯДОЧИТЬ ПО
			|	Склад,
			|	Приоритет,
			|	ТаблТоваровИСкладов.Номенклатура.Наименование						
			|ИТОГИ
			|	МАКСИМУМ(СкладЗаказа)
			|ПО
			|	Склад";
			
			Попытка
				Если ЭтоРИФПлюс Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "_ТоварыВесовыеБезНДС_", "_ТоварыВесовые_"); 
				КонецЕсли;					
				Если ОсновнаяФирма = оргАТ_ЛогистикОМСК Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее", "ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики");  
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОМСК - преобразование запроса. Исключение!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			мСкладыАгента = ПолучитьМассивСкладов(СкладАгента); 			
			//СтрокаРИФПлюс = мСкладыАгента.Найти(СкладТОП_17);
			//Если СтрокаРИФПлюс <> Неопределено Тогда
			//	мСкладыАгента.Удалить(СтрокаРИФПлюс);
			//КонецЕсли;	
			
			Запрос.УстановитьПараметр("Дата",                ТекущаяДата());
			Запрос.УстановитьПараметр("Склад",               мСкладыАгента);		
			Запрос.УстановитьПараметр("ПустойСклад",         Справочники.Склады.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустаяТара",          Справочники.Номенклатура.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТЧ",                  ТЧСВидомНоменклатуры);
			Запрос.УстановитьПараметр("ПивоРазливное",       Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво разливное",   Истина));
			Запрос.УстановитьПараметр("ПивоДублирующее",     Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее", Истина));
			Запрос.УстановитьПараметр("ЛосьеныДублирующее",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар ДУБЛЬ", Истина));						
			Запрос.УстановитьПараметр("Джолики",			 Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики", Истина));						
			Запрос.УстановитьПараметр("Организация",		 ОсновнаяФирма);
			Запрос.УстановитьПараметр("ТоварыБезНДС",        ТоварыБезНДС);
			Запрос.УстановитьПараметр("ТоварыВесовые",       ТоварыВесовые);
			Запрос.УстановитьПараметр("ТоварыВесовыеБезНДС", ТоварыВесовыеБезНДС);
			Запрос.УстановитьПараметр("ТоварыСигареты",      ТоварыСигареты);
			Запрос.УстановитьПараметр("ТоварыОвощиФрукты",   Товары_ОвощиФрукты);
			Запрос.УстановитьПараметр("ТоварыТекстиль",      ТоварыТекстиль);
			
			Запрос.УстановитьПараметр("ВидНоменклатуры_ПивоРозлив",   ВидНоменклатуры_ПивоРозлив);
			Запрос.УстановитьПараметр("ВидНоменклатуры_Джолики",	  ВидНоменклатуры_Джолики);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_ПивоДубль",    ВидНоменклатуры_ПивоДубль);
			Запрос.УстановитьПараметр("ВидНоменклатуры_ЛосьоныДубль", ВидНоменклатуры_ЛосьоныДубль);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_Молочка",      ВидНоменклатуры_Молочка);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_Бисквит",      ВидНоменклатуры_Бисквит);		
			
			Запрос.УстановитьПараметр("ТоварыЗаморозка",     ТоварыЗаморозка);
			Запрос.УстановитьПараметр("ТоварыЗаморозкаВЕС",  ТоварыЗаморозкаВЕС);
			Запрос.УстановитьПараметр("ДеревенскоеМолочко",  НоменДеревенскоеМолоко);
			Запрос.УстановитьПараметр("Маркировка",          ВидНоменклатуры_Маркировка);
			
			
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			СтуктураПоиска = Новый Структура("Склад");
			СтуктураПоиска.Склад = "_ЧерныйЗаказ_";			
			Если Выборка.НайтиСледующий(СтуктураПоиска) И НЕ ЗначениеЗаполнено(ОрганизацияАгента) Тогда 
				error = 1;
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент + """");
				ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				//Сообщить("<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				Возврат;
			КонецЕсли;
			
			текСклад = Справочники.Склады.ПустаяСсылка();
			СтуктураПоиска = Новый Структура("СкладЗаказа");
			СтуктураПоиска.СкладЗаказа = Справочники.Склады.ПустаяСсылка();	
			Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда 
				//Выборка2 = Выборка.Выбрать();
				//error = 1;
				//
				//ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				//Сообщить("<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//Возврат;
				текСклад = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий").Ссылка;
			КонецЕсли;
			
			Выборка.Сбросить();
			
			ДатаОтгрузки = СтрокаТаблицыСчета.DeliveryFromDateTime;
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, "-","");
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, ":","");
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, " ","");
			
			ЭтоОтложенныйЗаказ = Ложь;
			КомментарийОтложенногоПлатежа = "";
			
			ДатаОтгрузкиОтложенная = ТекущаяДата();
			Попытка
				Если ЭтоОмскОбласть(ТекАгент) Тогда
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						Если НачалоДня(Дата(ДатаОтгрузки)) > НачалоДня(ТекущаяДата()) Тогда
							ДатаОтгрузкиОтложенная = Дата(ДатаОтгрузки);
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли ЭтоТестовыйАгент(ТекАгент) Тогда
					
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						
						ДатаОтгрузкиОтложенная        = Дата(ДатаОтгрузки);
						ЭтоОтложенныйЗаказ            = Истина;
						Если ДатаОтгрузкиОтложенная >= НачалоДня(ТекущаяДата() + ДеньВСекундах * 2) Тогда
							КомментарийОтложенногоПлатежа = ВРЕГ(ДеньНеделиПрописью(ДеньНедели(ДатаОтгрузкиОтложенная)));
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;						
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДАТА ОТГРУЗКИ ОТЛОЖЕННАЯ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			//Если ИдКПК <> "DevInsider" Тогда
			//	Если Не ЭтоИнвойсНашейТочки() Тогда
					ДатаОтгрузкиОтложенная = ДатаДоставкиПоМатрицеМаршрута(Партнер);
					ЭтоОтложенныйЗаказ     = Истина;
			//	КонецЕсли;							
			//КонецЕсли;					
			
			Попытка
				Если ИмяСервераМА = "Sever" Тогда
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						ДатаОтгрузкиОтложенная_2 = Дата(ДатаОтгрузки);
						Если ДатаОтгрузкиОтложенная_2 >= НачалоДня(ТекущаяДата() + ДеньВСекундах * 2) Тогда
							ДатаОтгрузкиОтложенная        = ДатаОтгрузкиОтложенная_2; 
							КомментарийОтложенногоПлатежа = ВРЕГ(ДеньНеделиПрописью(ДеньНедели(ДатаОтгрузкиОтложенная)));
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОТЛОЖЕННАЯ ДАТА ОТГРУЗКИ = " + Строка(ДатаОтгрузкиОтложенная) + ", Клиент = " + СокрЛП(Партнер));
						КонецЕсли;											
					КонецЕсли;	
					Если (Выборка.Склад = "_ДеревенскоеМолочко_") Тогда
						ДатаОтгрузкиОтложенная = ТекущаяДата() + ДеньВСекундах*2; 
					КонецЕсли;	
				КонецЕсли;						
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДАТА ОТГРУЗКИ ОТЛОЖЕННАЯ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
						
			НомерВПакете = 0;
			
			Пока Выборка.Следующий() Цикл 	
				
				врЕстьВесВЗаказе = Ложь;
				
				врНужноПровестиРеализацию = Истина;
						
				Если НЕ ПустаяСтрока(СтрокаТаблицыСчета.Note) Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;	
				
				Если НашаТочка(Партнер) Тогда
					врНужноПровестиРеализацию = Истина;
				КонецЕсли;					
				
				НомерВПакете = НомерВПакете + 1;
				
				//терехин++
				//мы хотим чтоб кеги отписывались автоматом
				колКегДин = 0;
				колКегЕвро = 0;
				колКег30 = 0;
				//терехин--
				
			//	НачатьТранзакцию();

				//Создаем Заказ
				Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
				
				//Заказ.Дата = ?(ЗначениеЗаполнено(ДатаОтгрузки) И НачалоДня(Дата(ДатаОтгрузки))<=НачалоДня(ТекущаяДата()+60*60*24),ТекущаяДата(),Дата(ДатаОтгрузки));
				Заказ.Дата = ТекущаяДата();
				
				//Заказ.Склад 					= ОсновнойСклад;
				Если текСклад <> Справочники.Склады.ПустаяСсылка() Тогда
					Заказ.Склад = текСклад;
				Иначе
					Заказ.Склад 					= Выборка.СкладЗаказа;
				КонецЕсли;
				Заказ.Организация				= Организация;
				Заказ.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(Заказ.Организация, ОсновнойСклад, Заказ.Дата);
				Заказ.Партнер 					= Партнер;
				Заказ.Валюта					= Константы.ВалютаРегламентированногоУчета.Получить();	
				Если Не ЭтоБортАгента Тогда
					Заказ.СпособДоставки 			= Перечисления.СпособыДоставки.ДоКлиента;
				Иначе
					Заказ.СпособДоставки            = Перечисления.СпособыДоставки.Самовывоз;
				КонецЕсли;	
				Заказ.АдресДоставки				= УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Заказ.Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
				Заказ.Статус			    	= Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
				Заказ.Приоритет					= Справочники.Приоритеты.НайтиПоНаименованию("Средний",Истина);
				
				врЭтоВес   = Ложь;
				врЭтоОвощи = Ложь;
				
				Попытка
					Если ЭтоОтложенныйЗаказ Тогда
						Заказ.Комментарий = КомментарийОтложенногоПлатежа + " ";
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыОвощиФрукты_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + " ОВОЩИ-ФРУКТЫ (" + ВРег(НаименованиеРегионаПоСерверу(ИмяСервераМА)) + ")";
						//врНужноПровестиРеализацию = Ложь;
						врЭтоВес = Истина;
						врЭтоОвощи = Истина;
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыВесовые_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + "ВЕС ";
					//	врНужноПровестиРеализацию = Ложь;
						//Если НашаТочка(Партнер) И ((ДеньНедели(ТекущаяДата()) = 7) ИЛИ (ДеньНедели(ТекущаяДата()) = 6)) Тогда
						//	врНужноПровестиРеализацию = Истина;
						//КонецЕсли;	
						врЭтоВес = Истина;
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыЗаморозкаВЕС_")  Тогда 
						Заказ.Комментарий = Заказ.Комментарий + "ЗАМОРОЗКА ВЕС ";
					//	врНужноПровестиРеализацию = Ложь;
						//Если НашаТочка(Партнер) И ((ДеньНедели(ТекущаяДата()) = 7) ИЛИ (ДеньНедели(ТекущаяДата()) = 6)) Тогда
						//	врНужноПровестиРеализацию = Истина;
						//КонецЕсли;	
						врЭтоВес = Истина;
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыЗаморозка_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + "ЗАМОРОЗКА ";
					КонецЕсли;						
					Если ВРег(СокрЛП(СтрокаТаблицыСчета.Note)) <> "ВЕС" Тогда
						Заказ.Комментарий = Заказ.Комментарий + СтрокаТаблицыСчета.Note;
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыТекстиль_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + " ТЕКСТИЛЬ";
					КонецЕсли;											
					Если (Выборка.Склад = "_ДеревенскоеМолочко_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + " ДЕРЕВЕНСКОЕ МОЛОЧКО";
					КонецЕсли;											
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Комментарий ВЕС", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
				Заказ.Менеджер					= Партнер.ОсновнойМенеджер;
				Заказ.Грузополучатель			= ат_ОбщийМодуль.ПолучитьЗначениеРеквизита("Грузополучатель",Заказ.Партнер);//Блинов для ФГУП Почта России

				врЗонаДоставки = Заказ.Партнер.ЗонаДоставки;
				
				Если Не ЗначениеЗаполнено(врЗонаДоставки) Тогда
				
					//терехин++
					//дописываем зону доставки
					спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(Заказ.Партнер.БизнесРегион.Наименование),Истина);
					Если спрДоставка.Наименование = "" Тогда
						спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
						спрДоставка.Наименование = СокрЛП(Заказ.Партнер.БизнесРегион.Наименование);
						спрДоставка.Записать();
					КонецЕсли;

					Заказ.ЗонаДоставки				= спрДоставка.Ссылка;
				
				Иначе
					
					Заказ.ЗонаДоставки = врЗонаДоставки;
					
				КонецЕсли;	
		
				//Если врЭтоВес Тогда
				//	врЗонаДоставкиВес = ЗонаДоставкиВес(Заказ.ЗонаДоставки, врЭтоОвощи, НашаТочка(Партнер));
				//	Если ЗначениеЗаполнено(врЗонаДоставкиВес) Тогда
				//		Заказ.ЗонаДоставки = врЗонаДоставкиВес;
				//	КонецЕсли;	
				//КонецЕсли;	
				
				//Сообщить(Заказ.Склад);
				//терехин--
				Выборка2 = Выборка.Выбрать();
				ТаблТары = Новый ТаблицаЗначений;
				ТаблТары.Колонки.Добавить("Номенклатура");
				ТаблТары.Колонки.Добавить("Количество");				
				СуммаПКО = 0;
				Пока Выборка2.Следующий() Цикл 	
					
					ОстатокТовара = Выборка2.КоличествоОстаток;
										
					Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						
						врСкладАТОбщий = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий",   Истина);
						
					//	Заказ.Склад   = СкладРИФПлюс;
						Заказ.Склад   = врСкладАТОбщий;
						ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, врСкладАТОбщий, Заказ.Дата);
						
					КонецЕсли;
					
					Если (Выборка.Склад = "_Джолики_") Тогда 
						
						Заказ.Склад   = СкладТОП_17;
						ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТОП_17, Заказ.Дата);
						
					КонецЕсли;	
					                       
					
					Если (Выборка.Склад = "_ДеревенскоеМолочко_") Тогда 
						
						Заказ.Склад   = СкладТОП_17;
						ОстатокТовара = 1000;
						
					КонецЕсли;			
					
					Если ЭтоРИФПлюс Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладТОП_17;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТОП_17, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;	
					
					Если (ОсновнаяФирма = оргАТ_Логистик) И (НЕ ЭтоРИФПлюс) Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладАТАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладАТАлкоголь, Заказ.Дата);
						КонецЕсли;										
												
					КонецЕсли;	
					
					Если (ОсновнаяФирма = оргАТ_Логистик) Тогда
						
						Если Выборка.Склад = "_ЧерныйЗаказ_" Тогда 
							Заказ.Склад   = СкладАТАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладАТАлкоголь, Заказ.Дата);
						КонецЕсли;																
						
						Если Выборка.Склад = "_ЧерныйЗаказ2_" Тогда 
							Заказ.Склад   = СкладТомскПиво;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТомскПиво, Заказ.Дата);
						КонецЕсли;																						
						
						Если Выборка.Склад = "_ТоварыСигареты_" Тогда
							Заказ.Организация = оргАТ_Логистик;
						КонецЕсли;	
						
					КонецЕсли;	
					
					Если ЭтоБортАгента Тогда						
						Заказ.Склад   = Склад_БортАгента;
						ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, Склад_БортАгента, Заказ.Дата);
					КонецЕсли;						
					
					ОстатокТары = 0;
					
					//// Проверка на остаток по таре
					//Попытка
					//	
					//	Если ЗначениеЗаполнено(Выборка2.НоменклатураМногооборотнаяТара) Тогда 
					//		Если СокрЛП(Выборка2.НоменклатураМногооборотнаяТара.Наименование) = "Кега 30 л фитинг G (БАЛТИКА)" Тогда
					//			Если ОстатокТовара > 0 Тогда
					//				ОстатокТары = ПолучитьОстатокТовараПоСкладу(Выборка2.НоменклатураМногооборотнаяТара, Заказ.Склад, Заказ.Дата);	
					//				Если ОстатокТовара > ОстатокТары Тогда
					//					ОстатокТовара = ОстатокТары;
					//					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Склад: " + Строка(Заказ.Склад) + ". Для номенклатуры """ + Строка(Выборка2.Номенклатура) + """" + ", нет остатка по таре """ + Строка(Выборка2.НоменклатураМногооборотнаяТара) + """");
					//				КонецЕсли;	
					//			КонецЕсли;	
					//		КонецЕсли;	
					//	КонецЕсли;	
					//		
					//Исключение	
					//	
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение Кега 30 л фитинг G (БАЛТИКА)", ИнформацияОбОшибке(), Истина);
					//	
					//КонецПопытки;	
					
					КолВЗаказ = Выборка2.Количество;
					Если (ОстатокТовара > 0) И (ОстатокТовара < Выборка2.Количество) Тогда 
						
						// -> Ответ на заказ при недостаточном количестве товара
						
						НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
						НовСтрТовар.Номенклатура     = Выборка2.Номенклатура;
						НовСтрТовар.Цена 		     = Число(Выборка2.Цена);
						НовСтрТовар.Количество       = Выборка2.Количество - ОстатокТовара;
						НовСтрТовар.ЕдиницаИзмерения = Выборка2.Номенклатура.ЕдиницаИзмерения;
						Попытка
							НовСтрТовар.ПричинаОтказа = "нет в ост.";
						Исключение
						КонецПопытки;	
						
						// <- Ответ на заказ при недостаточном количестве товара
						
						новстр						= Заказ.Товары.Добавить();
						новстр.Номенклатура			= Выборка2.Номенклатура;
						новстр.Количество			= Выборка2.Количество-ОстатокТовара;
						новстр.КоличествоУпаковок	= Выборка2.Количество-ОстатокТовара;
						новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
						новстр.Цена					= Число(Выборка2.Цена);
						Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) Тогда
							новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
						Иначе	
							новстр.ДатаОтгрузки			= Заказ.Дата;
						КонецЕсли;	
						//Если ИдКПК <> "DevInsider" Тогда
						//	Если Не ЭтоИнвойсНашейТочки() Тогда
								новстр.ДатаОтгрузки		= ДатаОтгрузкиОтложенная;
						//	КонецЕсли;							
						//КонецЕсли;					
						
						новстр.Склад				= Заказ.Склад;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);
						
						новстр.Отменено			= Истина;
						
						СуммаПКО = СуммаПКО + новстр.Сумма;
						КолВЗаказ = ОстатокТовара;
						
					КонецЕсли;
					
					новстр						= Заказ.Товары.Добавить();				
					новстр.Номенклатура			= Выборка2.Номенклатура;
					новстр.Количество			= КолВЗаказ;
					новстр.КоличествоУпаковок	= КолВЗаказ;
					новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
					новстр.Цена					= Число(Выборка2.Цена);
										
					Если ТоварыВесовые.Найти(Выборка2.Номенклатура) <> Неопределено Тогда
						врЕстьВесВЗаказе = Истина;
					КонецЕсли;	
					Если ТоварыВесовыеБезНДС.Найти(Выборка2.Номенклатура) <> Неопределено Тогда
						врЕстьВесВЗаказе = Истина;
					КонецЕсли;
					
					//Добавление многооборотной тары НАЧАЛО
					Если ЗначениеЗаполнено(Выборка2.НоменклатураМногооборотнаяТара) И (ОстатокТовара > 0) Тогда    
						
						НужноДобавитьТару = Истина;
						
						//Попытка
						//	Если СокрЛП(Выборка2.НоменклатураМногооборотнаяТара.Наименование) = "Кега 30 л фитинг G (БАЛТИКА)" Тогда						
						//		Если ОстатокТары = 0 Тогда
						//			НужноДобавитьТару = Ложь;
						//		КонецЕсли;	
						//	КонецЕсли;
						//Исключение
						//	
						//КонецПопытки;	
						
						Если НужноДобавитьТару Тогда
							НовТара = ТаблТары.Добавить();
							ЗаполнитьЗначенияСвойств(НовТара,новстр);
							НовТара.Номенклатура = Выборка2.НоменклатураМногооборотнаяТара;
						КонецЕсли;
						
					КонецЕсли;
					//Добавление многооборотной тары КОНЕЦ
					
					Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;					
					Иначе	
						новстр.ДатаОтгрузки			= Заказ.Дата;					
					КонецЕсли;	
					
					//Если ИдКПК <> "DevInsider" Тогда
					//	Если Не ЭтоИнвойсНашейТочки() Тогда
							новстр.ДатаОтгрузки	= ДатаОтгрузкиОтложенная;							
					//	КонецЕсли;
					//КонецЕсли;	
					
					новстр.Склад				= Заказ.Склад;
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);
					
					СуммаПКО = СуммаПКО + новстр.Сумма;
					
					Если ОстатокТовара <= 0 Тогда  
						
						новстр.Отменено			= Истина;
						
						НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
						НовСтрТовар.Номенклатура = Выборка2.Номенклатура;
						НовСтрТовар.Цена = Выборка2.Цена;
						НовСтрТовар.Количество = Выборка2.Количество;
						НовСтрТовар.ЕдиницаИзмерения = Выборка2.Номенклатура.ЕдиницаИзмерения;
						Попытка
							НовСтрТовар.ПричинаОтказа = "нет в ост.";
						Исключение
						КонецПопытки;	
						
						
						
					КонецЕсли;
				КонецЦикла;
				
				Если врЕстьВесВЗаказе Тогда
					Заказ.Комментарий = Заказ.Комментарий + " !! ВЕС !!";
				КонецЕсли;									
								
				Если (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Козлов Владимир Николаевич")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Абдулов Дамир")) ИЛИ (ПользовательДобавленВРазделениеТочек(ТекАгент)) ИЛИ (ЭтоИногороднийАгент(ТекАгент)) Тогда
					Попытка
						
						врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Заказ.Партнер, ТекАгент);
						Заказ.Соглашение = врСоглашениеСКлиентом.Соглашение;
						Заказ.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Заказ.Партнер);
						Заказ.ЗаполнитьУсловияПродажПоCоглашению();
						Если Не ЗначениеЗаполнено(Заказ.Контрагент) Тогда
							Заказ.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Заказ.Партнер);
						КонецЕсли;	
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Козлов Исключение - 1");
					КонецПопытки;	
				Иначе	
					Заказ.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
								
				Заказ.ВернутьМногооборотнуюТару = Истина;
																
				//Добавление многооборотной тары НАЧАЛО
				ТаблТары.Свернуть("Номенклатура","Количество");
				Для Каждого СтрТара Из ТаблТары Цикл 
					новстр						= Заказ.Товары.Добавить();				
					новстр.Номенклатура			= СтрТара.Номенклатура;
					новстр.Количество			= СтрТара.Количество;
					новстр.КоличествоУпаковок	= СтрТара.Количество;
					новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
					Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
					Иначе	
						новстр.ДатаОтгрузки			= Заказ.Дата;
					КонецЕсли;	
					//Если ИдКПК <> "DevInsider" Тогда
					//	Если Не ЭтоИнвойсНашейТочки() Тогда
							новстр.ДатаОтгрузки	= ДатаОтгрузкиОтложенная;							
					//	КонецЕсли;
					//КонецЕсли;						
					новстр.Склад				= Заказ.Склад;
					новстр.Цена                 = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(новстр.Номенклатура, Заказ.Соглашение.ВидЦен);
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
					СтруктураДействий = Новый Структура;
					//СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Заказ));							
					//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Заказ));
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
					//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);	
				КонецЦикла;
				//Добавление многооборотной тары КОНЕЦ
				
				Если ЭтоБортАгента Тогда
					Если Не ЭтоБортБелый Тогда
						Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
					КонецЕсли;	
				КонецЕсли;	
				
				Если Выборка.Склад = "_ЧерныйЗаказ_" Тогда 
					Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
				КонецЕсли;
				
				Если Выборка.Склад = "_ЧерныйЗаказ2_" Тогда 
					Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
				КонецЕсли;	
				
				//Если (Заказ.Организация = оргАТ_Логистик) И (Заказ.Склад = СкладТомскПиво) Тогда
				Если (Заказ.Организация = оргАТ_Логистик) И (Выборка.Склад <> "_Алкоголь_") И (Выборка.Склад <> "_ОтдельныйЗаказ_") Тогда				
					Если ЗагрузкаДокументов_НужноПровестиЧерезГалактику(Партнер) Тогда			
						Заказ.Организация = оргГалактика;
					Иначе
						Попытка
							Если Партнер.ПринадлежитЭлементу(Клиенты_Роснефть) Тогда
								ГрЮгус = Справочники.Номенклатура.НайтиПоКоду("00-00030041");
								врПерваяСтрока = Заказ.Товары[0].Номенклатура;
								Если врПерваяСтрока.ПринадлежитЭлементу(ГрЮгус) Тогда
									Заказ.Организация = оргГалактика;
									//ЗаписатьОшибку1СвЛогФайл("РОСНЕФТЬ", Строка(Партнер));
								КонецЕсли;
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "РОСНЕФТЬ - ЮГУС", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;	
				
				Если Выборка.Склад = "_ТоварыСигареты_" Тогда
					
					Заказ.Организация        = оргАТ_Логистик;
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				Заказ.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				Заказ.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
				Заказ.Менеджер					= ТекАгент;
				
				Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович") Тогда
					Заказ.Менеджер = Партнер.ОсновнойМенеджер;
				КонецЕсли;	
						
				// АКЦИЯ МАЙОНЕЗ ВТОРОЙ ПРАЙС
				
				//Попытка 
				//	
				//	Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(ТекАгент) Тогда
				//		
				//		Массив_АкционныйТовар = Новый Массив;
				//		
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00007586"));
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00004712"));
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00007418"));

				//		Для Каждого ТекТоварАкция Из Заказ.Товары Цикл
				//			
				//			Для Каждого ТекПроверкаТовар Из Массив_АкционныйТовар Цикл
				//				
				//				Если ТекТоварАкция.Номенклатура = ТекПроверкаТовар Тогда
				//			
				//					ТекТоварАкция.Цена = 64.05;
				//									
				//					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
				//		
				//					СтруктураДействий = Новый Структура;				
				//					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
				//					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
				//					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				//					СтруктураДействий.Вставить("ПересчитатьСумму");
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
				//					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварАкция, СтруктураДействий, Неопределено);	
				//					
				//					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Агент: " + СокрЛП(ТекАгент) + "; Клиент: " + СокрЛП(Партнер) + "; Товар: " + СокрЛП(ТекТоварАкция.Номенклатура) + "; Количество: " + СокрЛП(ТекТоварАкция.Количество));
				//					
				//				КонецЕсли;
				//				
				//			КонецЦикла;	
				//			
				//		КонецЦикла;	
				//		
				//	КонецЕсли;
				//	
				//Исключение
				//	
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Корректировка цены. Акция второй прайс.", ИнформацияОбОшибке(), Истина);
				//	
				//КонецПопытки;	
								
				
				//терехин++
				//теперь у нас есть готовый заказ
				//надо попробовать в нем поменять нужные нам реквизиты

				//Для каждого стрЗаказа из Заказ.Товары Цикл
				//	//бонусы
				//	Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
				//		
				//		Если Заказ.Соглашение.Организация = оргРИФПлюс Тогда
				//			Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				//		КонецЕсли;							
				//		
				//		стрЗаказа.Цена			= 0.01;
				//		стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Бонус");
				//		
				//		Заказ.Организация		= ОргБонусТомск;
				//								
				//		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
				//		
				//		СтруктураДействий = Новый Структура;				
				//		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
				//		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
				//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
				//		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				//		СтруктураДействий.Вставить("ПересчитатьСумму");
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
				//		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
				//		
				//	КонецЕсли;
				//КонецЦикла;
				
				врЭтоНашаТочка = Ложь;
				
				Попытка
					//Если ИдКПК = "DevInsider" Тогда
						Если ЭтоИнвойсНашейТочки() Тогда
							Если Заказ.Склад = СкладТомскПиво Тогда
								врЭтоНашаТочка = Истина;
								ЗаписатьИнформацию1СвЛогФайл(Событие1С, "ИНВОЙС НАШЕЙ ТОЧКИ = " + СокрЛП(Партнер));
							КонецЕсли;	
						КонецЕсли;
					//КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "НАША ТОЧКА", ИнформацияОбОшибке(), Истина);
				КонецПопытки;									
				
				Если (Выборка.Склад = "_Джолики_") ИЛИ врЭтоНашаТочка Тогда 
					
				//	Заказ.Организация = оргРИФ;
				
				//	Заказ.Организация = оргАВН_70;
				
					Заказ.Организация = оргТОП_17;
					
					Заказ.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				Если (СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0) Тогда 
				
					Заказ.Организация = оргТОП_17;
					
					Заказ.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;																				
				
				Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
					
					Заказ.Организация = оргТОП_17;
					
					Заказ.Склад       = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий",   Истина);
					
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				ПКО_Газ = Ложь;
				
				Если ЭтоБортАгента И (ИмяСервераМА = "Kuzbass") Тогда
					
					врПроцентСкидки = ПолучитьСкидкуКлиента(Заказ.Партнер, Заказ.Соглашение.ВидЦен);
					
					Для Каждого стрЗаказа из Заказ.Товары Цикл
						
						стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово борт");
						
						Если врПроцентСкидки <> 0 Тогда
							стрЗаказа.ПроцентРучнойСкидки = - врПроцентСкидки;
						КонецЕсли;	
						
						стрЗаказа.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(стрЗаказа.Номенклатура, стрЗаказа.ВидЦены);
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;
					
				КонецЕсли;					
				
				// Запрет на бонус белого алкоголя
				
				Попытка
					
					Если ОсновнаяФирма = оргАТ_Логистик Тогда
					
						Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
							
							Если Не КлиентыКонтрагенты_ЭтоПетров(Заказ.Партнер) Тогда
					
								Для Каждого стрЗаказа из Заказ.Товары Цикл
								
									Если Не стрЗаказа.Отменено Тогда
								
										Если стрЗаказа.Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь Тогда
										
											стрЗаказа.Отменено = Истина;
												
											НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
											НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
											НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
											НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
											НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
											НовСтрТоварОтказ.ПричинаОтказа    = "запрет на бонус";
											
										КонецЕсли;	
										
									КонецЕсли;	
									
								КонецЦикла;
									
							КонецЕсли;
							
						КонецЕсли;	
					
					КонецЕсли;
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запрет на БОНУС", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				// ВОРОНИНО, ФРУКТЫ_ОВОЩИ, ДЕРЕВЕНСКОЕ МОЛОЧКО
				
				Попытка
					
					врЧасЗаказа = Час(Заказ.Дата);
					
					Если врЧасЗаказа > 19 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
								
									Если стрЗаказа.Номенклатура.ПринадлежитЭлементу(НоменПеченьеВоронино) Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;	
					
					// ФРУКТЫ_ОВОЩИ, ДЕРЕВЕНСКОЕ МОЛОЧКО
					
					Если врЧасЗаказа > 15 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
									
									врОтменитьПрозицию = Ложь;
									
									Если (Товары_ОвощиФрукты.Найти(стрЗаказа.Номенклатура) <> Неопределено) ИЛИ стрЗаказа.Номенклатура.ПринадлежитЭлементу(НоменДеревенскоеМолоко) Тогда
										врОтменитьПрозицию = Истина;
									КонецЕсли;	
									
									//Если (стрЗаказа.Номенклатура.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) Тогда
									//	врОтменитьПрозицию = Истина;
									//КонецЕсли;	
									
									Если врОтменитьПрозицию Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;	
					
					Если врЧасЗаказа > 16 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
									
									врОтменитьПрозицию = Ложь;
									
									//Если (Товары_ОвощиФрукты.Найти(стрЗаказа.Номенклатура) <> Неопределено) ИЛИ стрЗаказа.Номенклатура.ПринадлежитЭлементу(НоменДеревенскоеМолоко) Тогда
									//	врОтменитьПрозицию = Истина;
									//КонецЕсли;	
									
									Если (стрЗаказа.Номенклатура.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) Тогда
										врОтменитьПрозицию = Истина;
									КонецЕсли;	
									
									Если врОтменитьПрозицию Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;						
					
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запрет на реализацию (ВОРОНИНО) > 19-00", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;
				
				Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
					Заказ.ПричинаБонуса     = ПолучитьПричинуБонуса(СтрокаТаблицыСчета.IsInvoice);
					Если ЗначениеЗаполнено(Заказ.ПричинаБонуса) Тогда
						Заказ.Комментарий = "[" + СокрЛП(Заказ.ПричинаБонуса) + "] " + Заказ.Комментарий;
					КонецЕсли;		
				КонецЕсли;		
								
				Для каждого стрЗаказа из Заказ.Товары Цикл
					//бонусы
					Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
						
						Если Заказ.Соглашение.Организация = оргРИФПлюс Тогда
							Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						КонецЕсли;							
						
						стрЗаказа.Цена			= 0.01;
						стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Бонус");
						
						Попытка
							
							Если ОсновнаяФирма = оргАТ_Логистик Тогда
								
								// Газ 40 л
								// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
								//Если стрЗаказа.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ") Тогда
								Если стрЗаказа.Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40() ИЛИ
									 стрЗаказа.Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест() Тогда
								// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
									стрЗаказа.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(стрЗаказа.Номенклатура, стрЗаказа.ВидЦены);
									ПКО_Газ = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						Исключение
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Установка цены на ГАЗ 40 л", ИнформацияОбОшибке(), Истина);
							
						КонецПопытки;	
						
						Заказ.Организация		= ОргБонусТомск;
																		
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЕсли;
				КонецЦикла;
				
				Если (СтрокаТаблицыСчета.IsTTN <> "True") И (КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ ВсегдаЗаНАЛ(Заказ.Партнер) ИЛИ МирНапитковЗаНал_ТолькоСевер(Заказ.Партнер) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_")) И СигаретыЗаНАЛ) Тогда
					
					Заказ.Комментарий = Заказ.Комментарий + " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!!";					
					
				Иначе	
					
					Если СтрокаТаблицыСчета.WithouPay = "True" Тогда
						Заказ.Комментарий = Заказ.Комментарий + " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!!";
					КонецЕсли;
				
					//Если СтрокаТаблицыСчета.IsInvoice = "True" Тогда
					//	Заказ.Комментарий = Заказ.Комментарий + " нал";
					//КонецЕсли;
					
				КонецЕсли;					
				
				Попытка
					Если ЗначениеЗаполнено(Партнер.Комментарий) Тогда
						Заказ.Комментарий = Заказ.Комментарий + Символы.ПС + СокрЛП(Партнер.Комментарий);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Добавление комментария Партнера. Исключение!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Если НЕ ЗначениеЗаполнено(Заказ.Склад) Тогда
					Заказ.Склад=Справочники.Склады.НайтиПоНаименованию("Томск пиво, вода").Ссылка;
				КонецЕсли;
				
				Если ИдКПК = "DevPetrushka" Тогда 
					ЗагрузкаДокументов_ОбработатьВидЦеныПетрушка(Заказ);
				КонецЕсли;	
				
				РассчитатьСкидки(Заказ);
				
				//Блинов
				Заказ.алкПунктРазгрузки=Заказ.Партнер.алкОсновнойПунктРазгрузки;
				Если ЗначениеЗаполнено(Заказ.алкПунктРазгрузки) Тогда
					Заказ.алкЛицензияКонтрагента=Заказ.алкПунктРазгрузки.алкОсновнаяЛицензия;
				КонецЕсли;
				Заказ.алкПунктРазгрузкиОрганизации=Заказ.Организация.алкОсновнойПунктРазгрузки;
				Заказ.алкЛицензияОрганизации=Заказ.Организация.алкОсновнаяЛицензия;
				
				Заказ.ТоварыОригинал.Загрузить(Заказ.Товары.Выгрузить()); //дублируем таблицу, чтобы потом легче выяснять было что заказывал агент и что в итоге отправилось
								
				Если (Заказ.Соглашение.Организация = оргРИФПлюс) И (Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент)) Тогда
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
				
				Попытка
					Если ИдКПК = "DevPetrushka" Тогда 
						
						врИнвойсИД = СокрЛП(СтрокаТаблицыСчета.InvoiceID); 
						Если СтрЧислоВхождений(врИнвойсИД, "_NDS") > 0 Тогда
							Заказ.НомерПоДаннымКлиента = Сред(врИнвойсИД, 25, 9);
						Иначе								
							Заказ.НомерПоДаннымКлиента = Прав(врИнвойсИД, 9);
						КонецЕсли;	
						Заказ.ДатаПоДаннымКлиента  = Дата(Сред(врИнвойсИД, 9, 8));
		
						
					КонецЕсли;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА - Исключение! Данные клиента.", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Попытка
					Если ИдКПК = "DevPetrushka" Тогда 
						
		            	врДокПетрушка = Петрушка_ПолучитьЗаказПетрушка(Заказ.НомерПоДаннымКлиента, Заказ.ДатаПоДаннымКлиента);
						Если ЗначениеЗаполнено(врДокПетрушка) Тогда
							врВариантОтветаКлиента = Петрушка_ВариантОтветаКлиентаПриЗаказе(врДокПетрушка);
							Если Не ПустаяСтрока(врВариантОтветаКлиента) Тогда
								Заказ.Комментарий = Заказ.Комментарий + " " + "[" + СокрЛП(врВариантОтветаКлиента) + "]"; 
							КонецЕсли;	
						КонецЕсли;	
						
					КонецЕсли;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА. ВАРИАНТ ОТВЕТА КЛИЕНТА - Исключение! Данные клиента.", ИнформацияОбОшибке(), Истина);
				КонецПопытки;													
								
				СтатусЗаписиДокумента = "Не проведен";
				
				ФлагРазрешенияДокументаКЗагрузке = Истина;
				Попытка
					
					ПричинаОтказа   = ".....";
					
					ЭтоТоварыБезНДС = Ложь;
					Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						ЭтоТоварыБезНДС = Истина;
					КонецЕсли;	
						
					ФлагРазрешенияДокументаКЗагрузке = ЗагрузкаДокументов_ЗаказРазрешенКЗагрузке(Заказ, ЭтоТоварыБезНДС, ПричинаОтказа);
					
					Если Не ФлагРазрешенияДокументаКЗагрузке Тогда
						Для Каждого ТекСтрокаТовары Из Заказ.Товары Цикл
							НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
							НовСтрТовар.Номенклатура     = ТекСтрокаТовары.Номенклатура;
							НовСтрТовар.Цена 		     = Число(ТекСтрокаТовары.Цена);
							НовСтрТовар.Количество       = ТекСтрокаТовары.Количество;
							НовСтрТовар.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
							НовСтрТовар.ПричинаОтказа    = ПричинаОтказа;
						КонецЦикла;	
						Продолжить;
					КонецЕсли;	
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка разрешения документа к загрузке. Исключение!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
				
				// Проверка на пустой заказ
				
				ЭтоПустойЗаказ = ПустойЗаказ(Заказ);
				
				Попытка
					
					Если ЭтоПустойЗаказ Тогда
						
						врЗаказПетрушка = Петрушка_ПолучитьЗаказПетрушка(Заказ.НомерПоДаннымКлиента, Заказ.ДатаПоДаннымКлиента);
						
						Если ЗначениеЗаполнено(врЗаказПетрушка) Тогда
							Петрушка_ОчиститьЗаявкуПетрушка(врЗаказПетрушка);
						//	ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Очистка заказа петрушка : " + Строка(Заказ.НомерПоДаннымКлиента) + " от " + Строка(Заказ.ДатаПоДаннымКлиента));
						КонецЕсли;	
						
					КонецЕсли;	
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Пустой заказ петрушка. Исключение!", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				Попытка
		
					Если Заказ.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
			
						врДоговорКонтрагента = аян_СинхронизацияСервер.Договоры_ПолучитьДоговорКонтрагента(Заказ.Контрагент);
			
						Если ЗначениеЗаполнено(врДоговорКонтрагента) Тогда
				
							Заказ.Договор = врДоговорКонтрагента;
											
						КонецЕсли;	
			
					КонецЕсли;	
		
				Исключение
						
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОПРЕДЕЛЕНИЕ ДОГОВОРА", ИнформацияОбОшибке(), Истина);
		
				КонецПопытки;	
				
				Попытка
					аян_ОбщийМодульСервер.ЗаполнитьОтветвеннымиЛицамиОрганизации(Заказ, Заказ.Организация);
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОТВ. ЛИЦА - Исключение !!!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Попытка
					Если ЭтоПустойЗаказ Тогда
						
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~ПУСТОЙ ЗАКАЗ : " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
						
						ЗаписатьДанныеВЛогЗагрузкиДокументов("Заказ", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, Документы.ЗаказКлиента.ПустаяСсылка(), Заказ.Организация, Заказ.Партнер, "Пустой");
						
						Продолжить;
						
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при логировании загрузки документа (ЗАКАЗ)!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
								
				Попытка
					врИнвойсФлюгер = СокрЛП(СтрокаТаблицыСчета.InvoiceID);
					ФлагФлюгер     = Лев(врИнвойсФлюгер, 4);					
					Если ФлюгерЭтоПервыйЗаказ Тогда
						Если ФлагФлюгер = "FLG_" Тогда
							Заказ.ИДФлюгер       = Прав(врИнвойсФлюгер, СтрДлина(врИнвойсФлюгер) - 4);
							ФлюгерЭтоПервыйЗаказ = Ложь;
						КонецЕсли;	
					КонецЕсли;
					Если ФлагФлюгер = "FLG_" Тогда
						Заказ.ИДФлюгерДоп = Прав(врИнвойсФлюгер, СтрДлина(врИнвойсФлюгер) - 4);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Флюгер первый заказ", ИнформацияОбОшибке(), Истина);
				КонецПопытки;					
				
				СчетчикПопытокЗаписи = 1;
				ФлагПродолженияПопыткиЗаписи = Истина;
				
	//			Пока ФлагПродолженияПопыткиЗаписи Цикл
	
					
					Попытка   
		
		            	Если (Выборка.Склад <> "_ДеревенскоеМолочко_") Тогда
					
							Заказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
							
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ЗАКАЗ записан и проведен: " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
							
							ЗаказПроведен = Истина;
							
							СтатусЗаписиДокумента = "Проведен";
							
							ФлагПродолженияПопыткиЗаписи = Ложь;
							
						Иначе
							
							Заказ.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
							
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ЗАКАЗ ТОЛЬКО записан: " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
							
							ЗаказПроведен = Ложь;
							
							СтатусЗаписиДокумента = "Записан";
							
							ФлагПродолженияПопыткиЗаписи = Ложь;
							
						КонецЕсли;	
												
					Исключение
						
						//Попытка
						//	Если СчетчикПопытокЗаписи <= 10 Тогда
						//		СчетчикПопытокЗаписи = СчетчикПопытокЗаписи + 1;
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Попытка номер " + Строка(СчетчикПопытокЗаписи) + " проведения документа " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
						//		СтартЗамераЗадержки = ТекущаяДата();
						//		Пока (ТекущаяДата() - СтартЗамераЗадержки) <= 5 Цикл
						//		КонецЦикла;	
						//		Продолжить;
						//	Иначе
						//		ФлагПродолженияПопыткиЗаписи = Ложь;
						//	КонецЕсли;						
						//Исключение
						//	ФлагПродолженияПопыткиЗаписи = Ложь;
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при ожидании проведения Заказа!", ИнформацияОбОшибке(), Истина);
						//КонецПопытки;	
						
						Попытка
							Инфо = ИнформацияОбОшибке();
						Исключение
						КонецПопытки;	
						//Описание = "Модуль: """ + Строка(Инфо.ИмяМодуля) + """ Номер строки: "+ Строка(Инфо.НомерСтроки) + " Описание: """ + Строка(Инфо.Описание) + """";
						//Причина  = Инфо.Причина;
						//Описание = Описание + Символы.ПС + "Модуль: """ + Строка(Причина.ИмяМодуля) + """ Номер строки: " + Строка(Причина.НомерСтроки) + " Описание: """ + Строка(Причина.Описание) + """";
						//Пока Причина.Причина <> Неопределено Цикл						
						//	Причина  = Причина.Причина;
						//	Описание = Описание + Символы.ПС + "Модуль: """ + Строка(Причина.ИмяМодуля) + """ Номер строки: " + Строка(Причина.НомерСтроки) + " Описание: """ + Строка(Причина.Описание) + """";
						//КонецЦикла;					
					
						Попытка
						
							Заказ.Записать(РежимЗаписиДокумента.Запись);
							
							СтатусЗаписиДокумента = "Записан";
							
							врЗаНаличные = Ложь;
							
							Если (СтрокаТаблицыСчета.IsTTN <> "True") И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер)) Тогда 
								врЗаНаличные = Истина;
							КонецЕсли;	
							
							ОтложенныеЗаявки_ЗарегистрироватьЗаявку(Заказ, врЗаНаличные);
							
							Попытка
								ЗаписатьОшибку1СвЛогФайл(Событие1С, ?(КонтрагентПодключенКЕГАИС(Заказ.Партнер), " Точка в ЕГАИС.", "Точка не в ЕГАИС!!!") + " НЕ удалось ПРОВЕСТИ заказ клиента, документ будет записан " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")", Инфо, Истина);
							Исключение
								
							КонецПопытки;	
							
												
						Исключение
						
							ЗаписатьДанныеОЗаказеВЛогФайл(Заказ);
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось ЗАПИСАТЬ заказ клиента " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")", ИнформацияОбОшибке(), Истина);
							
						КонецПопытки;	
					
						//Попытка
						//	ИнформационноеСообщение_ПроверитьАлкогольЕГАИС(Заказ);
						//Исключение
						//КонецПопытки;	
					
						// -> Ответ на заказ при отказе проведения
					
						Попытка
						
							ТочкаВЕГАИС = КонтрагентПодключенКЕГАИС(Заказ.Партнер);
							
							Для Каждого ТекСтрокаТовары Из Заказ.Товары Цикл
								
								НайденныеСтрокиТЗ = СтрокаТаблицыСчета.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрокаТовары.Номенклатура));
							
								Для Каждого ТекНайденнаяСтрока Из НайденныеСтрокиТЗ Цикл
									СтрокаТаблицыСчета.Товары.Удалить(ТекНайденнаяСтрока);
								КонецЦикла;	
							
								НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
								НовСтрТовар.Номенклатура     = ТекСтрокаТовары.Номенклатура;
									НовСтрТовар.Цена 		     = Число(ТекСтрокаТовары.Цена);
								НовСтрТовар.Количество       = ТекСтрокаТовары.Количество;
								НовСтрТовар.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
								НовСтрТовар.ПричинаОтказа    = ?(ТочкаВЕГАИС, "неизв.", "не ЕГАИС");
								
							КонецЦикла;
							
						Исключение
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при формировании ответа на заказ!", ИнформацияОбОшибке(), Истина);
						
						КонецПопытки;	
						
						// <- Ответ на заказ при отказе проведения
															
						ЗаказПроведен = Ложь;
						
					//	Продолжить; 
					
					КонецПопытки;
					
				
			//	КонецЦикла;	
				
			//	ЗафиксироватьТранзакцию();
			
			    Попытка 
					Если ЭтоПустойЗаказ Тогда
						// Фиксируем в журнале регистрации
						ЗаписатьОшибку1СвЛогФайл("ПУСТОЙ ЗАКАЗ!!!", СокрЛП(Заказ.Номер));
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл("111", "111");
				КонецПопытки;	
			
				
				Попытка
					Если (СтатусЗаписиДокумента = "Записан") ИЛИ (СтатусЗаписиДокумента = "Проведен") Тогда
						ЗаписатьДанныеВЛогЗагрузкиДокументов("Заказ", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, Заказ.Ссылка, Заказ.Организация, Заказ.Партнер, СтатусЗаписиДокумента);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при логировании загрузки документа (ЗАКАЗ)!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
				Если (СтатусЗаписиДокумента <> "Проведен") Тогда
					Продолжить;
				КонецЕсли;	
				
				Попытка
					
					Если (СтатусЗаписиДокумента = "Проведен") Тогда
						
						МассивЗаказов.Добавить(Заказ.Ссылка);
						
					КонецЕсли;	
						
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Добавление ЗАКАЗА в массив", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				// КИДЯЕВА
				
		//		Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Кидяева Татьяна Александровна") Тогда
					
					Попытка
			
			            врСоздатьПКО = Ложь;
						
						врЭтоБонус  = Ложь;
						Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
							врЭтоБонус = Истина;
						КонецЕсли;	
						врЭтоДокГаз = ЗагрузкаДокументов_ЭтоГаз(Заказ.Ссылка);
						Если врЭтоДокГаз Тогда
							врЭтоБонус = Ложь;
						КонецЕсли;				
											
						Если (НЕ врЭтоБонус) И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ МирНапитковЗаНал_ТолькоСевер(Заказ.Партнер) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_")) И СигаретыЗаНАЛ) Тогда 
							врСоздатьПКО = Истина;
						КонецЕсли;	
						
						Если ВсегдаЗаНАЛ(Заказ.Партнер) Тогда
							врСоздатьПКО = Истина;						
						КонецЕсли;	
						
						врПетрушка = Ложь;
						Если ИдКПК = "DevPetrushka" Тогда
							врПетрушка = Истина;
						КонецЕсли;	
					
						ОтложенноеПроведение_ЗарегистрироватьЗаказ(Заказ.Ссылка, Документы.РеализацияТоваровУслуг.ПустаяСсылка(), ДатаОтгрузкиОтложенная, врНужноПровестиРеализацию, врСоздатьПКО, врПетрушка);
						
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "КИДЯЕВА!!!", ИнформацияОбОшибке(), Истина);
						
					КонецПопытки;
					
					Продолжить;
						
		//		КонецЕсли;
				
				// КИДЯЕВА
								
				// РЕАЛИЗАЦИЯ для ЗАКАЗА
				
				Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				
				Реализация.Заполнить(Заказ.Ссылка);	
				
				Реализация.Менеджер             = Заказ.Менеджер;
				Реализация.ТребуетсяЗалогЗаТару = Истина;
				
				Реализация.Статус = ?(Константы.ЗапретРезервированияВЗаказе.Получить(),Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке,Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
				
				алкРаботаСДиалогамиСервер.алкЗаполнитьЛицензииИПунктРазгрузки(Реализация, Неопределено, Истина);	
				
				Реализация.Дата = Заказ.Дата;
				Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) Тогда
					Реализация.Дата = ДатаОтгрузкиОтложенная;
				КонецЕсли;	
				
				//Если ИдКПК <> "DevInsider" Тогда
				//	Если Не ЭтоИнвойсНашейТочки() Тогда
						Реализация.Дата	= ДатаОтгрузкиОтложенная;							
				//	КонецЕсли;
				//КонецЕсли;	
				
				// СЕРИИ
				
				//надо заполнить серии если это пиво
				//правда делать надо это для реализации а не для заказа
				Если Реализация.Организация = ОсновнаяФирма И Реализация.Склад = ОсновнойСклад Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;
				
				Если Реализация.Организация = оргРИФПлюс И Реализация.Склад = СкладРИФПлюс Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;				
				
				Если Реализация.Организация = оргРИФПлюс И Реализация.Склад = СкладРИФПлюсАлкоголь Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;								
				
				Если (Реализация.Организация = оргРИФ) ИЛИ (Реализация.Организация = оргАВН_70) ИЛИ (Реализация.Организация = оргТОП_17) Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;								
				
				Реализация.Комментарий 			 = Заказ.Комментарий;
				Реализация.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
								
				ДокРеалЗаписан  = Ложь;
				ДокРеалПроведен = Ложь;
				
				
//Kirich чек комментария и попытка проведения документа  23.05.2018
//				Попытка
//						
//					Если Реализация.Комментарий = "" ИЛИ Реализация.Комментарий = " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!! нал" ИЛИ Реализация.Комментарий = " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!!" ИЛИ Реализация.Комментарий = " нал" Тогда
//							
//						Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//							
//						ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИЯ записан и проведен: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//						
//					Иначе
//						
//						Реализация.Записать(РежимЗаписиДокумента.Запись);
//							
//						ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//							
//						ДокРеалЗаписан = Истина;
//						
//						
//					КонецЕсли;
//					
//				Исключение
//					
//					Реализация.Записать(РежимЗаписиДокумента.Запись);
//						
//					ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//						
//					ДокРеалЗаписан = Истина;
//					
//						
//				КонецПопытки;

				
				//Попытка
				//		
				//	Реализация.Записать(РежимЗаписиДокумента.Запись);
				//		
				//	ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
				//		
				//	ДокРеалЗаписан = Истина;
				//							
				//Исключение
				//		
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
				//	
				//	Возврат;
				//							
				//КонецПопытки;
				
				Если Не ЗагрузкаДокументов_СтатусыУстановленыВерно(Реализация) Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;	
				
				Если Реализация.Склад = СкладТомскОборудование Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;	
				
				врЗарегистрироватьДокументДляОтложенногоПроведения = Ложь;
								
				Если врНужноПровестиРеализацию Тогда
					врЗарегистрироватьДокументДляОтложенногоПроведения = Истина;
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;	
				
				Если врНужноПровестиРеализацию Тогда

					Попытка
					
						Реализация.Записать(РежимЗаписиДокумента.Проведение);						
											
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан и ПРОВЕДЕН: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
						ДокРеалЗаписан  = Истина;
						ДокРеалПроведен = Истина;
																		
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента: " + СокрЛП(Реализация.Партнер), ИнформацияОбОшибке(), Истина); 
						
						Попытка
						
							Реализация.Записать(РежимЗаписиДокумента.Запись);
						
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
							ДокРеалЗаписан = Истина;
											
						Исключение
						
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
					
						//	Возврат;
											
						КонецПопытки;
						
					КонецПопытки;
					
				Иначе	

					Попытка
						
						Реализация.Записать(РежимЗаписиДокумента.Запись);
						
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
						ДокРеалЗаписан = Истина;
											
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
					
					//	Возврат;
											
					КонецПопытки;
					
				КонецЕсли;	
				
				Если ДокРеалПроведен Тогда
					СоздатьСчетФактуруВыданный(Реализация.Ссылка);
				КонецЕсли;	
				
				Если ДокРеалЗаписан Тогда
					//Если Выборка.Склад = "_ТоварыОвощиФрукты_" Тогда 
					//	ФРУКТЫ_ОВОЩИ_СоздатьПоступление(Реализация.Ссылка);
					//КонецЕсли;	
					Если врЗарегистрироватьДокументДляОтложенногоПроведения Тогда
						ОтложенноеПроведение_ЗарегистрироватьДокумент(Реализация.Ссылка);
					ИначеЕсли ЭтоРеализацияПеченьеПавлово(Реализация.Ссылка) Тогда
						ОтложенноеПроведение_ЗарегистрироватьДокумент(Реализация.Ссылка);
					КонецЕсли;	
				КонецЕсли;	
							
				//Если ДокРеалЗаписан И (Не КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Реализация.Партнер)) Тогда
				//	
				//	Попытка
				//		Если (Реализация.ДатаПлатежа - ТекущаяДата()) < (ДеньВСекундах * 3) Тогда
				//			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неверная дата платежа!!! " + СокрЛП(Реализация));	
				//		КонецЕсли;	
				//	Исключение
				//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ДАТЫ ПЛАТЕЖА. Исключение!", ИнформацияОбОшибке(), Истина);
				//	КонецПопытки;					
				//	
				//КонецЕсли;	
												
				// ПКО для ЗАКАЗА
				
				Если ЭтоБортАгента И ЭтоБортБелый Тогда
					
					Если (СтрокаТаблицыСчета.WithouPay = "True") Тогда
					
						врРеализацияПроведена = Ложь;
					
						Попытка
							Реализация.Записать(РежимЗаписиДокумента.Проведение);
							врРеализацияПроведена = Истина;
						Исключение	
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Проведение реализации", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
					
						Если врРеализацияПроведена И (СтрокаТаблицыСчета.IsTTN <> "True") Тогда
							Попытка
								Оплаты_СоздатьОплатуОтАгентаНаОснованииНакладной(ТекАгент, Реализация.Ссылка);							
							Исключение	
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Создание оплаты от агента", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
						КонецЕсли;
					
						Продолжить;
						
					КонецЕсли;	
					
				КонецЕсли;					
				
				Если ЭтоБортАгента И (Не ЭтоБортБелый) Тогда
					
					врРеализацияПроведена = Ложь;
					
					Попытка
						Реализация.Записать(РежимЗаписиДокумента.Проведение);
						врРеализацияПроведена = Истина;
					Исключение	
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Проведение реализации", ИнформацияОбОшибке(), Истина);
					КонецПопытки;
					
					Если врРеализацияПроведена И (СтрокаТаблицыСчета.IsTTN <> "True") Тогда
						Попытка
							Оплаты_СоздатьОплатуОтАгентаНаОснованииНакладной(ТекАгент, Реализация.Ссылка);							
						Исключение	
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Создание оплаты от агента", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;	
				
				врЭтоБонус  = Ложь;
				Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
					врЭтоБонус = Истина;
				КонецЕсли;	
				врЭтоДокГаз = Ложь;
				Если ДокРеалЗаписан Тогда
					врЭтоДокГаз = ЗагрузкаДокументов_ЭтоГаз(Заказ.Ссылка);
					Если врЭтоДокГаз Тогда
						врЭтоБонус = Ложь;
					КонецЕсли;	
				КонецЕсли;	
				
				Если ДокРеалЗаписан И (НЕ врЭтоБонус) И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ МирНапитковЗаНал_ТолькоСевер(Заказ.Партнер) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_")) И СигаретыЗаНАЛ) Тогда 
					
				//	Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Кидяева Татьяна Александровна") Тогда
						ОтложенноеПроведение_ЗарегистрироватьЗаказ(Заказ.Ссылка, Реализация.Ссылка, Реализация.Дата, Ложь, Истина);
				//	Иначе	
					
					//ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
					//
					//ПКО.Заполнить(Реализация.Ссылка);
					//
					//ДатаДок = СтрокаТаблицыСчета.PaymentDate;
					//ДатаДок = СтрЗаменить(ДатаДок, "-","");
					//ДатаДок = СтрЗаменить(ДатаДок, ":","");
					//ДатаДок = СтрЗаменить(ДатаДок, " ","");
					//
					//Попытка
					//	ПКО.Дата = ?(ЗначениеЗаполнено(ДатаДок),Дата(ДатаДок),Реализация.Дата);
					//Исключение
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неясное значение PaymentDate: """ + Строка(СтрокаТаблицыСчета.PaymentDate) + """. Подставлена дата из реализации: " + Строка(Реализация.Дата));
					//	ПКО.Дата = Реализация.Дата;
					//КонецПопытки;
					//
					//ПКО.СуммаДокумента = Реализация.Ссылка.СуммаДокумента;
					//ПКО.Основание      = ПКО.ДокументОснование;
					//
					//ПКО.РасшифровкаПлатежа.Очистить();
					//ПКО.Касса = Справочники.Кассы.НайтиПоНаименованию(Реализация.Организация.Наименование + " (RUB)");
					//ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
					//Реализация.Ссылка,
					//Реализация.Договор,
					//Реализация.Валюта,
					//ПКО.РасшифровкаПлатежа,
					//Реализация.Партнер,
					//Реализация.Ссылка);
					//
					//ПКО.РасшифровкаПлатежа[0].Сумма = ПКО.СуммаДокумента;
					//ПКО.РасшифровкаПлатежа[0].Заказ = Реализация.Ссылка;
					//
					//Если НЕ ЗначениеЗаполнено(ПКО.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда 
					//	ПКО.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
					//КонецЕсли;
					//
					//МассивДокументов = ПКО.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
					//МассивДокументов.Добавить(ПКО.ДокументОснование);
					//
					//Если Реализация.Организация = оргАТ_Логистик Тогда
					//	ПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента,ПКО.Валюта,МассивДокументов,Ложь, Истина);
					//Иначе
					//	ПКО.ВТомЧислеНДС = "";
					//КонецЕсли;	
					//
					//Попытка
					//	ПКО.Записать(РежимЗаписиДокумента.Запись);
					//	ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПКО для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(ПКО.Ссылка) + " (" + Строка(ПКО.Контрагент) + "; Сумма: " + Строка(ПКО.СуммаДокумента) + ")");
					//Исключение
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи ПКО для ЗАКАЗА!  Организация: " + Строка(ПКО.Организация) + "; Контрагент : " + Строка(ПКО.Контрагент) + "; Сумма: " + Строка(ПКО.СуммаДокумента), ИнформацияОбОшибке(), Истина);
					//КонецПопытки;
					//
					//КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЭкспортЗагруженныхДокументов(Счета);
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка экспорта ответов на заказ!", ИнформацияОбОшибке(), Истина); 
	КонецПопытки;	
		
КонецПроцедуры	// Загрузка 


Процедура ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗаявокВСинхронизации)
	
	врЗамер_Старт = ТекущаяДата();
	
	Событие1С = "Импорт документов";	
		
	Файл = Новый Файл(каталогЗагрузки + "\Invoice.txt");
	Если Файл.Существует() = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		МассивЗаказов.Очистить();
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Очистка СТОП-ЛИСТА", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	файл = Новый ТекстовыйДокумент;
	файл.Прочитать(каталогЗагрузки + "\Invoice.txt", КодировкаТекста.ANSI);	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Обрабатываем " + каталогЗагрузки + "Invoice.txt");
	
	файлВыгрузки   = Новый ТекстовыйДокумент;
	файлВыгрузкиТЧ = Новый ТекстовыйДокумент;
	
	КЧ2		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
	КЧ3		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
	КЧ4		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
	КС20 	= ПолучитьОписаниеТиповСтроки(20);
	КС36 	= ПолучитьОписаниеТиповСтроки(36);
	КС40 	= ПолучитьОписаниеТиповСтроки(40);
	КС100 	= ПолучитьОписаниеТиповСтроки(100);
	
	ТЗЛимит = Новый ТаблицаЗначений;
	ТЗЛимит.Колонки.Добавить("ГУИД",  КС40);
	ТЗЛимит.Колонки.Добавить("Сумма", КЧ2);
	
	ТЗ = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТЗ = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНом = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ОписаниеТиповЕИ = Новый ОписаниеТипов(Массив);
	
	ЕстьДопКолонки = Ложь;
	Попытка
		ДопСписокАтрибутов = Split(файл.ПолучитьСтроку(2), Символы.Таб);		
		Для Каждого ДопТекАтрибут Из ДопСписокАтрибутов Цикл
			Если ДопТекАтрибут.Значение = "ClientPetrov" Тогда
				ЕстьДопКолонки = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка на доп. реквизиты", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	МассивГУИДЗаказов = Новый Массив;
	
	Счета = Новый ТаблицаЗначений;
	
	Счета.Колонки.Добавить("DeviceID",				КС20);
//	Счета.Колонки.Добавить("InvoiceID",				КС36);
	Счета.Колонки.Добавить("InvoiceID",				КС40);
	Счета.Колонки.Добавить("InvoiceRefID",			КС36);
	Счета.Колонки.Добавить("InvoiceTypeRefID",		КС20);
	Счета.Колонки.Добавить("ParentInvoiceID",		КС20);
	Счета.Колонки.Добавить("ParentInvoiceRefID",	КС36);
	Счета.Колонки.Добавить("AgentRefID",			КС36);
	Счета.Колонки.Добавить("ShopRefID",				КС40);
	Счета.Колонки.Добавить("VisitID",				КС36);
	Счета.Колонки.Добавить("InvoiceDateTime",		КС20);
	Счета.Колонки.Добавить("InvoiceNo",				КС20);
	Счета.Колонки.Добавить("InvoiceAmount",			КЧ2);
	Счета.Колонки.Добавить("AmountPaID",			КЧ2);
	Счета.Колонки.Добавить("DeliveryFromDateTime",	КС20);
	Счета.Колонки.Добавить("DeliveryThruDateTime",	КС20);
	Счета.Колонки.Добавить("IsConfidential",		КС20); 
	Счета.Колонки.Добавить("Note",					КС100);	
	Счета.Колонки.Добавить("SellerRefID",			КС100);
	Счета.Колонки.Добавить("PriceTypeRefID",		КС36); 
	Счета.Колонки.Добавить("InvoiceTypeCode",		КС36); 
	Счета.Колонки.Добавить("InvoiceRequired",		КС36); 	
	Счета.Колонки.Добавить("ShopID",				КС36);
	Счета.Колонки.Добавить("GpsLatitude",			КС36);
	Счета.Колонки.Добавить("GpsLongitude",			КС36);
	Счета.Колонки.Добавить("GpsHDOP",				КС36);
	Счета.Колонки.Добавить("GpsIsVisited",			КС36);
	Счета.Колонки.Добавить("InvoiceWeight",			КС36);
	Счета.Колонки.Добавить("InvoiceStatusRefID",	КС36);
	Счета.Колонки.Добавить("StockRefID",			КС36);
	Счета.Колонки.Добавить("InvoiceInitDateTime",   КС20);
	//kirich 13.08.2018
//	Счета.Колонки.Добаивть("ReturnForm",			КЧ2);
	//
	Счета.Колонки.Добавить("IsTTN",					КС36);
	Счета.Колонки.Добавить("IsInvoice",				КС20);
	Счета.Колонки.Добавить("WithouPay",				КС20);	
	Счета.Колонки.Добавить("Return",				КС20);
	Счета.Колонки.Добавить("Petrov",				КС20);
	Счета.Колонки.Добавить("PaymentDate",			КС20);
	
	Если ЕстьДопКолонки Тогда
		Счета.Колонки.Добавить("Morning",			КС20);
		Счета.Колонки.Добавить("ClientPetrov",		КС20);		
		Счета.Колонки.Добавить("ClientPetrovRefID", КС36);		
	КонецЕсли;	
		
	Счета.Колонки.Добавить("ТЧ",					ОписаниеТиповТЗ);
	Счета.Колонки.Добавить("Товары",				ОписаниеТиповТЗ);
		
	КоличествоЗаписей = Число(файл.ПолучитьСтроку(1));   
	
	ЗагружатьТЧ = 0;
	Для сч = 3 По КоличествоЗаписей + 2 Цикл
		
		СписокАтрибутов = Split(файл.ПолучитьСтроку(сч), Символы.Таб);
		
		Если СписокАтрибутов.Количество() < 34 Тогда
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена структура файла Invoice.txt!");
			ФайлОшибок.ДобавитьСтроку("Нарушена структура файла Invoice.txt!");
			error = 1;
			Возврат;
			
		Иначе
			
			НоваяСтрока = Счета.Добавить();
			
			НоваяСтрока.DeviceID 				= СписокАтрибутов[0].Значение; //Для связи
			НоваяСтрока.InvoiceID				= СписокАтрибутов[1].Значение;
			
			// НоваяСтрока.InvoiceRefID 			= СписокАтрибутов[2].Значение;
			НоваяСтрока.InvoiceRefID 			= ПолучитьНомерОтветаНаЗаказ();
			
			НоваяСтрока.InvoiceTypeRefID 		= СписокАтрибутов[3].Значение;
			НоваяСтрока.ParentInvoiceID			= СписокАтрибутов[4].Значение; //Для связи
			НоваяСтрока.ParentInvoiceRefID		= СписокАтрибутов[5].Значение;
			НоваяСтрока.AgentRefID 				= СписокАтрибутов[6].Значение;
			НоваяСтрока.ShopRefID 				= СписокАтрибутов[7].Значение;
			НоваяСтрока.VisitID 				= СписокАтрибутов[8].Значение;
			НоваяСтрока.InvoiceDateTime			= СписокАтрибутов[9].Значение;			
			НоваяСтрока.InvoiceNo				= СписокАтрибутов[10].Значение;
			НоваяСтрока.InvoiceAmount			= СписокАтрибутов[11].Значение;
			НоваяСтрока.AmountPaid				= СписокАтрибутов[12].Значение;
			НоваяСтрока.DeliveryFromDateTime	= СписокАтрибутов[13].Значение;
			НоваяСтрока.DeliveryThruDateTime	= СписокАтрибутов[14].Значение;
			НоваяСтрока.IsConfidential			= СписокАтрибутов[15].Значение; 
			НоваяСтрока.Note					= СписокАтрибутов[16].Значение;
			НоваяСтрока.SellerRefID				= СписокАтрибутов[17].Значение;
			НоваяСтрока.PriceTypeRefID	 		= СписокАтрибутов[18].Значение;
			НоваяСтрока.InvoiceTypeCode	 		= СписокАтрибутов[19].Значение;
			НоваяСтрока.InvoiceRequired	 		= СписокАтрибутов[20].Значение;
			НоваяСтрока.ShopID					= СписокАтрибутов[21].Значение;
			НоваяСтрока.GpsLatitude				= СписокАтрибутов[22].Значение;
			НоваяСтрока.GpsLongitude			= СписокАтрибутов[23].Значение;
			НоваяСтрока.GpsHDOP					= СписокАтрибутов[24].Значение;
			НоваяСтрока.GpsIsVisited			= СписокАтрибутов[25].Значение;
			НоваяСтрока.InvoiceWeight			= СписокАтрибутов[26].Значение;
			НоваяСтрока.InvoiceStatusRefID		= СписокАтрибутов[27].Значение;
			НоваяСтрока.StockRefID				= СписокАтрибутов[28].Значение;
			НоваяСтрока.InvoiceInitDateTime		= СписокАтрибутов[29].Значение;
			//kirich 13.08.2018
//			НоваяСтрока.ReturnForm 				= СписокАтрибутов[30].Значение;
			//список сдвинется на 1 значение из-за добавления причины возврата
//			НоваяСтрока.IsTTN					= СписокАтрибутов[31].Значение;//30].Значение;
//			НоваяСтрока.IsInvoice				= СписокАтрибутов[32].Значение;//31].Значение;
//			НоваяСтрока.WithouPay				= СписокАтрибутов[33].Значение;//32].Значение;
//			НоваяСтрока.Return					= СписокАтрибутов[34].Значение;//33].Значение;
//			НоваяСтрока.Petrov					= СписокАтрибутов[35].Значение;//34].Значение;
//			НоваяСтрока.PaymentDate				= СписокАтрибутов[36].Значение;//35].Значение;

			НоваяСтрока.IsTTN					= СписокАтрибутов[31].Значение;
			НоваяСтрока.IsInvoice				= СписокАтрибутов[30].Значение;
			Если ИдКПК <> "DevInsider" Тогда
				Если НЕ ПустаяСтрока(НоваяСтрока.IsInvoice) Тогда
					НоваяСтрока.IsTTN = "True";
				КонецЕсли;				
			КонецЕсли;	
			НоваяСтрока.WithouPay				= СписокАтрибутов[32].Значение;
			НоваяСтрока.Return					= СписокАтрибутов[33].Значение;
			НоваяСтрока.Petrov					= СписокАтрибутов[34].Значение;
			НоваяСтрока.PaymentDate				= СписокАтрибутов[35].Значение;
			
			Если ЕстьДопКолонки Тогда
				НоваяСтрока.Morning				= СписокАтрибутов[36].Значение;
				НоваяСтрока.ClientPetrov		= СписокАтрибутов[37].Значение;	
			КонецЕсли;
			
			Попытка
				Если КегиУтро_Хорика.Найти(ТекАгент) = Неопределено Тогда
					Если ДеньНедели(ТекущаяДата()) <> 1 Тогда
						НоваяСтрока.Petrov = "False";
					КонецЕсли;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "НА СЕГОДНЯ ТОЛЬКО ПОНЕДЕЛЬНИК", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
			
			МассивГУИДЗаказов.Добавить(НоваяСтрока.InvoiceID);
			
			Попытка
				Если НоваяСтрока.IsTTN = "False" Тогда
					НовСтрокаЛимит = ТЗЛимит.Добавить();
					НовСтрокаЛимит.ГУИД  = НоваяСтрока.ShopRefID;
					НовСтрокаЛимит.Сумма = НоваяСтрока.InvoiceAmount;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Лимит. Ислючение!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
	//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТЕСТ ОТВЕТ: " + Строка(НоваяСтрока.InvoiceRefID));
			
			ТЧСчета = Новый ТаблицаЗначений;               
			ТЧСчета.Колонки.Добавить("ProductRefID",		КС100);
			ТЧСчета.Колонки.Добавить("Price",				КЧ2);
			ТЧСчета.Колонки.Добавить("Volume",				КЧ3);
			ТЧСчета.Колонки.Добавить("VatRate",				КС20);
			ТЧСчета.Колонки.Добавить("DiscountRate",		КЧ4);
			ТЧСчета.Колонки.Добавить("DiscountAmount",  	КЧ3);
			ТЧСчета.Колонки.Добавить("MeasureUnitRefID",	КС20);
			
			НоваяСтрока.ТЧ = ТЧСчета;
			
			ТЧТовары = Новый ТаблицаЗначений;
			ТЧТовары.Колонки.Добавить("Номенклатура",		ОписаниеТиповНом);
			ТЧТовары.Колонки.Добавить("Цена",				КЧ2);
			ТЧТовары.Колонки.Добавить("Количество",			КЧ3);
			ТЧТовары.Колонки.Добавить("ЕдиницаИзмерения",	ОписаниеТиповЕИ);
			ТЧТовары.Колонки.Добавить("ПричинаОтказа",		КС20);
			
			НоваяСтрока.Товары = ТЧТовары;
			
			// InvoiceTypeRefID <> 12
			
			Если Число(СписокАтрибутов[3].Значение) <> 12 Тогда 
				ЗагружатьТЧ = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЗагружатьТЧ = 1 Тогда
		
		Файл = Новый Файл(каталогЗагрузки + "\InvoiceProduct.txt");
		Если Файл.Существует() = ЛОЖЬ Тогда
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найден файл для импорта: InvoiceProduct.txt!");			
			ФайлОшибок.ДобавитьСтроку("Не найден файл для импорта: InvoiceProduct.txt!");
			error = 1;
			Возврат;
		КонецЕсли;	
		
		файл = Новый ТекстовыйДокумент;
		файл.Прочитать(каталогЗагрузки + "\InvoiceProduct.txt", КодировкаТекста.ANSI);	
		
		КоличествоЗаписей = Число(файл.ПолучитьСтроку(1));                     
		Для сч = 3 По КоличествоЗаписей+2 Цикл //vop поставил 2 вместо 1
			
			СписокАтрибутов = Split(файл.ПолучитьСтроку(сч),Символы.Таб);
			
			Если СписокАтрибутов.Количество() < 10 Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена структура файла InvoiceProduct.txt!");
				ФайлОшибок.ДобавитьСтроку("Нарушена структура файла InvoiceProduct.txt!");
				error = 1;
				Возврат;
			КонецЕсли;
			
			InvoiceID 	 = СписокАтрибутов[2].Значение;  //Для связи
			СтрокаПоиска = Счета.Найти(InvoiceID,"InvoiceID");
			Если СтрокаПоиска = Неопределено Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена связь файла Invoice.txt и InvoiceProduct.txt! InvoiceID = " + Строка(InvoiceID));
				ФайлОшибок.ДобавитьСтроку("Нарушена связь файла Invoice.txt и InvoiceProduct.txt! InvoiceID = " + InvoiceID);
				//Сообщить("Нарушена связь файла Invoice.txt и InvoiceProduct.txt!","!!!");
				error = 1;
				Возврат;
			КонецЕсли;   
			
			ТЧСчета = СтрокаПоиска.ТЧ;
			
			НоваяСтрока = ТЧСчета.Добавить();
			НоваяСтрока.ProductRefID		= СписокАтрибутов[3].Значение;
			НоваяСтрока.Price 				= СписокАтрибутов[4].Значение;
			НоваяСтрока.Volume 				= СписокАтрибутов[5].Значение;
			НоваяСтрока.VatRate 			= СписокАтрибутов[6].Значение;
			НоваяСтрока.DiscountAmount		= СписокАтрибутов[7].Значение;
			НоваяСтрока.DiscountRate 		= СписокАтрибутов[8].Значение;
			НоваяСтрока.MeasureUnitRefID	= СписокАтрибутов[9].Значение;
			
			//НоваяСтрока.ProductRefID = СтрЗаменить(НоваяСтрока.ProductRefID, "_T50", "");
			
		КонецЦикла;
	КонецЕсли;
	
	//Если (ИмяСервераМА <> "Tomsk") И (ИдКПК <> "DevPetrushka") Тогда
	//	ЛимитЗаказов_ОбработатьТЗ(ТЗЛимит, 3000);
	//КонецЕсли;	
		
	врЗамер_1 = ТекущаяДата() - врЗамер_Старт;
	
	Попытка
		//Если ЭтоИнвойсНашейТочки() Тогда
			БезНДС_МассивОрганизацийТомск = ПродажиБезНДС_МассивОрганизацийТомск();
			БезНДС_МассивПоставщиковИскл  = ПродажиБезНДС_МассивПоставщиковИскл();
			ПродажиБезНДС_ОбработатьТаблицуЗагрузки(Счета);
		//КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПродажиБезНДС_ОбработатьТаблицуЗагрузки", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	врЗамер_2 = ТекущаяДата() - врЗамер_Старт;
	
	Агенты 		 = Справочники.Пользователи;
	Контрагенты  = Справочники.Партнеры;
	Договоры 	 = Справочники.ДоговорыКонтрагентов;
	Единицы		 = Справочники.ЕдиницыИзмерения;
	Номенклатуры = Справочники.Номенклатура;
	ТипыЦен 	 = Справочники.ВидыЦен;
	
	Для Каждого СтрокаТаблицыСчета Из Счета Цикл
		
		Попытка
			Если Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 11 Тогда
				КоличествоЗаявокВСинхронизации = КоличествоЗаявокВСинхронизации + 1;				
			КонецЕсли;	
		Исключение
			ЗаписатьОшибку1СвЛогФайл("КоличествоЗаявокВСинхронизации", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
		ЭтоАварийныйЗаказ = Ложь;
		СписокТоваровАварийногоЗаказа = Новый Массив;
		
		Попытка
			
			Если ДокументУжеЗагруженВБазу(СтрокаТаблицыСчета.InvoiceID) Тогда
				
				СтруктураАварийногоЗаказа = ПолучитьАварийноЗавершенныйЗаказ(ИдКПК, МассивГУИДЗаказов);
				
				Попытка
					
					Если СтруктураАварийногоЗаказа <> Неопределено Тогда
						
						Если СтруктураАварийногоЗаказа.ID = СтрокаТаблицыСчета.InvoiceID Тогда
							
							ЭтоАварийныйЗаказ = Истина;
							Для Каждого ТекТоварАварийногоЗаказа Из СтруктураАварийногоЗаказа.Товары Цикл
								СписокТоваровАварийногоЗаказа.Добавить(ТекТоварАварийногоЗаказа);
							КонецЦикла;	
							
							ЗаписатьОшибку1СвЛогФайл_Alert("Загрузка документов Кузбасс", "Вид документа = " + СокрЛП(СтрокаТаблицыСчета.InvoiceTypeRefID) + "; ID = " + СтрокаТаблицыСчета.InvoiceID);
							
						//	Продолжить;
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;	
						
					Иначе
						
						Продолжить;
						
					КонецЕсли;
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл_Alert("Загрузка документов Кузбасс", "Исключение", ИнформацияОбОшибке(), Истина);
					Продолжить;
				КонецПопытки;				
				
			КонецЕсли;
			
		Исключение
			ЗаписатьОшибку1СвЛогФайл("Проверка на дубли (ДОКУМЕНТЫ)", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
				
		// Агент
		
		Агент = ТекАгент;
		
		// Заказ на борт агента
		
		Попытка
			
			Если СокрЛП(СтрокаТаблицыСчета.ShopRefID) = "TT_" + ТекАгент.УникальныйИдентификатор() Тогда
				
				Массив = Новый Массив;
				Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
				ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);				
				
				ТЧ_ЗаказБорта = Новый ТаблицаЗначений;
				ТЧ_ЗаказБорта.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатуры);
				ТЧ_ЗаказБорта.Колонки.Добавить("Количество",   КЧ3);
				
				ТЧ_ЗаказБортаДубли = Новый ТаблицаЗначений;
				ТЧ_ЗаказБортаДубли.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатуры);
				ТЧ_ЗаказБортаДубли.Колонки.Добавить("Количество",   КЧ3);				
				
				Для Каждого СтрокаТЧ Из СтрокаТаблицыСчета.ТЧ Цикл 
					
					Попытка
						
						GUID = СоздатьУникальныйИдентификатор(СтрокаТЧ.ProductRefID);
						Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
						Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
							ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + СтрокаТЧ.ProductRefID + "'");
							error = 1; 
							Возврат;
						КонецЕсли;	
						
						Если ИмяСервераМА = "Region" Тогда
													
							НоваяСтрокаТЧ				= ТЧ_ЗаказБорта.Добавить();				
							НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
							НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
							
						ИначеЕсли ЭтоТоварБорта(Номенклатура) Тогда
							
							Если Номенклатура.ВидНоменклатуры = ВидНоменклатуры_ЛосьоныДубль Тогда
								
								НоваяСтрокаТЧ				= ТЧ_ЗаказБортаДубли.Добавить();				
								НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
								НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);								
								
							Иначе	
							
								НоваяСтрокаТЧ				= ТЧ_ЗаказБорта.Добавить();				
								НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
								НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
								
							КонецЕсли;	
							
						КонецЕсли;	
							
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(СтрокаТЧ.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
					
				КонецЦикла;
				
				Если ТЧ_ЗаказБорта.Количество() > 0 Тогда
					СоздатьПеремещениеНаБортАгента(ТекАгент, ТЧ_ЗаказБорта, СокрЛП(СтрокаТаблицыСчета.Note));
				КонецЕсли;	
				
				Если ТЧ_ЗаказБортаДубли.Количество() > 0 Тогда
					СоздатьПеремещениеНаБортАгента(ТекАгент, ТЧ_ЗаказБортаДубли, СокрЛП(СтрокаТаблицыСчета.Note), Истина);
				КонецЕсли;	
				
				Продолжить;
				
			КонецЕсли;	
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Заказ на БОРТ АГЕНТА", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;			
						
		// Партнер		
			
		Попытка 
				
			Партнер = ПолучитьПартнераПоГУИД(СокрЛП(СтрокаТаблицыСчета.ShopRefID));
				
			Если Партнер = Неопределено Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыСчета.ShopRefID) + "'");
				ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыСчета.ShopRefID + "'");
				error = 1; 
				Возврат;
			КонецЕсли;	
				
		Исключение	
				
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОШИБКА ОПРЕДЕЛЕНИЯ ПАРТНЕРА!!!!");
			
			GUID = СоздатьУникальныйИдентификатор(СтрокаТаблицыСчета.ShopRefID);
			Партнер = Контрагенты.ПолучитьСсылку(GUID);
			Если Партнер.ПолучитьОбъект() = Неопределено Тогда 
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыСчета.ShopRefID) + "'");
				ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыСчета.ShopRefID + "'");
				error = 1; 
				Возврат;
			КонецЕсли;
				
		КонецПопытки;	
		
		врОсновнойПартнер = Партнер;
		
		// ПЕТРОВ
		
		ЭтоЗаказЧерезФлажокПетров = Ложь;
		ЭтоЗаказПетровЧерезПетров = Ложь;
		
		Если ЕстьДопКолонки Тогда
			
			Попытка
				
				Если ЭтоАгентПетров(ТекАгент) Тогда
			
				Если СтрокаТаблицыСчета.ClientPetrov = "True" Тогда
						
					Если Партнер.ПринадлежитЭлементу(Клиенты_грПетров) Тогда	
						ЭтоЗаказПетровЧерезПетров = Истина;
					КонецЕсли;	
				
					врСоглашение = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент).Соглашение;
				
					Если Не ЗначениеЗаполнено(врСоглашение) Тогда
						ЗаписатьИнформацию1СвЛогФайл("ПЕТРОВ", "СОГЛАШЕНИЕ НЕ НАЙДЕНО = " + СокрЛП(Партнер));
						Продолжить;
					КонецЕсли;	
				
					врДанныеПетрова = Петров_ПолучитьДанныеПетроваТочки(Партнер, врСоглашение);
				
					Если Не ЗначениеЗаполнено(врДанныеПетрова.Клиент) Тогда
						ЗаписатьИнформацию1СвЛогФайл("ПЕТРОВ", "ДАННЫЕ ПЕТРОВА НЕОПРЕДЕЛЕНЫ = " + СокрЛП(Партнер));
						Продолжить;					
					Иначе
						Партнер = врДанныеПетрова.Клиент;
						СтрокаТаблицыСчета.ClientPetrovRefID = Партнер.УникальныйИдентификатор();
					КонецЕсли;	
					
					ЭтоЗаказЧерезФлажокПетров = Истина;					
				
				КонецЕсли;	
				
				КонецЕсли;
			
			Исключение
				ЗаписатьОшибку1СвЛогФайл("ПЕТРОВ", "ПЕРЕОПРЕДЕЛЕНИЕ ПАРТНЕРА. Исключение!" + СокрЛП(Партнер), ИнформацияОбОшибке(), Истина);
			//	Продолжить;
			КонецПопытки;		
			
		КонецЕсли;		
				
		// Борт агента
		
		ЭтоБортБелый = Ложь;
		
		Склад_БортАгента = Справочники.Склады.ПустаяСсылка();
		
		Попытка 
			
			Если (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKL_") ИЛИ (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKW_") ИЛИ (Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKB_") Тогда
			
				Склад_БортАгента = ПолучитьБортАгента(ТекАгент);
				
				Если Склад_БортАгента = Справочники.Склады.ПустаяСсылка() Тогда
					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Пустой склад борта агента = "  + Строка(СтрокаТаблицыСчета.StockRefID));
					Продолжить;
				КонецЕсли;	
				
				Если Лев(Строка(СтрокаТаблицыСчета.StockRefID), 4) = "SKW_" Тогда
					ЭтоБортБелый = Истина;
				КонецЕсли;	
				
			КонецЕсли;	
			
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Определение борта (склада) агента", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;			
			
		// Организация
		
		Если ПустаяСтрока(СтрокаТаблицыСчета.SellerRefID) Тогда
			
			Организация = ОсновнаяФирма;
			
		Иначе	
		
			Попытка
				
				Организация = ПолучитьОрганизациюПоГУИД(СтрокаТаблицыСчета.SellerRefID);
				Если Организация = Неопределено Тогда
					Организация = ОсновнаяФирма;
				КонецЕсли;	
				
			Исключение
				Организация = ОсновнаяФирма;
			КонецПопытки;	
			
		КонецЕсли;	
		
		ЭтоКегиРозлив = Ложь;
		Если ИмяСервераМА = "Tomsk" И ЭтоАгентКегиРозлив(ТекАгент) И НЕ ЭтоБРИсключениеКегиРозлив(Партнер.БизнесРегион) Тогда
			ЭтоКегиРозлив = Истина;
		КонецЕсли;	
		Если ИмяСервераМА = "Tomsk" И ЭтоИнвойсНашейТочки() Тогда
			ЭтоКегиРозлив = Истина;
		КонецЕсли;	
		Если ТочкаВКегиРозливИсключения(врОсновнойПартнер) Тогда
			ЭтоКегиРозлив = Ложь;
		КонецЕсли;	
		
		Если ЭтоАварийныйЗаказ Тогда
			ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, "Загружаем документы для " + СтрокаТаблицыСчета.InvoiceID);
		КонецЕсли;
		
		врЗамер_3 = ТекущаяДата() - врЗамер_Старт;
				
		// ВОЗВРАТ
		
		Если Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 21 Тогда 
			
			Если ЭтоАварийныйЗаказ Тогда
				Продолжить;
			КонецЕсли;	
			
			//Если Не ЭтоТестовыйАгент(ТекАгент) Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;	
			
			Попытка
								
				НомерВПакете = 0;
				
				// Организация
				
				Организация = ОсновнаяФирма;
				
				// Соглашение
				
				Попытка
					врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент);
					Соглашение = врСоглашениеСКлиентом.Соглашение;
					//Если Соглашение.Организация = оргРИФПлюс Тогда
					//	Организация = оргРИФПлюс;
					//КонецЕсли;
					Если ЗначениеЗаполнено(Соглашение.Организация) Тогда
						Организация = Соглашение.Организация;
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка опеределения Соглашения при создании Возврата!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Если СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0 Тогда
					Организация = оргТОП_17;
				КонецЕсли;	
				
				// Список номенклатуры для возврата
				
				Массив = Новый Массив;
				Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
				ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);
			
				ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
				ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатуры);
				ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",	  КЧ3);
				ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",		  КЧ2);
				
				Для Каждого СтрокаТЧ Из СтрокаТаблицыСчета.ТЧ Цикл 
					
					Попытка
						
						GUID = СоздатьУникальныйИдентификатор(СтрокаТЧ.ProductRefID);
						Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
						Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
							ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + СтрокаТЧ.ProductRefID + "'");
							error = 1; 
							Возврат;
						КонецЕсли;	
						
						НоваяСтрокаТЧ				= ТЧСВидомНоменклатуры.Добавить();				
						НоваяСтрокаТЧ.Номенклатура	= Номенклатура;
						НоваяСтрокаТЧ.Количество	= Число(СтрокаТЧ.Volume);
						НоваяСтрокаТЧ.Цена			= Число(СтрокаТЧ.Price);					
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(СтрокаТЧ.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
						
				КонецЦикла;
				
				Попытка
					Если ТЧСВидомНоменклатуры.Количество() = 0 Тогда
						Логирование_Ошибка_ОтсутствуютТоварыДляЗагрузки("ВОЗВРАТ", Партнер, СтрокаТаблицыСчета.InvoiceAmount);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Обработка пустого списка товаров", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Попытка
					
					аян_СинхронизацияСервер.Вовраты_ОбработатьТаблицуВозвратов(ТЧСВидомНоменклатуры, ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ИмяСервераМА);
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при обработке таблицы возвратов!", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				// Группировка номенклатуры запросом
			
				МассивЧерныеВидыНоменклатуры = Новый Массив;
				МассивЧерныеВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее", Истина));
				МассивЧерныеВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар ДУБЛЬ",    Истина));												
				
				Запрос = Новый Запрос;
			
				Запрос.УстановитьПараметр("ТЧ", 						  ТЧСВидомНоменклатуры);	
				Запрос.УстановитьПараметр("ТоварыБезНДС",				  ТоварыБезНДС);	
				Запрос.УстановитьПараметр("МногооборотнаяТара",           Справочники.ВидыНоменклатуры.НайтиПоНаименованию("МногооборотнаяТара", Истина));
				Запрос.УстановитьПараметр("Кега", "Кега %");
				Запрос.УстановитьПараметр("МассивЧерныеВидыНоменклатуры", МассивЧерныеВидыНоменклатуры);
				Запрос.УстановитьПараметр("Джолики",			   		  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики", Истина));						
				Запрос.УстановитьПараметр("ОрганизацияВЧерную", 		  ПолучитьОрганизациюВЧерную(ТекАгент));
				Запрос.УстановитьПараметр("Организация",                  Организация);
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
				               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество,
				               |	ВЫРАЗИТЬ(ТЧ.Цена КАК ЧИСЛО) КАК Цена
				               |ПОМЕСТИТЬ ВрТ
				               |ИЗ
				               |	&ТЧ КАК ТЧ
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ВЫБОР
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ (&ТоварыБезНДС)
				               |			ТОГДА ""_ТоварыБезНДС_""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики
				               |			ТОГДА ""_Джолики_""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры В (&МассивЧерныеВидыНоменклатуры)
				               |			ТОГДА &ОрганизацияВЧерную
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
				               |			ТОГДА ""ВозвратАлкоголя""
				               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &МногооборотнаяТара
				               |			ТОГДА ВЫБОР
				               |					КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).Наименование ПОДОБНО &Кега
				               |						ТОГДА ""МногооборотнаяТара""
				               |					ИНАЧЕ ""Оборудование""
				               |				КОНЕЦ
				               |		ИНАЧЕ &Организация
				               |	КОНЕЦ КАК Организация,
				               |	ВрТ.Номенклатура,
				               |	ВрТ.ВидНоменклатуры,
				               |	ВрТ.Количество,
				               |	ВрТ.Цена
				               |ИЗ
				               |	ВрТ КАК ВрТ
				               |ИТОГИ ПО
				               |	Организация
				               |АВТОУПОРЯДОЧИВАНИЕ";
											   
				// Формирование документов
				
				МассивИсключений = Новый Массив;
								
				ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
				Пока ВыборкаОрганизации.Следующий() Цикл
					
					НомерВПакете = НомерВПакете + 1;
			
					ВозвратОтКлиента = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
					
					// Дата
					
					ВозвратОтКлиента.Дата                   = ТекущаяДата();
					
					Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
						ВозвратОтКлиента.Дата = ДатаДоставкиПоМатрицеМаршрута(Партнер);
					КонецЕсли;	
					
					ВозвратОтКлиента.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;			
					ВозвратОтКлиента.Валюта					= Константы.ВалютаРегламентированногоУчета.Получить();
				
					ВозвратОтКлиента.Партнер 				= Партнер;
					ВозвратОтКлиента.Контрагент             = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ВозвратОтКлиента.Партнер);
					ВозвратОтКлиента.Соглашение 		    = Соглашение;
								
					ВозвратОтКлиента.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(ВозвратОтКлиента.Организация, ОсновнойСклад, ВозвратОтКлиента.Дата);			
					ВозвратОтКлиента.Менеджер				= ТекАгент;
					ВозвратОтКлиента.Комментарий			= "Загружено автоматически " + Строка(ТекущаяДата()) + ". Комментарий: " + СокрЛП(СтрокаТаблицыСчета.Note);
					
					Возврат_оргРИФПлюс                      = Справочники.Организации.НайтиПоНаименованию("РИФ+ ООО", 	    Истина);
					Возврат_СкладРИФПлюс                    = Справочники.Склады.НайтиПоНаименованию("Томск РИФ+ общий",    Истина);					
					
					// Организация и Склад 					
					
					Если ВыборкаОрганизации.Организация = "_ТоварыБезНДС_" Тогда
						
						ВозвратОтКлиента.Организация		= оргРИФПлюс;
					//	ВозвратОтКлиента.Склад 				= СкладРИФПлюс;		
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);	
						
					ИначеЕсли ВыборкаОрганизации.Организация = "_Джолики_" Тогда
						
						ВозвратОтКлиента.Организация		= оргТОП_17;
					//	ВозвратОтКлиента.Склад 				= СкладТОП_17;
						ВозвратОтКлиента.Склад 				= СкладБракТомскАТОбщий;
										
					ИначеЕсли ВыборкаОрганизации.Организация = "ВозвратАлкоголя" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "МногооборотнаяТара" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						//Если Организация = оргРИФПлюс Тогда
						//	ВозвратОтКлиента.Склад = СкладРИФПлюс;
						//Иначе	
						//	ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Пиво", Истина); 
						//КонецЕсли;	
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе	
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина); 
						КонецЕсли;	
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "Оборудование" Тогда	
						
						ВозвратОтКлиента.Организация = Организация;
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Оборудование новый", Истина); 
						КонецЕсли;	
						
					Иначе	
						
						ВозвратОтКлиента.Организация		= ВыборкаОрганизации.Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
						Если ВозвратОтКлиента.Организация = оргАТ_Логистик Тогда
							ВозвратОтКлиента.Организация = оргГалактика;
						КонецЕсли;	
						
					КонецЕсли;											
					
					// Табличная часть
					
				    ВыборкаНоменклатура = ВыборкаОрганизации.Выбрать();
					Пока ВыборкаНоменклатура.Следующий() Цикл
			
						НоваяСтрока						= ВозвратОтКлиента.Товары.Добавить();				
						НоваяСтрока.Номенклатура		= ВыборкаНоменклатура.Номенклатура;
	
						НоваяСтрока.Количество			= Число(ВыборкаНоменклатура.Количество);
						НоваяСтрока.КоличествоУпаковок	= Число(ВыборкаНоменклатура.Количество);
						НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
						
						Попытка
							Если НоваяСтрока.Номенклатура.ВидНоменклатуры = ВидНоменклатурыМногооборотнаяТара Тогда
								НоваяСтрока.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура, ВозвратОтКлиента.Соглашение.ВидЦен);
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Определение цены тары. Исключение!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
						СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
							
						КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);					
						
					КонецЦикла;
										
					ВозвратОтКлиента.ЗаполнитьУсловияПродажПоCоглашению();
					
					Если ВыборкаОрганизации.Организация = "_ТоварыБезНДС_" Тогда
						
						ВозвратОтКлиента.Организация		= оргРИФПлюс;
					//	ВозвратОтКлиента.Склад 				= СкладРИФПлюс;	
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);	
						
					ИначеЕсли ВыборкаОрганизации.Организация = "_Джолики_" Тогда
						
						ВозвратОтКлиента.Организация		= оргТОП_17;
					//	ВозвратОтКлиента.Склад 				= СкладТОП_17;
						ВозвратОтКлиента.Склад 				= СкладБракТомскАТОбщий;
										
					ИначеЕсли ВыборкаОрганизации.Организация = "ВозвратАлкоголя" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "МногооборотнаяТара" Тогда
						
						ВозвратОтКлиента.Организация		= Организация;
						//Если Организация = оргРИФПлюс Тогда
						//	ВозвратОтКлиента.Склад = СкладРИФПлюс;
						//Иначе	
						//	ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Пиво", Истина); 
						//КонецЕсли;	
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
                        Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина); 
						КонецЕсли;	
						
						ВозвратОтКлиента.ВозвратПереданнойМногооборотнойТары = Истина;
						ВозвратОтКлиента.ПредусмотренЗалогЗаТару             = Истина;
						
					ИначеЕсли  ВыборкаОрганизации.Организация = "Оборудование" Тогда	
						
						ВозвратОтКлиента.Организация = Организация;
						Если ОсновнаяФирма = оргАТ_ЛогистикТЮМЕНЬ Тогда
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина); 
						Иначе
							ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Томск Оборудование новый", Истина); 
						КонецЕсли;							
						
						ВозвратОтКлиента.ВозвратПереданнойМногооборотнойТары = Истина;
						ВозвратОтКлиента.ПредусмотренЗалогЗаТару             = Истина;						
												
					Иначе	
						
						ВозвратОтКлиента.Организация		= ВыборкаОрганизации.Организация;
						ВозвратОтКлиента.Склад 				= ПолучитьСкладВозврата(ТекАгент);
						
						Если ВозвратОтКлиента.Организация = оргАТ_Логистик Тогда
							ВозвратОтКлиента.Организация = оргГалактика;
						КонецЕсли;							
						
					КонецЕсли;																
														
					ПродажиСервер.ЗаполнитьРеализацииИЦены(ВозвратОтКлиента, "Товары");
					
					Если (ВыборкаОрганизации.Организация = "Оборудование") ИЛИ (ВыборкаОрганизации.Организация = "МногооборотнаяТара") Тогда	
					
						Попытка
						
							Для Каждого ТекТоварВозврата Из ВозвратОтКлиента.Товары Цикл
								
								ТекТоварВозврата.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ТекТоварВозврата.Номенклатура, ВозвратОтКлиента.Соглашение.ВидЦен);
						
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
									
								КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварВозврата, СтруктураДействий, КэшированныеЗначения);					
								
							КонецЦикла;	
							
						Исключение
								
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Установка цен тары. Исключение!", ИнформацияОбОшибке(), Истина);

						КонецПопытки;
						
					КонецЕсли;	
					
					// Определяем реальную организацию возврата
					
					//Попытка
					//	
					//	Если ВозвратОтКлиента.Склад <> Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина) Тогда 
					//	
					//		ФлагПустыеЦены = Истина;
					//		Для Каждого ТекСтрока Из ВозвратОтКлиента.Товары Цикл
					//			Если ЗначениеЗаполнено(ТекСтрока.ДокументРеализации) Тогда
					//				ФлагПустыеЦены = Ложь;
					//				Прервать;
					//			КонецЕсли;	
					//		КонецЦикла;	
					//		
					//		Если ФлагПустыеЦены Тогда
					//			
					//			ОргВозврата = ОпределитьОрганизациюВозврата(ВозвратОтКлиента);
					//			Если ЗначениеЗаполнено(ОргВозврата) Тогда
					//				ВозвратОтКлиента.Организация = ОргВозврата;
					//				ПродажиСервер.ЗаполнитьРеализацииИЦены(ВозвратОтКлиента, "Товары");
					//			КонецЕсли;	
					//			
					//		КонецЕсли;
					//		
					//	КонецЕсли;	
					//	
					//Исключение
					//	
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при определении Организации Возврата", ИнформацияОбОшибке(), Истина);
					//	
					//КонецПопытки;	
					
					Попытка
						
						Для Каждого ТекТоварВозврата Из ВозвратОтКлиента.Товары Цикл
							
							Если ТекТоварВозврата.Цена = 0 Тогда
							
								ТекТоварВозврата.Цена = Товары_ПоследняяЦенаПродажиТовараВТочку(ВозвратОтКлиента.Партнер, ТекТоварВозврата.Номенклатура);
							
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("Очищать,ЦенаВключаетНДС", Ложь, ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  Новый Структура("ЦенаВключаетНДС", ВозвратОтКлиента.ЦенаВключаетНДС));
								СтруктураДействий.Вставить("ПересчитатьСумму",    "КоличествоУпаковок");
								
								КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварВозврата, СтруктураДействий, КэшированныеЗначения);					
								
							КонецЕсли;	
							
						КонецЦикла;	
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Возврат товаров. Установка последних цен продажи. Исключение!", ИнформацияОбОшибке(), Истина);							
					КонецПопытки;						
										
					//// Проверяем на отказанные позиции
					//
					//ЛогОтветов = Новый ЗаписьТекста(РабочийКаталог + "\" + "LogAnswers" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
					//
					//СчСтрок = ВозвратОтКлиента.Товары.Количество() - 1;
					//Пока СчСтрок >= 0 Цикл
					//	ТекСтрока = ВозвратОтКлиента.Товары[СчСтрок];
					//	Если Не ЗначениеЗаполнено(ТекСтрока.ДокументРеализации) Тогда
					//		ЛогОтветов.ЗаписатьСтроку("ВОЗВРАТ ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + СокрЛП(ТекСтрока.Номенклатура) + " ## Количество: " + Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ="));	
					//		ВозвратОтКлиента.Комментарий = ВозвратОтКлиента.Комментарий + Символы.ПС + "Отказ: " + СокрЛП(ТекСтрока.Номенклатура) + " ## Количество: " + Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ=");
					//		ВозвратОтКлиента.Товары.Удалить(ТекСтрока);
					//	КонецЕсли;
					//	СчСтрок = СчСтрок - 1;
					//КонецЦикла;						
					//
					//ЛогОтветов.Закрыть();
					//
					//Если ВозвратОтКлиента.Товары.Количество() = 0 Тогда
					//	Продолжить;
					//КонецЕсли;						
				
					ВозвратОтКлиента.алкПунктРазгрузки = ВозвратОтКлиента.Партнер.алкОсновнойПунктРазгрузки;
					Если ЗначениеЗаполнено(ВозвратОтКлиента.алкПунктРазгрузки) Тогда
						ВозвратОтКлиента.алкЛицензияКонтрагента = ВозвратОтКлиента.алкПунктРазгрузки.алкОсновнаяЛицензия;
					КонецЕсли;				
					
					// Данные для маршрута
					
					ВозвратОтКлиента.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ВозвратОтКлиента.Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
					
					врЗонаДоставки = ВозвратОтКлиента.Партнер.ЗонаДоставки;
					
					Если Не ЗначениеЗаполнено(врЗонаДоставки) Тогда
					
						спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(ВозвратОтКлиента.Партнер.БизнесРегион.Наименование), Истина);
						Если спрДоставка.Наименование = "" Тогда
							спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
							спрДоставка.Наименование = СокрЛП(ВозвратОтКлиента.Партнер.БизнесРегион.Наименование);
							спрДоставка.Записать();
						КонецЕсли;
					
						ВозвратОтКлиента.ЗонаДоставки = спрДоставка;
						
					Иначе
						
						ВозвратОтКлиента.ЗонаДоставки = врЗонаДоставки;
						
					КонецЕсли;	
					
					Если Доставка_ЭтоРозливДень(врОсновнойПартнер, ТекАгент) Тогда
						врЗонаДоставкиРозливДень = Доставка_РозливДень_ЗонаДоставки(врОсновнойПартнер);
						Если ЗначениеЗаполнено(врЗонаДоставкиРозливДень) Тогда
							ВозвратОтКлиента.ЗонаДоставки = врЗонаДоставкиРозливДень;
						КонецЕсли;	
					КонецЕсли;										
					
					ВозвратОтКлиента.ДоставкаОтКлиента = Истина;
					
					//Попытка
					//	Если ВозвратОтКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Склад пустой тары (Томск)", Истина) Тогда
					//		РТУВходящий = ВозвратТоваров_ВходящийДокумент(ВозвратОтКлиента.Партнер);
					//		Если ЗначениеЗаполнено(РТУВходящий) Тогда
					//			ВозвратОтКлиента.НомерВходящегоДокумента = РТУВходящий.Номер;
					//			ВозвратОтКлиента.ДатаВходящегоДокумента  = РТУВходящий.Дата;
					//		КонецЕсли;	
					//	КонецЕсли;	
					//Исключение
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "РТУ Входящий", ИнформацияОбОшибке(), Истина);
					//КонецПопытки;					
					
					// Запись документа без проведения
					
					Попытка
						Если ЭтоДубльВозврата(ВозвратОтКлиента.Партнер, ВозвратОтКлиента.Соглашение, ВозвратОтКлиента.СуммаДокумента, МассивИсключений) Тогда
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДУБЛЬ ВОЗВРАТА!!! Клиент: " + Строка(ВозвратОтКлиента.Партнер) + "; Соглашение: " + Строка(ВозвратОтКлиента.Соглашение) + "; Сумма: " + Строка(ВозвратОтКлиента.СуммаДокумента));
							Продолжить;							
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДУБЛЬ ВОЗВРАТА!!! ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина); 
					КонецПопытки;	
					
					Попытка
						
//						Попытка
//							
//							ВозвратОтКлиента.Записать(РежимЗаписиДокумента.Проведение);
//						
//							ЛогФайл.ЗаписатьСтроку("~Документ ВОЗВРАТА ТОВАРОВ записан " + Строка(ВозвратОтКлиента.Ссылка) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")");
//							
//							СтатусЗаписиДокумента = "Записан";
//						
//							ЗаписатьДанныеВЛогЗагрузкиДокументов("Возврат", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, ВозвратОтКлиента.Ссылка, ВозвратОтКлиента.Организация, ВозвратОтКлиента.Партнер, СтатусЗаписиДокумента);
//						
//							МассивИсключений.Добавить(ВозвратОтКлиента.Ссылка);
//							
//						Исключение
										
							ВозвратОтКлиента.Записать(РежимЗаписиДокумента.Запись);
							
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ВОЗВРАТА ТОВАРОВ записан " + Строка(ВозвратОтКлиента.Ссылка) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")");
							
							СтатусЗаписиДокумента = "Записан";
							
							ЗаписатьДанныеВЛогЗагрузкиДокументов("Возврат", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, ВозвратОтКлиента.Ссылка, ВозвратОтКлиента.Организация, ВозвратОтКлиента.Партнер, СтатусЗаписиДокумента);
							
							МассивИсключений.Добавить(ВозвратОтКлиента.Ссылка);
						
//						КонецПопытки;
						
												
					Исключение
					
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи документа ВОЗВРАТА ТОВАРОВ!"  + Строка(ВозвратОтКлиента.Номер) + " (" + Строка(ВозвратОтКлиента.Организация) + " - "+ Строка(ВозвратОтКлиента.Партнер) + ")", ИнформацияОбОшибке(), Истина);		
						
					КонецПопытки;
				
				КонецЦикла;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при формировании Возврата товаров!", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки	
			
		// ЗАКАЗ КЛИЕНТА	
			
		ИначеЕсли Число(СтрокаТаблицыСчета.InvoiceTypeRefID) = 11 Тогда 
						
		    ФлюгерЭтоПервыйЗаказ = Истина;
			
			ТЗ_ЗаказанныеТовары = Новый ТаблицаЗначений;
			ТЗ_ЗаказанныеТовары.Колонки.Добавить("Товар",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТЗ_ЗаказанныеТовары.Колонки.Добавить("Количество", ОписаниеТипаЧисло(15, 2));
			
			ЭтоБортАгента = Ложь;
			Если Склад_БортАгента <> Справочники.Склады.ПустаяСсылка() Тогда
				ЭтоБортАгента = Истина;
			КонецЕсли;				
		
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
			ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(Массив);
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
			ОписаниеТиповВидНоменклатуры = Новый ОписаниеТипов(Массив);			
	
			ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
			ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура",	 ОписаниеТиповНоменклатуры);
			ТЧСВидомНоменклатуры.Колонки.Добавить("ВидНоменклатуры", ОписаниеТиповВидНоменклатуры);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",		 КЧ3);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",			 КЧ2);
			ТЧСВидомНоменклатуры.Колонки.Добавить("Приоритет",		 КЧ2);
			
			Для Каждого стр из СтрокаТаблицыСчета.ТЧ Цикл 
				
				Попытка 
					
					GUID = СоздатьУникальныйИдентификатор(стр.ProductRefID);
					Номенклатура = Номенклатуры.ПолучитьСсылку(GUID);
					Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда 
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код номенклатуры! '" + Строка(стр.ProductRefID) + "'");
						ФайлОшибок.ДобавитьСтроку("Неопознанный код номенклатуры! '" + стр.ProductRefID + "'");
						error = 1; 
						Возврат;
					КонецЕсли;		
										
					Попытка
						
						Если ТЧСВидомНоменклатуры.Найти(Номенклатура, "Номенклатура") <> Неопределено Тогда
							ЗаписатьИнформацию1СвЛогФайл(Событие1С, "ДУБЛЬ НОМЕНКЛАТУРЫ: " + Строка(Номенклатура) + ". Клиент: " + СокрЛП(Партнер));
							Продолжить;
						КонецЕсли;	
						
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка на дубли номенклатуры. Исключение!", ИнформацияОбОшибке(), Истина);
						
					КонецПопытки;	
				
					новстр						= ТЧСВидомНоменклатуры.Добавить();				
					новстр.Номенклатура			= Номенклатура;				
					новстр.ВидНоменклатуры		= Номенклатура.ВидНоменклатуры;
					Попытка
						// Газ 40 л
						// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
						//Если Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ") Тогда
						Если Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40() ИЛИ
							 Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест() Тогда
						// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
							новстр.ВидНоменклатуры		= ВидНоменклатурыМногооборотнаяТара;
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Вид номенклатуры ГАЗ 40", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
 					новстр.Количество			= Число(стр.Volume);
					новстр.Цена					= Число(стр.Price);
					новстр.Приоритет            = Товары_ПолучитьПриоритетТовара(Номенклатура);
					
					Попытка
						//Если ИдКПК = "DevInsider" Тогда
						Если СтрокаТаблицыСчета.IsTTN <> "True" Тогда
							врСтароеКоличество = новстр.Количество;
							новстр.Количество = ОкруглитьДоМинимальнойКратностиТовара(новстр.Номенклатура, новстр.Количество);
							Если врСтароеКоличество <> новстр.Количество Тогда
								ЗаписатьИнформацию1СвЛогФайл(Событие1С, "КОРРЕКТИРОВКА КРАТНОСТИ: " + СокрЛП(новстр.Номенклатура) + "; Количество в заказе = " + СокрЛП(врСтароеКоличество) + "; Количество с учетом кратности = " + СокрЛП(новстр.Количество));
							КонецЕсли;	
						КонецЕсли;	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "КОРРЕКТИРОВКА ПО КРАТНОСТИ", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
										
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при получение номенклатуры по ГУИД: """ + Строка(стр.ProductRefID) + """", ИнформацияОбОшибке(), Истина);
				КонецПопытки;						
				
			КонецЦикла;
			
			// НДС Клиенты
			
			Попытка
				
				врГруппаНДСКлиенты = Справочники.Партнеры.НайтиПоКоду("00-00032838");
				
				врЭтоЗаказЧерезПетрова = Ложь;
				Если ЕстьДопКолонки Тогда
					Если СтрокаТаблицыСчета.ClientPetrov = "True" Тогда
						врЭтоЗаказЧерезПетрова = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
				Если (Не врЭтоЗаказЧерезПетрова) И (СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0) И (врОсновнойПартнер.ПринадлежитЭлементу(врГруппаНДСКлиенты) ИЛИ ЗапретПродажиТоваровБезНДС(врОсновнойПартнер)) Тогда
								
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
						МЗОтказы.Агент         = ТекАгент;
						МЗОтказы.ДатаОтказа    = ТекущаяДата();
						МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
						МЗОтказы.Клиент        = Партнер;
						МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
						МЗОтказы.Количество    = врТекСтрока.Количество;
						МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
						МЗОтказы.Записать();			
											
						врСч = врСч - 1;
				
					КонецЦикла;	
					
					Продолжить;
					
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "БЕЗ НДС - НДС Клиенты", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
				
			Попытка
				
				Если ЭтоАварийныйЗаказ Тогда
										
					врКолСтрокТЗНомен = ТЧСВидомНоменклатуры.Количество() - 1;
					Пока врКолСтрокТЗНомен >=0 Цикл
						
						врТекСтрокаТЧНомен = ТЧСВидомНоменклатуры[врКолСтрокТЗНомен];
						Если СписокТоваровАварийногоЗаказа.Найти(врТекСтрокаТЧНомен.Номенклатура) <> Неопределено Тогда
							ТЧСВидомНоменклатуры.Удалить(врТекСтрокаТЧНомен);
						КонецЕсли;	
						
						врКолСтрокТЗНомен = врКолСтрокТЗНомен - 1;
						
					КонецЦикла;	
					
					СтрТоварыДляДоЗагрузки = "";
					Для Каждого ТекСтрокаТЧНомен Из ТЧСВидомНоменклатуры Цикл
						СтрТоварыДляДоЗагрузки = СтрТоварыДляДоЗагрузки + СокрЛП(ТекСтрокаТЧНомен.Номенклатура) + "; ";
					КонецЦикла;	
					
					ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, СтрТоварыДляДоЗагрузки);
					
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл_Alert(Событие1С, "Проверка товаров. Исключение", ИнформацияОбОшибке(), Истина);
				Продолжить;
			КонецПопытки;	
			
			Попытка
				Если ТЧСВидомНоменклатуры.Количество() = 0 Тогда
					Если ЭтоАварийныйЗаказ Тогда
						Продолжить;
					Иначе	
						Логирование_Ошибка_ОтсутствуютТоварыДляЗагрузки("ЗАКАЗ", Партнер, СтрокаТаблицыСчета.InvoiceAmount);
					КонецЕсли;	
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Обработка пустого списка товаров", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
									
			Попытка
				
				КОПИЯ_ТЧСВидомНоменклатуры = Новый ТаблицаЗначений;
				КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Номенклатура",	   ОписаниеТиповНоменклатуры);
				КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("ВидНоменклатуры", ОписаниеТиповВидНоменклатуры);
				КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Количество",	   КЧ3);
				КОПИЯ_ТЧСВидомНоменклатуры.Колонки.Добавить("Цена",			   КЧ2);
				
				Для Каждого ТекСтрокаТЧ Из ТЧСВидомНоменклатуры Цикл
					
					КОПИЯ_НовСтрока = КОПИЯ_ТЧСВидомНоменклатуры.Добавить();
					КОПИЯ_НовСтрока.Номенклатура    = ТекСтрокаТЧ.Номенклатура;
					КОПИЯ_НовСтрока.ВидНоменклатуры = ТекСтрокаТЧ.ВидНоменклатуры;
					КОПИЯ_НовСтрока.Количество      = ТекСтрокаТЧ.Количество;
					КОПИЯ_НовСтрока.Цена            = ТекСтрокаТЧ.Цена;
					
				КонецЦикла;	
				
				//Если (СтрокаТаблицыСчета.IsTTN <> "True") И (СтрокаТаблицыСчета.WithouPay = "False") И (СтрокаТаблицыСчета.IsInvoice = "False") И (НЕ ВсегдаЗаНАЛ(Партнер)) Тогда
					Попытка
						врЭтоНал = Ложь;
						Если ВсегдаЗаНАЛ(Партнер) Тогда
							врЭтоНал = Истина;
						КонецЕсли;
						Если СтрокаТаблицыСчета.WithouPay = "True" Тогда
							врЭтоНал = Истина
						КонецЕсли;
						ПроверитьЛимитЗаказаИСообщитьСупервайзеру(КОПИЯ_ТЧСВидомНоменклатуры, врОсновнойПартнер, врЭтоНал);	
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЛИМИТ ЗАКАЗА - Исключение!", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
				//КонецЕсли;	
					
			//	аян_СинхронизацияСервер.ВторойПрайс_ПроверитьТаблицуЗаказов(ТекАгент, врОсновнойПартнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ТОВАРОВ ВТОРОГО ПРАЙСА", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;	
			
			Попытка
				Если ИдКПК = "DevInsider" Тогда
					Если ЭтоИнвойсНашейТочки() Тогда
						аян_СинхронизацияСервер.НашаРозница_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);
					КонецЕсли;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "НАША РОЗНИЦА - ЗАПРЕТ НА РЕАЛИЗАЦИЮ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			// Запрет Второй Прайс Фасовка для Томска 
			
		//	Попытка
		//		
		//		Если ИмяСервераМА = "Tomsk" И ЭтоКегиРозлив Тогда
		//			
		//			Если ИдКПК <> "DevInsider" Тогда
		//				
		//				Если Не ЭтоИнвойсНашейТочки() Тогда
		//													
		//					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		//
		//					Пока врСч >= 0 Цикл
		//	
		//						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		//		
		//						Если врТекСтрока.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль И Товары_СкидкаКеги.Найти(врТекСтрока.Номенклатура) = Неопределено  Тогда
		//						
		//							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
		//							МЗОтказы.Агент         = ТекАгент;
		//							МЗОтказы.ДатаОтказа    = ТекущаяДата();
		//							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
		//							МЗОтказы.Клиент        = Партнер;
		//							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
		//							МЗОтказы.Количество    = врТекСтрока.Количество;
		//							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
		//							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
		//							МЗОтказы.Записать();			
		//							
		//							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
		//	
		//						КонецЕсли;	
		//
		//						врСч = врСч - 1;
		//						
		//					КонецЦикла;
		//						
		//				КонецЕсли;	
		//					
		//			КонецЕсли;		
		//				
		//		КонецЕсли;
		//		
		//	Исключение
		//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГИ РОЗЛИВ ВТОРОЙ ПРАЙС ФАСОВКА", ИнформацияОбОшибке(), Истина);
		//	КонецПопытки;							
			
			//Попытка
			//	
			//	Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(ТекАгент) Тогда 
			//	
			//		аян_АкцииСервер.ПроверитьЗаказ(ТЧСВидомНоменклатуры, ТекАгент, Партнер);
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка АКЦИЯ КРАТНОСТЬ", ИнформацияОбОшибке(), Истина);
			//	
			//КонецПопытки;	
									
			//Попытка 
			//	
			//	Если ОсновнаяФирма <> оргАТ_ЛогистикОМСК Тогда
			//	
			//		аян_СинхронизацияСервер.ВторойПрайс_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ТОВАРОВ ВТОРОГО ПРАЙСА", ИнформацияОбОшибке(), Истина);
			//	
			//КонецПопытки;
			
			Попытка 
				
				аян_СинхронизацияСервер.ЗагрузкаДокументов_ПроверитьНаУстановленнуюЦену(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
										
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка НА ЦЕНЫ = 0", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;		
			
			Попытка 
				
				врКонтрагентСигареты = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
				
				Если НЕ врКонтрагентСигареты.НастроенЭДОСБИС Тогда
				
					аян_СинхронизацияСервер.СИГАРЕТЫ_УдалитьСигаретыИзЗаказа(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры, ТоварыСигареты);	
					
				КонецЕсли;	
										
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "СИГАРЕТЫ - УДАЛЕНИЕ", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;	
			
			// ЗАПРЕТ
			
			Попытка 
				
				Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Region") Тогда
					
					 аян_СинхронизацияСервер.ЗапретПродаж_ПроверитьТаблицуЗаказов(ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
						
				КонецЕсли;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка НА ЗАПРЕТ", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
					
			// Запрет на кеги для Петровых
			
			Попытка 
				
				Если ОсновнаяФирма = оргАТ_Логистик Тогда
					
					врЗапретКеги = Ложь;
					
					Если Партнер.ПринадлежитЭлементу(Клиенты_грПетров) Тогда	
						врЗапретКеги = Истина;
					КонецЕсли;	
					
					Если ИмяСервераМА <> "Tomsk" Тогда
												
						врМассивЗонДоставки = Новый Массив;
						врМассивЗонДоставки.Добавить(Справочники.ЗоныДоставки.НайтиПоНаименованию("Анжерка Вторник", Истина));
						врМассивЗонДоставки.Добавить(Справочники.ЗоныДоставки.НайтиПоНаименованию("Анжерка Четверг", Истина));
						врМассивЗонДоставки.Добавить(Справочники.ЗоныДоставки.НайтиПоНаименованию("Юрга четверг",    Истина));
						врМассивЗонДоставки.Добавить(Справочники.ЗоныДоставки.НайтиПоНаименованию("Юрга пятница",    Истина));	

						Если врМассивЗонДоставки.Найти(Партнер.ЗонаДоставки) = Неопределено Тогда
							врЗапретКеги = Истина;
						КонецЕсли;
							
					КонецЕсли;	
											
					Если врЗапретКеги Тогда	
						
						аян_СинхронизацияСервер.КЕГИ_ПроверитьТаблицуЗаказов(ИмяСервераМА, ТекАгент, Партнер, СокрЛП(СтрокаТаблицыСчета.Note), ТЧСВидомНоменклатуры);	
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка НА КЕГИ", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;
			
			// Борихинский 
			
			Попытка
				
				Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
					
					Если ИдКПК <> "DevInsider" Тогда
						
						Если Не ЭтоИнвойсНашейТочки() Тогда
									
							Если НЕ КлиентыКонтрагенты_ЭтоБорихинский(Партнер) Тогда
					
								врБорихинский       = Справочники.Номенклатура.НайтиПоКоду("Ц0006337   ");
								врБорихинскийСкидка = Справочники.Номенклатура.НайтиПоКоду("00-00013859");  
						
								врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
								Пока врСч >= 0 Цикл
			
									врТекСтрока = ТЧСВидомНоменклатуры[врСч];
				
									Если врТекСтрока.Номенклатура.ПринадлежитЭлементу(врБорихинский) ИЛИ врТекСтрока.Номенклатура.ПринадлежитЭлементу(врБорихинскийСкидка) Тогда
								
										МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
										МЗОтказы.Агент         = ТекАгент;
										МЗОтказы.ДатаОтказа    = ТекущаяДата();
										МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
										МЗОтказы.Клиент        = Партнер;
										МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
										МЗОтказы.Количество    = врТекСтрока.Количество;
										МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
										МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
										МЗОтказы.Записать();			
									
										ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
										//ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРИХИНСКИЙ - ЕСТЬ ЗАПРЕТ !!!");
			
									КонецЕсли;	
		
									врСч = врСч - 1;
								
								КонецЦикла;
								
							КонецЕсли;	
							
						КонецЕсли;	
							
					КонецЕсли;		
						
				КонецЕсли;
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРИХИНСКИЙ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			// Межениновская ПФ
			
		//	Попытка
		//						
		//		Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
		//			
		//			Если ИдКПК <> "DevInsider" Тогда
		//				Если Не ЭтоИнвойсНашейТочки() Тогда
		//			
		//					врМежениновка = Справочники.Номенклатура.НайтиПоКоду("Ц0008649   ");
		//			
		//					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		//
		//					Пока врСч >= 0 Цикл
		//	
		//						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		//		
		//						Если ЗначениеЗаполнено(врМежениновка) И врТекСтрока.Номенклатура.ПринадлежитЭлементу(врМежениновка) Тогда
		//						
		//							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
		//							МЗОтказы.Агент         = ТекАгент;
		//							МЗОтказы.ДатаОтказа    = ТекущаяДата();
		//							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
		//							МЗОтказы.Клиент        = Партнер;
		//							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
		//							МЗОтказы.Количество    = врТекСтрока.Количество;
		//							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
		//							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
		//							МЗОтказы.Записать();			
		//							
		//							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
		//					
		//							ЗаписатьИнформацию1СвЛогФайл(Событие1С, "МЕЖЕНИНОВСКАЯ ПФ - ЕСТЬ ЗАПРЕТ !!!");
		//	
		//						КонецЕсли;	
		//	
		//						врСч = врСч - 1;
		//		
		//					КонецЦикла;	
		//			
		//				КонецЕсли;	
		//				
		//			КонецЕсли;
		//		КонецЕсли;	
		//		
		//	Исключение
		//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "МЕЖЕНИНОВСКАЯ ПФ", ИнформацияОбОшибке(), Истина);
		//	КонецПопытки;	
			
			// МОРОЖЕННОЕ
			
			Попытка
				
				Если Массив_АгентыМороженное.Найти(ТекАгент) = Неопределено Тогда 
								
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
		
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
	
						Если НЕ ТоварыМороженное.Найти(врТекСтрока.Номенклатура) = Неопределено Тогда
					
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = ТекАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
							МЗОтказы.Клиент        = Партнер;
							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
							МЗОтказы.Количество    = врТекСтрока.Количество;
							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
							МЗОтказы.Записать();			
										
							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
								
						КонецЕсли;	
			
						врСч = врСч - 1;
				
					КонецЦикла;	
					
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "МОРОЖЕННОЕ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			// Сыры Альпина
			
			Попытка
								
				Если (ИмяСервераМА = "Kuzbas") Тогда
					
					Если ИдКПК <> "DevInsider" Тогда
						Если Не ЭтоИнвойсНашейТочки() Тогда
							
							врМассивБР = Новый Массив;
							
							ЗапросБР = Новый Запрос;
							ЗапросБР.Текст = "ВЫБРАТЬ
							                 |	мпп_ИсключенияНоменклатурыПоБизнесРегионам.Владелец
							                 |ИЗ
							                 |	Справочник.мпп_ИсключенияНоменклатурыПоБизнесРегионам КАК мпп_ИсключенияНоменклатурыПоБизнесРегионам
							                 |ГДЕ
							                 |	мпп_ИсключенияНоменклатурыПоБизнесРегионам.ПредставлениеТЧ ПОДОБНО ""%Альпина%""";
							ВыборкаБР = ЗапросБР.Выполнить().Выбрать();
							Пока ВыборкаБР.Следующий() Цикл
								Если ЗначениеЗаполнено(ВыборкаБР.Владелец) Тогда
									врМассивБР.Добавить(ВыборкаБР.Владелец);
								КонецЕсли;	
							КонецЦикла;	
							
							Если врМассивБР.Найти(Партнер.БизнесРегион) <> Неопределено Тогда
												
							врМежениновка = Справочники.Номенклатура.НайтиПоКоду("00-00000714");
					
							врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
							Пока врСч >= 0 Цикл
			
								врТекСтрока = ТЧСВидомНоменклатуры[врСч];
				
								Если ЗначениеЗаполнено(врМежениновка) И врТекСтрока.Номенклатура.ПринадлежитЭлементу(врМежениновка) Тогда
								
									МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
									МЗОтказы.Агент         = ТекАгент;
									МЗОтказы.ДатаОтказа    = ТекущаяДата();
									МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
									МЗОтказы.Клиент        = Партнер;
									МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
									МЗОтказы.Количество    = врТекСтрока.Количество;
									МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
									МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
									МЗОтказы.Записать();			
									
									ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
									ЗаписатьИнформацию1СвЛогФайл(Событие1С, "МЕЖЕНИНОВСКАЯ ПФ - ЕСТЬ ЗАПРЕТ !!!");
			
								КонецЕсли;	
			
								врСч = врСч - 1;
				
							КонецЦикла;	
							
							КонецЕсли;
					
						КонецЕсли;	
						
					КонецЕсли;
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "МЕЖЕНИНОВСКАЯ ПФ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			
			
			// БОНУС
			
			Попытка
				
				Если (СтрокаТаблицыСчета.IsTTN = "True") И (НЕ ЗагрузкаДокументов_БонусБезПроверки(Партнер, ТекАгент)) Тогда
				
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						Если ТоварыБонус.Найти(врТекСтрока.Номенклатура) = Неопределено Тогда
							
							Если (ИмяСервераМА = "Tomsk") И (КегиУтро_МассивАгентов.Найти(ТекАгент) <> Неопределено) И (врТекСтрока.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) Тогда
								врСч = врСч - 1;
								Продолжить;
							КонецЕсли;	
							
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = ТекАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
							МЗОтказы.Клиент        = Партнер;
							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
							МЗОтказы.Количество    = врТекСтрока.Количество;
							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаБонус;							
							МЗОтказы.Записать();			
								
							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
						КонецЕсли;	
			
						врСч = врСч - 1;
				
					КонецЦикла;	
					
				КонецЕсли;
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАПРЕТ НА БОНУС", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			
		//	// Запрет ДУБЛЬ Пивоварня Лобанова для Наших точек
		//	
		//	Попытка
		//		
		//		Если НашаТочка(Партнер) Тогда
		//		
		//			врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		//
		//			Пока врСч >= 0 Цикл
		//	
		//				врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		//
		//				Если (врТекСтрока.Номенклатура.Родитель = Справочники.Номенклатура.НайтиПоКоду("00-00013630")) И (врТекСтрока.Номенклатура <> Справочники.Номенклатура.НайтиПоКоду("00-00013637")) Тогда
		//					
		//					МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
		//					МЗОтказы.Агент         = ТекАгент;
		//					МЗОтказы.ДатаОтказа    = ТекущаяДата();
		//					МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
		//					МЗОтказы.Клиент        = Партнер;
		//					МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
		//					МЗОтказы.Количество    = врТекСтрока.Количество;
		//					МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
		//					МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;							
		//					МЗОтказы.Записать();			
		//						
		//					ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
		//					
		//					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "ПИВОВАРНЯ ЛОБАНОВА - ЕСТЬ ЗАПРЕТ !!!");
		//	
		//				КонецЕсли;	
		//	
		//				врСч = врСч - 1;
		//		
		//			КонецЦикла;	
		//			
		//		КонецЕсли;	
		//		
		//	Исключение
		//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПИВОВАРНЯ ЛОБАНОВА", ИнформацияОбОшибке(), Истина);
		//	КонецПопытки;	
			
			Если НЕ ЗначениеЗаполнено(СкладАгента) Тогда 
				error = 1;
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Загрузка заказов не выполнена, так как не указан основной склад у Агента: """ + ТекАгент + """");
				ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан основной склад у Агента: """ + ТекАгент+"""");
				ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				Возврат;	
			КонецЕсли;
			
			ЗапросОрг = Новый Запрос;
			ЗапросОрг.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПользователей.Пользователь,
			|	НастройкиПользователей.Настройка,
			|	НастройкиПользователей.Значение		
			|ИЗ
			|	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
			|ГДЕ
			|	НастройкиПользователей.Пользователь = &Пользователь
			|	И НастройкиПользователей.Настройка = &Настройка";
			
			ЗапросОрг.Параметры.Вставить("Пользователь",ТекАгент);
			ЗапросОрг.Параметры.Вставить("Настройка",ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнаяОрганизация);
			ВыборкаОрг = ЗапросОрг.Выполнить().Выбрать();
			Если ВыборкаОрг.Следующий() Тогда 
				ОрганизацияАгента = ВыборкаОрг.Значение;
			КонецЕсли;
			
			ВыделятьДжолики = Ложь;
			ЭтоРИФПлюс      = Ложь;
			ЭтоМеркурий     = Ложь;
			ЭтоМарс		    = Ложь;
			ЭтоСигма	    = Ложь;
			ЭтоАтлант       = Ложь;
			ЭтоТОП17        = Ложь;
			ЭтоНашаТочка    = Ложь;
			
			Если ОсновнаяФирма = оргАТ_Логистик Тогда
				
				ВыделятьДжолики = Истина;
				
				Попытка
					
					Если СтрЧислоВхождений(СтрокаТаблицыСчета.InvoiceID, "_NDS") > 0 Тогда
						
						ЭтоРИФПлюс  = Истина;
						ЭтоТОП17    = Истина;	
						
					Иначе	
						
						врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Партнер, ТекАгент);
					
						Если врСоглашениеСКлиентом.Соглашение.Организация = оргРИФПлюс Тогда
							ЭтоРИФПлюс = Истина;
						КонецЕсли;	
						Если врСоглашениеСКлиентом.Соглашение.Организация = оргМеркурий Тогда
							ЭтоРИФПлюс  = Истина;
							ЭтоМеркурий = Истина;
						КонецЕсли;						
						Если врСоглашениеСКлиентом.Соглашение.Организация = оргМарс Тогда
							ЭтоРИФПлюс  = Истина;
							ЭтоМарс     = Истина;
						КонецЕсли;											
						Если врСоглашениеСКлиентом.Соглашение.Организация = оргСигма Тогда
							ЭтоРИФПлюс  = Истина;
							ЭтоСигма    = Истина;
						КонецЕсли;	
						Если врСоглашениеСКлиентом.Соглашение.Организация = оргАТЛАНТОмск Тогда
							ЭтоРИФПлюс  = Истина;
							ЭтоАтлант   = Истина;
						КонецЕсли;							
						
					КонецЕсли;	
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Определение флага ЭтоРИФПлюс", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
			КонецЕсли;	
			
			// ТРАНЗИТНЫЕ СКЛАДЫ
			
			ВыделятьТранзит = Ложь;
			СкладТранзита   = Справочники.Склады.ПустаяСсылка();			
			
			Попытка
				
				врПараметрыТранзит = аян_СинхронизацияСервер.ТранзитныеСклады_ТочкаОтгружаетсяЧерезТранзит(Партнер);
			
				ВыделятьТранзит = врПараметрыТранзит.Транзит;
				СкладТранзита   = врПараметрыТранзит.Склад;
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Параметры ТРАНЗИТ. Исключение!!!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			// ТОВАРЫ С НЕВЕРНЫМ НДС
			
			Попытка
				
					врСч = ТЧСВидомНоменклатуры.Количество() - 1;
		
					Пока врСч >= 0 Цикл
			
						врТекСтрока = ТЧСВидомНоменклатуры[врСч];
		
						Если Товары_НеверныйНДС.Найти(врТекСтрока.Номенклатура) <> Неопределено Тогда
							
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = ТекАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
							МЗОтказы.Клиент        = Партнер;
							МЗОтказы.Номенклатура  = врТекСтрока.Номенклатура;
							МЗОтказы.Количество    = врТекСтрока.Количество;
							МЗОтказы.Комментарий   = СокрЛП(СтрокаТаблицыСчета.Note);
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НеУказанНДС;							
							МЗОтказы.Записать();			
								
							ТЧСВидомНоменклатуры.Удалить(врТекСтрока);
							
						КонецЕсли;	
			
						врСч = врСч - 1;
				
					КонецЦикла;	
					
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТОВАРЫ С НЕВЕРНЫМ НДС", ИнформацияОбОшибке(), Истина);
			КонецПопытки;							
			
			// ТЕКСТИЛЬ ОТДЕЛЬНО
			
			ТекстильОтдельно = Ложь;
			
			//Попытка
			//	
			//	Если (НЕ Партнер.ПринадлежитЭлементу(Клиенты_грПетров)) Тогда
			//		
			//		Если (СтрокаТаблицыСчета.IsTTN <> "True") И (СтрокаТаблицыСчета.WithouPay = "False") И (СтрокаТаблицыСчета.IsInvoice = "False") И (НЕ ВсегдаЗаНАЛ(Партнер)) Тогда
			//			
			//			ТекстильОтдельно = Истина;
			//			
			//			//ЗаписатьОшибку1СвЛогФайл(Событие1С, "ТЕКСТИЛЬ ОТДЕЛЬНО = " + Строка(Партнер));
			//				
			//		КонецЕсли;	
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГИ ВТОРОЙ ПРАЙС - ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
			//КонецПопытки;				
					
			// КЕГИ ВТОРОЙ ПРАЙС
			
			КегиВторойПрайс = Ложь;
			
			//Попытка
			//	
			//	Если (ИмяСервераМА <> "Tomsk") И (НЕ Партнер.ПринадлежитЭлементу(Клиенты_грПетров)) Тогда
			//		
			//		Если (СтрокаТаблицыСчета.IsTTN <> "True") И (СтрокаТаблицыСчета.WithouPay = "False") И (СтрокаТаблицыСчета.IsInvoice = "False") И (НЕ ВсегдаЗаНАЛ(Партнер)) Тогда
			//			
			//			Для Каждого врТекСтрокаКеги2 Из ТЧСВидомНоменклатуры Цикл
			//			    Если (врТекСтрокаКеги2.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) И (Товары_СкидкаКеги.Найти(врТекСтрокаКеги2.Номенклатура) <> Неопределено) Тогда
			//					КегиВторойПрайс = Истина;
			//					Прервать;
			//				КонецЕсли;	
			//			КонецЦикла;
			//			
			//			//Если КегиВторойПрайс Тогда
			//			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГИ ВТОРОЙ ПРАЙС = " + Строка(Партнер));
			//			//КонецЕсли;	
			//				
			//		КонецЕсли;	
			//		
			//	КонецЕсли;	
			//	
			//Исключение
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "КЕГИ ВТОРОЙ ПРАЙС - ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина);
			//КонецПопытки;	
			//
			//КегиВторойПрайс = Ложь;
			
			// СИГАРЕТЫ
			
			ВыделятьСигареты = Ложь;
			СигаретыЗаНАЛ    = Истина;	
			
			Попытка
				
				Если СигаретыВОтсрочку(Партнер) Тогда
					СигаретыЗаНАЛ = Ложь;	
				КонецЕсли;
				
				Если ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда
					СигаретыЗаНАЛ = Ложь;
				КонецЕсли;	
								
				Если (СтрокаТаблицыСчета.WithouPay = "True") ИЛИ (СтрокаТаблицыСчета.IsTTN = "True") ИЛИ (КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Партнер)) ИЛИ СигаретыВОтсрочку(Партнер) ИЛИ ЭтоГруппаПользователяКузбасс(ТекАгент) Тогда

				Иначе
					
					Для Каждого ТекСтрокаТЗТовары Из ТЧСВидомНоменклатуры Цикл
						
						Для Каждого ТекСтрокаСигареты Из ТоварыСигареты Цикл
						
							Если ТекСтрокаТЗТовары.Номенклатура = ТекСтрокаСигареты Тогда
								
								ВыделятьСигареты = Истина;
								
							КонецЕсли;
							
						КонецЦикла;	
						
					КонецЦикла;	
					
				КонецЕсли;
								
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Сигареты!", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;				
						
			ВыделятьСигареты = Истина;
			СигаретыЗаНАЛ    = Истина;
			
			Попытка
				Если НашаТочка(Партнер) Тогда
					ЭтоНашаТочка  = Истина;
					СигаретыЗаНАЛ = Ложь;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЭТО НАША ТОЧКА", ИнформацияОбОшибке(), Истина);
			КонецПопытки;				
			
			Попытка
				Если Не КонтрагентПодключенКЕГАИС(Партнер) Тогда
					ОбъединениеЗаявок_УдалитьБелыйАлкогольИзЗаявки(ТЧСВидомНоменклатуры, Партнер, СокрЛП(СтрокаТаблицыСчета.Note)); 
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Удаление белого алкоголя", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
						
			врДокументПеремещения      = Документы.ПеремещениеТоваров.ПустаяСсылка();
			врДокументОснования        = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			врКомментарий              = "Регион: " + СокрЛП(ИмяСервераМА) + "; Агент: " + СокрЛП(ТекАгент) + "; Клиент: " + СокрЛП(Партнер);			
			
			врСкладПеремещения         = СкладАТАлкоголь;
			
			Если ЭтоРИФПлюс Тогда
				врСкладПеремещения     = СкладРИФПлюсАлкоголь;
			КонецЕсли;
			
			Если ЭтоМеркурий Тогда	
				врСкладПеремещения     = СкладМеркурийАлкоголь;
			КонецЕсли;	
			
			Если ЭтоМарс Тогда	
				врСкладПеремещения     = СкладМарсАлкоголь;
			КонецЕсли;				
			
			Если ЭтоСигма Тогда	
				врСкладПеремещения     = СкладСигмаАлкоголь;
			КонецЕсли;	
			
			Если ЭтоАтлант Тогда	
				врСкладПеремещения     = СкладАтлантАлкоголь;
			КонецЕсли;	
						
			Если ЭтоТОП17 Тогда	
				врСкладПеремещения     = СкладТОП_17;
			КонецЕсли;				
			
			врНеПеремещатьТоварыБезНДС = Не (ЭтоРИФПлюс ИЛИ ЭтоМеркурий ИЛИ ЭтоМарс ИЛИ ЭтоСигма ИЛИ ЭтоАтлант ИЛИ ЭтоТОП17);
			
			Попытка				
				Если (Не АлкогольОтдельнойФактурой(Партнер)) И (Не ЭтоБортАгента) И ОбъединениеЗаявок_НужноСоздатьПеремещениеТоваров(ТЧСВидомНоменклатуры, СтрокаТаблицыСчета.IsTTN = "True", ВыделятьСигареты, врНеПеремещатьТоварыБезНДС) Тогда 
					Если ЭтоМеркурий Тогда
						врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргМеркурий, СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);
					ИначеЕсли ЭтоМарс Тогда
						врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргМарс, СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);
					ИначеЕсли ЭтоСигма Тогда
						врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргСигма, СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);						
					ИначеЕсли ЭтоАтлант Тогда
						врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргАТЛАНТОмск, СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);												
					ИначеЕсли ЭтоТОП17 Тогда
						врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргТОП_17, СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);												
					Иначе
						Если Не ЗагрузкаДокументов_НужноПровестиЧерезГалактику(Партнер) Тогда
							врДокументПеремещения = ОбъединениеЗаявок_СоздатьПеремещениеТоваров(оргРИФПлюс,  СкладТомскПиво, врСкладПеремещения, ТЧСВидомНоменклатуры, врКомментарий, ВыделятьСигареты, врНеПеремещатьТоварыБезНДС);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Создание перемещения для объединения заявок", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
				
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТЧ.ВидНоменклатуры КАК Справочник.ВидыНоменклатуры) КАК ВидНоменклатуры,
			|	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество,
			|	ВЫРАЗИТЬ(ТЧ.Цена КАК ЧИСЛО) КАК Цена,
			|	ВЫРАЗИТЬ(ТЧ.Приоритет КАК ЧИСЛО) КАК Приоритет
			|ПОМЕСТИТЬ ВрТ
			|ИЗ
			|	&ТЧ КАК ТЧ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	аянСоответствиеОрганизацийИСкладов.ВидНоменклатуры КАК ВидНоменклатурыРег,
			|	аянСоответствиеОрганизацийИСкладов.Склад КАК Склад
			|ПОМЕСТИТЬ РегистрСкладов
			|ИЗ
			|	РегистрСведений.аянСоответствиеОрганизацийИСкладов КАК аянСоответствиеОрганизацийИСкладов
			|ГДЕ
			|	аянСоответствиеОрганизацийИСкладов.Организация = &Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Склад КАК Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		//	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0)) КАК КоличествоОстаток
			|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ВЫБОР КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0) <= 0 ТОГДА 0 ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.ВРезервеСоСкладаОстаток, 0) КОНЕЦ) КАК КоличествоОстаток			
			|ПОМЕСТИТЬ Остатки
			|ИЗ
		//	|	РегистрНакопления.СвободныеОстатки.Остатки(&Дата, Склад В ИЕРАРХИИ (&Склад)) КАК ТоварыНаСкладахОстатки
			|	РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК ТоварыНаСкладахОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВрТ.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ВрТ.Номенклатура.ПоставляетсяВМногооборотнойТаре
			|			ТОГДА ВрТ.Номенклатура.НоменклатураМногооборотнаяТара
			|		ИНАЧЕ &ПустаяТара
			|	КОНЕЦ КАК НоменклатураМногооборотнаяТара,
			|	ВрТ.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|	РегистрСкладов.ВидНоменклатурыРег КАК ВидНоменклатурыРег,
			|	ВрТ.Количество КАК Количество,
			|	ВрТ.Цена КАК Цена,
			|   ВрТ.Приоритет КАК Приоритет,";
		
			ВставкаЧерныйРозлив = "";
			Если ЭтоКегиРозлив Тогда
				ВставкаЧерныйРозлив = " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее И ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыСкидкаКеги) ТОГДА ""_ЧерныйЗаказ2_"" ";
			КонецЕсли;
			
			МаркировкаАТЛ = Истина;
			ЗапросВставкаМаркировка = " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Маркировка ТОГДА ""_ОтдельныйЗаказ_"" ";
			Если Партнер.ПринадлежитЭлементу(Клиенты_Роснефть) Тогда
				МаркировкаАТЛ = Ложь;
				ЗапросВставкаМаркировка = "";
			КонецЕсли;			
			
				Если ВыделятьДжолики Тогда
							   
					Запрос.Текст = Запрос.Текст + "
			               |	ВЫБОР " +
						   			?(ВыделятьТранзит,  " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В (&ТоварыТранзитБелые) ТОГДА ""_ТоварыТранзитБелые_"" ", " ") + 
									?(ВыделятьТранзит,  " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В (&ТоварыТранзитЧерные) ТОГДА ""_ТоварыТранзитЧерные_"" ", " ") + 
									?(ТекстильОтдельно, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В (&ТоварыТекстиль) ТОГДА ""_ТоварыТекстиль_"" ", " ") + "									
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыОвощиФрукты) 
						   |			ТОГДА ""_ТоварыОвощиФрукты_""						   						   		
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыМороженное) 
						   |			ТОГДА ""_ТоварыМороженное_"" " +						   						   						   									
						   //|		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыВесовые) 
						   //|			ТОГДА ""_ТоварыВесовые_""						   
						   //|		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыВесовыеБезНДС) 
						   //|			ТОГДА ""_ТоварыВесовыеБезНДС_""	" +
						            ?(ЭтоРИФПлюс, " ", " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыБезНДС) ТОГДА ""_ТоварыБезНДС_"" ") +
						   			?(ВыделятьСигареты, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В ИЕРАРХИИ(&ТоварыСигареты) ТОГДА ""_ТоварыСигареты_"" ", " ") + 						   						   						   
									?(ЭтоНашаТочка,     " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики ТОГДА ""_Джолики_"" ", " ") + "						   						   						   		
						   |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики
						   |			ТОГДА ""_Джолики_"" " +
						   			?(КегиВторойПрайс, " КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее И ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура) В (&ТоварыСкидкаКеги) ТОГДА ""_ЧерныйЗаказКеги_"" ", " ") + "  
			               |		" + ВставкаЧерныйРозлив + "КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее
						   |			ТОГДА ""_ЧерныйЗаказ_""
						   |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)
						   |			ТОГДА ""_Алкоголь_""" + ЗапросВставкаМаркировка + "						   
			               |		ИНАЧЕ РегистрСкладов.Склад
			               |	КОНЕЦ КАК Склад,
			               |	ЕСТЬNULL(РегистрСкладов.Склад, &ПустойСклад) КАК СкладЗаказа";
					
				Иначе
						   
				   Запрос.Текст = Запрос.Текст + "
			               |	ВЫБОР
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоРазливное
			               |			ТОГДА ""_ОтдельныйЗаказ_""						   
			               |	ИНАЧЕ ВЫБОР
			               |		КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ПивоДублирующее                                                 
			               |	      ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее
			               |			ТОГДА ""_ЧерныйЗаказ_""
			               |	ИНАЧЕ РегистрСкладов.Склад
						   |	КОНЕЦ
			               |	КОНЕЦ КАК Склад,
			               |	ЕСТЬNULL(РегистрСкладов.Склад, &ПустойСклад) КАК СкладЗаказа";
						   
			   КонецЕсли;
						   
			Запрос.Текст = Запрос.Текст + "  			
			|ПОМЕСТИТЬ ТаблТоваровИСкладов
			|ИЗ
			|	ВрТ КАК ВрТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСкладов КАК РегистрСкладов
			|		ПО ВрТ.ВидНоменклатуры = РегистрСкладов.ВидНоменклатурыРег
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблТоваровИСкладов.Номенклатура КАК Номенклатура,
			|	ТаблТоваровИСкладов.НоменклатураМногооборотнаяТара КАК НоменклатураМногооборотнаяТара,
			|	ТаблТоваровИСкладов.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|	ТаблТоваровИСкладов.ВидНоменклатурыРег КАК ВидНоменклатурыРег,
			|	ТаблТоваровИСкладов.Количество КАК Количество,
			|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			|	ТаблТоваровИСкладов.Цена КАК Цена,
			
			|	ТаблТоваровИСкладов.Приоритет КАК Приоритет,
						
			|	ТаблТоваровИСкладов.Склад КАК Склад,
			|	ТаблТоваровИСкладов.СкладЗаказа КАК СкладЗаказа
			|ИЗ
			|	ТаблТоваровИСкладов КАК ТаблТоваровИСкладов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
			|		ПО ТаблТоваровИСкладов.Номенклатура = Остатки.Номенклатура
			|			И ТаблТоваровИСкладов.СкладЗаказа = Остатки.Склад
			|
			|УПОРЯДОЧИТЬ ПО
			|	Склад,
			|	Приоритет,
			|	ТаблТоваровИСкладов.Номенклатура.Наименование						
			|ИТОГИ
			|	МАКСИМУМ(СкладЗаказа)
			|ПО
			|	Склад";
			
			Попытка
				Если ЗначениеЗаполнено(врДокументПеремещения) Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИНАЧЕ РегистрСкладов.Склад", "ИНАЧЕ ""_Алкоголь_""");
				КонецЕсли;	
				Если ЭтоРИФПлюс Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "_ТоварыВесовыеБезНДС_", "_ТоварыВесовые_"); 
				КонецЕсли;					
				Если ОсновнаяФирма = оргАТ_ЛогистикОМСК Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее", "ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &ЛосьеныДублирующее ИЛИ ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = &Джолики");  
				КонецЕсли;	
				Если ЭтоКегиРозлив Тогда
					
					//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь)",
					//	"ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь) И ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ПоставляетсяВМногооборотнойТаре");	
					//
					//Запрос.Текст = СтрЗаменить(Запрос.Текст, """_Алкоголь_""",
					//	"""_АлкогольРозлив_"" КОГДА ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.алкВидЭлементаТМЦ = ЗНАЧЕНИЕ(Перечисление.алкВидыЭлементовТМЦ.Алкоголь) И ВЫРАЗИТЬ(ВрТ.Номенклатура КАК Справочник.Номенклатура).ПоставляетсяВМногооборотнойТаре = ЛОЖЬ ТОГДА ""_Алкоголь_"" "); 					
										
					//ЗаписатьОшибку1СвЛогФайл(Событие1С, Запрос.Текст);
					
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОМСК - преобразование запроса. Исключение!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			мСкладыАгента = ПолучитьМассивСкладов(СкладАгента); 			
			СтрокаРИФПлюс = мСкладыАгента.Найти(СкладРИФПлюс);
			Если СтрокаРИФПлюс <> Неопределено Тогда
				мСкладыАгента.Удалить(СтрокаРИФПлюс);
			КонецЕсли;	
			
			Запрос.УстановитьПараметр("Дата",                ТекущаяДата());
			Запрос.УстановитьПараметр("Склад",               мСкладыАгента);		
			Запрос.УстановитьПараметр("ПустойСклад",         Справочники.Склады.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустаяТара",          Справочники.Номенклатура.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТЧ",                  ТЧСВидомНоменклатуры);
			Запрос.УстановитьПараметр("ПивоРазливное",       Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво разливное",   Истина));
			Запрос.УстановитьПараметр("ПивоДублирующее",     Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее", Истина));
			Запрос.УстановитьПараметр("ЛосьеныДублирующее",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар ДУБЛЬ", Истина));						
			Запрос.УстановитьПараметр("Джолики",			 Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики", Истина));						
			Запрос.УстановитьПараметр("Организация",		 ОсновнаяФирма);
			Запрос.УстановитьПараметр("ТоварыБезНДС",        ТоварыБезНДС);
			Запрос.УстановитьПараметр("ТоварыВесовые",       ТоварыВесовые);
			Запрос.УстановитьПараметр("ТоварыВесовыеБезНДС", ТоварыВесовыеБезНДС);
			Запрос.УстановитьПараметр("ТоварыСигареты",      ТоварыСигареты);
			Запрос.УстановитьПараметр("ТоварыОвощиФрукты",   Товары_ОвощиФрукты);
			Запрос.УстановитьПараметр("ТоварыСкидкаКеги",    Товары_СкидкаКеги);
			Запрос.УстановитьПараметр("ТоварыТекстиль",      ТоварыТекстиль);
			Запрос.УстановитьПараметр("ТоварыМороженное",    ТоварыМороженное);
			
			Запрос.УстановитьПараметр("ВидНоменклатуры_ПивоРозлив",   ВидНоменклатуры_ПивоРозлив);
			Запрос.УстановитьПараметр("ВидНоменклатуры_Джолики",	  ВидНоменклатуры_Джолики);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_ПивоДубль",    ВидНоменклатуры_ПивоДубль);
			Запрос.УстановитьПараметр("ВидНоменклатуры_ЛосьоныДубль", ВидНоменклатуры_ЛосьоныДубль);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_Молочка",      ВидНоменклатуры_Молочка);						
			Запрос.УстановитьПараметр("ВидНоменклатуры_Бисквит",      ВидНоменклатуры_Бисквит);	
			Запрос.УстановитьПараметр("Маркировка",          		  ВидНоменклатуры_Маркировка);			
			
			Если ВыделятьТранзит Тогда
				врТоварыТранзитСтруктура = аян_СинхронизацияСервер.ТранзитныеСклады_РазделитьТоварыПоВидам(аян_СинхронизацияСервер.ТранзитныеСклады_СписокТоваров(СкладТранзита));
				Запрос.УстановитьПараметр("ТоварыТранзитБелые",  врТоварыТранзитСтруктура.Белые);
				Запрос.УстановитьПараметр("ТоварыТранзитЧерные", врТоварыТранзитСтруктура.Черные)
			КонецЕсли;	
			
			врЗамер_4 = ТекущаяДата() - врЗамер_Старт;
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			СтуктураПоиска = Новый Структура("Склад");
			СтуктураПоиска.Склад = "_ЧерныйЗаказ_";			
			Если Выборка.НайтиСледующий(СтуктураПоиска) И НЕ ЗначениеЗаполнено(ОрганизацияАгента) Тогда 
				error = 1;
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент + """");
				ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				//Сообщить("<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указана основная организация у Агента: """ + ТекАгент+"""");
				Возврат;
			КонецЕсли;
			
			текСклад = Справочники.Склады.ПустаяСсылка();
			СтуктураПоиска = Новый Структура("СкладЗаказа");
			СтуктураПоиска.СкладЗаказа = Справочники.Склады.ПустаяСсылка();	
			Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда 
				//Выборка2 = Выборка.Выбрать();
				//error = 1;
				//
				//ФайлОшибок.ДобавитьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				//Сообщить("<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+"<-Загрузка заказов не выполнена, так как не указан склад в РегистрСведений.аянСоответствиеОрганизацийИСкладов для организации: """ + УсловияПродажПоУмолчанию.Организация+""" и вида номенклатуры: """+Выборка2.ВидНоменклатуры+"""");
				//Возврат;
				текСклад = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий").Ссылка;
			КонецЕсли;
			
			Выборка.Сбросить();
			
			ДатаОтгрузки = СтрокаТаблицыСчета.DeliveryFromDateTime;
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, "-","");
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, ":","");
			ДатаОтгрузки = СтрЗаменить(ДатаОтгрузки, " ","");
			
			ЭтоОтложенныйЗаказ = Ложь;
			КомментарийОтложенногоПлатежа = "";
			
			ДатаОтгрузкиОтложенная = ТекущаяДата();
			Попытка
				
				Если (ИмяСервераМА = "Tomsk") Тогда
					Если ТочкиСРучнымиЗаказами.Найти(Партнер) <> Неопределено Тогда
						ДатаОтгрузкиОтложенная = ТекущаяДата() + ДеньВСекундах;
						ЭтоОтложенныйЗаказ     = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
			//	Если (ИмяСервераМА = "Tomsk") И ((ТекАгент <> Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) И (ТекАгент <> Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна"))) Тогда
				Если (ИмяСервераМА = "Tomsk") И (Не ЭтоАгентОтложенногоПлатежа(ТекАгент)) Тогда
					
					ДатаОтгрузкиОтложенная = Дата(ДатаОтгрузки) + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
					Если ДатаОтгрузкиОтложенная >= НачалоДня(ТекущаяДата() + ДеньВСекундах * 2) Тогда
						ЭтоОтложенныйЗаказ = Истина;
						КомментарийОтложенногоПлатежа = ВРЕГ(ДеньНеделиПрописью(ДеньНедели(ДатаОтгрузкиОтложенная))) + " (" + Формат(ДатаОтгрузкиОтложенная, "ДФ=dd.MM.yy") + ")";
						ЗаписатьИнформацию1СвЛогФайл("ОТЛОЖЕННАЯ ДАТА ПЛАТЕЖА", "Дата отгрузки: " + СокрЛП(ДатаОтгрузки) + "; " +  СокрЛП(Партнер) + " = " + СокрЛП(СтрокаТаблицыСчета.Note));
					КонецЕсли;						
					
					ПроверкаКомментарий = ВРег(СокрЛП(СтрокаТаблицыСчета.Note));
					Если (СтрокаТаблицыСчета.Petrov <> "True") И (СтрЧислоВхождений(ПроверкаКомментарий, "СЕГОДН") > 0) Тогда
						ЗаписатьИнформацию1СвЛогФайл("НА СЕГОДНЯ", СокрЛП(Партнер) + " = " + СокрЛП(СтрокаТаблицыСчета.Note));
					КонецЕсли;	
						
				КонецЕсли;	
				
				Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
					
					ДатаОтгрузкиОтложенная = ДатаДоставкиПоМатрицеМаршрута(Партнер);
					ЭтоОтложенныйЗаказ = Истина;
					
				КонецЕсли;
								
				Если ЭтоОмскОбласть(ТекАгент) Тогда
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						Если НачалоДня(Дата(ДатаОтгрузки)) > НачалоДня(ТекущаяДата()) Тогда
							ДатаОтгрузкиОтложенная = Дата(ДатаОтгрузки);
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли ЭтоТестовыйАгент(ТекАгент) Тогда
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						врСтруктураОписанияОтложенногоПлатежа = ПолучитьДатуОтложенногоЗаказа(Дата(ДатаОтгрузки));
						ДатаОтгрузкиОтложенная        = врСтруктураОписанияОтложенногоПлатежа.ДатаОтложенная;
						КомментарийОтложенногоПлатежа = врСтруктураОписанияОтложенногоПлатежа.Комментарий;
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата()) Тогда
							ДатаОтгрузкиОтложенная = ТекущаяДата();
						Иначе								
							ЭтоОтложенныйЗаказ = Истина;
						КонецЕсли;	
					КонецЕсли;	
			//	ИначеЕсли (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна")) Тогда
				ИначеЕсли ЭтоАгентОтложенногоПлатежа(ТекАгент) Тогда
					Если Не ПустаяСтрока(ДатаОтгрузки) Тогда
						ДатаОтгрузкиОтложенная        = НачалоДня(Дата(ДатаОтгрузки)) + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
						ЭтоОтложенныйЗаказ            = Истина;
						Если ДатаОтгрузкиОтложенная >= НачалоДня(ТекущаяДата() + ДеньВСекундах * 2) Тогда
							КомментарийОтложенногоПлатежа = ВРЕГ(ДеньНеделиПрописью(ДеньНедели(ДатаОтгрузкиОтложенная)));
						КонецЕсли;
						// НА СЕГОДНЯ
						ПроверкаКомментарий = ВРег(СокрЛП(СтрокаТаблицыСчета.Note));
						Если (СтрокаТаблицыСчета.Petrov = "True") ИЛИ (СтрЧислоВхождений(ПроверкаКомментарий, "СЕГОДН") > 0) Тогда						
							ДатаОтгрузкиОтложенная = ТекущаяДата();
							КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
						КонецЕсли;
						// САМОВЫВОЗ
						Если ЕстьДопКолонки Тогда
							Если (СтрокаТаблицыСчета.Morning = "True") Тогда						
								ДатаОтгрузкиОтложенная = ТекущаяДата();
								КомментарийОтложенногоПлатежа = "САМОВЫВОЗ";
							КонецЕсли;						
						КонецЕсли;
					КонецЕсли;	
					Если Доставка_ЭтоРозливДень(врОсновнойПартнер, ТекАгент) Тогда
						врЗонаДоставкиРозливДень = Доставка_РозливДень_ЗонаДоставки(врОсновнойПартнер);
						Если ЗначениеЗаполнено(врЗонаДоставкиРозливДень) Тогда
							Если Доставка_РозливДень_ВремяНаСегодня() Тогда
								ДатаОтгрузкиОтложенная        = ТекущаяДата();
								ЭтоОтложенныйЗаказ            = Истина;
								КомментарийОтложенногоПлатежа = "КЕГИ УТРО" + ?(Доставка_ЭтоКегиУтроХорека(ТекАгент), " ХОРЕКА", "");								
							Иначе
								ДатаОтгрузкиОтложенная        = НачалоДня(ТекущаяДата() + ДеньВСекундах) + 60*60*8;
								ЭтоОтложенныйЗаказ            = Истина;							
								КомментарийОтложенногоПлатежа = "КЕГИ УТРО" + ?(Доставка_ЭтоКегиУтроХорека(ТекАгент), " ХОРЕКА", "") + " (" + Формат(ДатаОтгрузкиОтложенная, "ДФ=dd.MM.yyyy") + ")";								
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
															
					Если Партнер = Клиенты_Дорога Тогда
						ДатаОтгрузкиОтложенная = ТекущаяДата();
						КомментарийОтложенногоПлатежа = "САМОВЫВОЗ";
					КонецЕсли;	
					
					Если ИдКПК = "DevPetrushka" Тогда	
						
						врОбработкаДаты = Истина;
						
						Если ДатаОтгрузкиОтложенная > (КонецДня(ТекущаяДата()) + ДеньВСекундах) Тогда 
							врОбработкаДаты = Ложь;
							врТекДеньНедели = ДеньНедели(ДатаОтгрузкиОтложенная);
							Если врТекДеньНедели = 1 Тогда
								КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
							КонецЕсли;	
							//ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА. ДАТА. " + СокрЛП(Партнер));
						Иначе	
							ДатаОтгрузкиОтложенная = ТекущаяДата() + ДеньВСекундах;
						КонецЕсли;
						
						ЭтоОтложенныйЗаказ = Истина;		
						
						Если (ИмяСервераМА = "Tomsk") И (врОбработкаДаты) Тогда
						
							врТекДеньНедели = ДеньНедели(ТекущаяДата());
						
							врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
						
							// Пятница
							Если (врТекДеньНедели = 5) Тогда
								Если (врТекущийЧас > 19) Тогда
									ДатаОтгрузкиОтложенная = НачалоДня((ТекущаяДата() + 3*ДеньВСекундах)) + 60*60*8;
									КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
								КонецЕсли;
							КонецЕсли;							
													
							// Суббота
							Если (врТекДеньНедели = 6) Тогда
								ДатаОтгрузкиОтложенная = НачалоДня((ТекущаяДата() + 2*ДеньВСекундах)) + 60*60*8;
								КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
							КонецЕсли;	
							
							// Воскресение
							Если (врТекДеньНедели = 7) Тогда
								ДатаОтгрузкиОтложенная = НачалоДня((ТекущаяДата() + ДеньВСекундах)) + 60*60*8;
								КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
							КонецЕсли;							
						
							// Понедельник
							Если (врТекДеньНедели = 1) Тогда
								Если (врТекущийЧас < 10) Тогда
									ДатаОтгрузкиОтложенная = ТекущаяДата();
									КомментарийОтложенногоПлатежа = "НА СЕГОДНЯ";
								КонецЕсли;
							КонецЕсли;													
							
						КонецЕсли;	
											
					КонецЕсли;										
					
				КонецЕсли;						
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ДАТА ОТГРУЗКИ ОТЛОЖЕННАЯ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			НомерВПакете = 0;
			
			КЭШ_ДатаОтгрузкиОтложенная        = ДатаОтгрузкиОтложенная;
			КЭШ_ЭтоОтложенныйЗаказ            = ЭтоОтложенныйЗаказ;													
			КЭШ_КомментарийОтложенногоПлатежа = КомментарийОтложенногоПлатежа;							 			
			
			Пока Выборка.Следующий() Цикл 
				
				Попытка
					
					ДатаОтгрузкиОтложенная        = КЭШ_ДатаОтгрузкиОтложенная;
					ЭтоОтложенныйЗаказ            = КЭШ_ЭтоОтложенныйЗаказ;													
					КомментарийОтложенногоПлатежа = КЭШ_КомментарийОтложенногоПлатежа;							 				
					
					Если ЭтоКегиРозлив И Выборка.Склад = "_ЧерныйЗаказ_" Тогда
						ДатаОтгрузкиОтложенная        = БлижайшаяСуббота();
						ЭтоОтложенныйЗаказ            = Истина;													
						КомментарийОтложенногоПлатежа = "СУББОТА";						
					КонецЕсли;					
					
					//Если Выборка.Склад = "_ТоварыМороженное_" Тогда
						//ДатаОтгрузкиОтложенная        = БлижайшийВторник();
						//ЭтоОтложенныйЗаказ            = Истина;													
						//КомментарийОтложенногоПлатежа = "МОРОЖЕННОЕ";						
					//КонецЕсли;										
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "СУББОТА/ВТОРНИК - ИСКЛЮЧЕНИЕ", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				врЕстьВесВЗаказе = Ложь;
				
				врНужноПровестиРеализацию = Ложь;
			
			//	Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") Тогда
					врНужноПровестиРеализацию = Истина;
			//	КонецЕсли;	
			
				Если НЕ ПустаяСтрока(СтрокаТаблицыСчета.Note) Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;	
				
				Если НашаТочка(Партнер) Тогда
					врНужноПровестиРеализацию = Истина;
				КонецЕсли;	
				
				НомерВПакете = НомерВПакете + 1;
				
				//терехин++
				//мы хотим чтоб кеги отписывались автоматом
				колКегДин = 0;
				колКегЕвро = 0;
				колКег30 = 0;
				//терехин--
				
			//	НачатьТранзакцию();
			
				врЗамер_5 = ТекущаяДата() - врЗамер_Старт;

				//Создаем Заказ
				Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
				
				//Заказ.Дата = ?(ЗначениеЗаполнено(ДатаОтгрузки) И НачалоДня(Дата(ДатаОтгрузки))<=НачалоДня(ТекущаяДата()+60*60*24),ТекущаяДата(),Дата(ДатаОтгрузки));
				Заказ.Дата = ТекущаяДата();
				
				//Заказ.Склад 					= ОсновнойСклад;
				Если текСклад <> Справочники.Склады.ПустаяСсылка() Тогда
					Заказ.Склад = текСклад;
				Иначе
					Заказ.Склад 					= Выборка.СкладЗаказа;
				КонецЕсли;
				Заказ.Организация				= Организация;
				Заказ.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(Заказ.Организация, ОсновнойСклад, Заказ.Дата);
				Заказ.Партнер 					= Партнер;
				Заказ.Валюта					= Константы.ВалютаРегламентированногоУчета.Получить();	
				Если Не ЭтоБортАгента Тогда
					Заказ.СпособДоставки 			= Перечисления.СпособыДоставки.ДоКлиента;
				Иначе
					Заказ.СпособДоставки            = Перечисления.СпособыДоставки.Самовывоз;
					врНужноПровестиРеализацию   = Ложь;
				КонецЕсли;	
				Заказ.АдресДоставки				= УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Заказ.Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
				Заказ.Статус			    	= Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
				Заказ.Приоритет					= Справочники.Приоритеты.НайтиПоНаименованию("Средний",Истина);
				
				врЭтоВес   = Ложь;
				врЭтоОвощи = Ложь;
				
				Попытка
					Если ЭтоОтложенныйЗаказ Тогда
						Заказ.Комментарий = КомментарийОтложенногоПлатежа + " ";
					ИначеЕсли СтрокаТаблицыСчета.Petrov = "True" Тогда
						Заказ.Комментарий = Заказ.Комментарий + " НА СЕГОДНЯ ";
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыОвощиФрукты_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + " ОВОЩИ-ФРУКТЫ (" + ВРег(НаименованиеРегионаПоСерверу(ИмяСервераМА)) + ")";
						//врНужноПровестиРеализацию = Ложь;
						врЭтоОвощи = Истина;
					КонецЕсли;						
					Если (Выборка.Склад = "_ТоварыВесовые_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + "ВЕС ";
//						врНужноПровестиРеализацию = Ложь;
						врЭтоВес = Истина;
					КонецЕсли;	
					Если Выборка.Склад = "_ТоварыМороженное_" Тогда
						Заказ.Комментарий = Заказ.Комментарий + "МОРОЖЕННОЕ ";						
					КонецЕсли;															
					Если ВРег(СокрЛП(СтрокаТаблицыСчета.Note)) <> "ВЕС" Тогда
						Заказ.Комментарий = Заказ.Комментарий + СтрокаТаблицыСчета.Note;
					КонецЕсли;	
					Если (Выборка.Склад = "_ТоварыТекстиль_") Тогда 
						Заказ.Комментарий = Заказ.Комментарий + " ТЕКСТИЛЬ";
					КонецЕсли;		
					Если Партнер.Код = "00-00004112" Тогда
						Заказ.Комментарий = Заказ.Комментарий + " ДЛЯ СКЛАДА!!! СРОКИ не более 50% на МОРЕПРОДУКТЫ и РЫБУ.";
					КонецЕсли;						
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Комментарий ВЕС", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
				Заказ.Менеджер					= Партнер.ОсновнойМенеджер;
				Заказ.Грузополучатель			= ат_ОбщийМодуль.ПолучитьЗначениеРеквизита("Грузополучатель",Заказ.Партнер);//Блинов для ФГУП Почта России

				врЗонаДоставки = Заказ.Партнер.ЗонаДоставки;
				
				Если Не ЗначениеЗаполнено(врЗонаДоставки) Тогда
				
					//терехин++
					//дописываем зону доставки
					спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(Заказ.Партнер.БизнесРегион.Наименование),Истина);
					Если спрДоставка.Наименование = "" Тогда
						спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
						спрДоставка.Наименование = СокрЛП(Заказ.Партнер.БизнесРегион.Наименование);
						спрДоставка.Записать();
					КонецЕсли;
				
					Заказ.ЗонаДоставки				= спрДоставка.Ссылка;
					
				Иначе
					
					Заказ.ЗонаДоставки = врЗонаДоставки;
					
				КонецЕсли;	
				
				Если (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
					//Если врЭтоВес Тогда
					//	врЗонаДоставкиВес = ЗонаДоставкиВес(Заказ.ЗонаДоставки, врЭтоОвощи, Ложь);
					//	Если ЗначениеЗаполнено(врЗонаДоставкиВес) Тогда
					//		Заказ.ЗонаДоставки = врЗонаДоставкиВес;
					//	КонецЕсли;	
					//КонецЕсли;	
				КонецЕсли;	
				
				Если Доставка_ЭтоРозливДень(врОсновнойПартнер, ТекАгент) Тогда
					врЗонаДоставкиРозливДень = Доставка_РозливДень_ЗонаДоставки(врОсновнойПартнер);
					Если ЗначениеЗаполнено(врЗонаДоставкиРозливДень) Тогда
						Заказ.ЗонаДоставки = врЗонаДоставкиРозливДень;
						Если НашаТочка(врОсновнойПартнер) Тогда
							Заказ.Комментарий = "КЕГИ УТРО"  + ?(Доставка_ЭтоКегиУтроХорека(ТекАгент), " ХОРЕКА", "") + " " + Заказ.Комментарий;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;		
				
				Если ЕстьДопКолонки Тогда
					Если (СтрокаТаблицыСчета.Morning = "True") Тогда
						Заказ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
						врНужноПровестиРеализацию   = Ложь;
					КонецЕсли;	
				КонецЕсли;	
				
				Если Партнер = Клиенты_Дорога Тогда
					Заказ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;					
				КонецЕсли;	
				
				//Сообщить(Заказ.Склад);
				//терехин--
				Выборка2 = Выборка.Выбрать();
				ТаблТары = Новый ТаблицаЗначений;
				ТаблТары.Колонки.Добавить("Номенклатура");
				ТаблТары.Колонки.Добавить("Количество");				
				СуммаПКО = 0;
				Пока Выборка2.Следующий() Цикл 	
					
					ОстатокТовара = Выборка2.КоличествоОстаток;
										
					Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						
						врСкладАТОбщий = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий",   Истина);
						
					//	Заказ.Склад   = СкладРИФПлюс;
						Заказ.Склад   = врСкладАТОбщий;
						ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, врСкладАТОбщий, Заказ.Дата);
						
					КонецЕсли;
					
					Если ЭтоРИФПлюс Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладРИФПлюсАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладРИФПлюсАлкоголь, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;	
					
					Если ЭтоМеркурий Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладМеркурийАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладМеркурийАлкоголь, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;						
					
					Если ЭтоМарс Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладМарсАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладМарсАлкоголь, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;											
					
					Если ЭтоСигма Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладСигмаАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладСигмаАлкоголь, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;	
					
					Если ЭтоАтлант Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладАтлантАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладАтлантАлкоголь, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;																					  
					
					Если ЭтоТОП17 Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладТОП_17;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТОП_17, Заказ.Дата);
						КонецЕсли;				
						
					КонецЕсли;																					
					
					Если (ОсновнаяФирма = оргАТ_Логистик) И (НЕ ЭтоРИФПлюс) Тогда
						
						Если (Выборка.Склад = "_Алкоголь_") ИЛИ (Выборка.Склад = "_АлкогольРозлив_") ИЛИ (Выборка.Склад = "_ОтдельныйЗаказ_") Тогда 
							Заказ.Склад   = СкладАТАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладАТАлкоголь, Заказ.Дата);
						КонецЕсли;										
												
					КонецЕсли;	
					
					ЭтоЧерныйЗаказКеги = Ложь;
					Если КегиВторойПрайс И (Выборка.Склад = "_ЧерныйЗаказКеги_") Тогда
						ЭтоЧерныйЗаказКеги = Истина;
					КонецЕсли;	
					
					Если (ОсновнаяФирма = оргАТ_Логистик) Тогда
						
						Если (Выборка.Склад = "_ЧерныйЗаказ_") ИЛИ (Выборка.Склад = "_ЧерныйЗаказКеги_") Тогда 
							Заказ.Склад   = СкладАТАлкоголь;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладАТАлкоголь, Заказ.Дата);
						КонецЕсли;																
						
						Если Выборка.Склад = "_ЧерныйЗаказ2_" Тогда 
							Заказ.Склад   = СкладТомскПиво;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТомскПиво, Заказ.Дата);
						КонецЕсли;		
						
						Если (Выборка.Склад = "_ТоварыТранзитБелые_") ИЛИ (Выборка.Склад = "_ТоварыТранзитЧерные_") Тогда 
							Заказ.Склад   = СкладТранзита;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТранзита, Заказ.Дата);
						КонецЕсли;																						
					
						Если Выборка.Склад = "_Джолики_" Тогда 
							Заказ.Склад   = СкладТОП_17;
							ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, СкладТОП_17, Заказ.Дата);							
						КонецЕсли;																						
						
						Если Выборка.Склад = "_ТоварыСигареты_" Тогда
							
							Заказ.Организация        = оргАТ_Логистик;
							Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
							
							Для каждого стрЗаказа из Заказ.Товары Цикл
					
								СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
								СтруктураДействий = Новый Структура;				
								СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
								СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
								//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
								СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
								СтруктураДействий.Вставить("ПересчитатьСумму");
								СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
								СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
							КонецЦикла;	
					
						КонецЕсли;					
						
					КонецЕсли;	
					
					Если ЭтоБортАгента Тогда						
						Заказ.Склад   = Склад_БортАгента;
						ОстатокТовара = ПолучитьОстатокТовараПоСкладу(Выборка2.Номенклатура, Склад_БортАгента, Заказ.Дата);
					КонецЕсли;	
					
					ОстатокТары = 0;
					
					//// Проверка на остаток по таре
					//Попытка
					//	
					//	Если ЗначениеЗаполнено(Выборка2.НоменклатураМногооборотнаяТара) Тогда 
					//		Если СокрЛП(Выборка2.НоменклатураМногооборотнаяТара.Наименование) = "Кега 30 л фитинг G (БАЛТИКА)" Тогда
					//			Если ОстатокТовара > 0 Тогда
					//				ОстатокТары = ПолучитьОстатокТовараПоСкладу(Выборка2.НоменклатураМногооборотнаяТара, Заказ.Склад, Заказ.Дата);	
					//				Если ОстатокТовара > ОстатокТары Тогда
					//					ОстатокТовара = ОстатокТары;
					//					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Склад: " + Строка(Заказ.Склад) + ". Для номенклатуры """ + Строка(Выборка2.Номенклатура) + """" + ", нет остатка по таре """ + Строка(Выборка2.НоменклатураМногооборотнаяТара) + """");
					//				КонецЕсли;	
					//			КонецЕсли;	
					//		КонецЕсли;	
					//	КонецЕсли;	
					//		
					//Исключение	
					//	
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение Кега 30 л фитинг G (БАЛТИКА)", ИнформацияОбОшибке(), Истина);
					//	
					//КонецПопытки;	
					
					//Попытка
					//	Если ОстатокТовара > 0 Тогда
					//		Если ЗагрузкаДокументов_НужноПроверитьОстатокПоСериям(Выборка2.Номенклатура) Тогда
					//			врОстатокПоСериям = ЗагрузкаДокументов_ОстатокПоСериям(Заказ.Дата, Заказ.Склад, Выборка2.Номенклатура);
					//			Если врОстатокПоСериям <> ОстатокТовара Тогда
					//				Если врОстатокПоСериям < Выборка2.Количество Тогда
					//				//	ОстатокТовара = врОстатокПоСериям;
					//					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПРОВЕРКА СЕРИЙ ТОВАРОВ !!! Партнер = " + Строка(Партнер) + " Склад = " + Строка(Заказ.Склад) + " Дата = " + Строка(Заказ.Дата) + " = " + Строка(Выборка2.Номенклатура) + " Остаток = " + Строка(врОстатокПоСериям) + " Кол.Заказ = " + Строка(Выборка2.Количество)); 
					//				КонецЕсли;	
					//			КонецЕсли;	
					//		КонецЕсли;	
					//	КонецЕсли;	
					//Исключение
					//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПРОВЕРКА СЕРИЙ ТОВАРОВ", ИнформацияОбОшибке(), Истина);
					//КонецПопытки;	
					
					КолВЗаказ = Выборка2.Количество;
					Если (ОстатокТовара > 0) И (ОстатокТовара < Выборка2.Количество) Тогда 
						
						// -> Ответ на заказ при недостаточном количестве товара
						
						НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
						НовСтрТовар.Номенклатура     = Выборка2.Номенклатура;
						НовСтрТовар.Цена 		     = Число(Выборка2.Цена);
						НовСтрТовар.Количество       = Выборка2.Количество - ОстатокТовара;
						НовСтрТовар.ЕдиницаИзмерения = Выборка2.Номенклатура.ЕдиницаИзмерения;
						Попытка
							НовСтрТовар.ПричинаОтказа = "нет в ост.";
						Исключение
						КонецПопытки;	
						
						// <- Ответ на заказ при недостаточном количестве товара
						
						новстр						= Заказ.Товары.Добавить();
						новстр.Номенклатура			= Выборка2.Номенклатура;
						новстр.Количество			= Выборка2.Количество-ОстатокТовара;
						новстр.КоличествоУпаковок	= Выборка2.Количество-ОстатокТовара;
						новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
						новстр.Цена					= Число(Выборка2.Цена);
					//	Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна")) Тогда
						Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ ЭтоАгентОтложенногоПлатежа(ТекАгент) Тогда
							новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
						ИначеЕсли (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
							новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
						Иначе	
							новстр.ДатаОтгрузки			= Заказ.Дата;
						КонецЕсли;	
						новстр.Склад				= Заказ.Склад;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);
						
						новстр.Отменено			= Истина;
						
						СуммаПКО = СуммаПКО + новстр.Сумма;
						КолВЗаказ = ОстатокТовара;
						
					КонецЕсли;
					
					новстр						= Заказ.Товары.Добавить();				
					новстр.Номенклатура			= Выборка2.Номенклатура;
					новстр.Количество			= КолВЗаказ;
					новстр.КоличествоУпаковок	= КолВЗаказ;
					новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
					новстр.Цена					= Число(Выборка2.Цена);
					
					Если ТоварыВесовые.Найти(Выборка2.Номенклатура) <> Неопределено Тогда
						врЕстьВесВЗаказе = Истина;
					КонецЕсли;	
					Если ТоварыВесовыеБезНДС.Найти(Выборка2.Номенклатура) <> Неопределено Тогда
						врЕстьВесВЗаказе = Истина;
					КонецЕсли;
										
					//Добавление многооборотной тары НАЧАЛО
					Если ЗначениеЗаполнено(Выборка2.НоменклатураМногооборотнаяТара) И (ОстатокТовара > 0) Тогда    
						
						НужноДобавитьТару = Истина;
						
						//Попытка
						//	Если СокрЛП(Выборка2.НоменклатураМногооборотнаяТара.Наименование) = "Кега 30 л фитинг G (БАЛТИКА)" Тогда						
						//		Если ОстатокТары = 0 Тогда
						//			НужноДобавитьТару = Ложь;
						//		КонецЕсли;	
						//	КонецЕсли;
						//Исключение
						//	
						//КонецПопытки;	
						
						Если НужноДобавитьТару Тогда
							НовТара = ТаблТары.Добавить();
							ЗаполнитьЗначенияСвойств(НовТара,новстр);
							НовТара.Номенклатура = Выборка2.НоменклатураМногооборотнаяТара;
						КонецЕсли;
						
					КонецЕсли;
					//Добавление многооборотной тары КОНЕЦ
					
				//	Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна")) Тогда
					Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ ЭтоАгентОтложенногоПлатежа(ТекАгент) Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;	
					ИначеЕсли (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai")  ИЛИ (ИмяСервераМА = "Region") Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;	
					Иначе	
						новстр.ДатаОтгрузки			= Заказ.Дата;					
					КонецЕсли;	
					новстр.Склад				= Заказ.Склад;
					                                                                                                          
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);
					
					СуммаПКО = СуммаПКО + новстр.Сумма;
					
					Если ОстатокТовара <= 0 Тогда  
						
						новстр.Отменено			= Истина;
						
						НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
						НовСтрТовар.Номенклатура = Выборка2.Номенклатура;
						НовСтрТовар.Цена = Выборка2.Цена;
						НовСтрТовар.Количество = Выборка2.Количество;
						НовСтрТовар.ЕдиницаИзмерения = Выборка2.Номенклатура.ЕдиницаИзмерения;
						Попытка
							НовСтрТовар.ПричинаОтказа = "нет в ост.";
						Исключение
						КонецПопытки;	
						
						
						
					КонецЕсли;
				КонецЦикла;
				
				Если врЕстьВесВЗаказе Тогда
					Заказ.Комментарий = Заказ.Комментарий + " !! ВЕС !!";
				КонецЕсли;					
				
				Если ИмяСервераМА = "Tomsk" И аян_СинхронизацияСервер.ФОКУС_АгентВФокуснойСхеме(ТекАгент) Тогда
					
					Попытка
						
						врСоглашениеСКлиентом = ПолучитьСоглашениеСКлиентом(Заказ.Партнер, ТекАгент);
						Заказ.Соглашение = врСоглашениеСКлиентом.Соглашение;
						Заказ.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Заказ.Партнер);
						Заказ.ЗаполнитьУсловияПродажПоCоглашению();
						Если Не ЗначениеЗаполнено(Заказ.Контрагент) Тогда
							Заказ.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Заказ.Партнер);
						КонецЕсли;	
						
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ФОКУС ГРУППА - ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
				
				Иначе
					Заказ.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
				
				Заказ.ВернутьМногооборотнуюТару = Истина;
																
				//Добавление многооборотной тары НАЧАЛО
				ТаблТары.Свернуть("Номенклатура","Количество");
				Для Каждого СтрТара Из ТаблТары Цикл 
					новстр						= Заказ.Товары.Добавить();				
					новстр.Номенклатура			= СтрТара.Номенклатура;
					новстр.Количество			= СтрТара.Количество;
					новстр.КоличествоУпаковок	= СтрТара.Количество;
					новстр.СтавкаНДС			= новстр.Номенклатура.СтавкаНДС;
				//	Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна")) Тогда
					Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ ЭтоАгентОтложенногоПлатежа(ТекАгент) Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
					ИначеЕсли (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
						новстр.ДатаОтгрузки			= ДатаОтгрузкиОтложенная;
					Иначе	
						новстр.ДатаОтгрузки			= Заказ.Дата;
					КонецЕсли;	
					новстр.Склад				= Заказ.Склад;
					новстр.Цена                 = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(новстр.Номенклатура, Заказ.Соглашение.ВидЦен);
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
					СтруктураДействий = Новый Структура;
					//СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Заказ));							
					//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Заказ));
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
					//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(новстр, СтруктураДействий, Неопределено);	
				КонецЦикла;
				//Добавление многооборотной тары КОНЕЦ
				
				Если ЭтоБортАгента Тогда
					Если Не ЭтоБортБелый Тогда
						Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
					КонецЕсли;	
				КонецЕсли;	
				
				Если (Выборка.Склад = "_ЧерныйЗаказ_") ИЛИ (Выборка.Склад = "_ЧерныйЗаказКеги_") Тогда 
					Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
				КонецЕсли;
				
				Если Выборка.Склад = "_ЧерныйЗаказ2_" Тогда 
					Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
				КонецЕсли;
				
				Если Выборка.Склад = "_ТоварыТранзитЧерные_" Тогда 
					Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент);
				КонецЕсли;	
				
				Если (Выборка.Склад = "_ТоварыТранзитБелые_") И (Заказ.Организация = оргАТ_Логистик) Тогда 
					Заказ.Организация = оргГалактика;
				КонецЕсли;									
				
				//Если (Заказ.Организация = оргАТ_Логистик) И (Заказ.Склад = СкладТомскПиво) Тогда
				Если (Заказ.Организация = оргАТ_Логистик) И (Выборка.Склад <> "_Алкоголь_") И (Выборка.Склад <> "_АлкогольРозлив_") И (Выборка.Склад <> "_ОтдельныйЗаказ_") Тогда				
					Если ЗагрузкаДокументов_НужноПровестиЧерезГалактику(Партнер) Тогда			
						Заказ.Организация = оргГалактика;
					Иначе
						Попытка
							Если Партнер.ПринадлежитЭлементу(Клиенты_Роснефть) Тогда
								ГрЮгус = Справочники.Номенклатура.НайтиПоКоду("00-00030041");
								врПерваяСтрока = Заказ.Товары[0].Номенклатура;
								Если врПерваяСтрока.ПринадлежитЭлементу(ГрЮгус) Тогда
									Заказ.Организация = оргГалактика;
									//ЗаписатьОшибку1СвЛогФайл("РОСНЕФТЬ", Строка(Партнер));
								КонецЕсли;
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "РОСНЕФТЬ - ЮГУС", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;	
				
				Если Выборка.Склад = "_ТоварыСигареты_" Тогда
					
					Заказ.Организация = оргАТ_Логистик;
					
					Заказ.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				Заказ.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				Заказ.НалогообложениеНДС		= Справочники.Организации.НалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
				Заказ.Менеджер					= ТекАгент;
								
				// АКЦИЯ МАЙОНЕЗ ВТОРОЙ ПРАЙС
				
				//Попытка 
				//	
				//	Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(ТекАгент) Тогда
				//		
				//		Массив_АкционныйТовар = Новый Массив;
				//		
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00007586"));
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00004712"));
				//		Массив_АкционныйТовар.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00007418"));

				//		Для Каждого ТекТоварАкция Из Заказ.Товары Цикл
				//			
				//			Для Каждого ТекПроверкаТовар Из Массив_АкционныйТовар Цикл
				//				
				//				Если ТекТоварАкция.Номенклатура = ТекПроверкаТовар Тогда
				//			
				//					ТекТоварАкция.Цена = 64.05;
				//									
				//					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
				//		
				//					СтруктураДействий = Новый Структура;				
				//					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
				//					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
				//					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				//					СтруктураДействий.Вставить("ПересчитатьСумму");
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				//					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
				//					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекТоварАкция, СтруктураДействий, Неопределено);	
				//					
				//					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Агент: " + СокрЛП(ТекАгент) + "; Клиент: " + СокрЛП(Партнер) + "; Товар: " + СокрЛП(ТекТоварАкция.Номенклатура) + "; Количество: " + СокрЛП(ТекТоварАкция.Количество));
				//					
				//				КонецЕсли;
				//				
				//			КонецЦикла;	
				//			
				//		КонецЦикла;	
				//		
				//	КонецЕсли;
				//	
				//Исключение
				//	
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Корректировка цены. Акция второй прайс.", ИнформацияОбОшибке(), Истина);
				//	
				//КонецПопытки;	
								
				
				//терехин++
				//теперь у нас есть готовый заказ
				//надо попробовать в нем поменять нужные нам реквизиты

				//Для каждого стрЗаказа из Заказ.Товары Цикл
				//	//бонусы
				//	Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
				//		
				//		Если Заказ.Соглашение.Организация = оргРИФПлюс Тогда
				//			Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				//		КонецЕсли;							
				//		
				//		стрЗаказа.Цена			= 0.01;
				//		стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Бонус");
				//		
				//		Заказ.Организация		= ОргБонусТомск;
				//								
				//		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
				//		
				//		СтруктураДействий = Новый Структура;				
				//		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
				//		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
				//		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
				//		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				//		СтруктураДействий.Вставить("ПересчитатьСумму");
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
				//		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
				//		
				//	КонецЕсли;
				//КонецЦикла;
				
			//	Если Выборка.Склад = "_Джолики_" Тогда 
				Если ЭтоТОП17 Тогда 
					
				//	Заказ.Организация = оргРИФ;
				
				//	Заказ.Организация = оргАВН_70;
				
					Заказ.Организация = оргТОП_17;
					
					Заказ.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Заказ.Организация, Заказ.Склад, Заказ.Дата);
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;																				
				
				Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
					
					Заказ.Организация = ?(ЭтоМеркурий, оргМеркурий, оргРИФПлюс);
					
					Если ЭтоМарс Тогда
						Заказ.Организация = оргМарс;
					КонецЕсли;	
					
					Если ЭтоСигма Тогда
						Заказ.Организация = оргСигма;
					КонецЕсли;
					
					Если ЭтоАтлант Тогда
						Заказ.Организация = оргАТЛАНТОмск;
					КонецЕсли;					
					
					Если ЭтоТОП17 Тогда
						Заказ.Организация = оргТОП_17;
					КонецЕсли;											
					
					Заказ.Склад       = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий",   Истина);
					
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
					
					Для каждого стрЗаказа из Заказ.Товары Цикл
					
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;	
					
				КонецЕсли;	
				
				ПКО_Газ = Ложь;
				
				Если ЭтоБортАгента И (ИмяСервераМА = "Kuzbass") Тогда
					
					врПроцентСкидки = ПолучитьСкидкуКлиента(Заказ.Партнер, Заказ.Соглашение.ВидЦен);
					
					Для Каждого стрЗаказа из Заказ.Товары Цикл
						
						стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово борт");
						
						Если врПроцентСкидки <> 0 Тогда
							стрЗаказа.ПроцентРучнойСкидки = - врПроцентСкидки;
						КонецЕсли;	
						
						стрЗаказа.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(стрЗаказа.Номенклатура, стрЗаказа.ВидЦены);
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЦикла;
					
				КонецЕсли;					
				
				// Запрет на бонус белого алкоголя
				
				Попытка
					
					Если ОсновнаяФирма = оргАТ_Логистик Тогда
					
						Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
							
							Если Не КлиентыКонтрагенты_ЭтоПетров(Заказ.Партнер) Тогда
					
								Для Каждого стрЗаказа из Заказ.Товары Цикл
								
									Если Не стрЗаказа.Отменено Тогда
								
										Если стрЗаказа.Номенклатура.ВидНоменклатуры.алкВидЭлементаТМЦ = Перечисления.алкВидыЭлементовТМЦ.Алкоголь Тогда
										
											стрЗаказа.Отменено = Истина;
												
											НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
											НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
											НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
											НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
											НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
											НовСтрТоварОтказ.ПричинаОтказа    = "запрет на бонус";
											
										КонецЕсли;	
										
									КонецЕсли;	
									
								КонецЦикла;
									
							КонецЕсли;
							
						КонецЕсли;	
					
					КонецЕсли;
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запрет на БОНУС", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
				// Запрет на реализацию (ВОРОНИНО)
				
				Попытка
					
					Если ((ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib")) Тогда
						
						врСВ = ПолучитьГруппуПользователя(ТекАгент);
						
						Если врСВ <> Структура_СВ.Думченко Тогда
						
						//Если (НЕ ЭтоГруппаПользователяАлтай(ТекАгент)) И (НЕ ЭтоГруппаПользователяАчинск(ТекАгент)) Тогда
						
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
								
									Если стрЗаказа.Номенклатура.ПринадлежитЭлементу(НоменПеченьеВоронино) Тогда
										
										стрЗаказа.Отменено = Истина;
													
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
							
						КонецЕсли;
						
						КонецЕсли;
					
					КонецЕсли;
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запрет на реализацию (ВОРОНИНО)", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;
							
				Попытка
					
					врЧасЗаказа = Час(Заказ.Дата);
					
					Если врЧасЗаказа > 19 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
								
									Если стрЗаказа.Номенклатура.ПринадлежитЭлементу(НоменПеченьеВоронино) Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;	
					
					// ФРУКТЫ_ОВОЩИ, ДЕРЕВЕНСКОЕ МОЛОЧКО
					
					Если врЧасЗаказа > 15 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
									
									врОтменитьПозицию = Ложь;
								
									Если (Товары_ОвощиФрукты.Найти(стрЗаказа.Номенклатура) <> Неопределено) Тогда
										врОтменитьПозицию = Истина;
									КонецЕсли;	
										
									//Если (стрЗаказа.Номенклатура.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) Тогда
									//	врОтменитьПрозицию = Истина;
									//КонецЕсли;	
									
									Если врОтменитьПозицию Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;	
					
					Если врЧасЗаказа > 16 Тогда
											
						Если НачалоДня(ДатаОтгрузкиОтложенная) = НачалоДня(ТекущаяДата() + ДеньВСекундах) Тогда
										
							Для Каждого стрЗаказа из Заказ.Товары Цикл
							
								Если Не стрЗаказа.Отменено Тогда
									
									врОтменитьПозицию = Ложь;
								
									//Если (Товары_ОвощиФрукты.Найти(стрЗаказа.Номенклатура) <> Неопределено) Тогда
									//	врОтменитьПозицию = Истина;
									//КонецЕсли;	
										
									Если (стрЗаказа.Номенклатура.ВидНоменклатуры = ВидНоменклатуры_ПивоДубль) Тогда
										врОтменитьПрозицию = Истина;
									КонецЕсли;	
									
									Если врОтменитьПозицию Тогда
										
										стрЗаказа.Отменено = Истина;
												
										НовСтрТоварОтказ = СтрокаТаблицыСчета.Товары.Добавить();
										НовСтрТоварОтказ.Номенклатура     = стрЗаказа.Номенклатура;
										НовСтрТоварОтказ.Цена 		      = Число(стрЗаказа.Цена);
										НовСтрТоварОтказ.Количество       = стрЗаказа.Количество;
										НовСтрТоварОтказ.ЕдиницаИзмерения = стрЗаказа.Номенклатура.ЕдиницаИзмерения;
										НовСтрТоварОтказ.ПричинаОтказа    = "запрет на реализацию";
										
									КонецЕсли;	
										
								КонецЕсли;	
								
							КонецЦикла;
												
						КонецЕсли;
						
					КонецЕсли;	
					
										
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запрет на реализацию (ВОРОНИНО) > 19-00", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;
				
				Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
					Заказ.ПричинаБонуса     = ПолучитьПричинуБонуса(СтрокаТаблицыСчета.IsInvoice);
					Если ЗначениеЗаполнено(Заказ.ПричинаБонуса) Тогда
						Заказ.Комментарий = "[" + СокрЛП(Заказ.ПричинаБонуса) + "] " + Заказ.Комментарий;
					КонецЕсли;		
				КонецЕсли;						
									
				Для каждого стрЗаказа из Заказ.Товары Цикл
					//бонусы
					Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
						
						Если (Заказ.Соглашение.Организация = оргРИФПлюс) ИЛИ (Заказ.Соглашение.Организация = оргМеркурий) ИЛИ (Заказ.Соглашение.Организация = оргТОП_17) Тогда
							Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						КонецЕсли;							
						
						стрЗаказа.Цена			= 0.01;
						стрЗаказа.ВидЦены		= Справочники.ВидыЦен.НайтиПоНаименованию("Бонус");
						
						Попытка
							
							Если ОсновнаяФирма = оргАТ_Логистик Тогда
								
								// Газ 40 л
								// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
								//Если стрЗаказа.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ") Тогда
								Если стрЗаказа.Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40()
									ИЛИ стрЗаказа.Номенклатура = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест() Тогда
								// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
									стрЗаказа.Цена = ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(стрЗаказа.Номенклатура, стрЗаказа.ВидЦены);
									ПКО_Газ = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						Исключение
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Установка цены на ГАЗ 40 л", ИнформацияОбОшибке(), Истина);
							
						КонецПопытки;	
						
						Заказ.Организация		= ОргБонусТомск;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
						
						СтруктураДействий = Новый Структура;				
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Заказ.НалогообложениеНДС);
						//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Заказ.ВернутьМногооборотнуюТару);				
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Ложь);
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));				
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрЗаказа, СтруктураДействий, Неопределено);	
						
					КонецЕсли;
				КонецЦикла;
				
				Если (СтрокаТаблицыСчета.IsTTN <> "True") И (КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_") И СигаретыЗаНАЛ) ИЛИ ВсегдаЗаНАЛ(Заказ.Партнер)) Тогда
					
					Если Не ЭтоЧерныйЗаказКеги Тогда
						Заказ.Комментарий = Заказ.Комментарий + " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!! нал";					
					КонецЕсли;	
						
				Иначе	
					
					Если Не ЭтоЧерныйЗаказКеги Тогда
						
						Если СтрокаТаблицыСчета.WithouPay = "True" Тогда
							Заказ.Комментарий = Заказ.Комментарий + " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!!";
						КонецЕсли;
					
					КонецЕсли;	
						
				КонецЕсли;					
				
				Попытка
					Если ЗначениеЗаполнено(Партнер.Комментарий) Тогда
						Заказ.Комментарий = Заказ.Комментарий + Символы.ПС + СокрЛП(Партнер.Комментарий);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Добавление комментария Партнера. Исключение!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Если НЕ ЗначениеЗаполнено(Заказ.Склад) Тогда
					Заказ.Склад=Справочники.Склады.НайтиПоНаименованию("Томск пиво, вода").Ссылка;
				КонецЕсли;
				
				Если ИдКПК = "DevPetrushka" Тогда 
					ЗагрузкаДокументов_ОбработатьВидЦеныПетрушка(Заказ);
				КонецЕсли;	
								
				РассчитатьСкидки(Заказ);
								
				//Блинов
				Заказ.алкПунктРазгрузки=Заказ.Партнер.алкОсновнойПунктРазгрузки;
				Если ЗначениеЗаполнено(Заказ.алкПунктРазгрузки) Тогда
					Заказ.алкЛицензияКонтрагента=Заказ.алкПунктРазгрузки.алкОсновнаяЛицензия;
				КонецЕсли;
				Заказ.алкПунктРазгрузкиОрганизации=Заказ.Организация.алкОсновнойПунктРазгрузки;
				Заказ.алкЛицензияОрганизации=Заказ.Организация.алкОсновнаяЛицензия;
				
				Заказ.ТоварыОригинал.Загрузить(Заказ.Товары.Выгрузить()); //дублируем таблицу, чтобы потом легче выяснять было что заказывал агент и что в итоге отправилось
								
				Если (Заказ.Соглашение.Организация = оргРИФПлюс) И (Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент)) Тогда
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
				
				Если (Заказ.Соглашение.Организация = оргМеркурий) И (Заказ.Организация = ПолучитьОрганизациюВЧерную(ТекАгент)) Тогда
					Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;	
				
				Попытка
					Если ИдКПК = "DevPetrushka" Тогда   
						врИнвойсИД = СокрЛП(СтрокаТаблицыСчета.InvoiceID); 
						Если СтрЧислоВхождений(врИнвойсИД, "_NDS") > 0 Тогда
							Заказ.НомерПоДаннымКлиента = Сред(врИнвойсИД, 25, 9);
						Иначе								
							Заказ.НомерПоДаннымКлиента = Прав(врИнвойсИД, 9);
						КонецЕсли;	
						Заказ.ДатаПоДаннымКлиента  = Дата(Сред(врИнвойсИД, 9, 8));
					КонецЕсли;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА - Исключение! Данные клиента.", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Попытка
					Если ИдКПК = "DevPetrushka" Тогда 
						
		            	врДокПетрушка = Петрушка_ПолучитьЗаказПетрушка(Заказ.НомерПоДаннымКлиента, Заказ.ДатаПоДаннымКлиента);
						Если ЗначениеЗаполнено(врДокПетрушка) Тогда
							врВариантОтветаКлиента = Петрушка_ВариантОтветаКлиентаПриЗаказе(врДокПетрушка);
							Если Не ПустаяСтрока(врВариантОтветаКлиента) Тогда
								Заказ.Комментарий = Заказ.Комментарий + " " + "[" + СокрЛП(врВариантОтветаКлиента) + "]"; 
							КонецЕсли;	
						КонецЕсли;	
						
					КонецЕсли;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА. ВАРИАНТ ОТВЕТА КЛИЕНТА - Исключение! Данные клиента.", ИнформацияОбОшибке(), Истина);
				КонецПопытки;																	
								
				СтатусЗаписиДокумента = "Не проведен";
				
				ФлагРазрешенияДокументаКЗагрузке = Истина;
				Попытка
					
					ПричинаОтказа   = ".....";
					
					ЭтоТоварыБезНДС = Ложь;
					Если (Выборка.Склад = "_ТоварыБезНДС_") ИЛИ (Выборка.Склад = "_ТоварыВесовыеБезНДС_") Тогда 
						ЭтоТоварыБезНДС = Истина;
					КонецЕсли;	
					
					ФлагРазрешенияДокументаКЗагрузке = Истина;
				    Если Не ЭтоНашаТочка Тогда
						ФлагРазрешенияДокументаКЗагрузке = ЗагрузкаДокументов_ЗаказРазрешенКЗагрузке(Заказ, ЭтоТоварыБезНДС, ПричинаОтказа, ЭтоЗаказПетровЧерезПетров);
					КонецЕсли;	
						
					Если Не ФлагРазрешенияДокументаКЗагрузке Тогда
						Для Каждого ТекСтрокаТовары Из Заказ.Товары Цикл
							НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
							НовСтрТовар.Номенклатура     = ТекСтрокаТовары.Номенклатура;
							НовСтрТовар.Цена 		     = Число(ТекСтрокаТовары.Цена);
							НовСтрТовар.Количество       = ТекСтрокаТовары.Количество;
							НовСтрТовар.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
							НовСтрТовар.ПричинаОтказа    = ПричинаОтказа;
						КонецЦикла;	
						Продолжить;
					КонецЕсли;	
					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка разрешения документа к загрузке. Исключение!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
							
				Попытка
		
					Если Заказ.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
			
						врДоговорКонтрагента = аян_СинхронизацияСервер.Договоры_ПолучитьДоговорКонтрагента(Заказ.Контрагент);
			
						Если ЗначениеЗаполнено(врДоговорКонтрагента) Тогда
				
							Заказ.Договор = врДоговорКонтрагента;
											
						КонецЕсли;	
			
					КонецЕсли;	
		
				Исключение
						
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОПРЕДЕЛЕНИЕ ДОГОВОРА", ИнформацияОбОшибке(), Истина);
		
				КонецПопытки;
				
				Попытка
					аян_ОбщийМодульСервер.ЗаполнитьОтветвеннымиЛицамиОрганизации(Заказ, Заказ.Организация);
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ОТВ. ЛИЦА - Исключение !!!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;					
				
				// Проверка на пустой заказ
				
				ЭтоПустойЗаказ = ПустойЗаказ(Заказ);
				
				Попытка
					
					Если ЭтоПустойЗаказ Тогда
						
						врЗаказПетрушка = Петрушка_ПолучитьЗаказПетрушка(Заказ.НомерПоДаннымКлиента, Заказ.ДатаПоДаннымКлиента);
						
						Если ЗначениеЗаполнено(врЗаказПетрушка) Тогда
							Петрушка_ОчиститьЗаявкуПетрушка(врЗаказПетрушка);
							//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Очистка заказа петрушка : " + Строка(Заказ.НомерПоДаннымКлиента) + " от " + Строка(Заказ.ДатаПоДаннымКлиента));
						КонецЕсли;	
						
					КонецЕсли;	
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Пустой заказ петрушка. Исключение!", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;					
				
				Попытка
					Если ЭтоПустойЗаказ Тогда
						
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~ПУСТОЙ ЗАКАЗ : " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
						
						ЗаписатьДанныеВЛогЗагрузкиДокументов("Заказ", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, Документы.ЗаказКлиента.ПустаяСсылка(), Заказ.Организация, Заказ.Партнер, "Пустой");
						
						Продолжить;
						
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при логировании загрузки документа (ЗАКАЗ)!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
								
				//Попытка
				//	врИнвойсФлюгер = СокрЛП(СтрокаТаблицыСчета.InvoiceID);
				//	ФлагФлюгер     = Лев(врИнвойсФлюгер, 4);					
				//	Если ФлюгерЭтоПервыйЗаказ Тогда
				//		Если ФлагФлюгер = "FLG_" Тогда
				//			Заказ.ИДФлюгер       = Прав(врИнвойсФлюгер, СтрДлина(врИнвойсФлюгер) - 4);
				//			ФлюгерЭтоПервыйЗаказ = Ложь;
				//		КонецЕсли;	
				//	КонецЕсли;
				//	Если ФлагФлюгер = "FLG_" Тогда
				//		Заказ.ИДФлюгерДоп = Прав(врИнвойсФлюгер, СтрДлина(врИнвойсФлюгер) - 4);
				//	КонецЕсли;	
				//Исключение
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Флюгер первый заказ", ИнформацияОбОшибке(), Истина);
				//КонецПопытки;					
				
				СчетчикПопытокЗаписи = 1;
				ФлагПродолженияПопыткиЗаписи = Истина;
				
	//			Пока ФлагПродолженияПопыткиЗаписи Цикл
	
	
				//Попытка
				//	
				//	ТЗ_Поступ = Новый ТаблицаЗначений;
				//	ТЗ_Поступ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
				//	ТЗ_Поступ.Колонки.Добавить("Количество",   ОписаниеТипаЧисло(15, 2));	
				//	
				//	Для Каждого ТекСтрокаПост Из Заказ.Товары Цикл
				//		Если Не ТекСтрокаПост.Отменено Тогда
				//			НовСтрокаПост = ТЗ_Поступ.Добавить();
				//			НовСтрокаПост.Номенклатура = ТекСтрокаПост.Номенклатура;
				//			НовСтрокаПост.Количество   = ТекСтрокаПост.Количество;
				//		КонецЕсли;	
				//	КонецЦикла;
				//	
				//	СоздатьПоступлениеКЕГ(ТЗ_Поступ, Заказ.Склад, Ложь);
				//	
				//Исключение
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Создание поступления КЕГ. ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина);
				//КонецПопытки;	
								
				Попытка
					
					Если ЭтоКегиРозлив И Выборка.Склад = СкладТомскОборудование Тогда
						врГаз = аян_ОбщийМодульСерверПовтИсп.Газ40();
						врГазАттест = аян_ОбщийМодульСерверПовтИсп.Газ40Аттест();
						Для Каждого СтрокаЗаказаГаз Из Заказ.Товары Цикл
							Если СтрокаЗаказаГаз.Номенклатура = врГаз ИЛИ СтрокаЗаказаГаз.Номенклатура = врГазАттест Тогда
								Заказ.ЗонаДоставки = Справочники.ЗоныДоставки.НайтиПоНаименованию("БАЛЛОНЫ");
								Прервать;
							конецЕсли;	
						КонецЦикла;	
					КонецЕсли;	
					
					Если ЭтоКегиРозлив И (Выборка.Склад = "_АлкогольРозлив_" ИЛИ Выборка.Склад = "_ЧерныйЗаказ2_") Тогда
						Заказ.ЗонаДоставки = Справочники.ЗоныДоставки.НайтиПоНаименованию("КЕГИ РОЗЛИВ");
					КонецЕсли;	
					
					Если ИмяСервераМА <> "Tomsk" Тогда
						
						Если СокрЛП(ВРег(Заказ.Партнер.БизнесРегион.Наименование)) <> СокрЛП(ВРег(Заказ.Партнер.ЗонаДоставки.Наименование)) Тогда
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "БР <> Зона доставки. БР = " + СокрЛП(Заказ.Партнер.БизнесРегион.Наименование) + "; Зона доставки = " + СокрЛП(Заказ.Партнер.ЗонаДоставки.Наименование));
						КонецЕсли;	
						
					КонецЕсли;	
					
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "БР = ЗонаДоставки. Исключение!", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				
					врЗамер_6_0 = ТекущаяДата() - врЗамер_Старт;
					
					Попытка
					
						Заказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
						
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ЗАКАЗ записан и проведен: " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
						
						ЗаказПроведен = Истина;
						
						СтатусЗаписиДокумента = "Проведен";
						
						ФлагПродолженияПопыткиЗаписи = Ложь;	
						
						врЗамер_6 = ТекущаяДата() - врЗамер_Старт;
												
					Исключение
						
						//Попытка
						//	Если СчетчикПопытокЗаписи <= 10 Тогда
						//		СчетчикПопытокЗаписи = СчетчикПопытокЗаписи + 1;
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Попытка номер " + Строка(СчетчикПопытокЗаписи) + " проведения документа " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")");
						//		СтартЗамераЗадержки = ТекущаяДата();
						//		Пока (ТекущаяДата() - СтартЗамераЗадержки) <= 5 Цикл
						//		КонецЦикла;	
						//		Продолжить;
						//	Иначе
						//		ФлагПродолженияПопыткиЗаписи = Ложь;
						//	КонецЕсли;						
						//Исключение
						//	ФлагПродолженияПопыткиЗаписи = Ложь;
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при ожидании проведения Заказа!", ИнформацияОбОшибке(), Истина);
						//КонецПопытки;	
						
						Попытка
							Инфо = ИнформацияОбОшибке();
						Исключение
						КонецПопытки;	
						//Описание = "Модуль: """ + Строка(Инфо.ИмяМодуля) + """ Номер строки: "+ Строка(Инфо.НомерСтроки) + " Описание: """ + Строка(Инфо.Описание) + """";
						//Причина  = Инфо.Причина;
						//Описание = Описание + Символы.ПС + "Модуль: """ + Строка(Причина.ИмяМодуля) + """ Номер строки: " + Строка(Причина.НомерСтроки) + " Описание: """ + Строка(Причина.Описание) + """";
						//Пока Причина.Причина <> Неопределено Цикл						
						//	Причина  = Причина.Причина;
						//	Описание = Описание + Символы.ПС + "Модуль: """ + Строка(Причина.ИмяМодуля) + """ Номер строки: " + Строка(Причина.НомерСтроки) + " Описание: """ + Строка(Причина.Описание) + """";
						//КонецЦикла;					
					
						Попытка
						
							Заказ.Записать(РежимЗаписиДокумента.Запись);
							
							СтатусЗаписиДокумента = "Записан";
							
							врЗаНаличные = Ложь;
							
							Если (СтрокаТаблицыСчета.IsTTN <> "True") И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер)) Тогда 
								врЗаНаличные = Истина;
							КонецЕсли;	
							
							ОтложенныеЗаявки_ЗарегистрироватьЗаявку(Заказ, врЗаНаличные);
							
							Попытка
								ЗаписатьОшибку1СвЛогФайл(Событие1С, ?(КонтрагентПодключенКЕГАИС(Заказ.Партнер), " Точка в ЕГАИС.", "Точка не в ЕГАИС!!!") + " НЕ удалось ПРОВЕСТИ заказ клиента, документ будет записан " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")", Инфо, Истина);
							Исключение
								
							КонецПопытки;	
							
												
						Исключение
						
							ЗаписатьДанныеОЗаказеВЛогФайл(Заказ);
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось ЗАПИСАТЬ заказ клиента " + Строка(Заказ.Ссылка) + " (" + Строка(Заказ.Партнер) + "; Сумма: " + Строка(Заказ.СуммаДокумента) + ")", ИнформацияОбОшибке(), Истина);
							
						КонецПопытки;	
											
						//Попытка
						//	ИнформационноеСообщение_ПроверитьАлкогольЕГАИС(Заказ);
						//Исключение
						//КонецПопытки;	
					
						// -> Ответ на заказ при отказе проведения
					
						Попытка
						
							ТочкаВЕГАИС = КонтрагентПодключенКЕГАИС(Заказ.Партнер);
							
							Для Каждого ТекСтрокаТовары Из Заказ.Товары Цикл
								
								НайденныеСтрокиТЗ = СтрокаТаблицыСчета.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрокаТовары.Номенклатура));
							
								Для Каждого ТекНайденнаяСтрока Из НайденныеСтрокиТЗ Цикл
									СтрокаТаблицыСчета.Товары.Удалить(ТекНайденнаяСтрока);
								КонецЦикла;	
							
								НовСтрТовар = СтрокаТаблицыСчета.Товары.Добавить();
								НовСтрТовар.Номенклатура     = ТекСтрокаТовары.Номенклатура;
									НовСтрТовар.Цена 		     = Число(ТекСтрокаТовары.Цена);
								НовСтрТовар.Количество       = ТекСтрокаТовары.Количество;
								НовСтрТовар.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
								НовСтрТовар.ПричинаОтказа    = ?(ТочкаВЕГАИС, "неизв.", "не ЕГАИС");
								
							КонецЦикла;
							
						Исключение
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при формировании ответа на заказ!", ИнформацияОбОшибке(), Истина);
						
						КонецПопытки;	
						
						// <- Ответ на заказ при отказе проведения
															
						ЗаказПроведен = Ложь;
						
					//	Продолжить; 
					
					КонецПопытки;
					
				
			//	КонецЦикла;	
				
			//	ЗафиксироватьТранзакцию();
			
			    Попытка 
					Если ЭтоПустойЗаказ Тогда
						// Фиксируем в журнале регистрации
						ЗаписатьОшибку1СвЛогФайл("ПУСТОЙ ЗАКАЗ!!!", СокрЛП(Заказ.Номер));
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл("111", "111");
				КонецПопытки;	
			
				
				Попытка
					Если (СтатусЗаписиДокумента = "Записан") ИЛИ (СтатусЗаписиДокумента = "Проведен") Тогда
						ЗаписатьДанныеВЛогЗагрузкиДокументов("Заказ", СтрокаТаблицыСчета.InvoiceID, НомерВПакете, Заказ.Ссылка, Заказ.Организация, Заказ.Партнер, СтатусЗаписиДокумента);
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при логировании загрузки документа (ЗАКАЗ)!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;
				
				Если (СтатусЗаписиДокумента <> "Проведен") Тогда
					Продолжить;
				КонецЕсли;	
				
				Попытка
					
					Если (СтатусЗаписиДокумента = "Проведен") Тогда
						
						МассивЗаказов.Добавить(Заказ.Ссылка);
						
					КонецЕсли;	
						
				Исключение
					
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Добавление ЗАКАЗА в массив", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
								
				Попытка
										
					Для Каждого ТекТоварЗаказа Из Заказ.Товары Цикл
						Если Не ТекТоварЗаказа.Отменено Тогда
							НовСтрокаЗаказнныеТовары = ТЗ_ЗаказанныеТовары.Добавить();
							НовСтрокаЗаказнныеТовары.Товар      = ТекТоварЗаказа.Номенклатура;
							НовСтрокаЗаказнныеТовары.Количество = ТекТоварЗаказа.Количество;
						КонецЕсли;	
					КонецЦикла;	
					
				Исключение
						
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Накопление товаров заказа", ИнформацияОбОшибке(), Истина); 
					
				КонецПопытки;	
				
				Попытка
				
					ЛогФайл.ЗаписатьСтроку("Замер 1 = " + Строка(врЗамер_1) + "; " + "Замер 2 = " + Строка(врЗамер_2) + "; " + "Замер 3 = " + Строка(врЗамер_3) + "; " + "Замер 4 = " + Строка(врЗамер_4) + "; " + "Замер 5 = " + Строка(врЗамер_5) + "; " + "Замер 6(0) = " + Строка(врЗамер_6_0) + "; " + "Замер 6 = " + Строка(врЗамер_6));
							
				Исключение
							
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАМЕР", ИнформацияОбОшибке(), Истина);
							
				КонецПопытки;

				// ФОНОВЫЙ ПОТОК
							
				Попытка
					
					Если Не ЗначениеЗаполнено(врДокументПеремещения) Тогда 
						
						врЭтоБонус  = Ложь;
						Если СтрокаТаблицыСчета.IsTTN = "True" Тогда
							врЭтоБонус = Истина;
						КонецЕсли;	
						врЭтоДокГаз = ЗагрузкаДокументов_ЭтоГаз(Заказ.Ссылка);
						Если врЭтоДокГаз Тогда
							врЭтоБонус = Ложь;
						КонецЕсли;						
						
						врСоздатьПКО = Ложь;
						
						врВсегдаЗаНАЛ = ВсегдаЗаНАЛ(Партнер);
					
					    Если (НЕ врЭтоБонус) И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_") И СигаретыЗаНАЛ) ИЛИ врВсегдаЗаНАЛ) Тогда 
							врСоздатьПКО = Истина;
						КонецЕсли;	
						
						врПетрушка = Ложь;
						Если ИдКПК = "DevPetrushka" Тогда
							врПетрушка = Истина;
						КонецЕсли;		
						
						Если ЭтоЧерныйЗаказКеги Тогда
							врСоздатьПКО = Ложь;
						КонецЕсли;	
						
						ОтложенноеПроведение_ЗарегистрироватьЗаказ(Заказ.Ссылка, Документы.РеализацияТоваровУслуг.ПустаяСсылка(), ДатаОтгрузкиОтложенная, врНужноПровестиРеализацию, врСоздатьПКО, врПетрушка);
						
						Продолжить;
											
					КонецЕсли;			
						
				Исключение
						
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "КИДЯЕВА!!!", ИнформацияОбОшибке(), Истина);
						
				КонецПопытки;
				
				// ФОНОВЫЙ ПОТОК
				
								
				// РЕАЛИЗАЦИЯ для ЗАКАЗА
				
				врЗамерСтарт = ТекущаяДата();
				
				Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				
				Реализация.Заполнить(Заказ.Ссылка);	
				
				врЗамер_1 = ТекущаяДата() - врЗамерСтарт;
				
				Реализация.Менеджер             = Заказ.Менеджер;
				Реализация.ТребуетсяЗалогЗаТару = Истина;
				
				Реализация.Статус = ?(Константы.ЗапретРезервированияВЗаказе.Получить(),Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке,Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
				
				алкРаботаСДиалогамиСервер.алкЗаполнитьЛицензииИПунктРазгрузки(Реализация, Неопределено, Истина);	
				
				Реализация.Дата = Заказ.Дата;
			//	Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Шулейко Виталий Ростиславович")) ИЛИ (ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Максимова Ирина Владимировна")) Тогда
				Если ЭтоОмскОбласть(ТекАгент) ИЛИ ЭтоТестовыйАгент(ТекАгент) ИЛИ ЭтоАгентОтложенногоПлатежа(ТекАгент) ИЛИ (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
					Реализация.Дата                           = ДатаОтгрузкиОтложенная;
					Реализация.ДатаВозвратаМногооборотнойТары = ДатаОтгрузкиОтложенная;
				КонецЕсли;	
				
				Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
					врЛимитВремени = ЛимитВремениЗаказа(Реализация.ЗонаДоставки);
					Если врЛимитВремени <> Неопределено Тогда
						врРазностьДат = врЛимитВремени - '00010101';
						врДатаЛимит   = НачалоДня(Реализация.Дата) + врРазностьДат;
						Если Реализация.Дата > врДатаЛимит Тогда
							Реализация.Дата = НачалоДня(Реализация.Дата) + 60*60*8;
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Корректировка даты для заказа = " + СокрЛП(Реализация.ЗаказКлиента));
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				
				Реализация.Дата = Реализации_ПолучитьДатуРТУ(Реализация.Дата);
					
				врЗамер_2 = ТекущаяДата() - врЗамерСтарт;
								
				// СЕРИИ
				
				//надо заполнить серии если это пиво
				//правда делать надо это для реализации а не для заказа
				Если Реализация.Организация = ОсновнаяФирма И Реализация.Склад = ОсновнойСклад Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;
				
				Если Реализация.Организация = оргРИФПлюс И Реализация.Склад = СкладРИФПлюс Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;				
							
				Если Реализация.Организация = оргРИФПлюс И Реализация.Склад = СкладРИФПлюсАлкоголь Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;								
				
				Если Реализация.Организация = оргМеркурий И Реализация.Склад = СкладМеркурийАлкоголь Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;												
				
				Если (Реализация.Организация = оргРИФ) ИЛИ (Реализация.Организация = оргАВН_70) ИЛИ (Реализация.Организация = оргТОП_17) Тогда
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Реализация, Документы.РеализацияТоваровУслуг));
					Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Реализация.Товары) Тогда
						НоменклатураСервер.ЗаполнитьСерииПоFEFO(Реализация,ПараметрыУказанияСерий);	
					Иначе
						//Сообщить("Не удалось распределить по сериям алкоголь");
					КонецЕсли;
				КонецЕсли;								
				
				врЗамер_3 = ТекущаяДата() - врЗамерСтарт;				
				
				Реализация.Комментарий 			 = Заказ.Комментарий;
				Реализация.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				
				Если ИдКПК = "DevPetrushka" Тогда
					Реализация.ЗаказПетрушка = Истина;
				КонецЕсли;							
								
				ДокРеалЗаписан  = Ложь;
				ДокРеалПроведен = Ложь;
				
				
//Kirich чек комментария и попытка проведения документа  23.05.2018
//				Попытка
//						
//					Если Реализация.Комментарий = "" ИЛИ Реализация.Комментарий = " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!! нал" ИЛИ Реализация.Комментарий = " БЕЗ ОПЛАТЫ НЕ ОСТАВЛЯТЬ!!!" ИЛИ Реализация.Комментарий = " нал" Тогда
//							
//						Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//							
//						ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИЯ записан и проведен: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//						
//					Иначе
//						
//						Реализация.Записать(РежимЗаписиДокумента.Запись);
//							
//						ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//							
//						ДокРеалЗаписан = Истина;
//						
//						
//					КонецЕсли;
//					
//				Исключение
//					
//					Реализация.Записать(РежимЗаписиДокумента.Запись);
//						
//					ЛогФайл.ЗаписатьСтроку("~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
//						
//					ДокРеалЗаписан = Истина;
//					
//						
//				КонецПопытки;

				//Если Реализация.Организация = оргАТ_Логистик Тогда
				//	врНужноПровестиРеализацию = Ложь;
				//КонецЕсли;	
				
				Если Не ЗагрузкаДокументов_СтатусыУстановленыВерно(Реализация) Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;			
				
				Если Реализация.Склад = СкладТомскОборудование Тогда
					врНужноПровестиРеализацию = Ложь;
				КонецЕсли;					
				
				врЗарегистрироватьДокументДляОтложенногоПроведения = Ложь;
								
//				Если (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Altai") Тогда
					Если врНужноПровестиРеализацию Тогда
						врЗарегистрироватьДокументДляОтложенногоПроведения = Истина;
						врНужноПровестиРеализацию = Ложь;
					КонецЕсли;	
//				КонецЕсли;	

				Попытка
					ЛогФайл.ЗаписатьСтроку("ЗАМЕР: 1 = " + СокрЛП(врЗамер_1) + "; 2 = " + СокрЛП(врЗамер_2) + "; 3 = " + СокрЛП(врЗамер_3));					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАМЕР", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	

			//	Если врНужноПровестиРеализацию ИЛИ НашаТочка(Реализация.Партнер) Тогда
				Если врНужноПровестиРеализацию Тогда

					Попытка
					
						Реализация.Записать(РежимЗаписиДокумента.Проведение);						
											
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан и ПРОВЕДЕН: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
						ДокРеалЗаписан  = Истина;
						ДокРеалПроведен = Истина;
																		
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента: " + СокрЛП(Реализация.Партнер), ИнформацияОбОшибке(), Истина); 
						
						Попытка
						
							Реализация.Записать(РежимЗаписиДокумента.Запись);
						
							ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
							ДокРеалЗаписан = Истина;
											
						Исключение
						
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
					
						//	Возврат;
											
						КонецПопытки;
						
					КонецПопытки;
					
				Иначе	

					Попытка
						
						Реализация.Записать(РежимЗаписиДокумента.Запись);
						
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ РЕАЛИЗАЦИИ для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(Реализация.Ссылка) + " (" + Строка(Реализация.Партнер) + "; Сумма: " + Строка(Реализация.СуммаДокумента) + ")");
						
						ДокРеалЗаписан = Истина;
											
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не удалось записать реализацию клиента", ИнформацияОбОшибке(), Истина); 
					
					//	Возврат;
											
					КонецПопытки;
					
				КонецЕсли;	
				
				Если ДокРеалЗаписан И Реализация.ЗаказПетрушка Тогда
					
					Попытка
					
						врДокПетрушка = аян_СинхронизацияФоновая.Петрушка_ПолучитьЗаказПетрушка(Заказ.Ссылка);
						аян_СинхронизацияФоновая.Петрушка_ОтразитьРеализациюВЗавкеНаПетрушку(врДокПетрушка, Реализация.Ссылка);
						
					Исключение
						
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРУШКА - КОРРЕКТИРОВКА ЗАЯВКИ - ИСКЛЮЧЕНИЕ !!!", ИнформацияОбОшибке(), Истина); 
						
					КонецПопытки;	
					
				КонецЕсли;	
				
				Если ДокРеалПроведен Тогда
					СоздатьСчетФактуруВыданный(Реализация.Ссылка);
				КонецЕсли;	
				
				Если ДокРеалЗаписан Тогда
					//Если Выборка.Склад = "_ТоварыОвощиФрукты_" Тогда 
					//	ФРУКТЫ_ОВОЩИ_СоздатьПоступление(Реализация.Ссылка);
					//КонецЕсли;	
					Если врЗарегистрироватьДокументДляОтложенногоПроведения Тогда
						ОтложенноеПроведение_ЗарегистрироватьДокумент(Реализация.Ссылка);
					ИначеЕсли ЭтоРеализацияПеченьеПавлово(Реализация.Ссылка) Тогда
						ОтложенноеПроведение_ЗарегистрироватьДокумент(Реализация.Ссылка);
					КонецЕсли;	
				КонецЕсли;					
				
				Если ДокРеалЗаписан И (Не ЗначениеЗаполнено(врДокументОснования)) Тогда
					врДокументОснования = Реализация.Ссылка;
				КонецЕсли;	
								
				//Если ДокРеалЗаписан И (Не КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Реализация.Партнер)) Тогда
				//	
				//	Попытка
				//		Если (Реализация.ДатаПлатежа - ТекущаяДата()) < (ДеньВСекундах * 3) Тогда
				//			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неверная дата платежа!!! " + СокрЛП(Реализация));	
				//		КонецЕсли;	
				//	Исключение
				//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка ДАТЫ ПЛАТЕЖА. Исключение!", ИнформацияОбОшибке(), Истина);
				//	КонецПопытки;					
				//	
				//КонецЕсли;	
				
				Попытка
					Если ДокРеалЗаписан Тогда
						Если ЭтоЗаказЧерезФлажокПетров Тогда
							МЗДопСведения = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
							МЗДопСведения.Объект    = Реализация.Ссылка;
							МЗДопСведения.Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заказ через флажок Петров");
							МЗДопСведения.Значение  = Истина;
							МЗДопСведения.Записать(Истина);
						КонецЕсли;	
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Заказ через флажок Петров", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
												
				// ПКО для ЗАКАЗА
				
				Если ЭтоБортАгента И ЭтоБортБелый Тогда
					
					Если (СтрокаТаблицыСчета.WithouPay = "True") Тогда
					
						врРеализацияПроведена = Ложь;
					
						Попытка
							Реализация.Записать(РежимЗаписиДокумента.Проведение);
							врРеализацияПроведена = Истина;
						Исключение	
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Проведение реализации", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
					
						Если врРеализацияПроведена И (СтрокаТаблицыСчета.IsTTN <> "True") Тогда
							Попытка
								Оплаты_СоздатьОплатуОтАгентаНаОснованииНакладной(ТекАгент, Реализация.Ссылка);							
							Исключение	
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Создание оплаты от агента", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
						КонецЕсли;
					
						Продолжить;
						
					КонецЕсли;	
					
				КонецЕсли;					
				
				Если ЭтоБортАгента И (Не ЭтоБортБелый) Тогда
					
					врРеализацияПроведена = Ложь;
					
					Попытка
						Реализация.Записать(РежимЗаписиДокумента.Проведение);
						врРеализацияПроведена = Истина;
					Исключение	
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Проведение реализации", ИнформацияОбОшибке(), Истина);
					КонецПопытки;
					
					Если врРеализацияПроведена И (СтрокаТаблицыСчета.IsTTN <> "True") Тогда
						Попытка
							Оплаты_СоздатьОплатуОтАгентаНаОснованииНакладной(ТекАгент, Реализация.Ссылка);							
						Исключение	
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Создание оплаты от агента", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;	
				
				врВсегдаЗаНАЛ = ВсегдаЗаНАЛ(Партнер);
				
				врЭтоДокГаз = Ложь;
				Если ДокРеалЗаписан Тогда
					врЭтоДокГаз = ЗагрузкаДокументов_ЭтоГаз(Заказ.Ссылка);
				КонецЕсли;	
				
			//	врСтартЗамерПКО_1 = ТекущаяДата();
				
				Если ДокРеалЗаписан И ((СтрокаТаблицыСчета.IsTTN <> "True") ИЛИ врЭтоДокГаз) И ((СтрокаТаблицыСчета.WithouPay = "True") ИЛИ КлиентыКонтрагенты_ЭтоПетровБезОтсрочки(Заказ.Партнер) ИЛИ МирНапитковЗаНАЛ(Заказ) ИЛИ ((Выборка.Склад = "_ТоварыСигареты_") И СигаретыЗаНАЛ) ИЛИ врВсегдаЗаНАЛ) Тогда 
					
					ОтложенноеПроведение_ЗарегистрироватьЗаказ(Заказ.Ссылка, Реализация.Ссылка, Реализация.Дата, Ложь, Истина);
					
				////	врСтартЗамерПКО_2 = ТекущаяДата();
				//	
				//	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				//	
				//	ПКО.Заполнить(Реализация.Ссылка);
				//	
				////	врСтартЗамерПКО_3 = ТекущаяДата();
				//	
				//	ДатаДок = СтрокаТаблицыСчета.PaymentDate;
				//	ДатаДок = СтрЗаменить(ДатаДок, "-","");
				//	ДатаДок = СтрЗаменить(ДатаДок, ":","");
				//	ДатаДок = СтрЗаменить(ДатаДок, " ","");
				//	
				//	Попытка
				//		ПКО.Дата = ?(ЗначениеЗаполнено(ДатаДок),Дата(ДатаДок),Реализация.Дата);
				//	Исключение
				//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неясное значение PaymentDate: """ + Строка(СтрокаТаблицыСчета.PaymentDate) + """. Подставлена дата из реализации: " + Строка(Реализация.Дата));
				//		ПКО.Дата = Реализация.Дата;
				//	КонецПопытки;
				//	
				//	ПКО.СуммаДокумента = Реализация.Ссылка.СуммаДокумента;
				//	ПКО.Основание      = ПКО.ДокументОснование;
				//	
				////	врСтартЗамерПКО_3_1 = ТекущаяДата();
				//	
				//	ПКО.РасшифровкаПлатежа.Очистить();
				//	ПКО.Касса = Справочники.Кассы.НайтиПоНаименованию(Реализация.Организация.Наименование + " (RUB)");
				//	
				////	врСтартЗамерПКО_3_2 = ТекущаяДата();
				//	
				//	ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
				//	Реализация.Ссылка,
				//	Реализация.Договор,
				//	Реализация.Валюта,
				//	ПКО.РасшифровкаПлатежа,
				//	Реализация.Партнер,
				//	Реализация.Ссылка);
				//	
				////	врСтартЗамерПКО_3_3 = ТекущаяДата();
				//	
				//	ПКО.РасшифровкаПлатежа[0].Сумма = ПКО.СуммаДокумента;
				//	ПКО.РасшифровкаПлатежа[0].Заказ = Реализация.Ссылка;
				//	
				//	Если НЕ ЗначениеЗаполнено(ПКО.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда 
				//		ПКО.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
				//	КонецЕсли;
				//	
				////	врСтартЗамерПКО_3_4 = ТекущаяДата();
				//	
				//	МассивДокументов = ПКО.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
				//	МассивДокументов.Добавить(ПКО.ДокументОснование);
				//	
				////	врСтартЗамерПКО_3_5 = ТекущаяДата();
				//	
				//	Если Реализация.Организация = оргАТ_Логистик Тогда
				//	    врТекстНДС = ПКО_ТекстНДС(Реализация.Ссылка);				
				//		Если ЗначениеЗаполнено(врТекстНДС) Тогда
				//			ПКО.ВТомЧислеНДС = врТекстНДС;
				//		Иначе							
				//			ПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента, ПКО.Валюта, МассивДокументов, Ложь, Истина);
				//		КонецЕсли;	
				//	Иначе
				//		ПКО.ВТомЧислеНДС = "";
				//	КонецЕсли;	
				//	
				////	врСтартЗамерПКО_4 = ТекущаяДата();
				//	
				////	Попытка
				////	
				////		ЛогФайл.ЗаписатьСтроку("ПКО (КОНТРОЛЬ). 1 = " + СокрЛП(врСтартЗамерПКО_1) +
				////									"; 2 = "   + СокрЛП(врСтартЗамерПКО_2) + 
				////									"; 3 = "   + СокрЛП(врСтартЗамерПКО_3) + 
				////									"; 3.1 = " + СокрЛП(врСтартЗамерПКО_3_1) + 
				////									"; 3.2 = " + СокрЛП(врСтартЗамерПКО_3_2) + 
				////									"; 3.3 = " + СокрЛП(врСтартЗамерПКО_3_3) + 
				////									"; 3.4 = " + СокрЛП(врСтартЗамерПКО_3_4) + 
				////									"; 3.5 = " + СокрЛП(врСтартЗамерПКО_3_5) + 
				////									"; 4 = "   + СокрЛП(врСтартЗамерПКО_4));
				////
				////	Исключение
				////
				////	КонецПопытки;
				//	
				//	Попытка
				//		ПКО.Записать(РежимЗаписиДокумента.Запись);
				//		ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПКО для ЗАКАЗА (" + Строка(Заказ.Номер) + ") записан: " + Строка(ПКО.Ссылка) + " (" + Строка(ПКО.Контрагент) + "; Сумма: " + Строка(ПКО.СуммаДокумента) + ")");
				//	Исключение
				//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка записи ПКО для ЗАКАЗА!  Организация: " + Строка(ПКО.Организация) + "; Контрагент : " + Строка(ПКО.Контрагент) + "; Сумма: " + Строка(ПКО.СуммаДокумента), ИнформацияОбОшибке(), Истина);
				//	КонецПопытки;	
					
				КонецЕсли;
			КонецЦикла;	
			
			// Корректировка перемещения по факту заказа
			
			Попытка
				
				ОбъединениеЗаявок_СкорректироватьПеремещение(врДокументПеремещения, врДокументОснования, ТЗ_ЗаказанныеТовары);				
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Корректировка перемещения. Исключение!!!", ИнформацияОбОшибке(), Истина);				
			КонецПопытки	
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЭкспортЗагруженныхДокументов(Счета);
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка экспорта ответов на заказ!", ИнформацияОбОшибке(), Истина); 
	КонецПопытки;	
		
КонецПроцедуры	// Загрузка 


// Invoice.txt, InvoiceProduct.txt - ответ на загрузку

Процедура ЭкспортЗагруженныхДокументов(Счета)
	
	Событие1С = "Ответ на заказ.";
	
//	НЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьНаборЗаписей();
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " (Ответ на заказ) Выгружаем заказы...");
	
	ЛогОтветов = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "LogAnswers" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
	ТЗИнвойс        = Неопределено;
	ТЗИнвойсПродукт = Неопределено;
	
	Попытка
				
		МЗОтветыНаЗаказы = РегистрыСведений.аян_ОтветыНаЗаказы.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.ДатаОтвета = НачалоДня(ТекущаяДата());
		МЗОтветыНаЗаказы.Агент      = ТекАгент;
		МЗОтветыНаЗаказы.Прочитать(); 
		
		Если МЗОтветыНаЗаказы.Выбран() Тогда
			
			ТЗИнвойс        = МЗОтветыНаЗаказы.Invoice.Получить();
			ТЗИнвойсПродукт = МЗОтветыНаЗаказы.InvoiceProduct.Получить();
			
		Иначе	
					
			ТЗИнвойс = Новый ТаблицаЗначений;
			ТЗИнвойс.Колонки.Добавить("DeviceID");
			ТЗИнвойс.Колонки.Добавить("InvoiceID");
			ТЗИнвойс.Колонки.Добавить("InvoiceRefID");
			ТЗИнвойс.Колонки.Добавить("InvoiceTypeRefID");
			ТЗИнвойс.Колонки.Добавить("ParentInvoiceID");
		    ТЗИнвойс.Колонки.Добавить("ParentInvoiceRefID");
			ТЗИнвойс.Колонки.Добавить("AgentRefID");
			ТЗИнвойс.Колонки.Добавить("ShopRefID");	
			ТЗИнвойс.Колонки.Добавить("VisitID");
			ТЗИнвойс.Колонки.Добавить("InvoiceDateTime");
			ТЗИнвойс.Колонки.Добавить("InvoiceNo");
			ТЗИнвойс.Колонки.Добавить("InvoiceAmount");
			ТЗИнвойс.Колонки.Добавить("AmountPaid");
			ТЗИнвойс.Колонки.Добавить("DeliveryFromDateTime");
			ТЗИнвойс.Колонки.Добавить("DeliveryThruDateTime");
			ТЗИнвойс.Колонки.Добавить("IsConfidential");	
			ТЗИнвойс.Колонки.Добавить("Note");
			ТЗИнвойс.Колонки.Добавить("SellerRefID");
			ТЗИнвойс.Колонки.Добавить("PriceTypeRefID");
			ТЗИнвойс.Колонки.Добавить("InvoiceTypeCode");
			ТЗИнвойс.Колонки.Добавить("InvoiceRequired");
			ТЗИнвойс.Колонки.Добавить("ShopID");
			ТЗИнвойс.Колонки.Добавить("DaysOverdue");
			ТЗИнвойс.Колонки.Добавить("OverdueDebtAmount");
			ТЗИнвойс.Колонки.Добавить("Color");
			
			ТЗИнвойсПродукт = Новый ТаблицаЗначений;
			ТЗИнвойсПродукт.Колонки.Добавить("DeviceID"); 		
			ТЗИнвойсПродукт.Колонки.Добавить("InvoiceProductID");
			ТЗИнвойсПродукт.Колонки.Добавить("InvoiceID");
			ТЗИнвойсПродукт.Колонки.Добавить("InvoiceRefID");
			ТЗИнвойсПродукт.Колонки.Добавить("ProductRefID");
			ТЗИнвойсПродукт.Колонки.Добавить("Price");
			ТЗИнвойсПродукт.Колонки.Добавить("Volume");
			ТЗИнвойсПродукт.Колонки.Добавить("VATRate");
			ТЗИнвойсПродукт.Колонки.Добавить("DiscountAmount");
			ТЗИнвойсПродукт.Колонки.Добавить("DiscountRate");
			ТЗИнвойсПродукт.Колонки.Добавить("MeasureUnitRefID");
			ТЗИнвойсПродукт.Колонки.Добавить("PriceTypeRefID");
			ТЗИнвойсПродукт.Колонки.Добавить("StockRefID");
			ТЗИнвойсПродукт.Колонки.Добавить("IsManualPrice");
			
		КонецЕсли;	
			
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
		
	// Invoice.txt
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.ДобавитьСтроку(
	"DeviceID"				+ Символ(9) +   
	"InvoiceID"				+ Символ(9) +   
	"InvoiceRefID"			+ Символ(9) +
	"InvoiceTypeRefID"		+ Символ(9) +
	"ParentInvoiceID"		+ Символ(9) +
	"ParentInvoiceRefID"	+ Символ(9) +
	"AgentRefID"			+ Символ(9) +
	"ShopRefID"				+ Символ(9) +	
	"VisitID"				+ Символ(9) +
	"InvoiceDateTime"		+ Символ(9) +
	"InvoiceNo"				+ Символ(9) +
	"InvoiceAmount"			+ Символ(9) +
	"AmountPaid"			+ Символ(9) +	
	"DeliveryFromDateTime"	+ Символ(9) +
	"DeliveryThruDateTime"	+ Символ(9) +
	"IsConfidential"		+ Символ(9) +	
	"Note"					+ Символ(9) +
	"SellerRefID"			+ Символ(9) +
	"PriceTypeRefID"		+ Символ(9) +
	"InvoiceTypeCode"		+ Символ(9) +
	"InvoiceRequired"		+ Символ(9) +
	"ShopID"                + Символ(9) +
	"DaysOverdue"           + Символ(9) +
	"OverdueDebtAmount"		+ Символ(9) +
	"Color");
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " (Ответ на заказ) Выгружаем ТЧ заказов...");
	
	// InvoiceProduct.txt
	
	ФайлВыгрузкиЭТЧ = Новый ТекстовыйДокумент;
	ФайлВыгрузкиЭТЧ.ДобавитьСтроку(	
	"DeviceID"				+ Символ(9) + 		
	"InvoiceProductID"		+ Символ(9) +  		
	"InvoiceID"				+ Символ(9) +   	
	"InvoiceRefID"			+ Символ(9) +   	
	"ProductRefID"			+ Символ(9) +  		
	"Price"					+ Символ(9) +  		
	"Volume"				+ Символ(9) +  		
	"VATRate"				+ Символ(9) +
	"DiscountAmount"		+ Символ(9) +   	
	"DiscountRate"			+ Символ(9) +
	"MeasureUnitRefID"      + Символ(9) +
	"PriceTypeRefID" 	    + Символ(9) +
	"StockRefID" 		    + Символ(9) +
	"IsManualPrice");
	
	Попытка
		
		Для Каждого СтрокаТаблицыСчета Из ТЗИнвойс Цикл
					
			ФайлВыгрузки.ДобавитьСтроку(		
			СтрокаТаблицыСчета.DeviceID						+ Символ(9) + 		// DeviceID
			""												+ Символ(9) + 		// InvoiceID
			СтрокаТаблицыСчета.InvoiceRefID					+ Символ(9) + 		// InvoiceRefID
			"12"											+ Символ(9) + 		// InvoiceTypeRefID
			СтрокаТаблицыСчета.InvoiceID					+ Символ(9) +  		// ParentInvoiceID
			""												+ Символ(9) +  		// ParentInvoiceRefID
			СтрокаТаблицыСчета.AgentRefID					+ Символ(9) +  		// AgentRefID
			СтрокаТаблицыСчета.ShopRefID					+ Символ(9) +  		// ShopRefID
			СтрокаТаблицыСчета.VisitID						+ Символ(9) +  		// VisitID
			СтрокаТаблицыСчета.InvoiceDateTime				+ Символ(9) +  		// InvoiceDateTime
			СтрокаТаблицыСчета.InvoiceNo					+ Символ(9) +  		// InvoiceNo
			СтрокаТаблицыСчета.InvoiceAmount				+ Символ(9) +  		// InvoiceAmount
			СтрокаТаблицыСчета.AmountPaid					+ Символ(9) +  		// AmountPaid
			СтрокаТаблицыСчета.DeliveryFromDateTime			+ Символ(9) +  		// DeliveryFromDateTime
			СтрокаТаблицыСчета.DeliveryThruDateTime			+ Символ(9) +  		// DeliveryThruDateTime
			СтрокаТаблицыСчета.IsConfidential				+ Символ(9) +  		// IsConfidential
			СтрокаТаблицыСчета.Note							+ Символ(9) + 		// Note
			СтрокаТаблицыСчета.SellerRefID					+ Символ(9) +  		// SellerRefID
			СтрокаТаблицыСчета.PriceTypeRefID				+ Символ(9) +  		// PriceTypeRefID
			СтрокаТаблицыСчета.InvoiceTypeCode				+ Символ(9) +  		// InvoiceTypeCode
			СтрокаТаблицыСчета.InvoiceRequired				+ Символ(9) +  		// InvoiceRequired
			""												+ Символ(9) +  		// ShopID
			""												+ Символ(9) +  		// DaysOverdue
			""												+ Символ(9) +  		// OverdueDebtAmount
			"");                                               				    // Color
			
		КонецЦикла;	
		
		Для Каждого ТекСтрокаПродукт Из ТЗИнвойсПродукт Цикл
			
			ФайлВыгрузкиЭТЧ.ДобавитьСтроку(
			ТекСтрокаПродукт.DeviceID											+ Символ(9) +											// DeviceID	
			""																	+ Символ(9) + 	                        				// InvoiceProductID
			""																	+ Символ(9) +                           				// InvoiceID
			ТекСтрокаПродукт.InvoiceRefID										+ Символ(9) +                           				// InvoiceRefID
			ТекСтрокаПродукт.ProductRefID										+ Символ(9) +  	                        				// ProductRefID
			ТекСтрокаПродукт.Price												+ Символ(9) +                           				// Price
			ТекСтрокаПродукт.Volume												+ Символ(9) +                           				// Volume
			ТекСтрокаПродукт.VATRate											+ Символ(9) +											// VATRate
			""																	+ Символ(9) +                                           // DiscountAmount
			""																	+ Символ(9) +                           				// DiscountRate	
			ТекСтрокаПродукт.MeasureUnitRefID							        + Символ(9) +                                           // MeasureUnitRefID
			ТекСтрокаПродукт.PriceTypeRefID										+ Символ(9) +                           				// PriceTypeRefID				
			ТекСтрокаПродукт.StockRefID											+ Символ(9) +                           				// StockRefID				
			ТекСтрокаПродукт.IsManualPrice);															                          		// IsManualPrice
			
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при предзаполнении ответов на заказ", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	врНомерВПакете = 0;
	
	Для Каждого СтрокаТаблицыСчета Из Счета Цикл
				
		Если СтрокаТаблицыСчета.Товары.Количество() > 0 Тогда 
			
			ФайлВыгрузки.ДобавитьСтроку(		
			СтрокаТаблицыСчета.DeviceID						+ Символ(9) + 		// DeviceID
			""												+ Символ(9) + 		// InvoiceID
			СтрокаТаблицыСчета.InvoiceRefID					+ Символ(9) + 		// InvoiceRefID
			"12"											+ Символ(9) + 		// InvoiceTypeRefID
			СтрокаТаблицыСчета.InvoiceID					+ Символ(9) +  		// ParentInvoiceID
			""												+ Символ(9) +  		// ParentInvoiceRefID
			СтрокаТаблицыСчета.AgentRefID					+ Символ(9) +  		// AgentRefID
			СтрокаТаблицыСчета.ShopRefID					+ Символ(9) +  		// ShopRefID
			СтрокаТаблицыСчета.VisitID						+ Символ(9) +  		// VisitID
			СтрокаТаблицыСчета.InvoiceDateTime				+ Символ(9) +  		// InvoiceDateTime
			СтрокаТаблицыСчета.InvoiceNo					+ Символ(9) +  		// InvoiceNo
			СтрокаТаблицыСчета.InvoiceAmount				+ Символ(9) +  		// InvoiceAmount
			СтрокаТаблицыСчета.AmountPaid					+ Символ(9) +  		// AmountPaid
			СтрокаТаблицыСчета.DeliveryFromDateTime			+ Символ(9) +  		// DeliveryFromDateTime
			СтрокаТаблицыСчета.DeliveryThruDateTime			+ Символ(9) +  		// DeliveryThruDateTime
			СтрокаТаблицыСчета.IsConfidential				+ Символ(9) +  		// IsConfidential
			СтрокаТаблицыСчета.Note							+ Символ(9) + 		// Note
			СтрокаТаблицыСчета.SellerRefID					+ Символ(9) +  		// SellerRefID
			СтрокаТаблицыСчета.PriceTypeRefID				+ Символ(9) +  		// PriceTypeRefID
			СтрокаТаблицыСчета.InvoiceTypeCode				+ Символ(9) +  		// InvoiceTypeCode
			СтрокаТаблицыСчета.InvoiceRequired				+ Символ(9) +  		// InvoiceRequired
			""												+ Символ(9) +  		// ShopID
			""												+ Символ(9) +  		// DaysOverdue
			""												+ Символ(9) +  		// OverdueDebtAmount
			"");                                               				    // Color
			
			Попытка
				
				НовСтрокаИнвойс = ТЗИнвойс.Добавить();
				НовСтрокаИнвойс.DeviceID             = СтрокаТаблицыСчета.DeviceID; 		 	// DeviceID
				НовСтрокаИнвойс.InvoiceID            = "";  						 		 	// InvoiceID
				НовСтрокаИнвойс.InvoiceRefID         = СтрокаТаблицыСчета.InvoiceRefID;	 		// InvoiceRefID
				НовСтрокаИнвойс.InvoiceTypeRefID     = "12";						 		 	// InvoiceTypeRefID
				НовСтрокаИнвойс.ParentInvoiceID      = СтрокаТаблицыСчета.InvoiceID;		 	// ParentInvoiceID
				НовСтрокаИнвойс.ParentInvoiceRefID   = "";								 		// ParentInvoiceRefID
				НовСтрокаИнвойс.AgentRefID           = СтрокаТаблицыСчета.AgentRefID;		 	// AgentRefID
				НовСтрокаИнвойс.ShopRefID            = СтрокаТаблицыСчета.ShopRefID;		 	// ShopRefID
				НовСтрокаИнвойс.VisitID              = СтрокаТаблицыСчета.VisitID; 		 		// VisitID
				НовСтрокаИнвойс.InvoiceDateTime      = СтрокаТаблицыСчета.InvoiceDateTime; 		// InvoiceDateTime
				НовСтрокаИнвойс.InvoiceNo            = СтрокаТаблицыСчета.InvoiceNo;	 		// InvoiceNo
				НовСтрокаИнвойс.InvoiceAmount        = СтрокаТаблицыСчета.InvoiceAmount;		// InvoiceAmount
				НовСтрокаИнвойс.AmountPaid           = СтрокаТаблицыСчета.AmountPaid; 			// AmountPaid
				НовСтрокаИнвойс.DeliveryFromDateTime = СтрокаТаблицыСчета.DeliveryFromDateTime;	// DeliveryFromDateTime
				НовСтрокаИнвойс.DeliveryThruDateTime = СтрокаТаблицыСчета.DeliveryThruDateTime;	// DeliveryThruDateTime
				НовСтрокаИнвойс.IsConfidential       = СтрокаТаблицыСчета.IsConfidential;  		// IsConfidential
				НовСтрокаИнвойс.Note                 = СтрокаТаблицыСчета.Note;		     		// Note
				НовСтрокаИнвойс.SellerRefID          = СтрокаТаблицыСчета.SellerRefID;	 		// SellerRefID
				НовСтрокаИнвойс.PriceTypeRefID       = СтрокаТаблицыСчета.PriceTypeRefID;		// PriceTypeRefID
				НовСтрокаИнвойс.InvoiceTypeCode      = СтрокаТаблицыСчета.InvoiceTypeCode;		// InvoiceTypeCode
				НовСтрокаИнвойс.InvoiceRequired      = СтрокаТаблицыСчета.InvoiceRequired;		// InvoiceRequired
				НовСтрокаИнвойс.ShopID               = "";										// ShopID
				НовСтрокаИнвойс.DaysOverdue          = "";										// DaysOverdue
				НовСтрокаИнвойс.OverdueDebtAmount    = "";								  		// OverdueDebtAmount
				НовСтрокаИнвойс.Color				 = "";                     				    // Color				
				
			Исключение
				
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
				
			КонецПопытки;	
			
			ТЧрасходные = СтрокаТаблицыСчета.Товары;
			
			Для Каждого ТЧСтрока Из ТЧрасходные Цикл
				
				ФайлВыгрузкиЭТЧ.ДобавитьСтроку(
				СокрЛП(ИдКПК)														+ Символ(9) +											// DeviceID	
				""																	+ Символ(9) + 	                        				// InvoiceProductID
				""																	+ Символ(9) +                           				// InvoiceID
				СокрЛП(СтрокаТаблицыСчета.InvoiceRefID)								+ Символ(9) +                           				// InvoiceRefID
				СокрЛП(ТЧСтрока.Номенклатура.УникальныйИдентификатор())				+ Символ(9) +  	                        				// ProductRefID
				Формат(ТЧСтрока.Цена, "ЧРД=.; ЧГ=")									+ Символ(9) +                           				// Price
				Формат(ТЧСтрока.Количество, "ЧРД=.; ЧГ=")							+ Символ(9) +                           				// Volume
				Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТЧСтрока.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ=") + Символ(9) +	// VATRate
				""																	+ Символ(9) +                                           // DiscountAmount
				""																	+ Символ(9) +                           				// DiscountRate	
				СокрЛП(ТЧСтрока.ЕдиницаИзмерения.УникальныйИдентификатор())         + Символ(9) +                                           // MeasureUnitRefID
				СтрокаТаблицыСчета.PriceTypeRefID									+ Символ(9) +                           				// PriceTypeRefID				
				СокрЛП(ОсновнойСклад.УникальныйИдентификатор())						+ Символ(9) +                           				// StockRefID				
				"false");																			                          				// IsManualPrice
				
				Попытка
					
					НовСтрокаИнвойсПродукт = ТЗИнвойсПродукт.Добавить();
					НовСтрокаИнвойсПродукт.DeviceID	        = СокрЛП(ИдКПК);																								// DeviceID	
					НовСтрокаИнвойсПродукт.InvoiceProductID = "";																											// InvoiceProductID	
					НовСтрокаИнвойсПродукт.InvoiceID		= "";																											// InvoiceID
					НовСтрокаИнвойсПродуктInvoiceRefID      = СокрЛП(СтрокаТаблицыСчета.InvoiceRefID);																		// InvoiceRefID	
					НовСтрокаИнвойсПродукт.ProductRefID     = СокрЛП(ТЧСтрока.Номенклатура.УникальныйИдентификатор());														// ProductRefID
					НовСтрокаИнвойсПродукт.Price            = Формат(ТЧСтрока.Цена, "ЧРД=.; ЧГ=");																			// Price
					НовСтрокаИнвойсПродукт.Volume 			= Формат(ТЧСтрока.Количество, "ЧРД=.; ЧГ=");           															// Volume
					НовСтрокаИнвойсПродукт.VATRate			= Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТЧСтрока.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ=");	// VATRate
					НовСтрокаИнвойсПродукт.DiscountAmount   = "";																											// DiscountAmount
					НовСтрокаИнвойсПродукт.DiscountRate     = "";																							 				// DiscountRate	
					НовСтрокаИнвойсПродукт.MeasureUnitRefID = СокрЛП(ТЧСтрока.ЕдиницаИзмерения.УникальныйИдентификатор());			                                        // MeasureUnitRefID
					НовСтрокаИнвойсПродукт.PriceTypeRefID   = СтрокаТаблицыСчета.PriceTypeRefID;									                          				// PriceTypeRefID				
					НовСтрокаИнвойсПродукт.StockRefID		= СокрЛП(ОсновнойСклад.УникальныйИдентификатор());												  				// StockRefID				
					НовСтрокаИнвойсПродукт.IsManualPrice    = "false";																                          				// IsManualPrice
					
				Исключение
				
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
				
				КонецПопытки;						
				
				врПартнер = ПолучитьПартнераПоГУИД(СтрокаТаблицыСчета.ShopRefID);	
				
				Попытка 
					Если Счета.Колонки.Найти("ClientPetrov") <> Неопределено Тогда
						Если СтрокаТаблицыСчета.ClientPetrov = "True" Тогда
							врПартнер = ПолучитьПартнераПоГУИД(СтрокаТаблицыСчета.ClientPetrovRefID);	
						КонецЕсли;
					КонецЕсли;	
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ClientPetrovRefID", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
				Попытка
					ИнформацияЕГАИС = ?(КонтрагентПодключенКЕГАИС(врПартнер), " Точка в ЕГАИС.", "Точка не в ЕГАИС!!!");                                      
				Исключение
					ИнформацияЕГАИС = "ОШИБКА ОПРЕДЕЛЕНИЯ ЕГАИС!!!";                                      
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "КонтрагентПодключенКЕГАИС = " + СокрЛП(врПартнер), ИнформацияОбОшибке(), Истина); 
				КонецПопытки;	
				
				ЛогОтветов.ЗаписатьСтроку("ЗАКАЗ   ##  " + Строка(ТЧСтрока.ПричинаОтказа) + "  ## " + ТекущаяДата() + "  ##  " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + "  ##  " + ИнформацияЕГАИС + "  ##  " + Строка(врПартнер) + "  ##  " + СокрЛП(ТЧСтрока.Номенклатура) + "  ##  Количество: " + Формат(ТЧСтрока.Количество, "ЧРД=.; ЧГ="));	
				
				Попытка
										
			//		ИнформационноеСообщение_ДобавитьИнформацию("ОтветыЗаявки", врПартнер, 1, Лев(ТЧСтрока.Номенклатура, 30));
					
					//НовСтрокаОтказы = НЗОтказы.Добавить();
					//НовСтрокаОтказы.Агент        = ТекАгент;
					//НовСтрокаОтказы.ДатаОтказа   = ТекущаяДата();
					//НовСтрокаОтказы.Клиент       = врПартнер;
					//НовСтрокаОтказы.Номенклатура = ТЧСтрока.Номенклатура;
					//НовСтрокаОтказы.Количество   = ТЧСтрока.Количество;
					//Если ТЧСтрока.ПричинаОтказа = "неизв." Тогда
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.Неизвестно;
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет в ост." Тогда 	
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетВОстатке;
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.РИФ" Тогда 	
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораРИФ
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.АВН_70" Тогда 	
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораАВН_70						
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.РИФ+(безНДС)" Тогда 							
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораРИФПлюс_БезНДС;
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "не ЕГАИС" Тогда 	
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НеЕГАИС;
					//ИначеЕсли ТЧСтрока.ПричинаОтказа = "запрет по ЕГАИС" Тогда 	
					//	НовСтрокаОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретПоЕГАИС;						
					//КонецЕсли;	
					
					врНомерВПакете = врНомерВПакете + 1;
									
					МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
					МЗОтказы.Агент        = ТекАгент;
					МЗОтказы.ДатаОтказа   = ТекущаяДата();					
					МЗОтказы.Клиент       = врПартнер;
					МЗОтказы.Номенклатура = ТЧСтрока.Номенклатура;
					МЗОтказы.Количество   = ТЧСтрока.Количество;
					МЗОтказы.Комментарий  = СокрЛП(СтрокаТаблицыСчета.Note);
					МЗОтказы.ВидДокумента = Перечисления.аян_СинхронизацияВидыДокументов.Заказ;
					МЗОтказы.НомерВПакете = врНомерВПакете;
					Если ТЧСтрока.ПричинаОтказа = "неизв." Тогда
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.Неизвестно;
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет в ост." Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетВОстатке;
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.Риф+" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораРИФПлюс;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.РИФ" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораРИФ
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.Марс" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораМарс						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.Меркурий" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораМеркурий	
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.Атлант" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораАтлант																		
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.АТЛ" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораАТЛ												
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.АВН_70" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораАВН_70;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.ТОП_17" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораТОП_17;												
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.Галактика" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораГалактика;																		
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.РИФ+(безНДС)" Тогда 							
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораРИФПлюс_БезНДС;
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "нет д.МАРС(безНДС)" Тогда 							
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетДоговораМарсТоварыБезНДС;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "не ЕГАИС" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НеЕГАИС;
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "запрет по ЕГАИС" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретПоЕГАИС;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "запрет по ЕГАИС" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретПоЕГАИС;							
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "запрет на бонус" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаБонус;
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "запрет на реализацию" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретНаРеализацию;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "Петров V Петров" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ПетровПетров;						
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "Запрет СИГАРЕТЫ" Тогда 	
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ЗапретСигареты;	
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "Нет соглашения" Тогда
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетСоглашения;	
					ИначеЕсли ТЧСтрока.ПричинаОтказа = "Нет причины бонуса" Тогда
						МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.НетПричиныБонуса;							
					КонецЕсли;						
					МЗОтказы.Записать();		
						
				Исключение
					                                                    
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при записи ответа на заказ", ИнформацияОбОшибке(), Истина);
					
				КонецПопытки;	
				                           
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЛогОтветов.Закрыть();
	
	Попытка
		
		МЗОтветыНаЗаказы = РегистрыСведений.аян_ОтветыНаЗаказы.СоздатьМенеджерЗаписи();
		МЗОтветыНаЗаказы.ДатаОтвета         = ТекущаяДата();
		МЗОтветыНаЗаказы.Агент              = ТекАгент;
		МЗОтветыНаЗаказы.Invoice 			= Новый ХранилищеЗначения(ТЗИнвойс);
		МЗОтветыНаЗаказы.InvoiceProduct		= Новый ХранилищеЗначения(ТЗИнвойсПродукт);
		МЗОтветыНаЗаказы.Записать(Истина);		
	
	Исключение

		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
				
	КонецПопытки;						
	
	//Попытка
	//	
	//	НЗОтказы.Записать(Ложь);
	//	
	//Исключение
	//	
	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
	//	
	//КонецПопытки;	
	
	//Если ФайлВыгрузки.КоличествоСтрок() - 1 > 0 Тогда
	//	
	//	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
	//	ФайлВыгрузки.Записать(КаталогВыгрузки + "Invoice.txt", КодировкаТекста.ANSI);
	//	
	//	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-(Ответ на заказ) Выгрузка заказов произведена в " + КаталогВыгрузки + "Invoice.txt");
	//	
	//КонецЕсли;
	//
	//Если ФайлВыгрузкиЭТЧ.КоличествоСтрок() - 1 > 0 Тогда		
	//	
	//	ФайлВыгрузкиЭТЧ.ВставитьСтроку(1, Формат(ФайлВыгрузкиЭТЧ.КоличествоСтрок() - 1, "ЧГ="));
	//	ФайлВыгрузкиЭТЧ.Записать(КаталогВыгрузки + "InvoiceProduct.txt", КодировкаТекста.ANSI);		
	//	
	//	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-(Ответ на заказ) Выгрузка табличной части заказов произведена в " + КаталогВыгрузки + "InvoiceProduct.txt");
	//	
	//КонецЕсли;
	
	ДатаПоследнейУдачнойСинхронизации = ТекущаяДата();
	
КонецПроцедуры 


#КонецОбласти


#Область БОРТ


// Сумма борта агента по заданному виду цены

Функция Борт_СуммаБортаАгента(врАгент, врВидЦеныРасчета)
	
	врБортАгента = ПолучитьБортАгента(врАгент);
	
	Если врБортАгента = Справочники.Склады.ПустаяСсылка() Тогда
		Возврат 0;
	КонецЕсли;	
	
	врСуммаБорта = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",       врБортАгента);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены",     врВидЦеныРасчета);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, Склад = &Склад) КАК СвободныеОстаткиОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врСуммаБорта = врСуммаБорта + (Выборка.Остаток * Выборка.Цена);
	КонецЦикла;
	
	Возврат врСуммаБорта;
	
КонецФункции	


// Проверка, что товар отгружается на борт

Функция ЭтоТоварБорта(врНоменклатура)
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Товар", врНоменклатура);
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	аян_ТоварыБорт.Товар
	//               |ИЗ
	//               |	РегистрСведений.аян_ТоварыБорт КАК аян_ТоварыБорт
	//               |ГДЕ
	//               |	аян_ТоварыБорт.Товар = &Товар";
	//РЗ = Запрос.Выполнить();
	//Если Не РЗ.Пустой() Тогда
	//	Возврат Истина;
	//КонецЕсли;
	
	Для Каждого ТекСтрокаТовар Из Товары_Борт Цикл
		Если ТекСтрокаТовар = врНоменклатура Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаписатьОшибку1СвЛогФайл("БОРТ", "Это не товар БОРТА: " + СокрЛП(врНоменклатура));
	
	Возврат Ложь;
	
КонецФункции	


// Создание перемещение на борт агента

Процедура СоздатьПеремещениеНаБортАгента(врАгент, врТЗ, врКомментарий, врЭтоДубли = Ложь)
	
	Событие1С = "БОРТ! Создание перемещения товаров";
	
	врСклад_БортАгента = ПолучитьБортАгента(врАгент);
	врВидЦеныРасчета   = Справочники.ВидыЦен.НайтиПоНаименованию("Розничная");
	врЛимитБортаАгента   = 0;
	
	Если Не ЗначениеЗаполнено(врСклад_БортАгента) Тогда
		Если ИмяСервераМА = "Tomsk" Тогда
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Томск (борта агентов)",   Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));			
		ИначеЕсли ИмяСервераМА = "Kuzbass" Тогда	
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Кузбасс (борта агентов)", Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));
		ИначеЕсли ИмяСервераМА = "Region" Тогда	
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Тюмень (борта агентов)", Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));			
		Иначе
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неверное имя сервера = " + СокрЛП(ИмяСервераМА));
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(врСклад_БортАгента) Тогда
		ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Не найден склад борта агента!");
		Возврат;
	КонецЕсли;	
	
	Если ИмяСервераМА = "Tomsk" Тогда
		врЛимитБортаАгента   = 30000;
	КонецЕсли;	
	
	врТекущаяСуммаБортаАгента = 0;
	Попытка
		Борт_СуммаБортаАгента(врАгент, врВидЦеныРасчета); 
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Расчет суммы борта агента. Исключение!!!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	МассивСкладовОтгрузки = Новый Массив;
	Если врЭтоДубли Тогда
		МассивСкладовОтгрузки.Добавить(СкладАТАлкоголь);
	Иначе	
		МассивСкладовОтгрузки.Добавить(СкладТомскПиво);
	КонецЕсли;	
	
	Если ИмяСервераМА = "Region" Тогда
		МассивСкладовОтгрузки = Новый Массив;
		МассивСкладовОтгрузки.Добавить(Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина));		
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТЧ",     врТЗ);
	Запрос.УстановитьПараметр("Склады", МассивСкладовОтгрузки);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество
	               |ПОМЕСТИТЬ ВрТовары
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ВрТовары.Количество,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) КАК Резерв
	               |ИЗ
	               |	ВрТовары КАК ВрТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				&Период,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВрТовары.Номенклатура
	               |						ИЗ
	               |							ВрТовары КАК ВрТовары)
	               |					И Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	               |		ПО ВрТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Склад";
	
	ВыборкаСклады = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклады.Следующий() Цикл
	
		Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		Док.Дата                  = ТекущаяДата();
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Док.Ответственный         = ТекАгент;
		Док.Организация           = ПолучитьОрганизациюВЧерную(ТекАгент);
		Док.СкладОтправитель      = ВыборкаСклады.Склад;
		Док.СкладПолучатель       = врСклад_БортАгента;
		Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
		
		Если ИмяСервераМА = "Kuzbass" Тогда
		
		    Док.СпособДоставки        = Перечисления.СпособыДоставки.ДоКлиента;
		
			врДанныеАгента = ПолучитьДанныеАгента(врАгент);
		
			Док.ДополнительнаяИнформацияПоДоставке = врДанныеАгента.КомментарийДоставки;
			Док.Комментарий                        = СокрЛП(врКомментарий) + " " + врДанныеАгента.КомментарийДоставки;
		
			спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(врДанныеАгента.БизнесРегион.Наименование), Истина);
			Если спрДоставка.Наименование = "" Тогда
				спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
				спрДоставка.Наименование = СокрЛП(врДанныеАгента.БизнесРегион.Наименование);
				спрДоставка.Записать();
			КонецЕсли;		
		
			Док.ЗонаДоставки  = спрДоставка;
			Док.АдресДоставки = СокрЛП(врДанныеАгента.БизнесРегион.Наименование) + "; " + СокрЛП(врДанныеАгента.КомментарийДоставки);
			
		Иначе
			
			Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
			Док.Комментарий           = СокрЛП(врКомментарий);
			
		КонецЕсли;	
		
		ВыборкаТовары = ВыборкаСклады.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
					
			врОстаток = ВыборкаТовары.Остаток - ?(ВыборкаТовары.Резерв < 0, 0, ВыборкаТовары.Резерв);
			
			Если врОстаток > 0 Тогда
			
				КоличествоКЗаказу = ВыборкаТовары.Количество;
			
				Если ВыборкаТовары.Количество > врОстаток Тогда
					КоличествоКЗаказу = врОстаток;
				КонецЕсли;				
				
				// Проверка на превышении суммы лимита
				
				Если врЛимитБортаАгента > 0 Тогда
					
					врСуммаТекТовара = КоличествоКЗаказу * ЗагрузкаДокументов_ПолучитьЦенуНоменклатуры(ВыборкаТовары.Номенклатура, врВидЦеныРасчета); 
					
					Если (врТекущаяСуммаБортаАгента + врСуммаТекТовара) >= врЛимитБортаАгента Тогда
				
						Попытка
				
							МЗОтказы = РегистрыСведений.аян_СинхронизацияОтказы.СоздатьМенеджерЗаписи();
							МЗОтказы.Агент         = врАгент;
							МЗОтказы.ДатаОтказа    = ТекущаяДата();
							МЗОтказы.ВидДокумента  = Перечисления.аян_СинхронизацияВидыДокументов.ЗаказНаБорт;
							МЗОтказы.Клиент        = Справочники.Партнеры.ПустаяСсылка();
							МЗОтказы.Номенклатура  = ВыборкаТовары.Номенклатура;
							МЗОтказы.Количество    = ВыборкаТовары.Количество;
							МЗОтказы.Комментарий   = врКомментарий;
							МЗОтказы.ПричинаОтказа = Перечисления.аян_СинхронизацияПричиныОтказов.ПревышениеЛимита;							
							МЗОтказы.Записать();			
							
						Исключение
						
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Запись отказа. Исключение!!!", ИнформацияОбОшибке(), Истина);
						
						КонецПопытки;	
				
						Продолжить;
						
						врТекущаяСуммаБортаАгента = врТекущаяСуммаБортаАгента + врСуммаТекТовара;
					
					КонецЕсли;	
				
				КонецЕсли;	
				
				НовТовар = Док.Товары.Добавить();
				НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
				НовТовар.Количество		    = КоличествоКЗаказу;
				НовТовар.КоличествоУпаковок = КоличествоКЗаказу;				
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ЛогФайл.ЗаписатьСтроку("~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ записан и проведен " + Строка(Док.Ссылка));
		Исключение
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;	
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проведение документа. Исключение!", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьПеремещениеНаБортАгента_Old(врАгент, врТЗ, врКомментарий)
	
	Событие1С = "БОРТ! Создание перемещения товаров";
	
	врСклад_БортАгента = ПолучитьБортАгента(врАгент);
	Если Не ЗначениеЗаполнено(врСклад_БортАгента) Тогда
		Если ИмяСервераМА = "Tomsk" Тогда
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Томск (борта агентов)",   Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));			
		ИначеЕсли ИмяСервераМА = "Kuzbass" Тогда	
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Кузбасс (борта агентов)", Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));
		ИначеЕсли ИмяСервераМА = "Region" Тогда	
			врСклад_БортАгента = СоздатьБортАгента(врАгент, Справочники.Склады.НайтиПоНаименованию("Тюмень (борта агентов)", Истина, Справочники.Склады.НайтиПоНаименованию("Борта агентов")), Справочники.ВидыЦен.НайтиПоНаименованию("Кемерово"));			
		Иначе
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неверное имя сервера = " + СокрЛП(ИмяСервераМА));
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(врСклад_БортАгента) Тогда
		ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Не найден склад борта агента!");
		Возврат;
	КонецЕсли;	
	
	МассивСкладовОтгрузки = Новый Массив;
	МассивСкладовОтгрузки.Добавить(СкладТомскПиво);
	
	Если ИмяСервераМА = "Region" Тогда
		МассивСкладовОтгрузки = Новый Массив;
		МассивСкладовОтгрузки.Добавить(Справочники.Склады.НайтиПоНаименованию("Основной (Тюмень)", Истина));		
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТЧ",     врТЗ);
	Запрос.УстановитьПараметр("Склады", МассивСкладовОтгрузки);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО) КАК Количество
	               |ПОМЕСТИТЬ ВрТовары
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	СвободныеОстаткиОстатки.Номенклатура,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               |	ВрТовары.Количество
	               |ИЗ
	               |	ВрТовары КАК ВрТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				&Период,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВрТовары.Номенклатура
	               |						ИЗ
	               |							ВрТовары КАК ВрТовары)
	               |					И Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	               |		ПО ВрТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Склад";
	
	ВыборкаСклады = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклады.Следующий() Цикл
	
		Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		Док.Дата                  = ТекущаяДата();
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Док.Ответственный         = ТекАгент;
		Док.Организация           = ПолучитьОрганизациюВЧерную(ТекАгент);
		Док.СкладОтправитель      = ВыборкаСклады.Склад;
		Док.СкладПолучатель       = врСклад_БортАгента;
		Док.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
		
		Если ИмяСервераМА = "Kuzbass" Тогда
		
		    Док.СпособДоставки        = Перечисления.СпособыДоставки.ДоКлиента;
		
			врДанныеАгента = ПолучитьДанныеАгента(врАгент);
		
			Док.ДополнительнаяИнформацияПоДоставке = врДанныеАгента.КомментарийДоставки;
			Док.Комментарий                        = СокрЛП(врКомментарий) + " " + врДанныеАгента.КомментарийДоставки;
		
			спрДоставка = Справочники.ЗоныДоставки.НайтиПоНаименованию(СокрЛП(врДанныеАгента.БизнесРегион.Наименование), Истина);
			Если спрДоставка.Наименование = "" Тогда
				спрДоставка = Справочники.ЗоныДоставки.СоздатьЭлемент();
				спрДоставка.Наименование = СокрЛП(врДанныеАгента.БизнесРегион.Наименование);
				спрДоставка.Записать();
			КонецЕсли;		
		
			Док.ЗонаДоставки  = спрДоставка;
			Док.АдресДоставки = СокрЛП(врДанныеАгента.БизнесРегион.Наименование) + "; " + СокрЛП(врДанныеАгента.КомментарийДоставки);
			
		Иначе
			
			Док.СпособДоставки        = Перечисления.СпособыДоставки.Самовывоз;
			Док.Комментарий           = СокрЛП(врКомментарий);
			
		КонецЕсли;	
		
		ВыборкаТовары = ВыборкаСклады.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Если ВыборкаТовары.Остаток > 0 Тогда
			
				КоличествоКЗаказу = ВыборкаТовары.Количество;
			
				Если ВыборкаТовары.Количество > ВыборкаТовары.Остаток Тогда
					КоличествоКЗаказу = ВыборкаТовары.Остаток;
				КонецЕсли;				
				
				НовТовар = Док.Товары.Добавить();
				НовТовар.Номенклатура       = ВыборкаТовары.Номенклатура;
				НовТовар.Количество		    = КоличествоКЗаказу;
				НовТовар.КоличествоУпаковок = КоличествоКЗаказу;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ЛогФайл.ЗаписатьСтроку("~Документ ПЕРЕМЕЩЕНИЕ ТОВАРОВ записан и проведен " + Строка(Док.Ссылка));
		Исключение
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;	
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проведение документа. Исключение!", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры	


#КонецОбласти


#Область ВОЗВРАТЫ


Функция ЭтоДубльВозврата(врПартнер, врСоглашение, врСумма, врМассивИсключений)
	
	Если врСумма = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",     НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонПериода",     КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Партнер",        врПартнер);
	Запрос.УстановитьПараметр("Соглашение",     врСоглашение);
	Запрос.УстановитьПараметр("СуммаДокумента", врСумма);
	Запрос.УстановитьПараметр("МассивИскл",     врМассивИсключений);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВозвратТоваровОтКлиента.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	               |	И ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И ВозвратТоваровОтКлиента.Партнер = &Партнер
	               |	И ВозвратТоваровОтКлиента.СуммаДокумента = &СуммаДокумента
	               |	И ВозвратТоваровОтКлиента.Соглашение = &Соглашение
	               |	И НЕ ВозвратТоваровОтКлиента.Ссылка В (&МассивИскл)";
	РЗ = Запрос.Выполнить();
	Если РЗ.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	


// Экспорт виртуальной накладной для возврата

Функция ЭкспортНакладныхДляВозврата(ФайлВыгрузки)
	
	ЗамерСтарт = ТекущаяДата();
	
	ЧислоСтрок = 0;
	
	МЗВозвратныеНакладные = РегистрыСведений.аян_ВозвратныеНакладные.СоздатьМенеджерЗаписи();
	МЗВозвратныеНакладные.Агент = ТекАгент;
	МЗВозвратныеНакладные.Прочитать(); 
	Если МЗВозвратныеНакладные.Выбран() Тогда
		
		Если НачалоДня(МЗВозвратныеНакладные.ДатаВыгрузки) >= НачалоДня(ТекущаяДата()) Тогда
		
			МассивСтрокТоваров = МЗВозвратныеНакладные.ХранилищеНакладных.Получить();
			
			врВГраница = МассивСтрокТоваров.ВГраница();
		
			Для Сч = 0 По врВГраница Цикл
			
				ТекСтрока = МассивСтрокТоваров[Сч];
				
				ФайлВыгрузки.ДобавитьСтроку(ТекСтрока);
			
				ЧислоСтрок = ЧислоСтрок + 1;
		
			КонецЦикла;
			
			ЛогФайл.ЗаписатьСтроку("" +ТекущаяДата() + " <-Возвратные накладные (документы) загружены из кэша (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
		
			Возврат ЧислоСтрок;
			
		КонецЕсли;	
			
	КонецЕсли;	
		
	МассивСтрокТоваров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Агент", ТекАгент);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	аян_СинхронизацияТТ.ТорговаяТочка,
	               |	аян_СинхронизацияТТ.ТорговаяТочка.Код
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |ГДЕ
	               |	аян_СинхронизацияТТ.Агент = &Агент";
	
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец КАК ТорговаяТочка
	//               |ИЗ
	//               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
	//               |ГДЕ
	//               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
	//               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель = &Агент
	//               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.Клиент
	//               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец.ОбслуживаетсяТорговымиПредставителями";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
				   
	
		ИдентификаторНакладной = СокрЛП(ИдКПК) + "_" + "INV_RETURN" + "_" + Формат(ТекущаяДата(), "ДФ=MMyyyy") + "_" + СокрЛП(Выборка.ТорговаяТочкаКод);
		ДатаДока    		   = Формат(НачалоМесяца(ТекущаяДата()), "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""");
		ЦветНакладной          = "238";
	
		СтрокаТовара = "" + 
			СокрЛП(ИдКПК)															+ Символ(9) +  // DeviceID
			""																		+ Символ(9) +  // InvoiceID
			СокрЛП(ИдентификаторНакладной)											+ Символ(9) +  // InvoiceRefID
			"2"																		+ Символ(9) +  // InvoiceTypeRefID   (2 - накладная) 
			""																		+ Символ(9) +  // ParentInvoiceID 
			""																		+ Символ(9) +  // ParentInvoiceRefID (номер заказа)
			СокрЛП(ТекАгент.УникальныйИдентификатор())								+ Символ(9) +  // AgentRefID
			СокрЛП(ПолучитьГУИДПартнера(Выборка.ТорговаяТочка, ТекАгент))           + Символ(9) +  // ShopRefID
			""																		+ Символ(9) +  // VisitID
			ДатаДока																+ Символ(9) +  // InvoiceDateTime
			СокрЛП("ВОЗВРАТ")														+ Символ(9) +  // InvoiceNo
			""																		+ Символ(9) +  // InvoiceAmount    
			""																		+ Символ(9) +  // AmountPaid
			""																		+ Символ(9) +  // DeliveryFromDateTime
			""																		+ Символ(9) +  // DeliveryThruDateTime
			""																		+ Символ(9) +  // IsConfidential
			"ДЛЯ ВОЗВРАТА !!!"											   			+ Символ(9) +  // Note
			СокрЛП(ОсновнаяФирма.УникальныйИдентификатор())							+ Символ(9) +  // SellerRefID
			""																		+ Символ(9) +  // PriceTypeRefID
			""																		+ Символ(9) +  // InvoiceTypeCode
			""																		+ Символ(9) +  // InvoiceRequired
			""                               										+ Символ(9) +  // ShopID
			""														    			+ Символ(9) +  // DaysOverdue
			""	 																	+ Символ(9) +  // OverdueDebtAmount
			ЦветНакладной; 																		// Color
			
		ФайлВыгрузки.ДобавитьСтроку(СтрокаТовара);
		
		МассивСтрокТоваров.Добавить(СтрокаТовара);
			
		ЧислоСтрок = ЧислоСтрок + 1;
						
	КонецЦикла;	
	
	ЛогФайл.ЗаписатьСтроку("" +ТекущаяДата() + " <-Возвратные накладные (документы) сформированы (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
		
	МЗВозвратныеНакладные = РегистрыСведений.аян_ВозвратныеНакладные.СоздатьМенеджерЗаписи();
	МЗВозвратныеНакладные.Агент              = ТекАгент;
	МЗВозвратныеНакладные.ХранилищеНакладных = Новый ХранилищеЗначения(МассивСтрокТоваров);
	МЗВозвратныеНакладные.ДатаВыгрузки       = НачалоДня(ТекущаяДата()) - 1;
	МЗВозвратныеНакладные.Записать(Истина);
		
	Возврат ЧислоСтрок;	
	
КонецФункции	


// Экспорт товаров для виртуальной накладной для возврата

Функция ЭкспортТоваровНакладныхДляВозврата(ФайлВыгрузки)
	
	ЗамерСтарт = ТекущаяДата();
	
	КоличествоСтрок = 0;
	
	ЧислоСтрок = 0;
	
	МЗВозвратныеНакладные = РегистрыСведений.аян_ВозвратныеНакладные.СоздатьМенеджерЗаписи();
	МЗВозвратныеНакладные.Агент = ТекАгент;
	МЗВозвратныеНакладные.Прочитать(); 
	Если МЗВозвратныеНакладные.Выбран() Тогда
		
		Если НачалоДня(МЗВозвратныеНакладные.ДатаВыгрузки) >= НачалоДня(ТекущаяДата()) Тогда
		
			МассивСтрокТоваров = МЗВозвратныеНакладные.ХранилищеТЧ.Получить();
			
			Если МассивСтрокТоваров <> Неопределено Тогда
				
				Возврат КоличествоСтрок;
				
				врВГраница = МассивСтрокТоваров.ВГраница();
												
				Для Сч = 0 По врВГраница Цикл
			
					ТекСтрока = МассивСтрокТоваров[Сч];
				
					ФайлВыгрузки.ДобавитьСтроку(ТекСтрока);
				
					ЧислоСтрок = ЧислоСтрок + 1;
		
				КонецЦикла;
				
				ЛогФайл.ЗаписатьСтроку("" +ТекущаяДата() + " <-Возвратные накладные (товары) загружены из кэша (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
		
				Возврат ЧислоСтрок;
								
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЕсли;	
		
	МассивСтрокТоваров = Новый Массив;	
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("Агент",      ТекАгент);
	
//	Если ПользовательДобавленВРазделениеТочек(ТекАгент) Тогда

	Если ИмяСервераМА = "Sever" Тогда
		ЗапросТовары.УстановитьПараметр("НачПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -6)));
	Иначе	
 		ЗапросТовары.УстановитьПараметр("НачПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3)));
    КонецЕсли;
		
	ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ВложенныйЗапрос.ТорговаяТочка КАК ТорговаяТочка,
	                     |	ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	                     |	ВложенныйЗапрос.Номенклатура,
	                     |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                     |	ВложенныйЗапрос.Количество,
	                     |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 1) КАК Цена
	                     |ИЗ
	                     |	(ВЫБРАТЬ
	                     |		аян_СинхронизацияТТ.ТорговаяТочка КАК ТорговаяТочка,
	                     |		ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	                     |		ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                     |		ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот, 0) КАК Количество,
	                     |		аян_СинхронизацияТТ.ВидЦены КАК ВидЦены
	                     |	ИЗ
	                     |		РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачПериода, , , ) КАК ВыручкаИСебестоимостьПродажОбороты
	                     |			ПО аян_СинхронизацияТТ.ТорговаяТочка = ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер
	                     |	ГДЕ
	                     |		аян_СинхронизацияТТ.Агент = &Агент
	                     |	
	                     |	ОБЪЕДИНИТЬ ВСЕ
	                     |	
	                     |	ВЫБРАТЬ
	                     |		аян_СинхронизацияТТ.ТорговаяТочка,
	                     |		ПереданнаяВозвратнаяТараОбороты.Номенклатура,
	                     |		ПереданнаяВозвратнаяТараОбороты.Номенклатура.ЕдиницаИзмерения,
	                     |		ЕСТЬNULL(ПереданнаяВозвратнаяТараОбороты.КоличествоОборот, 0),
	                     |		аян_СинхронизацияТТ.ВидЦены
	                     |	ИЗ
	                     |		РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ,
	                     |		РегистрНакопления.ПереданнаяВозвратнаяТара.Обороты(&НачПериода, , , ) КАК ПереданнаяВозвратнаяТараОбороты
	                     |	ГДЕ
	                     |		аян_СинхронизацияТТ.Агент = &Агент) КАК ВложенныйЗапрос
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	                     |		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                     |			И ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	                     |ИТОГИ
	                     |	МАКСИМУМ(ВидЦены)
	                     |ПО
	                     |	ТорговаяТочка";
	ВыборкаТочки = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаТочки.Следующий() Цикл
		
		ИдентификаторНакладной = СокрЛП(ИдКПК) + "_" + "INV_RETURN" + "_" + Формат(ТекущаяДата(), "ДФ=MMyyyy") + "_" + СокрЛП(ВыборкаТочки.ТорговаяТочка.Код);
		
		ВыборкаНоменклатура = ВыборкаТочки.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;	
			
			КоличествоТовара = ВыборкаНоменклатура.Количество;
			Если КоличествоТовара < 0 Тогда
				КоличествоТовара = 100;
			//	ЗаписатьОшибку1СвЛогФайл("Отрицательное количество в возврате", СокрЛП(ВыборкаНоменклатура.Номенклатура) + " = " + СокрЛП(ВыборкаНоменклатура.Количество));
			КонецЕсли;	
		
		    врСтавкаНДС = 0.2;
			
			СтрокаТовара = "" +
			СокрЛП(ИдКПК)															+ Символ(9) +            			// DeviceID
			""																		+ Символ(9) +    				    // InvoiceProductID
			""																		+ Символ(9) +            			// InvoiceID
			СокрЛП(ИдентификаторНакладной)											+ Символ(9) +            			// InvoiceRefID
			СокрЛП(ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор()) 		+ Символ(9) +            			// ProductRefID
			Формат(?(ВыборкаНоменклатура.Цена = 0, 1, ВыборкаНоменклатура.Цена), "ЧРД=.; ЧГ=")		+ Символ(9) +		// Price
			Формат(КоличествоТовара, "ЧРД=.; ЧГ=")									+ Символ(9) +            			// Volume
		//	Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ=") + Символ(9) +	// VATRate
			Формат(врСтавкаНДС, "ЧРД=.; ЧГ=") 										+ Символ(9) +						// VATRate
			""																		+ Символ(9) +            			// DiscountAmount
			""																		+ Символ(9) +            			// DiscountRate
			СокрЛП(ВыборкаНоменклатура.ЕдиницаИзмерения.УникальныйИдентификатор()) 	+ Символ(9) +						// MeasureUnitRefID
			СокрЛП(ВыборкаТочки.ВидЦены.УникальныйИдентификатор())					+ Символ(9) +            			// PriceTypeRefID
			СокрЛП(ОсновнойСклад.УникальныйИдентификатор())							+ Символ(9) +            			// StockRefID
			"false";																									// IsManualPrice
			
			ФайлВыгрузки.ДобавитьСтроку(СтрокаТовара);
		
			МассивСтрокТоваров.Добавить(СтрокаТовара);			
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
	ЛогФайл.ЗаписатьСтроку("" +ТекущаяДата() + " <-Возвратные накладные (товары) сформированы (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
	МЗВозвратныеНакладные.Агент              = ТекАгент;
	МЗВозвратныеНакладные.ХранилищеТЧ        = Новый ХранилищеЗначения(МассивСтрокТоваров);
	МЗВозвратныеНакладные.ДатаВыгрузки       = ТекущаяДата();
	МЗВозвратныеНакладные.Записать(Истина);	
	
	Возврат КоличествоСтрок;
			
КонецФункции


#КонецОбласти


#Область ОПЛАТЫ


Функция Оплаты_НакладнаяВОтсрочку(врНакладная)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованиеПлатежа", врНакладная);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа
	               |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидОплатыПКО.ВКассу)";
	РЗ = Запрос.Выполнить();
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


// Поиск НЕ проведенного ПКО для накладной

Функция Оплаты_НайтиПКО_Накладной(врНакладная)
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОснованиеПлатежа", врНакладная);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		               |ИЗ
		               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		               |ГДЕ
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа
		               |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		               |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.МоментВремени УБЫВ";
		РЗ = Запрос.Выполнить();
		Если Не РЗ.Пустой() Тогда
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;	
		КонецЕсли;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Поиск накладной для ПКО", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	
	Возврат Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();
	
КонецФункции	


// Касса агента для ПКО

Функция ПолучитьОсновнуюКассуАгента(Организация, Агент)
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Агент)Тогда
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",     Организация);
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Агент.Наименование) + "%");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Кассы.Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.Владелец = &Владелец
	               |	И НЕ Кассы.ПометкаУдаления
	               |	И Кассы.Наименование ПОДОБНО &Наименование";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		врОргНаименование = " (" + СокрЛП(Организация.Наименование) + ")";
		Если Организация = оргМирНапитковТомск Тогда
			врОргНаименование = " ООО";
		КонецЕсли;	
		
		КассаАгента = Справочники.Кассы.СоздатьЭлемент();
		КассаАгента.Владелец                           = Организация;
		КассаАгента.Наименование                       = СокрЛП(Агент.Наименование) + врОргНаименование;
		КассаАгента.ВалютаДенежныхСредств              = Константы.ВалютаРегламентированногоУчета.Получить();
		КассаАгента.ЭтоКассаОбособленногоПодразделения = Истина;
		КассаАгента.КассоваяКнига                      = Справочники.КассовыеКниги.НайтиПоНаименованию("Агенты", Истина);
		
		НовСтрока = КассаАгента.ПолучателиПлатежейПриПеремещенииДС.Добавить();
		НовСтрока.ПолучательПлатежа = ПолучитьОсновнуюКассуОрганизации(Организация);
		
		Попытка 
			КассаАгента.Записать();
			//ЗаписатьОшибку1СвЛогФайл("Импорт оплат", "Создана касса Агента: " + Строка(КассаАгента.Наименование) + " для организации """ + Строка(Организация) + """");
			Возврат КассаАгента.Ссылка;
		Исключение	
			ЗаписатьОшибку1СвЛогФайл("Импорт оплат", "Ошибка создания кассы Агента " + "(Организация = " + СокрЛП(Организация) + ")", ИнформацияОбОшибке(), Истина);
			Возврат Справочники.Кассы.ПустаяСсылка();
		КонецПопытки;	
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;                                                              
	
КонецФункции	


// Основная касса для ПКО

Функция ПолучитьОсновнуюКассуОрганизации(Организация)
	
	Событие1С = "Определение основной кассы организации """ + СокрЛП(Организация) + """";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Организация не заполнена!");
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;	
	
	врКассаМирНапитков = Справочники.Кассы.ПолучитьСсылку(Новый УникальныйИдентификатор("11b8b8e5-f8ce-11e5-80da-00155d000c03"));
	
	Если Не ЗначениеЗаполнено(врКассаМирНапитков) Тогда
		ЗаписатьОшибку1СвЛогФайл("КАССЫ", "Касса МИР НАПИТКИ (основная) - не найдено !!!");
	КонецЕсли;	
	
	Если (Организация = оргМирНапитковТомск) И (ЗначениеЗаполнено(врКассаМирНапитков)) Тогда
		Возврат врКассаМирНапитков;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",     Организация);
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Организация.Наименование) + " (RUB)");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Кассы.Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.Владелец = &Владелец
	               |	И НЕ Кассы.ПометкаУдаления
	               |	И Кассы.Наименование = &Наименование";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Касса не найдена!");
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	
	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Касса не найдена!");
	
	Возврат Справочники.Кассы.ПустаяСсылка();
	
КонецФункции	


// Payment.txt


Функция ПКО_ТекстНДС(врРеализация)
	
	Попытка
	
		врСуммаНДС_10 = 0;
		врСуммаНДС_20 = 0;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", врРеализация);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РеализацияТоваровУслугТовары.СтавкаНДС,
		               |	РеализацияТоваровУслугТовары.СуммаНДС
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				врСуммаНДС_20 = врСуммаНДС_20 + Выборка.СуммаНДС;
			ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда	
				врСуммаНДС_10 = врСуммаНДС_10 + Выборка.СуммаНДС;
			ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда		
			Иначе
				Возврат "";
			КонецЕсли;	
		КонецЦикла;	
	
		врТекстНДС_20 = ?(врСуммаНДС_20 > 0, "НДС (20%) " + Формат(врСуммаНДС_20, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " руб.", "");  			
		врТекстНДС_10 = ?(врСуммаНДС_10 > 0, "НДС (10%) " + Формат(врСуммаНДС_10, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " руб.", "");  			
					
		Возврат врТекстНДС_20 + ?(ПустаяСтрока(врТекстНДС_10), "", ", ") + врТекстНДС_10;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПКО_ТекстНДС()", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат "";
	
КонецФункции	


Процедура ЗагрузитьПКО()
			
	Событие1С = "Импорт оплат";
	
	Файл = Новый Файл(КаталогЗагрузки + "\Payment.txt");
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(КаталогЗагрузки + "\Payment.txt", КодировкаТекста.ANSI);	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Обрабатываем " + КаталогЗагрузки + "Payment.txt");
	
	КЧ2		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
	КЧ3		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
	КЧ4		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
	КС20 	= ПолучитьОписаниеТиповСтроки(20);
	КС30 	= ПолучитьОписаниеТиповСтроки(30);
	КС36 	= ПолучитьОписаниеТиповСтроки(36);
	КС40 	= ПолучитьОписаниеТиповСтроки(40);
	КС100 	= ПолучитьОписаниеТиповСтроки(100);
	
	ТЗ = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТЗ = Новый ОписаниеТипов(Массив);
	
	ПКО = Новый ТаблицаЗначений;
	
	ПКО.Колонки.Добавить("DeviceID",				КС36);
	ПКО.Колонки.Добавить("PaymentID",				КС36);
	ПКО.Колонки.Добавить("PaymentRefID",			КС36);
	ПКО.Колонки.Добавить("TransTypeRefID",			КС36);
	ПКО.Колонки.Добавить("PaymentTypeRefID",		КЧ2);
	ПКО.Колонки.Добавить("InvoiceID",				КС36);
	ПКО.Колонки.Добавить("InvoiceRefID",			КС36);
	ПКО.Колонки.Добавить("AgentRefID",				КС36);
	ПКО.Колонки.Добавить("ShopRefID",				КС40); 
	ПКО.Колонки.Добавить("VisitID",					КС36); 
	ПКО.Колонки.Добавить("PaymentDateTime",			КС20); 
	ПКО.Колонки.Добавить("PaymentAmount",			КЧ2); 
	ПКО.Колонки.Добавить("Note",					КС20); 
	ПКО.Колонки.Добавить("IsDeleted",				КС100); 
	ПКО.Колонки.Добавить("PromiseExpDate",			КС20); 
	
	КоличествоЗаписей = Число(файл.ПолучитьСтроку(1));                     
	ВыгружатьТЧ = 0;
	
	Для Cч = 3 По КоличествоЗаписей + 2 Цикл
		
		СписокАтрибутов = Split(файл.ПолучитьСтроку(Cч), Символы.Таб);
		
		Если СписокАтрибутов.Количество() < 15 Тогда
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Нарушена структура файла Payment.txt!");
			ФайлОшибок.ДобавитьСтроку("Нарушена структура файла Payment.txt!");
			error = 1;
			Возврат;
			
		Иначе
			
			НоваяСтрока = ПКО.Добавить();
			
			НоваяСтрока.DeviceID 		 = СписокАтрибутов[0].Значение; 
			НоваяСтрока.PaymentID		 = СписокАтрибутов[1].Значение;
			НоваяСтрока.PaymentRefID 	 = СписокАтрибутов[2].Значение;
			НоваяСтрока.TransTypeRefID 	 = СписокАтрибутов[3].Значение;
			НоваяСтрока.PaymentTypeRefID = СписокАтрибутов[4].Значение; 
			НоваяСтрока.InvoiceID		 = СписокАтрибутов[5].Значение;
			НоваяСтрока.InvoiceRefID 	 = СписокАтрибутов[6].Значение;
			НоваяСтрока.AgentRefID 		 = СписокАтрибутов[7].Значение;
			НоваяСтрока.ShopRefID 		 = СписокАтрибутов[8].Значение;
			НоваяСтрока.VisitID			 = СписокАтрибутов[9].Значение;
			НоваяСтрока.PaymentDateTime	 = СписокАтрибутов[10].Значение;
			НоваяСтрока.PaymentAmount	 = СписокАтрибутов[11].Значение;
			НоваяСтрока.Note			 = СписокАтрибутов[12].Значение;
			НоваяСтрока.IsDeleted		 = СписокАтрибутов[13].Значение;
			НоваяСтрока.PromiseExpDate	 = СписокАтрибутов[14].Значение;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	файлВыгрузки = Новый ТекстовыйДокумент;	
	числоСтрок   = 0; 
	числоСтрокТЧ = 0; 
	
	Агенты 		 = Справочники.Пользователи;	
	Контрагенты  = Справочники.Партнеры;
	Договоры 	 = Справочники.ДоговорыКонтрагентов;
	Единицы		 = Справочники.ЕдиницыИзмерения;
	Номенклатуры = Справочники.Номенклатура;
	ТипыЦен 	 = Справочники.ВидыЦен;	
	
	Для Каждого СтрокаТаблицыПКО Из ПКО Цикл
		
		врЗамерСтарт = ТекущаяДата();
		
		Если (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 1) ИЛИ (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2) Тогда
			
			Попытка
				Если ДокументУжеЗагруженВБазу(СтрокаТаблицыПКО.PaymentID) Тогда
					Продолжить;
				КонецЕсли;
			Исключение
				ЗаписатьОшибку1СвЛогФайл("Проверка на дубли (ОПЛАТЫ)", "Исключение", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
						
			// Агент
			
			Агент = ТекАгент;
			
			// Партнер
			
			Попытка 
				
				Партнер = ПолучитьПартнераПоГУИД(СокрЛП(СтрокаТаблицыПКО.ShopRefID));
				
				Если Партнер = Неопределено Тогда
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыПКО.ShopRefID) + "'");
					ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыПКО.ShopRefID + "'");
					error = 1; 
					Возврат;
				КонецЕсли;	
				
			Исключение	
				
				ЗаписатьОшибку1СвЛогФайл("ВАЖНО!!!!!!", "ОШИБКА ОПРЕДЕЛЕНИЯ ПАРТНЕРА!!!!");
			
				GUID = СоздатьУникальныйИдентификатор(СтрокаТаблицыПКО.ShopRefID);
				Партнер = Контрагенты.ПолучитьСсылку(GUID);
				Если Партнер.ПолучитьОбъект() = Неопределено Тогда 
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Неопознанный код партнера! '" + Строка(СтрокаТаблицыПКО.ShopRefID) + "'");
					ФайлОшибок.ДобавитьСтроку("Неопознанный код партнера! '" + СтрокаТаблицыПКО.ShopRefID + "'");
					error = 1; 
					Возврат;
				КонецЕсли;
				
			КонецПопытки;	
			
			врЗамер_1 = ТекущаяДата() - врЗамерСтарт;
			
			ИнфСообщение_ОписаниеОшибки = "Неизвестная причина";
			
			// Проверка, что агент указал НЕ ВОЗВРАТНУЮ НАКЛАДНУЮ
			
			Попытка
				Если СтрЧислоВхождений(СтрокаТаблицыПКО.PaymentID, "INV_RETURN") > 0 Тогда
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "ВОЗВРАТНАЯ НАКЛАДНАЯ """ + Строка(СтрокаТаблицыПКО.InvoiceRefID) + """. Клиент: " + Строка(Партнер) + ". Сумма ПКО = " + Строка(СтрокаТаблицыПКО.PaymentAmount));					
					Продолжить;
				КонецЕсли;
			Исключение
				ЗаписатьОшибку1СвЛогФайл("Проверка на возвратную накладную (ОПЛАТЫ)", "Исключение", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
						
			// Накладная
			
			НомерНакладной = "";
			
			Заказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			Если НЕ ПустаяСтрока(СтрокаТаблицыПКО.InvoiceRefID) Тогда				
				GUID = СоздатьУникальныйИдентификатор(СтрокаТаблицыПКО.InvoiceRefID);					
				ДокРеалТиУ = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(GUID);
				Если ДокРеалТиУ.ПолучитьОбъект() <> Неопределено Тогда
					Заказ = ДокРеалТиУ;		
					НомерНакладной = Строка(Заказ.Номер);
				Иначе
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найдена накладная с InvoiceRefID = """ + Строка(СтрокаТаблицыПКО.InvoiceRefID) + """. Клиент: " + Строка(Партнер) + ". Сумма ПКО = " + Строка(СтрокаТаблицыПКО.PaymentAmount));
					ИнфСообщение_ОписаниеОшибки = "Не найдена накладная";
				КонецЕсли;
			Иначе
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Пустой InvoiceRefID. Клиент: " + Строка(Партнер) + ". Сумма ПКО = " + Строка(СтрокаТаблицыПКО.PaymentAmount));
				ИнфСообщение_ОписаниеОшибки = "Пустой InvoiceRefID";
			КонецЕсли;				
			
			//СуществующийПКО = Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();
			//Попытка
			//	СуществующийПКО = Оплаты_НайтиПКО_Накладной(ДокРеалТиУ);
			//	Если ЗначениеЗаполнено(СуществующийПКО) Тогда
			//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Найдено ПКО: " + Строка(СуществующийПКО));
			//	КонецЕсли;	
			//Исключение
			//КонецПопытки;	
			
			// Организация (определяется из накладной)
			Организация = Справочники.Организации.ПустаяСсылка();
			Если ЗначениеЗаполнено(Заказ) Тогда
				Организация = Заказ.Организация;
			КонецЕсли;
			
		//	НачатьТранзакцию();
				
			ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();			
			
			// Контрагент
			Если ЗначениеЗаполнено(Заказ) Тогда
				Контрагент = Заказ.Контрагент;
			Иначе	
				Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
			КонецЕсли;	
			
			врЗамер_2 = ТекущаяДата() - врЗамерСтарт;
			
			// ПЕТРОВ
			
			Попытка
				Если ИмяСервераМА = "Tomsk" Тогда
					Если Заказ.Партнер.ПринадлежитЭлементу(Клиенты_грПетров) Тогда
						врОсновнойКлиент = Петров_ПолучитьОсновнуюТочкуПетрова(Заказ.Партнер);
						Если ЗначениеЗаполнено(врОсновнойКлиент) Тогда
							Партнер    = Заказ.Партнер;
							Контрагент = Заказ.Контрагент;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				//Если ЭтоРеализацияЧерезФлажокПетров(Заказ) Тогда
				//	Партнер = Заказ.Партнер;					
				//	//ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЭТО ПЕТРОВ = " + Строка(Партнер) + ". Сумма ПКО = " + Строка(СтрокаТаблицыПКО.PaymentAmount));
				//	//Продолжить;
				//КонецЕсли;
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПЕТРОВ", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			врЗамер_3 = ТекущаяДата() - врЗамерСтарт;
			
			// Дата ПКО
			ДатаДок = СтрокаТаблицыПКО.PaymentDateTime;
			Если Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2 Тогда
				ДатаДок = СтрокаТаблицыПКО.PromiseExpDate;
			КонецЕсли;	
			ДатаДок = СтрЗаменить(ДатаДок, "-", "");
			ДатаДок = СтрЗаменить(ДатаДок, ":", "");
			ДатаДок = СтрЗаменить(ДатаДок, " ", "");
			
			ПКО.Дата                  = ?(ЗначениеЗаполнено(ДатаДок), Дата(ДатаДок), ТекущаяДата());
			
			Если Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2 Тогда
				
				Если (ИмяСервераМА = "Kuzbass") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Sever") ИЛИ (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Region") Тогда
					
					ПКО.Дата = ДатаДоставкиПоМатрицеМаршрута(Партнер) - ДеньВСекундах;
											
				КонецЕсли;					
				
			КонецЕсли;
			
			ПКО.Организация           = Организация;
			ПКО.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
			ПКО.Контрагент            = Контрагент;
			ПКО.СуммаДокумента        = СтрокаТаблицыПКО.PaymentAmount;
			
			ПКО.РасшифровкаПлатежа.Очистить();
			
			НовРП = ПКО.РасшифровкаПлатежа.Добавить();
			НовРП.Партнер                       = Партнер;
			НовРП.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
			НовРП.Сумма                         = ПКО.СуммаДокумента;
			
			Если ЗначениеЗаполнено(Заказ) Тогда				
				ПКО.РасшифровкаПлатежа[0].ОснованиеПлатежа = Заказ;
				ПКО.РасшифровкаПлатежа[0].Заказ            = Заказ;
				ПКО.Основание                              = СокрЛП(Заказ);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ПКО.Комментарий = "Важно!!! При загрузке не найдена накладная для ПКО!"
			КонецЕсли;	
			
			врЗамер_4 = ТекущаяДата() - врЗамерСтарт;
			
			МассивДокументов = ПКО.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
			МассивДокументов.Добавить(ПКО.ДокументОснование);
			
			// Главный бухгалтер
			Если ЗначениеЗаполнено(Организация) Тогда
				ОтветЛица = Справочники.ОтветственныеЛицаОрганизаций.алкСрезПоследних(ПКО.Дата, Новый Структура("Владелец, ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер), Истина);
				Попытка
					Если ОтветЛица.Количество() > 0 Тогда
						ПКО.ГлавныйБухгалтер = ОтветЛица[0].Ссылка;
					КонецЕсли;	
				Исключение
				КонецПопытки;	
			КонецЕсли;	
			
			ПКО.ПринятоОт        = СокрЛП(Контрагент.Наименование);
			ПКО.Валюта           = Константы.ВалютаРегламентированногоУчета.Получить();
			
			Если (ПКО.Организация = оргАТ_Логистик) ИЛИ (ПКО.Организация = оргГалактика) Тогда
				Попытка
					Если ПКО.СуммаДокумента = Заказ.СуммаДокумента Тогда
						врТекстНДС = ПКО_ТекстНДС(Заказ);
						Если ЗначениеЗаполнено(врТекстНДС) Тогда
							ПКО.ВТомЧислеНДС = врТекстНДС;
						Иначе	
							ПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента, ПКО.Валюта, МассивДокументов, Истина, Истина);	
						КонецЕсли;	
					Иначе
						ПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента, ПКО.Валюта, МассивДокументов, Истина, Истина);	
					КонецЕсли;					
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Текст НДС", ИнформацияОбОшибке(), Истина);
					ПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента, ПКО.Валюта, МассивДокументов, Истина, Истина);
				КонецПопытки;	
			Иначе
				ПКО.ВТомЧислеНДС = "";
			КонецЕсли;	
			
			// Кассир
			Если (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 1) Тогда
				ПКО.Кассир = Агент;
			ИначеЕсли (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2) Тогда	
				Если ЗначениеЗаполнено(Организация) Тогда
					ОтветЛица = Справочники.ОтветственныеЛицаОрганизаций.алкСрезПоследних(ПКО.Дата, Новый Структура("Владелец, ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизаций.Кассир), Истина);
					Попытка
						Если ОтветЛица.Количество() > 0 Тогда
							ПКО.Кассир = ОтветЛица[0].Ссылка;
						КонецЕсли;	
					Исключение
					КонецПопытки;	
				КонецЕсли;					
			КонецЕсли;	
			
			врЗамер_5 = ТекущаяДата() - врЗамерСтарт;
			
			// ВидОплатыПКО 
			Если (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 1) Тогда
				ПКО.ВидОплаты = Перечисления.ВидОплатыПКО.ОплатаАгенту;
			ИначеЕсли (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2) Тогда	
				ПКО.ВидОплаты = Перечисления.ВидОплатыПКО.ЗаказЧека;
			КонецЕсли;				
			
			// Касса
			Если (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 1) Тогда
				ПКО.Касса = ПолучитьОсновнуюКассуАгента(Организация, Агент);			
			ИначеЕсли (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2) Тогда	
				ПКО.Касса = ПолучитьОсновнуюКассуОрганизации(Организация);			
			КонецЕсли;	
			
			СтатусЗаписиДокумента = "Не записан";
			ВидДанных              = "";
			
			врЗамер_6 = ТекущаяДата() - врЗамерСтарт;
			
			//Попытка
			//	ЛогФайл.ЗаписатьСтроку("ЗАМЕР: 1 = " + СокрЛП(врЗамер_1) + "; 2 = " + СокрЛП(врЗамер_2) + "; 3 = " + СокрЛП(врЗамер_3) + "; 4 = " + СокрЛП(врЗамер_4) + "; 5 = " + СокрЛП(врЗамер_5));					
			//Исключение
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЗАМЕР", ИнформацияОбОшибке(), Истина);
			//КонецПопытки;	
			
			// Оплата через агента - проведение / Заказ чека  - запись
			Если (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 1) Тогда
				
				ВидДанных = "ПКО (оплата через агента)";
				
				//Попытка
				//	ПКО.Записать(РежимЗаписиДокумента.Проведение);
				//	СтатусЗаписиДокумента = "Проведен";
				//Исключение
					Попытка
						ПКО.Записать(РежимЗаписиДокумента.Запись);
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПКО (оплата через агента) записан: " + Строка(ПКО) + " (" + Строка(Партнер) + "; РТУ: " + СокрЛП(НомерНакладной) + "; Сумма: " + Строка(ПКО.СуммаДокумента) + ")");
						СтатусЗаписиДокумента = "Записан";
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оплата через агента. Не удалось записать документ ПКО! Организация: " + Строка(ПКО.Организация) + "; Контрагент : " + Строка(ПКО.Контрагент) + "; РТУ: " + СокрЛП(НомерНакладной) + "; Сумма: " + Строка(ПКО.СуммаДокумента), ИнформацияОбОшибке(), Истина);						
					КонецПопытки;	
				//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оплата через агента. Не удалось провести документ ПКО. Попытка записи без проведения... ", ИнформацияОбОшибке(), Истина);						
				//КонецПопытки;
				
				Если СтатусЗаписиДокумента = "Записан" Тогда
					ОтложенноеПроведение_ЗарегистрироватьПКО(ПКО.Ссылка);
				КонецЕсли;	
				
			ИначеЕсли (Число(СтрокаТаблицыПКО.PaymentTypeRefID) = 2) Тогда
				
				Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
				
					ВидДанных = "ПКО (заказ чека)";
				
					Попытка
						ПКО.Записать(РежимЗаписиДокумента.Запись);
						ЛогФайл.ЗаписатьСтроку(СокрЛП(ТекущаяДата()) + " ~Документ ПКО (заказ чека) записан: " + Строка(ПКО) + " (" + Строка(Партнер) + "; РТУ: " + СокрЛП(НомерНакладной) + "; Сумма: " + Строка(ПКО.СуммаДокумента) + ")");
						СтатусЗаписиДокумента = "Записан";
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Заказ чека. Не удалось записать ПКО! Организация: "  + Строка(ПКО.Организация) + "; Контрагент : " + Строка(ПКО.Контрагент) + "; РТУ: " + СокрЛП(НомерНакладной) + "; Сумма: " + Строка(ПКО.СуммаДокумента), ИнформацияОбОшибке(), Истина);
					КонецПопытки;				
					
				Иначе
					
					ЗаписатьОшибку1СвЛогФайл("ЗАКАЗ ЧЕКА - ОТКАЗ", Строка(ПКО.Контрагент));

					Продолжить;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		//	ЗафиксироватьТранзакцию();
			
			Попытка
				Если (СтатусЗаписиДокумента = "Записан") ИЛИ (СтатусЗаписиДокумента = "Проведен") Тогда
					ЗаписатьДанныеВЛогЗагрузкиДокументов(ВидДанных, СтрокаТаблицыПКО.PaymentID, 1, ПКО.Ссылка, ПКО.Организация, Партнер, СтатусЗаписиДокумента);
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при логировании загрузки документа (ПКО)!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры	


Процедура Оплаты_СоздатьОплатуОтАгентаНаОснованииНакладной(врАгент, врНакладная)
	
	Событие1С = "БОРТ! Оплата через агента";
	
	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();			
			
	// Дата ПКО
			
	ПКО.Дата                  = ТекущаяДата();
	ПКО.Организация           = врНакладная.Организация;
	ПКО.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПКО.Контрагент            = врНакладная.Контрагент;
	
	ПКО.РасшифровкаПлатежа.Очистить();
					
	ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
		врНакладная.Ссылка,
		врНакладная.Договор,
		врНакладная.Валюта,
		ПКО.РасшифровкаПлатежа,
		врНакладная.Партнер,
		врНакладная.Ссылка);
		
	ПКО.СуммаДокумента = ПКО.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");	
						
	МассивДокументов = ПКО.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
	МассивДокументов.Добавить(ПКО.ДокументОснование);
			
	// Главный бухгалтер
	Если ЗначениеЗаполнено(врНакладная.Организация) Тогда
		ОтветЛица = Справочники.ОтветственныеЛицаОрганизаций.алкСрезПоследних(ПКО.Дата, Новый Структура("Владелец, ОтветственноеЛицо", врНакладная.Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер), Истина);
		Попытка
			Если ОтветЛица.Количество() > 0 Тогда
				ПКО.ГлавныйБухгалтер = ОтветЛица[0].Ссылка;
			КонецЕсли;	
		Исключение
		КонецПопытки;	
	КонецЕсли;	
	
	ПКО.ПринятоОт        = СокрЛП(врНакладная.Контрагент.Наименование);
	ПКО.Валюта           = Константы.ВалютаРегламентированногоУчета.Получить();
	ПКО.ВТомЧислеНДС     = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ПКО.СуммаДокумента, ПКО.Валюта, МассивДокументов, Истина, Истина);
			
	ПКО.Кассир = врАгент;
			
	ПКО.ВидОплаты = Перечисления.ВидОплатыПКО.ОплатаАгенту;
			
	ПКО.Касса = ПолучитьОсновнуюКассуАгента(врНакладная.Организация, врАгент);			
	
		Попытка
			ПКО.Записать(РежимЗаписиДокумента.Проведение);
			ЛогФайл.ЗаписатьСтроку("~БОРТ! Документ ПКО (оплата через агента) записан и проведен: " + Строка(ПКО) + " (" + Строка(врНакладная.Партнер) + "; РТУ: " + СокрЛП(врНакладная.Номер) + "; Сумма: " + Строка(ПКО.СуммаДокумента) + ")");
		Исключение
			Попытка
				ПКО.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Оплата через агента. Не удалось записать документ ПКО! Организация: " + Строка(ПКО.Организация) + "; Контрагент : " + Строка(ПКО.Контрагент) + "; РТУ: " + СокрЛП(врНакладная.Номер) + "; Сумма: " + Строка(ПКО.СуммаДокумента), ИнформацияОбОшибке(), Истина);						
			КонецПопытки;	
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "БОРТ! Оплата через агента. Не удалось провести документ ПКО. Попытка записи без проведения... ", ИнформацияОбОшибке(), Истина);						
		КонецПопытки;
КонецПроцедуры	


#КонецОбласти


#Область ЭКСПОРТ_НАКЛАДНЫХ


Функция ЕстьПКОДляРеализации(врРеализация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованиеПлатежа", врРеализация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриходныйКассовыйОрдер.Ссылка
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.РасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции


Процедура ЭкспортВсехНакладных(врГлубинаВыгрузкиМесяцев)
	
	Событие1С = "Экспорт ВСЕХ накладных";
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем ВСЕ накладные  и товары (Invoice.txt, InvoiceProduct.txt)...");
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	
	ФайлВыгрузки.ДобавитьСтроку(
		"DeviceID"				+ Символ(9) +
		"InvoiceID"				+ Символ(9) +   
		"InvoiceRefID"			+ Символ(9) +   
		"InvoiceTypeRefID"		+ Символ(9) +
		"ParentInvoiceID"		+ Символ(9) +
		"ParentInvoiceRefID"	+ Символ(9) +   
		"AgentRefID"			+ Символ(9) +
		"ShopRefID"				+ Символ(9) +
		"VisitID"				+ Символ(9) +
		"InvoiceDateTime"		+ Символ(9) +
		"InvoiceNo"				+ Символ(9) +
		"InvoiceAmount"			+ Символ(9) +
		"AmountPaid"			+ Символ(9) +
		"DeliveryFromDateTime"	+ Символ(9) +
		"DeliveryThruDateTime"	+ Символ(9) +
		"IsConfidential"		+ Символ(9) +
		"Note"					+ Символ(9) +
		"SellerRefID"			+ Символ(9) +  
		"PriceTypeRefID"  		+ Символ(9) +
		"InvoiceTypeCode"		+ Символ(9) +
		"InvoiceRequired"		+ Символ(9) +
		"ShopID"                + Символ(9) +
		"DaysOverdue"           + Символ(9) +
		"OverdueDebtAmount"     + Символ(9) +
		"Color");
		
	ФайлВыгрузкиТоваров = Новый ТекстовыйДокумент;
	
	ФайлВыгрузкиТоваров.ДобавитьСтроку(		
		"DeviceID"				+ Символ(9) + 		
		"InvoiceProductID"		+ Символ(9) +  		
		"InvoiceID"				+ Символ(9) +   	
		"InvoiceRefID"			+ Символ(9) +   	
		"ProductRefID"			+ Символ(9) +  		
		"Price"					+ Символ(9) +  		
		"Volume"				+ Символ(9) +  		
		"VATRate"				+ Символ(9) +
		"DiscountAmount"		+ Символ(9) +   	
		"DiscountRate"			+ Символ(9) +
		"MeasureUnitRefID"      + Символ(9) +
		"PriceTypeRefID" 	    + Символ(9) +
		"StockRefID" 		    + Символ(9) +
		"IsManualPrice");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер",       ИмяСервераМА);
	Запрос.УстановитьПараметр("ДатаНачала",   НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -врГлубинаВыгрузкиМесяцев)));
	Запрос.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	аян_СинхронизацияТТ.Агент,
	               |	ЕСТЬNULL(аян_СинхронизацияТТ.Сервер, """") КАК Сервер
	               |ПОМЕСТИТЬ ВТ_Агент_Сервер
	               |ИЗ
	               |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РасчетыСКлиентамиПоДокументам.Регистратор
	               |ПОМЕСТИТЬ ВТ_Документы
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	               |ГДЕ
	               |	РасчетыСКлиентамиПоДокументам.Период >= &ДатаНачала
	               |	И РасчетыСКлиентамиПоДокументам.Активность
	               |	И РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_Документы.Регистратор КАК Ссылка,
	               |	ВТ_Документы.Регистратор.Дата КАК ДатаДокумента,
	               |	ВТ_Документы.Регистратор.Номер КАК НомерДокумента,
	               |	ВТ_Документы.Регистратор.Организация КАК Организация,
	               |	ВТ_Документы.Регистратор.Партнер КАК Клиент,
	               |	ВТ_Документы.Регистратор.Менеджер КАК Менеджер,
	               |	ВТ_Документы.Регистратор.Склад КАК Склад,
	               |	ВТ_Документы.Регистратор.Склад.Родитель КАК СкладРодитель,
	               |	ВТ_Документы.Регистратор.Соглашение.ВидЦен КАК ВидЦен,
	               |	ВТ_Агент_Сервер.Сервер,
	               |	ВТ_Документы.Регистратор.СуммаДокумента КАК СуммаДокумента,
	               |	ЕСТЬNULL(РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток, 0) КАК Долг,
	               |	ВЫБОР
	               |		КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 0
	               |			ТОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ДатаОстатков, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПросрочкаДней
	               |ИЗ
	               |	ВТ_Документы КАК ВТ_Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Агент_Сервер КАК ВТ_Агент_Сервер
	               |		ПО ВТ_Документы.Регистратор.Менеджер = ВТ_Агент_Сервер.Агент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоДокументамОстатки
	               |		ПО ВТ_Документы.Регистратор = РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФлагВыгрузки = Ложь;
		
		врАгент      = Выборка.Менеджер;
		
		Если Выборка.Сервер = ИмяСервераМА Тогда
			
			ФлагВыгрузки = Истина;
			
		ИначеЕсли ПустаяСтрока(Выборка.Сервер) Тогда
			
			Если ПользовательДобавленВРазделениеТочек(Выборка.Менеджер) Тогда
				
				ЗапросВн = Новый Запрос;
				ЗапросВн.УстановитьПараметр("ТорговаяТочка", Выборка.Клиент);	
				ЗапросВн.УстановитьПараметр("Сервер",        ИмяСервераМА);	
				ЗапросВн.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                 |	аян_СинхронизацияТТ.Агент,
				                 |	аян_СинхронизацияТТ.IDТочки
				                 |ИЗ
				                 |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
				                 |ГДЕ
				                 |	аян_СинхронизацияТТ.ТорговаяТочка = &ТорговаяТочка
				                 |	И аян_СинхронизацияТТ.Сервер = &Сервер";
				ВыборкаВн = ЗапросВн.Выполнить().Выбрать();
				Пока ВыборкаВн.Следующий() Цикл
					Если СтрЧислоВхождений(ВыборкаВн.IDТочки, "_AGR") Тогда
						ФлагВыгрузки = Истина;
						врАгент      = ВыборкаВн.Агент;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЕсли;			
		
		Если ФлагВыгрузки Тогда
						
			ДатаДока        = Формат(Выборка.ДатаДокумента, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 
			СуммаДокумента 	= Выборка.СуммаДокумента;
			СуммаОплаты 	= СуммаДокумента - Выборка.Долг;
		
			КоличествоДнейПросрочкиНакладной = 0;
			Если Выборка.ПросрочкаДней > КоличествоДнейПросрочки Тогда
				КоличествоДнейПросрочкиНакладной = Выборка.ПросрочкаДней;
			КонецЕсли;	
		
			СуммаПросроченногоДолга = 0;
			Если Выборка.ПросрочкаДней > КоличествоДнейПросрочки Тогда
				СуммаПросроченногоДолга = Выборка.Долг;
			КонецЕсли;	
			
			врТипНакладной = "2";
			
			врМассивОргБонус = ПолучитьВсеОрганизацииБонус();
			Если врМассивОргБонус.Найти(Выборка.Организация) <> Неопределено Тогда
				врТипНакладной = "222";
			КонецЕсли;	
			
			// Invoice.txt
			
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП(ИдКПК)															+ Символ(9) +  // DeviceID
			""																		+ Символ(9) +  // InvoiceID
			СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())						+ Символ(9) +  // InvoiceRefID
			врТипНакладной															+ Символ(9) +  // InvoiceTypeRefID   (2 - накладная) 
			""																		+ Символ(9) +  // ParentInvoiceID 
			""																		+ Символ(9) +  // ParentInvoiceRefID (номер заказа)
			СокрЛП(врАгент.УникальныйИдентификатор())								+ Символ(9) +  // AgentRefID
			СокрЛП(ПолучитьГУИДПартнера(Выборка.Клиент, врАгент))                   + Символ(9) +  // ShopRefID
			""																		+ Символ(9) +  // VisitID
			ДатаДока																+ Символ(9) +  // InvoiceDateTime
			СокрЛП(Выборка.НомерДокумента)											+ Символ(9) +  // InvoiceNo
			Формат(СуммаДокумента, "ЧРД=.; ЧГ=")									+ Символ(9) +  // InvoiceAmount    
			Формат(СуммаОплаты, "ЧРД=.; ЧГ=")										+ Символ(9) +  // AmountPaid
			""																		+ Символ(9) +  // DeliveryFromDateTime
			""																		+ Символ(9) +  // DeliveryThruDateTime
			""																		+ Символ(9) +  // IsConfidential
			""															   			+ Символ(9) +  // Note
			СокрЛП(Выборка.Организация.УникальныйИдентификатор())					+ Символ(9) +  // SellerRefID
			""																		+ Символ(9) +  // PriceTypeRefID
			""																		+ Символ(9) +  // InvoiceTypeCode
			""																		+ Символ(9) +  // InvoiceRequired
			""                               										+ Символ(9) +  // ShopID
			Формат(КоличествоДнейПросрочкиНакладной, "ЧРД=.; ЧГ=")	    			+ Символ(9) +  // DaysOverdue
			Формат(СуммаПросроченногоДолга, "ЧРД=.; ЧГ=")	 						+ Символ(9) +  // OverdueDebtAmount
			"");																				   // Color
			
			// InvoiceProduct.txt
			
			ЗапросТовары = Новый Запрос;
			ЗапросТовары.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                     |	РеализацияТоваровУслугТовары.Номенклатура,
			                     |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			                     |	РеализацияТоваровУслугТовары.ВидЦены,
			                     |	РеализацияТоваровУслугТовары.Количество,
			                     |	РеализацияТоваровУслугТовары.Цена,
			                     |	РеализацияТоваровУслугТовары.СтавкаНДС
			                     |ИЗ
			                     |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			                     |ГДЕ
			                     |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
			ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();			
			
			СкладНакладной = Выборка.Склад;
			Если ЗначениеЗаполнено(СкладНакладной) Тогда
				Если ЗначениеЗаполнено(Выборка.СкладРодитель) Тогда
					СкладНакладной = Выборка.СкладРодитель;
				КонецЕсли;	
			КонецЕсли;	
						
			ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();
		
			Пока ВыборкаТовары.Следующий() Цикл
				
				СтрокаВидЦены = "";
				Если ЗначениеЗаполнено(ВыборкаТовары.ВидЦены) Тогда
					СтрокаВидЦены = ВыборкаТовары.ВидЦены.УникальныйИдентификатор();
				КонецЕсли;	
				
				ФайлВыгрузкиТоваров.ДобавитьСтроку(
				СокрЛП(ИдКПК)														+ Символ(9) +            						// DeviceID
				""																	+ Символ(9) +    						    	// InvoiceProductID
				""																	+ Символ(9) +            						// InvoiceID
				СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())					+ Символ(9) +            						// InvoiceRefID
				СокрЛП(ВыборкаТовары.Номенклатура.УникальныйИдентификатор())  		+ Символ(9) +            						// ProductRefID
				Формат(ВыборкаТовары.Цена, "ЧРД=.; ЧГ=")							+ Символ(9) +     						    	// Price
				Формат(ВыборкаТовары.Количество, "ЧРД=.; ЧГ=")						+ Символ(9) +            						// Volume
				Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТовары.СтавкаНДС), "ЧРД=.; ЧГ=")	+ Символ(9) +	// VATRate
				""																	+ Символ(9) +            						// DiscountAmount
				""																	+ Символ(9) +            						// DiscountRate
				СокрЛП(ВыборкаТовары.ЕдиницаИзмерения.УникальныйИдентификатор())    + Символ(9) +									// MeasureUnitRefID
				СокрЛП(СтрокаВидЦены)												+ Символ(9) +            						// PriceTypeRefID
				СокрЛП(СкладНакладной.УникальныйИдентификатор())					+ Символ(9) +            						// StockRefID
				"false");																											// IsManualPrice
			
			КонецЦикла;
			
			
		КонецЕсли;	
		
	КонецЦикла; 
					
	ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));		
	ФайлВыгрузки.Записать(КаталогВыгрузки + "\Invoice.txt", КодировкаТекста.ANSI);
	
	ФайлВыгрузкиТоваров.ВставитьСтроку(1, Формат(ФайлВыгрузкиТоваров.КоличествоСтрок() - 1, "ЧГ="));		
	ФайлВыгрузкиТоваров.Записать(КаталогВыгрузки + "\InvoiceProduct.txt", КодировкаТекста.ANSI);	
		
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка ВСЕХ накладных произведена в " + КаталогВыгрузки + "Invoice.txt (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка Товаров ВСЕХ накладных произведена в " + КаталогВыгрузки + "InvoiceProduct.txt (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
	
КонецПроцедуры	


Функция ПолучитьСписокНакладныхБезОборудования(СписокНакладных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокНакладных);
	Запрос.УстановитьПараметр("ВидНоменклатуры",  ВидНоменклатурыМногооборотнаяТара);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслугТовары.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка В(&СписокДокументов)
	               |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	


// Проверка на необходимость выгрузки накладной

Функция НеобходимостьВыгрузкиНакладной(врНакладная)
	
	Попытка
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", 		 врНакладная);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыМногооборотнаяТара);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_Накладные.НеобходимостьВыгрузки
		               |ИЗ
		               |	РегистрСведений.аян_Накладные КАК аян_Накладные
		               |ГДЕ
		               |	аян_Накладные.Накладная = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.НеобходимостьВыгрузки;
			
		КонецЕсли;			
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РеализацияТоваровУслугТовары.Номенклатура
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		//	ЗаписатьОшибку1СвЛогФайл("Проверка необходимости выгрузки накладной", Строка(врНакладная));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Проверка необходимости выгрузки накладной", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции	


// Оплаченные накладные

Функция ОплаченныеНакладные(врАгент, врТЗНеоплаченныеНакладные)
	
	МассивОплаченныхНакладных = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	РасчетыСКлиентамиПоДокументам.Регистратор
	               	|ИЗ
	               	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	               	|ГДЕ
	               	|	РасчетыСКлиентамиПоДокументам.Активность
	               	|	И РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               	|	И РасчетыСКлиентамиПоДокументам.Регистратор.Организация <> &ОргБонус
	               	|	И РасчетыСКлиентамиПоДокументам.Регистратор.Менеджер = &Менеджер
	               	|	И РасчетыСКлиентамиПоДокументам.Период >= &ДатаНачала
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	РасчетыСКлиентамиПоДокументам.Регистратор";	
	
	Запрос.УстановитьПараметр("Менеджер",   врАгент);
	Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(ТекущаяДата(), -12));
	Запрос.УстановитьПараметр("ОргБонус",   ОргБонусТомск);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если врТЗНеоплаченныеНакладные.Найти(Выборка.Регистратор, "РН") = Неопределено Тогда
			МассивОплаченныхНакладных.Добавить(Выборка.Регистратор);			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивОплаченныхНакладных;
	
КонецФункции	


// Неоплаченные накладные в виде результата запроса

Функция НеоплаченныеНакладные()
	
	ЗамерСтарт = ТекущаяДата();
	
	// Определяем отбор запроса
	
	//ОтборОсновной = " И РасчетныйДокумент.Партнер.ОсновнойМенеджер = &Агент";
	
	ОтборОсновной = " И РасчетныйДокумент.Менеджер = &Агент";
	
	врСписокТочекАгента = Неопределено;
	
	Если ИмяСервераМА = "Tomsk" Тогда
		
		
		//// АГЕНТ КЕГИ УТРО (ТОМСК)
		//Если КегиУтро_МассивАгентов.Найти(ТекАгент) <> Неопределено Тогда
		//	
		//	ОтборОсновной = " И РасчетныйДокумент.Менеджер = &Агент";
		//	
		//// ОСТАЛЬНЫЕ АГЕНТЫ (ТОМСК)
		//Иначе
		//	
		//	врСписокТочекАгента = СписокТорговыхТочекАгента(ТекАгент);
		//
		//	ОтборОсновной = " И НЕ РасчетныйДокумент.Менеджер В (&АгентыКегиУтро) И РасчетныйДокумент.Партнер В (&СписокТТАгента)";
		//	
		//КонецЕсли;	
		//
		//врВалишев = Справочники.Пользователи.НайтиПоНаименованию("Валишев Александр Мунирович");

		//Если ТекАгент = врВалишев Тогда
		//	ОтборОсновной = " И (РасчетныйДокумент.Партнер.ОсновнойМенеджер = &Агент ИЛИ РасчетныйДокумент.Менеджер = &врВалишев)";
		//КонецЕсли;			
		
	КонецЕсли;	
	
	врСписокАгентов = Новый Массив;
	врЭтоНечаев     = Ложь;
	
	Если ИмяСервераМА = "Sever" Тогда
		ОтборОсновной = " И РасчетныйДокумент.Партнер.ОсновнойМенеджер = &Агент";
		Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович") Тогда
			врСписокАгентов = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера("Sever");
			ОтборОсновной   = " И РасчетныйДокумент.Партнер.ОсновнойМенеджер В (&Агент)";
			врЭтоНечаев     = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	СписокАгентов = Новый Массив;
	СписокТочек   = Новый Массив;
		
	// Запрос 
	
	Запрос =  Новый Запрос;
	
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Долги.РасчетныйДокумент.Организация КАК Организация,
			       	|	Долги.РасчетныйДокумент.Партнер КАК Партнер,
					|	Долги.РасчетныйДокумент.Склад КАК Склад,
					|	Долги.РасчетныйДокумент.Склад.Родитель КАК СкладРодитель,
					|	Долги.РасчетныйДокумент.Соглашение.ВидЦен КАК ВидЦен,
	               	|	Долги.РасчетныйДокумент КАК РН,
					|	Долги.РасчетныйДокумент.Менеджер КАК Менеджер,
					|	Долги.РасчетныйДокумент.Номер КАК НомерНакладной,
					|	Долги.РасчетныйДокумент.Дата КАК ДатаНакладной,
					|	Долги.РасчетныйДокумент.ДатаПлатежа КАК ДатаПлатежа,
					|	Долги.РасчетныйДокумент.СуммаДокумента КАК СуммаДокумента,
					|	ВЫРАЗИТЬ(Долги.РасчетныйДокумент.Комментарий КАК СТРОКА(249)) КАК Комментарий,
	               	|	Долги.ДолгОстаток КАК Долг,
	               	|	ВЫБОР
	               	|		КОГДА Долги.РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	               	|			ТОГДА ВЫБОР
	               	|					КОГДА Долги.ДолгОстаток > 0
	               	|						ТОГДА РАЗНОСТЬДАТ(Долги.РасчетныйДокумент.ДатаПлатежа, &ДатаДок, ДЕНЬ)
	               	|					ИНАЧЕ 0
	               	|				КОНЕЦ
	               	|		ИНАЧЕ 0
	               	|	КОНЕЦ КАК ПросрочкаДней
	               	|ИЗ
	               	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	               	|			,
	               	|			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг " + ОтборОсновной + "	               	
	               	|				И НЕ АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск) КАК Долги
        	       	|
           	    	|УПОРЯДОЧИТЬ ПО
           	    	|	Партнер,
           	    	|	РН";	
	
	врЭтоХорека = Ложь;
	Если Доставка_ЭтоКегиУтроХорека(ТекАгент) Тогда
		врЭтоХорека = Истина;
	КонецЕсли;	
	
	//Если (ИмяСервераМА = "Sever") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ врЭтоХорека Тогда
	//Иначе	
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Долги.РасчетныйДокумент.ДатаПлатежа", "Долги.РасчетныйДокумент.Дата");	
	//КонецЕсли;	
	
	Запрос.УстановитьПараметр("Агент",               ?(врЭтоНечаев, врСписокАгентов, ТекАгент));
	Запрос.УстановитьПараметр("ДатаДок",             ТекущаяДата());
	Запрос.УстановитьПараметр("ОргБонусТомск",       ОргБонусТомск);
	Запрос.УстановитьПараметр("АгентыКегиУтро",      КегиУтро_МассивАгентов);
	Запрос.УстановитьПараметр("СписокТТАгента",      врСписокТочекАгента);
	//Запрос.УстановитьПараметр("врВалишев",           врВалишев);
	
	РЗ = Запрос.Выполнить();
	
	врЗамер_1 = ТекущаяДата() - ЗамерСтарт;
	
	ТЗ = РЗ.Выгрузить();
		
	//Если (ИмяСервераМА = "Tomsk") И (ТекАгент <> врВалишев) Тогда
	//	
	//	ТЗКоличество = ТЗ.Количество();
	//
	//	Сч = ТЗКоличество - 1;
	//	Пока Сч >=0 Цикл
	//		ТекСтрока = ТЗ[Сч];
	//		Если (ТекСтрока.Менеджер = врВалишев) Тогда
	//			ТЗ.Удалить(ТекСтрока);
	//		КонецЕсли;	
	//		Сч = Сч - 1;
	//	КонецЦикла;		
	//			
	//КонецЕсли;			
	
	// Исключаем накладные с оборудованием
	
	СписокНакладныхБезОборудования = ПолучитьСписокНакладныхБезОборудования(ТЗ.ВыгрузитьКолонку("РН"));
	
	врЗамер_2 = ТекущаяДата() - ЗамерСтарт;
	
	ТЗКоличество = ТЗ.Количество();
	
	Если ТЗКоличество <> СписокНакладныхБезОборудования.Количество() Тогда
	
		Сч = ТЗКоличество - 1;
		Пока Сч >=0 Цикл
			ТекСтрока = ТЗ[Сч];
			Если СписокНакладныхБезОборудования.Найти(ТекСтрока.РН) = Неопределено Тогда
				ТЗ.Удалить(ТекСтрока);
			КонецЕсли;	
			Сч = Сч - 1;
		КонецЦикла;		
		
	КонецЕсли;	
	
	// МИР НАПИТКИ за НАЛ - НЕ СТОП !!!
	
	ТЗКоличество = ТЗ.Количество();
		
	Сч = ТЗКоличество - 1;
	Пока Сч >=0 Цикл
		ТекСтрока = ТЗ[Сч];
		Если ((ТекСтрока.Организация = оргМирНапитковТомск) ИЛИ КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(ТекСтрока.Партнер)) И (НЕ Оплаты_НакладнаяВОтсрочку(ТекСтрока.РН)) Тогда
			ТекСтрока.ПросрочкаДней = 0;
		КонецЕсли;	
		Сч = Сч - 1;
	КонецЦикла;			
	
	// ВОСКРЕСЕНИЕ только ОТСРОЧКА
	
	Если ДеньНедели(ТекущаяДата()) = 7 Тогда
	
		ТЗКоличество = ТЗ.Количество();
		
		Сч = ТЗКоличество - 1;
		Пока Сч >=0 Цикл
			ТекСтрока = ТЗ[Сч];
			Если НЕ Оплаты_НакладнаяВОтсрочку(ТекСтрока.РН) Тогда
				//ТЗ.Удалить(ТекСтрока);
				ТекСтрока.ПросрочкаДней = 0;
			КонецЕсли;	
			Сч = Сч - 1;
		КонецЦикла;		
		
	КонецЕсли;	
	
	// Отрицательные долги на фактурам
	
	ТЗКоличество = ТЗ.Количество();
		
	Сч = ТЗКоличество - 1;
	Пока Сч >=0 Цикл
		ТекСтрока = ТЗ[Сч];
		Если ТекСтрока.Долг < 0 Тогда 
			ТЗ.Удалить(ТекСтрока);
		КонецЕсли;	
		Сч = Сч - 1;
	КонецЦикла;	
	
	// БОНУС - ГАЗ
	
	Если (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Sever") Тогда
	
		// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
		//врГаз40 = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
		врГаз40 = аян_ОбщийМодульСерверПовтИсп.Газ40МассивТоваров();
		// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
		
		ЗапросТабЧасть = Новый Запрос;		
		ЗапросТабЧасть.УстановитьПараметр("Номенклатура", врГаз40);
		ЗапросТабЧасть.Текст = "ВЫБРАТЬ
		                       |	РеализацияТоваровУслугТовары.Ссылка
		                       |ИЗ
		                       |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                       |ГДЕ
		                       |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
							   //|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура";
							   |	И РеализацияТоваровУслугТовары.Номенклатура В (&Номенклатура)";
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск", "АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", " ГДЕ Долги.ДолгОстаток > 5 УПОРЯДОЧИТЬ ПО");
		
		ВыборкаБонус = Запрос.Выполнить().Выбрать();
		Пока ВыборкаБонус.Следующий() Цикл
			
			Если СтрЧислоВхождений(ВыборкаБонус.Комментарий, "замен") > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗапросТабЧасть.УстановитьПараметр("Ссылка", ВыборкаБонус.РН);
			
			РЗТабЧасть = ЗапросТабЧасть.Выполнить();
			Если Не РЗТабЧасть.Пустой() Тогда
				
				НовСтрокаТЗ = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, ВыборкаБонус);
				Если НовСтрокаТЗ.ДатаНакладной < '20190301' Тогда
					НовСтрокаТЗ.ПросрочкаДней = 0;
				Иначе	
					НовСтрокаТЗ.ПросрочкаДней = 2;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
		
	// БОНУС - ГАЗ	
	
	врЗамер_3 = ТекущаяДата() - ЗамерСтарт;
			
	// Маршрут
	
	ТЗ.Колонки.Добавить("ЗаказОтправлен", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("Маршрут",        ОписаниеТипаСтрока(250));
		
	Попытка
		
		ТЗ_НезакрытыеОплаты = аян_СинхронизацияСервер.Оплата_НезакрытаяОплатаАгента(ТекАгент);
		
		Для Каждого ТекНезакрытаяОплата Из ТЗ_НезакрытыеОплаты Цикл
			
			ТекСтрокаПоиска = ТЗ.Найти(ТекНезакрытаяОплата.Накладная, "РН");
			Если ТекСтрокаПоиска <> Неопределено Тогда
				Если ТекСтрокаПоиска.Долг <= ТекНезакрытаяОплата.Сумма Тогда
					ТЗ.Удалить(ТекСтрокаПоиска);
				Иначе
					ТекСтрокаПоиска.Долг = ТекСтрокаПоиска.Долг - ТекНезакрытаяОплата.Сумма;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Получение незакрытой оплаты агента", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	// СЕВЕР
	
	Если ИмяСервераМА = "Sever" Тогда
		
		врТЗ_Осн_Петровы = Новый ТаблицаЗначений;
		врТЗ_Осн_Петровы.Колонки.Добавить("Основная", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		врТЗ_Осн_Петровы.Колонки.Добавить("Петров",   Новый ОписаниеТипов("СправочникСсылка.Партнеры"));		
	
		врМассивДолговОснТочки = Новый Массив;
		
		ЗапросПетровы = Новый Запрос;
		ЗапросПетровы.УстановитьПараметр("Агент",    ТекАгент);
		ЗапросПетровы.УстановитьПараметр("грПетров", Клиенты_грПетров);
		ЗапросПетровы.Текст = "ВЫБРАТЬ
		                      |	аян_СинхронизацияТТ.ТорговаяТочка
		                      |ИЗ
		                      |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
		                      |ГДЕ
		                      |	аян_СинхронизацияТТ.Агент = &Агент
		                      |	И аян_СинхронизацияТТ.ТорговаяТочка В ИЕРАРХИИ(&грПетров)";
		ВыборкаПетровы = ЗапросПетровы.Выполнить().Выбрать();
		Пока ВыборкаПетровы.Следующий() Цикл
	
			врОснТочка = Петров_ПолучитьОсновнуюТочкуПетрова(ВыборкаПетровы.ТорговаяТочка);
				
			Если ЗначениеЗаполнено(врОснТочка) Тогда
				врНовСтрокаПетровы = врТЗ_Осн_Петровы.Добавить();
				врНовСтрокаПетровы.Основная = врОснТочка;
				врНовСтрокаПетровы.Петров   = ВыборкаПетровы.ТорговаяТочка;
			КонецЕсли;	
				
		КонецЦикла;	
	
		врТЗ_ДопСтроки = Новый ТаблицаЗначений;
		врТЗ_ДопСтроки.Колонки.Добавить("Петров", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		врТЗ_ДопСтроки.Колонки.Добавить("ДопСтрока");		
		
		Для Каждого врОснПетров ИЗ врТЗ_Осн_Петровы Цикл
			
			Для Каждого ТекСтрока Из ТЗ Цикл
				
				Если ТекСтрока.Партнер = врОснПетров.Основная Тогда
					
					НовДопСтрока = врТЗ_ДопСтроки.Добавить();
					НовДопСтрока.Петров    = врОснПетров.Петров;
					НовДопСтрока.ДопСтрока = ТекСтрока;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		Для Каждого ТекДопСтрока Из врТЗ_ДопСтроки Цикл
			
			НовСтрокаТЗ = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, ТекДопСтрока.ДопСтрока);
			НовСтрокаТЗ.Партнер = ТекДопСтрока.Петров;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	врЗамер_4 = ТекущаяДата() - ЗамерСтарт;
	
	ЛогФайл.ЗаписатьСтроку("Замер 1 = " + Строка(врЗамер_1) + "; " + "Замер 2 = " + Строка(врЗамер_2) + "; " + "Замер 3 = " + Строка(врЗамер_3) + "; " + "Замер 4 = " + Строка(врЗамер_4));
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Получение неоплаченных накладных (ТЗ) (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	Возврат Новый Структура("РЗ, ТЗ", РЗ, ТЗ);
	
КонецФункции	


Функция НеоплаченныеНакладные_СВ(врАгент)
	
	ЗамерСтарт = ТекущаяДата();
	
	// Определяем отбор запроса
	
	ОтборОсновной = " И РасчетныйДокумент.Партнер.ОсновнойМенеджер = &Агент";
	
	врСписокТочекАгента = Неопределено;
	
	Если ИмяСервераМА = "Tomsk" Тогда
		
		врСписокТочекАгента = СписокТорговыхТочекАгента(врАгент);
		
		// АГЕНТ КЕГИ УТРО (ТОМСК)
		Если КегиУтро_МассивАгентов.Найти(врАгент) <> Неопределено Тогда
			
			ОтборОсновной = " И РасчетныйДокумент.Менеджер = &Агент";
			
		// ОСТАЛЬНЫЕ АГЕНТЫ (ТОМСК)
		Иначе
		
			ОтборОсновной = " И НЕ РасчетныйДокумент.Менеджер В (&АгентыКегиУтро) И РасчетныйДокумент.Партнер В (&СписокТТАгента)";
			
		КонецЕсли;	
		
		врВалишев = Справочники.Пользователи.НайтиПоНаименованию("Валишев Александр Мунирович");

		Если врАгент = врВалишев Тогда
			ОтборОсновной = " И (РасчетныйДокумент.Партнер.ОсновнойМенеджер = &Агент ИЛИ РасчетныйДокумент.Менеджер = &врВалишев)";
		КонецЕсли;			
		
	КонецЕсли;		
	
	СписокАгентов = Новый Массив;
	СписокТочек   = Новый Массив;
		
	// Запрос 
	
	Запрос =  Новый Запрос;
	
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Долги.РасчетныйДокумент.Организация КАК Организация,
			       	|	Долги.РасчетныйДокумент.Партнер КАК Партнер,
					|	Долги.РасчетныйДокумент.Склад КАК Склад,
					|	Долги.РасчетныйДокумент.Склад.Родитель КАК СкладРодитель,
					|	Долги.РасчетныйДокумент.Соглашение.ВидЦен КАК ВидЦен,
	               	|	Долги.РасчетныйДокумент КАК РН,
					|	Долги.РасчетныйДокумент.Менеджер КАК Менеджер,
					|	Долги.РасчетныйДокумент.Номер КАК НомерНакладной,
					|	Долги.РасчетныйДокумент.Дата КАК ДатаНакладной,
					|	Долги.РасчетныйДокумент.ДатаПлатежа КАК ДатаПлатежа,
					|	Долги.РасчетныйДокумент.СуммаДокумента КАК СуммаДокумента,
					|	ВЫРАЗИТЬ(Долги.РасчетныйДокумент.Комментарий КАК СТРОКА(249)) КАК Комментарий,
	               	|	Долги.ДолгОстаток КАК Долг,
	               	|	ВЫБОР
	               	|		КОГДА Долги.РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	               	|			ТОГДА ВЫБОР
	               	|					КОГДА Долги.ДолгОстаток > 0
	               	|						ТОГДА РАЗНОСТЬДАТ(Долги.РасчетныйДокумент.ДатаПлатежа, &ДатаДок, ДЕНЬ)
	               	|					ИНАЧЕ 0
	               	|				КОНЕЦ
	               	|		ИНАЧЕ 0
	               	|	КОНЕЦ КАК ПросрочкаДней
	               	|ИЗ
	               	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	               	|			,
	               	|			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг " + ОтборОсновной + "	               	
	               	|				И НЕ АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск) КАК Долги
        	       	|
           	    	|УПОРЯДОЧИТЬ ПО
           	    	|	Партнер,
           	    	|	РН";	
	
	Запрос.УстановитьПараметр("Агент",               врАгент);
	Запрос.УстановитьПараметр("ДатаДок",             ТекущаяДата());
	Запрос.УстановитьПараметр("ОргБонусТомск",       ОргБонусТомск);
	Запрос.УстановитьПараметр("АгентыКегиУтро",      КегиУтро_МассивАгентов);
	Запрос.УстановитьПараметр("СписокТТАгента",      врСписокТочекАгента);
	Запрос.УстановитьПараметр("врВалишев",           врВалишев);
	
	РЗ = Запрос.Выполнить();
	
	ТЗ = РЗ.Выгрузить();
		
	Если (ИмяСервераМА = "Tomsk") И (врАгент <> врВалишев) Тогда
		
		ТЗКоличество = ТЗ.Количество();
	
		Сч = ТЗКоличество - 1;
		Пока Сч >=0 Цикл
			ТекСтрока = ТЗ[Сч];
			Если (ТекСтрока.Менеджер = врВалишев) Тогда
				ТЗ.Удалить(ТекСтрока);
			КонецЕсли;	
			Сч = Сч - 1;
		КонецЦикла;		
				
	КонецЕсли;			
	
	// Исключаем накладные с оборудованием
	
	СписокНакладныхБезОборудования = ПолучитьСписокНакладныхБезОборудования(ТЗ.ВыгрузитьКолонку("РН"));
	
	ТЗКоличество = ТЗ.Количество();
	
	Если ТЗКоличество <> СписокНакладныхБезОборудования.Количество() Тогда
	
		Сч = ТЗКоличество - 1;
		Пока Сч >=0 Цикл
			ТекСтрока = ТЗ[Сч];
			Если СписокНакладныхБезОборудования.Найти(ТекСтрока.РН) = Неопределено Тогда
				ТЗ.Удалить(ТекСтрока);
			КонецЕсли;	
			Сч = Сч - 1;
		КонецЦикла;		
		
	КонецЕсли;		
	
	// Отрицательные долги на фактурам
	
	ТЗКоличество = ТЗ.Количество();
		
	Сч = ТЗКоличество - 1;
	Пока Сч >=0 Цикл
		ТекСтрока = ТЗ[Сч];
		Если ТекСтрока.Долг < 0 Тогда 
			ТЗ.Удалить(ТекСтрока);
		КонецЕсли;	
		Сч = Сч - 1;
	КонецЦикла;	
	
	// БОНУС - ГАЗ
	
		// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▼ Начало
		//врГаз40 = Справочники.Номенклатура.НайтиПоКоду("Ц0003510   ");
		врГаз40 = аян_ОбщийМодульСерверПовтИсп.Газ40МассивТоваров();
		// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21 ▲ Конец 
		
		ЗапросТабЧасть = Новый Запрос;		
		ЗапросТабЧасть.УстановитьПараметр("Номенклатура", врГаз40);
		ЗапросТабЧасть.Текст = "ВЫБРАТЬ
		                       |	РеализацияТоваровУслугТовары.Ссылка
		                       |ИЗ
		                       |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                       |ГДЕ
		                       |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
							   //|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура";
							   |	И РеализацияТоваровУслугТовары.Номенклатура В (&Номенклатура)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск", "АналитикаУчетаПоПартнерам.Организация = &ОргБонусТомск");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", " ГДЕ Долги.ДолгОстаток > 5 УПОРЯДОЧИТЬ ПО");
		
		ВыборкаБонус = Запрос.Выполнить().Выбрать();
		Пока ВыборкаБонус.Следующий() Цикл
			
			Если СтрЧислоВхождений(ВыборкаБонус.Комментарий, "замен") > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗапросТабЧасть.УстановитьПараметр("Ссылка", ВыборкаБонус.РН);
			
			РЗТабЧасть = ЗапросТабЧасть.Выполнить();
			Если Не РЗТабЧасть.Пустой() Тогда
				
				НовСтрокаТЗ = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, ВыборкаБонус);
				Если НовСтрокаТЗ.ДатаНакладной < '20190301' Тогда
					НовСтрокаТЗ.ПросрочкаДней = 0;
				Иначе	
					НовСтрокаТЗ.ПросрочкаДней = 2;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	// БОНУС - ГАЗ	
			
	// Маршрут
	
	ТЗ.Колонки.Добавить("ЗаказОтправлен", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("Маршрут",        ОписаниеТипаСтрока(250));
		
	Попытка
		
		ТЗ_НезакрытыеОплаты = аян_СинхронизацияСервер.Оплата_НезакрытаяОплатаАгента(врАгент);
		
		Для Каждого ТекНезакрытаяОплата Из ТЗ_НезакрытыеОплаты Цикл
			
			ТекСтрокаПоиска = ТЗ.Найти(ТекНезакрытаяОплата.Накладная, "РН");
			Если ТекСтрокаПоиска <> Неопределено Тогда
				Если ТекСтрокаПоиска.Долг <= ТекНезакрытаяОплата.Сумма Тогда
					ТЗ.Удалить(ТекСтрокаПоиска);
				Иначе
					ТекСтрокаПоиска.Долг = ТекСтрокаПоиска.Долг - ТекНезакрытаяОплата.Сумма;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Получение незакрытой оплаты агента", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Получение неоплаченных накладных (ТЗ) (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
	
	Возврат Новый Структура("РЗ, ТЗ", РЗ, ТЗ);
	
КонецФункции	


// Экспорт неоплаченных накладных

Процедура ЭкспортНакладных(РЗНеоплаченныеНакладные)
	
	ЗамерСтарт = ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем накладные (Invoice.txt)...");
	
	Файл = Новый Файл(КаталогВыгрузки + "\Invoice.txt");
	Существует = Файл.Существует();
	ЧислоСтрок = 0;
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	
	Если Существует Тогда
		
		ФайлВыгрузки.Прочитать(каталогВыгрузки + "\Invoice.txt");
		
	Иначе	
		
		ФайлВыгрузки.ДобавитьСтроку(
		"DeviceID"				+ Символ(9) +
		"InvoiceID"				+ Символ(9) +   
		"InvoiceRefID"			+ Символ(9) +   
		"InvoiceTypeRefID"		+ Символ(9) +
		"ParentInvoiceID"		+ Символ(9) +
		"ParentInvoiceRefID"	+ Символ(9) +   
		"AgentRefID"			+ Символ(9) +
		"ShopRefID"				+ Символ(9) +
		"VisitID"				+ Символ(9) +
		"InvoiceDateTime"		+ Символ(9) +
		"InvoiceNo"				+ Символ(9) +
		"InvoiceAmount"			+ Символ(9) +
		"AmountPaid"			+ Символ(9) +
		"DeliveryFromDateTime"	+ Символ(9) +
		"DeliveryThruDateTime"	+ Символ(9) +
		"IsConfidential"		+ Символ(9) +
		"Note"					+ Символ(9) +
		"SellerRefID"			+ Символ(9) +  
		"PriceTypeRefID"  		+ Символ(9) +
		"InvoiceTypeCode"		+ Символ(9) +
		"InvoiceRequired"		+ Символ(9) +
		"ShopID"                + Символ(9) +
		"DaysOverdue"           + Символ(9) +
		"OverdueDebtAmount"     + Символ(9) +
		"Color");
		
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Выборка Из РЗНеоплаченныеНакладные Цикл
	
		Расходные = Выборка.РН;
				
		Если МассивДокументов.Найти(Расходные) <> Неопределено Тогда
			//ЗаписатьОшибку1СвЛогФайл("Экспорт накладных", "Документ " + Строка(Расходные) + " уже выгружен!");
			Продолжить;
		Иначе
			МассивДокументов.Добавить(Расходные);
		КонецЕсли;			
				
		ДатаДока        = Формат(Выборка.ДатаНакладной, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 
		СуммаДокумента 	= Выборка.СуммаДокумента;
		СуммаОплаты 	= СуммаДокумента - Выборка.Долг;
		
		врПросрочкаДней = КоличествоДнейПросрочки;
		врПросрочкаДней = 1;
		
		Если ИмяСервераМА = "Tomsk" Тогда
			Если Массив_Сегмент_Отсрочка7.Найти(Выборка.Партнер) <> Неопределено Тогда
				врПросрочкаДней = 7;
			Иначе
				врПросрочкаДней = 1;
			КонецЕсли;
		КонецЕсли;		
		
		КоличествоДнейПросрочкиНакладной = 0;
		Если Выборка.ПросрочкаДней > врПросрочкаДней Тогда
			КоличествоДнейПросрочкиНакладной = Выборка.ПросрочкаДней;
		КонецЕсли;	
		
		СуммаПросроченногоДолга = 0;
		Если Выборка.ПросрочкаДней > врПросрочкаДней Тогда
			СуммаПросроченногоДолга = Выборка.Долг;
		КонецЕсли;	
		
		Note = "";
		
		//Если Расходные.Организация = ОргБонусТомск Тогда
		//	Если Не ЕстьПКОДляРеализации(Расходные) Тогда
		//		Note = "НЕТ ПКО! ";
		//	КонецЕсли;
		//КонецЕсли;	
		
		врКомментарий = СокрЛП(Выборка.Комментарий);
		
		СтруктураМаршрута = ПолучитьОписаниеМаршрута(Расходные, Ложь);
		Note = Note + СокрЛП(СтруктураМаршрута.Маршрут) + "Дата опл.: " + Формат(Выборка.ДатаПлатежа, "ДФ=dd.MM.yy");
		Если Не ПустаяСтрока(врКомментарий) Тогда
			Note = Note + "; " + СтрЗаменить(СокрЛП(врКомментарий), Символы.ПС, " "); 
		КонецЕсли;	
		
		Выборка.ЗаказОтправлен = СтруктураМаршрута.ЗаказОтправлен;
		Выборка.Маршрут        = СтруктураМаршрута.Маршрут;
		
		Note = СтрЗаменить(Note, Символ(13) + Символ(10), " ");
		Note = СтрЗаменить(Note, Символ(10), " ");
		Note = СтрЗаменить(Note, Символ(13), " ");
		
		ЦветНакладной = "";
		Если СуммаПросроченногоДолга > 0 Тогда
			ЦветНакладной = "14882573";
		ИначеЕсли СтруктураМаршрута.ЗаказОтправлен Тогда
			ЦветНакладной = "4557684";
		КонецЕсли;	
		
		врГУИДПартнера = СокрЛП(ПолучитьГУИДПартнера(Выборка.Партнер, ТекАгент));
		Попытка
			
			Если ИмяСервераМА = "Tomsk" Тогда
				
				Если КлиентыКонтрагенты_ПовтИсп_ЭтоПетров(Выборка.Партнер) Тогда
					врОсновнаяТочка = Петров_ПолучитьОсновнуюТочкуПетрова(Выборка.Партнер);
					Если ЗначениеЗаполнено(врОсновнаяТочка) Тогда
						врГУИДПартнера = СокрЛП(ПолучитьГУИДПартнера(врОсновнаяТочка, ТекАгент));
						Note           = "ПЕТРОВ " + Note;	
						ЦветНакладной = "12533503";
					КонецЕсли;	
				КонецЕсли;
				//Если аян_СинхронизацияСервер.ВторойПрайс_ЭтоАгентВторогоПрайсаТомск(Расходные.Менеджер) Тогда
				//	ЦветНакладной = "16711935";
				//КонецЕсли;
			КонецЕсли;
			
		Исключение
			ЗаписатьОшибку1СвЛогФайл("Экспорт накладных ПЕТРОВ", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
		файлВыгрузки.ДобавитьСтроку(
		СокрЛП(ИдКПК)															+ Символ(9) +  // DeviceID
		""																		+ Символ(9) +  // InvoiceID
		СокрЛП(Расходные.УникальныйИдентификатор())								+ Символ(9) +  // InvoiceRefID
		"2"																		+ Символ(9) +  // InvoiceTypeRefID   (2 - накладная) 
		""																		+ Символ(9) +  // ParentInvoiceID 
		""																		+ Символ(9) +  // ParentInvoiceRefID (номер заказа)
		СокрЛП(ТекАгент.УникальныйИдентификатор())								+ Символ(9) +  // AgentRefID
	//	СокрЛП(ПолучитьГУИДПартнера(Выборка.Партнер, ТекАгент))                 + Символ(9) +  // ShopRefID
		врГУИДПартнера											                + Символ(9) +  // ShopRefID
		""																		+ Символ(9) +  // VisitID
		ДатаДока																+ Символ(9) +  // InvoiceDateTime
		СокрЛП(Выборка.НомерНакладной)											+ Символ(9) +  // InvoiceNo
		Формат(СуммаДокумента, "ЧРД=.; ЧГ=")									+ Символ(9) +  // InvoiceAmount    
		Формат(СуммаОплаты, "ЧРД=.; ЧГ=")										+ Символ(9) +  // AmountPaid
		""																		+ Символ(9) +  // DeliveryFromDateTime
		""																		+ Символ(9) +  // DeliveryThruDateTime
		""																		+ Символ(9) +  // IsConfidential
		Лев(Note, 249)												   			+ Символ(9) +  // Note
		СокрЛП(Выборка.Организация.УникальныйИдентификатор())					+ Символ(9) +  // SellerRefID
		""																		+ Символ(9) +  // PriceTypeRefID
		""																		+ Символ(9) +  // InvoiceTypeCode
		""																		+ Символ(9) +  // InvoiceRequired
		""                               										+ Символ(9) +  // ShopID
		Формат(КоличествоДнейПросрочкиНакладной, "ЧРД=.; ЧГ=")	    			+ Символ(9) +  // DaysOverdue
		Формат(СуммаПросроченногоДолга, "ЧРД=.; ЧГ=")	 						+ Символ(9) +  // OverdueDebtAmount
		ЦветНакладной);       									                               // Color
		
		ЧислоСтрок = ЧислоСтрок + 1;
		
	КонецЦикла; 
	
	Попытка
		
		ЧислоСтрок = ЧислоСтрок + ЭкспортНакладныхДляВозврата(ФайлВыгрузки);
			
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Экспорт накладных для возврата", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	// Оплаченные накладные
	
	//Попытка
	//
	//Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Горковенко Дмитрий Евгеньевич") И ЭтоТестовыйАгент(ТекАгент) Тогда
	//
	//	ОплТЗ = ОплаченныеНакладные(ТекАгент, РЗНеоплаченныеНакладные);
	//
	//	Для Каждого ТекДокумент Из ОплТЗ Цикл
	//	
	//		Если МассивДокументов.Найти(ТекДокумент) <> Неопределено Тогда
	//			ЗаписатьОшибку1СвЛогФайл("Экспорт накладных", "Документ " + Строка(ТекДокумент) + " уже выгружен!");
	//			Продолжить;
	//		Иначе
	//			МассивДокументов.Добавить(ТекДокумент);
	//		КонецЕсли;			
	//			
	//		ДатаДока        = Формат(ТекДокумент.Дата, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 
	//		СуммаДокумента 	= ТекДокумент.СуммаДокумента;
	//		СуммаОплаты 	= ТекДокумент.СуммаДокумента;
	//		
	//		КоличествоДнейПросрочкиНакладной = 0;		
	//		СуммаПросроченногоДолга          = 0;
	//	
	//		//СтруктураМаршрута = ПолучитьОписаниеМаршрута(ТекДокумент);
	//		//Note = СокрЛП(СтруктураМаршрута.Маршрут) + "Дата опл.: " + Формат(ТекДокумент.ДатаПлатежа, "ДФ=dd.MM.yy");
	//		//Если Не ПустаяСтрока(ТекДокумент.Комментарий) Тогда
	//		//	Note = Note + "; " + СтрЗаменить(СокрЛП(ТекДокумент.Комментарий), Символы.ПС, " "); 
	//		//КонецЕсли;	
	//		//	
	//		//Note = СтрЗаменить(Note, Символ(13) + Символ(10), " ");
	//		//Note = СтрЗаменить(Note, Символ(10), " ");
	//		//Note = СтрЗаменить(Note, Символ(13), " ");
	//		
	//		Note = "";
	//	
	//		ЦветНакладной = "";
	//	
	//		файлВыгрузки.ДобавитьСтроку(
	//		СокрЛП(ИдКПК)															+ Символ(9) +  // DeviceID
	//		""																		+ Символ(9) +  // InvoiceID
	//		СокрЛП(ТекДокумент.УникальныйИдентификатор())							+ Символ(9) +  // InvoiceRefID
	//		"2"																		+ Символ(9) +  // InvoiceTypeRefID   (2 - накладная) 
	//		""																		+ Символ(9) +  // ParentInvoiceID 
	//		""																		+ Символ(9) +  // ParentInvoiceRefID (номер заказа)
	//		СокрЛП(ТекАгент.УникальныйИдентификатор())								+ Символ(9) +  // AgentRefID
	//		СокрЛП(ПолучитьГУИДПартнера(ТекДокумент.Партнер, ТекАгент))             + Символ(9) +  // ShopRefID
	//		""																		+ Символ(9) +  // VisitID
	//		ДатаДока																+ Символ(9) +  // InvoiceDateTime
	//		СокрЛП(ТекДокумент.Номер)												+ Символ(9) +  // InvoiceNo
	//		Формат(СуммаДокумента, "ЧРД=.; ЧГ=")									+ Символ(9) +  // InvoiceAmount    
	//		Формат(СуммаОплаты, "ЧРД=.; ЧГ=")										+ Символ(9) +  // AmountPaid
	//		""																		+ Символ(9) +  // DeliveryFromDateTime
	//		""																		+ Символ(9) +  // DeliveryThruDateTime
	//		""																		+ Символ(9) +  // IsConfidential
	//		""															   			+ Символ(9) +  // Note
	//		СокрЛП(ТекДокумент.Организация.УникальныйИдентификатор())				+ Символ(9) +  // SellerRefID
	//		""																		+ Символ(9) +  // PriceTypeRefID
	//		""																		+ Символ(9) +  // InvoiceTypeCode
	//		""																		+ Символ(9) +  // InvoiceRequired
	//		""                               										+ Символ(9) +  // ShopID
	//		Формат(КоличествоДнейПросрочкиНакладной, "ЧРД=.; ЧГ=")	    			+ Символ(9) +  // DaysOverdue
	//		Формат(СуммаПросроченногоДолга, "ЧРД=.; ЧГ=")	 						+ Символ(9) +  // OverdueDebtAmount
	//		ЦветНакладной);       									                               // Color
	//		
	//		ЧислоСтрок = ЧислоСтрок + 1;
	//		
	//	КонецЦикла; 	
	//	
	//КонецЕсли;	
	//
	//Исключение
	//
	//	ЗаписатьОшибку1СвЛогФайл("Выгрузка оплаченных накладных", "Исключение!", ИнформацияОбОшибке(), Истина);
	//
	//КонецПопытки;
		
	Если ЧислоСтрок > 0 Тогда
		
		Если Существует Тогда
			ФайлВыгрузки.ЗаменитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
		Иначе	
			ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
		КонецЕсли;
		
		ФайлВыгрузки.Записать(КаталогВыгрузки + "\Invoice.txt", КодировкаТекста.ANSI);
		
		ЛогФайл.ЗаписатьСтроку("" +ТекущаяДата() + " <-Выгрузка проведенных накладных произведена в " + КаталогВыгрузки + "Invoice.txt (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
		
	КонецЕсли;
	
КонецПроцедуры 


// Экспорт табличных частей неоплаченных накладных

Процедура ЭкспортТабличнойЧасти(РЗНеоплаченныеНакладные)
	
	ЗамерСтарт = ТекущаяДата();
	
	Событие1С = "Экспорт табличной части накладных";
	
	ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Выгружаем ТЧ накладных (InvoiceProduct.txt)...");
	
	Файл = Новый Файл(КаталогВыгрузки + "\InvoiceProduct.txt");
	Существует = Файл.Существует();
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	
	ЧислоСтрок = 0;
	
	Если Существует Тогда
		
		ФайлВыгрузки.Прочитать(КаталогВыгрузки + "\InvoiceProduct.txt");
		
	Иначе	
		
		ФайлВыгрузки.ДобавитьСтроку(		
		"DeviceID"				+ Символ(9) + 		
		"InvoiceProductID"		+ Символ(9) +  		
		"InvoiceID"				+ Символ(9) +   	
		"InvoiceRefID"			+ Символ(9) +   	
		"ProductRefID"			+ Символ(9) +  		
		"Price"					+ Символ(9) +  		
		"Volume"				+ Символ(9) +  		
		"VATRate"				+ Символ(9) +
		"DiscountAmount"		+ Символ(9) +   	
		"DiscountRate"			+ Символ(9) +
		"MeasureUnitRefID"      + Символ(9) +
		"PriceTypeRefID" 	    + Символ(9) +
		"StockRefID" 		    + Символ(9) +
		"IsManualPrice");
		
	КонецЕсли;		
	
	
	Для Каждого Выборка Из РЗНеоплаченныеНакладные Цикл
	
		Расходные = Выборка.РН;
				
		СкладНакладной = Выборка.Склад;
		Если ЗначениеЗаполнено(СкладНакладной) Тогда
			Если ЗначениеЗаполнено(Выборка.СкладРодитель) Тогда
				СкладНакладной = Выборка.СкладРодитель;
			Иначе
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + " у склада " + Строка(СкладНакладной) + " не указан РОДИТЕЛЬ!");
			КонецЕсли;	
		Иначе
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + " не заполнен СКЛАД!");	
		КонецЕсли;	
			
		ВидЦеныНакладной = Справочники.ВидыЦен.ПустаяСсылка();
		Если ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
			ВидЦеныНакладной = Выборка.ВидЦен;
		Иначе
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + ", в Соглашении не указан ВИД ЦЕН!");	
		КонецЕсли;	
		
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.УстановитьПараметр("Ссылка", Расходные);
		ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	РеализацияТоваровУслугТовары.Номенклатура,
		                     |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                     |	РеализацияТоваровУслугТовары.Количество,
		                     |	РеализацияТоваровУслугТовары.Цена,
		                     |	РеализацияТоваровУслугТовары.СтавкаНДС,
		                     |	РеализацияТоваровУслугТовары.СуммаСНДС
		                     |ИЗ
		                     |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                     |ГДЕ
		                     |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();
		
		Пока ВыборкаТовары.Следующий() Цикл
			                          
			врЦена = ВыборкаТовары.Цена;
			Если ВыборкаТовары.Количество <> 0 Тогда
				врЦена = Окр(ВыборкаТовары.СуммаСНДС/ВыборкаТовары.Количество, 2, 1);
			КонецЕсли;	
						
			ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП(ИдКПК)														+ Символ(9) +            						// DeviceID
			""																	+ Символ(9) +    						    	// InvoiceProductID
			""																	+ Символ(9) +            						// InvoiceID
			СокрЛП(Расходные.УникальныйИдентификатор())							+ Символ(9) +            						// InvoiceRefID
			СокрЛП(ВыборкаТовары.Номенклатура.УникальныйИдентификатор())  		+ Символ(9) +            						// ProductRefID
			Формат(врЦена, "ЧРД=.; ЧГ=")										+ Символ(9) +     						    	// Price
			Формат(ВыборкаТовары.Количество, "ЧРД=.; ЧГ=")						+ Символ(9) +            						// Volume
			Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТовары.СтавкаНДС), "ЧРД=.; ЧГ=")	+ Символ(9) +	// VATRate
			""																	+ Символ(9) +            						// DiscountAmount
			""																	+ Символ(9) +            						// DiscountRate
			СокрЛП(ВыборкаТовары.ЕдиницаИзмерения.УникальныйИдентификатор())    + Символ(9) +									// MeasureUnitRefID
			СокрЛП(ВидЦеныНакладной.УникальныйИдентификатор())					+ Символ(9) +            						// PriceTypeRefID
			СокрЛП(СкладНакладной.УникальныйИдентификатор())					+ Символ(9) +            						// StockRefID
			"false");																											// IsManualPrice
			
			ЧислоСтрок = ЧислоСтрок + 1;	
						
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		
		ЧислоСтрок = ЧислоСтрок + ЭкспортТоваровНакладныхДляВозврата(ФайлВыгрузки);
			
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Экспорт товаров накладных для возврата", "Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	//Попытка
	//
	//Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Горковенко Дмитрий Евгеньевич") И ЭтоТестовыйАгент(ТекАгент) Тогда
	//		
	//Для Каждого Выборка Из ОплТЗ Цикл
	//
	//	Расходные = Выборка;
	//			
	//	СкладНакладной = Выборка.Склад;
	//	Если ЗначениеЗаполнено(СкладНакладной) Тогда
	//		Если ЗначениеЗаполнено(Выборка.Склад.Родитель) Тогда
	//			СкладНакладной = Выборка.Склад.Родитель;
	//		Иначе
	//		//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + " у склада " + Строка(СкладНакладной) + " не указан РОДИТЕЛЬ!");
	//		КонецЕсли;	
	//	Иначе
	//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + " не заполнен СКЛАД!");	
	//	КонецЕсли;	
	//		
	//	ВидЦеныНакладной = Справочники.ВидыЦен.ПустаяСсылка();
	//	Если ЗначениеЗаполнено(Выборка.Соглашение.ВидЦен) Тогда
	//		ВидЦеныНакладной = Выборка.Соглашение.ВидЦен;
	//	Иначе
	//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "В накладной " + Строка(Расходные) + ", в Соглашении не указан ВИД ЦЕН!");	
	//	КонецЕсли;	
	//	
	//	ЗапросТовары = Новый Запрос;
	//	ЗапросТовары.УстановитьПараметр("Ссылка", Расходные);
	//	ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	                     |	РеализацияТоваровУслугТовары.Номенклатура,
	//	                     |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	                     |	РеализацияТоваровУслугТовары.Количество,
	//	                     |	РеализацияТоваровУслугТовары.Цена,
	//	                     |	РеализацияТоваровУслугТовары.СтавкаНДС
	//	                     |ИЗ
	//	                     |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//	                     |ГДЕ
	//	                     |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	//	ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();
	//	
	//	Пока ВыборкаТовары.Следующий() Цикл
	//					
	//		ФайлВыгрузки.ДобавитьСтроку(
	//		СокрЛП(ИдКПК)														+ Символ(9) +            						// DeviceID
	//		""																	+ Символ(9) +    						    	// InvoiceProductID
	//		""																	+ Символ(9) +            						// InvoiceID
	//		СокрЛП(Расходные.УникальныйИдентификатор())							+ Символ(9) +            						// InvoiceRefID
	//		СокрЛП(ВыборкаТовары.Номенклатура.УникальныйИдентификатор())  		+ Символ(9) +            						// ProductRefID
	//		Формат(ВыборкаТовары.Цена, "ЧРД=.; ЧГ=")							+ Символ(9) +     						    	// Price
	//		Формат(ВыборкаТовары.Количество, "ЧРД=.; ЧГ=")						+ Символ(9) +            						// Volume
	//		Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТовары.СтавкаНДС), "ЧРД=.; ЧГ=")	+ Символ(9) +	// VATRate
	//		""																	+ Символ(9) +            						// DiscountAmount
	//		""																	+ Символ(9) +            						// DiscountRate
	//		СокрЛП(ВыборкаТовары.ЕдиницаИзмерения.УникальныйИдентификатор())    + Символ(9) +									// MeasureUnitRefID
	//		СокрЛП(ВидЦеныНакладной.УникальныйИдентификатор())					+ Символ(9) +            						// PriceTypeRefID
	//		СокрЛП(СкладНакладной.УникальныйИдентификатор())					+ Символ(9) +            						// StockRefID
	//		"false");																											// IsManualPrice
	//		
	//		ЧислоСтрок = ЧислоСтрок + 1;	
	//					
	//	КонецЦикла;
	//	
	//КонецЦикла;			
	//	
	//КонецЕсли;	
	//
	//Исключение
	//
	//	ЗаписатьОшибку1СвЛогФайл("Выгрузка оплаченных накладных", "Исключение!", ИнформацияОбОшибке(), Истина);
	//
	//КонецПопытки;		
	
	Если ЧислоСтрок > 0 Тогда
		
		Если Существует Тогда
			ФайлВыгрузки.ЗаменитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
		Иначе	
			ФайлВыгрузки.ВставитьСтроку(1, Формат(ФайлВыгрузки.КоличествоСтрок() - 1, "ЧГ="));
		КонецЕсли;
		
		ФайлВыгрузки.Записать(КаталогВыгрузки + "\InvoiceProduct.txt", КодировкаТекста.ANSI);
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Выгрузка табличной части накладных произведена в " + КаталогВыгрузки + "InvoiceProduct.txt (" + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");
		
	КонецЕсли;
	
КонецПроцедуры	


#КонецОбласти


#Область КЭШ


Процедура СохранитьДанныеОперативнойСинхронизацииВКэш()
	
	Событие1С = "Сохранение данных оперативной синхронизации в КЭШ";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		Возврат;
	КонецЕсли;	
	
	СтрДлинаСтрокиКаталогаВыгрузки = СтрДлина(КаталогВыгрузки);
	
	КаталогСохранения = Лев(КаталогВыгрузки, СтрДлинаСтрокиКаталогаВыгрузки - 9) + "Temp";
	
	КаталогСохранениеСуществует = Ложь;
	ФайлыУдалены                = Ложь;
	
	Попытка
	
		Файл = Новый Файл(КаталогСохранения);
		Если Файл.Существует() Тогда
			
			КаталогСохранениеСуществует = Истина;
			
			НайденныеФайлы = НайтиФайлы(КаталогСохранения, "*.*");		
			Для Каждого ТекФайл Из НайденныеФайлы Цикл
				УдалитьФайлы(ТекФайл.ПолноеИмя);
			КонецЦикла;	
			
		КонецЕсли;		
		
		ФайлыУдалены = Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Если Не ФайлыУдалены Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не КаталогСохранениеСуществует Тогда
		
		СоздатьКаталог(КаталогСохранения);
		
	КонецЕсли;	
	
	ФайлыСкопированы = Ложь;
	
	Попытка
	
		НайденныеФайлы = НайтиФайлы(КаталогВыгрузки, "*.*");		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			врИмяФайла = ТекФайл.Имя;
			Если ЭтоНовыйСерверМА Тогда
				Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "Shop.txt") Тогда
					КопироватьФайл(КаталогВыгрузки + ТекФайл.Имя, КаталогСохранения + "\" + ТекФайл.Имя);	
				КонецЕсли;	
			Иначе
				Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "Shop2.txt") Тогда
					КопироватьФайл(КаталогВыгрузки + ТекФайл.Имя, КаталогСохранения + "\" + ТекФайл.Имя);	
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;
		
		ФайлыСкопированы = Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Если ФайлыСкопированы Тогда
		
		ФайлВыгрузки = Новый ТекстовыйДокумент;
		ФайлВыгрузки.Записать(КаталогСохранения + "\" + "TempDate.txt", КодировкаТекста.ANSI);		
		
	КонецЕсли;	
	
КонецПроцедуры	


Функция СкопироватьДанныеОперативнойСинхронизацииИзКэша(НеКопироватьШоп = Ложь)
	
	Событие1С = "Копирование данных оперативной синхронизации из КЭШа";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;		
	
	СтрДлинаСтрокиКаталогаВыгрузки = СтрДлина(КаталогВыгрузки);
	
	КаталогСохранения = Лев(КаталогВыгрузки, СтрДлинаСтрокиКаталогаВыгрузки - 9) + "Temp";
	
	Файл = Новый Файл(КаталогСохранения + "\TempDate.txt");
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НачалоДня(Файл.ПолучитьВремяИзменения()) <> НачалоДня(ТекущаяДата()) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ФайлыУдалены = Ложь;
		
	Попытка
	
		НайденныеФайлы = НайтиФайлы(КаталогВыгрузки, "*.*");		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			врИмяФайла = ТекФайл.Имя;
			Если ЭтоНовыйСерверМА Тогда
				Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "InvoiceProduct.txt") ИЛИ (врИмяФайла = "Shop.txt") Тогда
					УдалитьФайлы(ТекФайл.ПолноеИмя);
				КонецЕсли;	
			Иначе
				Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "InvoiceProduct.txt") ИЛИ (врИмяФайла = "Shop2.txt") Тогда
					УдалитьФайлы(ТекФайл.ПолноеИмя);
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;	
			
		ФайлыУдалены = Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Если Не ФайлыУдалены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлыСкопированы = Ложь;
	
	Попытка
	
		НайденныеФайлы = НайтиФайлы(КаталогСохранения, "*.*");		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			врИмяФайла = ТекФайл.Имя;
			Если ЭтоНовыйСерверМА Тогда
				Если НеКопироватьШоп Тогда
					Если (врИмяФайла = "Invoice.txt") Тогда
						КопироватьФайл(КаталогСохранения + "\" + ТекФайл.Имя, КаталогВыгрузки + ТекФайл.Имя);	
					КонецЕсли;
				Иначе
					Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "Shop.txt") Тогда
						КопироватьФайл(КаталогСохранения + "\" + ТекФайл.Имя, КаталогВыгрузки + ТекФайл.Имя);	
					КонецЕсли;					
				КонецЕсли;	
			Иначе
				Если (врИмяФайла = "Invoice.txt") ИЛИ (врИмяФайла = "Shop2.txt") Тогда
					КопироватьФайл(КаталогСохранения + "\" + ТекФайл.Имя, КаталогВыгрузки + ТекФайл.Имя);	
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;
		
		ФайлыСкопированы = Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат ФайлыСкопированы;
	
КонецФункции	


#КонецОбласти


#Область ФЛЮГЕР


// Запись ошибок 1C в F_LogErr.txt

Процедура Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие, ТекстОшибки, ИнфОбОшибке = Неопределено, ЭтоОбработкаИсключения = Ложь)
	
	Попытка 
		
		ЛогОшибок1С = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "F_LogErrors" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".txt", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		Если ЭтоОбработкаИсключения Тогда
			
			ЛогТекстОшибки = ЛогТекстОшибки + " ## Обработка исключения! Описание = " + СокрЛП(ИнфОбОшибке.Описание) + 
										  		"; Имя модуля = "                     + СокрЛП(ИнфОбОшибке.ИмяМодуля) + 
										  	    "; Номер строки = "                   + СокрЛП(ИнфОбОшибке.НомерСтроки) + 
										  		"; Исходная строка = "                + СокрЛП(ИнфОбОшибке.ИсходнаяСтрока) + 
										  		"; Причина = "    		              + СокрЛП(ИнфОбОшибке.Причина); 										  
										  
		КонецЕсли;	
	
		ЛогОшибок1С.ЗаписатьСтроку("<-- ## " + ТекущаяДата() + " ## " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + ")" + " ## " + "Событие = " + СокрЛП(Событие) + " ## " + СокрЛП(ЛогТекстОшибки));	
		ЛогОшибок1С.ЗаписатьСтроку("");	
		
		ЛогОшибок1С.Закрыть();	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	


// Заказ полностью отказан к отгрузке

Функция Флюгер_ПолныйОтказ(врInvoiceID)
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("InvoiceID", врInvoiceID);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	аян_СинхронизацияLog.Документ,
		               |	аян_СинхронизацияLog.ДатаЗагрузки
		               |ИЗ
		               |	РегистрСведений.аян_СинхронизацияLog КАК аян_СинхронизацияLog
		               |ГДЕ
		               |	аян_СинхронизацияLog.InvoiceID = &InvoiceID
		               |	И аян_СинхронизацияLog.Статус = ""Проведен""";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Возврат Ложь;
		
		КонецЕсли;	
		
	Исключение
		
		Флюгер_ЗаписатьОшибку1СвЛогФайл("Проверка на дубли", "Исключение", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
				   
	Возврат Истина;
	
КонецФункции


// Флюгер - создание файла Invoice.txt

&НаСервере
Функция Флюгер_СоздатьФайл_Invoice(врКаталогФайла, врТЗ_Инвойс)
	
	Попытка
		
		ИмяФайлаИнвойс = СокрЛП(врКаталогФайла) + "\FromDevice\Invoice.txt";
		
		ФайлВыгрузки = Новый ТекстовыйДокумент;
		
		ФайлВыгрузки.ДобавитьСтроку(Строка(врТЗ_Инвойс.Количество()));
		ФайлВыгрузки.ДобавитьСтроку("");
					
		ДатаНакладной = Формат(ТекущаяДата(), "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 	
		
		Для Каждого ТекСтрокаИнвойс Из врТЗ_Инвойс Цикл
			
			ФайлВыгрузки.ДобавитьСтроку(
				СокрЛП("DevFLG") 														+ Символ(9) +  // DeviceID
				СокрЛП(ТекСтрокаИнвойс.ИнвойсИД)										+ Символ(9) +  // InvoiceID
				""																		+ Символ(9) +  // InvoiceRefID
				?(ТекСтрокаИнвойс.Возврат, "21", "11")									+ Символ(9) +  // InvoiceTypeRefID
				""																		+ Символ(9) +  // ParentInvoiceID 
				""																		+ Символ(9) +  // ParentInvoiceRefID
				СокрЛП(ТекСтрокаИнвойс.Агент.УникальныйИдентификатор())					+ Символ(9) +  // AgentRefID
				СокрЛП(ТекСтрокаИнвойс.Клиент.УникальныйИдентификатор())	            + Символ(9) +  // ShopRefID
				""																		+ Символ(9) +  // VisitID
				ДатаНакладной															+ Символ(9) +  // InvoiceDateTime
				""																		+ Символ(9) +  // InvoiceNo
				""																		+ Символ(9) +  // InvoiceAmount    
				""																		+ Символ(9) +  // AmountPaid		
				ДатаНакладной															+ Символ(9) +  // DeliveryFromDateTime
				ДатаНакладной															+ Символ(9) +  // DeliveryThruDateTime		
				""																		+ Символ(9) +  // IsConfidential
				Лев(ТекСтрокаИнвойс.Комментарий, 249)						   			+ Символ(9) +  // Note
				""																		+ Символ(9) +  // SellerRefID		
				""																		+ Символ(9) +  // PriceTypeRefID
				"11"																	+ Символ(9) +  // InvoiceTypeCode
				"False"																	+ Символ(9) +  // InvoiceRequired
				""                               										+ Символ(9) +  // ShopID
				""																		+ Символ(9) +  // GpsLatitude		
				""																		+ Символ(9) +  // GpsLongitude		
				""																		+ Символ(9) +  // GpsHDOP			
				"False"																	+ Символ(9) +  // GpsIsVisited		
				""																		+ Символ(9) +  // InvoiceWeight			
				"2"																		+ Символ(9) +  // InvoiceStatusRefID		
				""																		+ Символ(9) +  // StockRefID		
				ДатаНакладной															+ Символ(9) +  // InvoiceInitDateTime
				?(ТекСтрокаИнвойс.Бонус,    			"True", "False")				+ Символ(9) +  // IsTTN				
				?(ТекСтрокаИнвойс.Наличные,				"True", "False")				+ Символ(9) +  // IsInvoice			
				?(ТекСтрокаИнвойс.БезОплатыНеОставлять, "True", "False")				+ Символ(9) +  // WithouPay			
				"False"																	+ Символ(9) +  // Return			
				"False"																	+ Символ(9) +  // Petrov			
				"");																				   // PaymentDate		
							
		КонецЦикла;	
		
		ФайлВыгрузки.Записать(ИмяФайлаИнвойс, КодировкаТекста.ANSI);
		
		Возврат Истина;
		
	Исключение
			
		Флюгер_ЗаписатьОшибку1СвЛогФайл("ФЛЮГЕР", "Ошибка при создании файла """ + СокрЛП(ИмяФайлаИнвойс) + """", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции	


// Флюгер - создание файла InvoiceProduct.txt

&НаСервере
Функция Флюгер_СоздатьФайл_InvoiceProduct(врКаталогФайла, врТЗ_ИнвойсПродукт)
	
	Попытка
		
		ИмяФайлаИнвойсПродукт = СокрЛП(врКаталогФайла) + "\FromDevice\InvoiceProduct.txt";
	
		ФайлВыгрузки = Новый ТекстовыйДокумент;
		
		ФайлВыгрузки.ДобавитьСтроку(Строка(врТЗ_ИнвойсПродукт.Количество()));
		ФайлВыгрузки.ДобавитьСтроку("");
					
		Для Каждого ТекСтрока Из врТЗ_ИнвойсПродукт Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Товар) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			СтавкаНДС = Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.Товар.СтавкаНДС), "ЧРД=.; ЧГ=");
			
			ФайлВыгрузки.ДобавитьСтроку(			
				СокрЛП("DevFLG")   													+ Символ(9) +            						// DeviceID
				""																	+ Символ(9) +    						    	// InvoiceProductID
				СокрЛП(ТекСтрока.ИнвойсИД)											+ Символ(9) +            						// InvoiceID
				СокрЛП(ТекСтрока.Товар.УникальныйИдентификатор()) 			 		+ Символ(9) +            						// ProductRefID
				"1"																	+ Символ(9) +     						    	// Price
				Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ=")							+ Символ(9) +            						// Volume
				СтавкаНДС															+ Символ(9) +									// VATRate
				""																	+ Символ(9) +            						// DiscountAmount
				""																	+ Символ(9) +       							// DiscountRate
				СокрЛП(ТекСтрока.Товар.ЕдиницаИзмерения.УникальныйИдентификатор())	+ Символ(9) +									// MeasureUnitRefID
				""																	+ Символ(9) +            						// PriceTypeRefID
				""																	+ Символ(9) +            						// StockRefID
				"false");																											// IsManualPrice
			
		КонецЦикла;	
						
		ФайлВыгрузки.Записать(ИмяФайлаИнвойсПродукт, КодировкаТекста.ANSI);
		
		Возврат Истина;
		
	Исключение
		
		Флюгер_ЗаписатьОшибку1СвЛогФайл("ФЛЮГЕР", "Ошибка при создании файла """ + СокрЛП(ИмяФайлаИнвойсПродукт) + """", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции	


// Флюгер - Инициализация параметров сканирования

Функция Флюгер_ИнициализацияПараметровСканирования()
	
	// Данные повторного использования
	
	ПовтИсп_ТЗ_ТелефоныФизЛиц = Новый ТаблицаЗначений;
	ПовтИсп_ТЗ_ТелефоныФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПовтИсп_ТЗ_ТелефоныФизЛиц.Колонки.Добавить("Телефон", 		 ОписаниеТипаСтрока(50));

	ПовтИсп_ТЗ_ФИОФизЛиц = Новый ТаблицаЗначений;
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("ФизическоеЛицо",      Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Фамилия", 		     ОписаниеТипаСтрока(100));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Имя", 			     ОписаниеТипаСтрока(100));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Отчество", 		     ОписаниеТипаСтрока(100));	
	
	// Сегменты клиентов без лимита задолженности
	
	СегментСети 				= Справочники.СегментыПартнеров.НайтиПоКоду("00-00000011");
	СегментОгружатьВЛюбомСлучае = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000012");
	
	СегментыБезЛимитаЗадолженности = Новый Массив;
	СегментыБезЛимитаЗадолженности.Добавить(СегментСети);
	СегментыБезЛимитаЗадолженности.Добавить(СегментОгружатьВЛюбомСлучае);
	
	// Товары без НДС
			
	ТоварыБезНДС = Новый Массив;
				
	ЗапросТоварыБезНДС = Новый Запрос;
	ЗапросТоварыБезНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	аян_ТоварыБезНДС.Номенклатура
	                           |ИЗ
	                           |	РегистрСведений.аян_ТоварыБезНДС КАК аян_ТоварыБезНДС";
	ВыборкаТоварыБезНДС = ЗапросТоварыБезНДС.Выполнить().Выбрать();
	Пока ВыборкаТоварыБезНДС.Следующий() Цикл
		ТоварыБезНДС.Добавить(ВыборкаТоварыБезНДС.Номенклатура);
	КонецЦикла;			
	
	// Весовые товары
	
	ТоварыВесовые = Новый Массив;
	
	//ЗапросВЕС = Новый Запрос;
	//ЗапросВЕС.УстановитьПараметр("ТоварыБезНДС",     ТоварыБезНДС);
	//ЗапросВЕС.УстановитьПараметр("ВидНоменклатуры",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Молочная продукция"));
	//ЗапросВЕС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	//ЗапросВЕС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//                  |	Номенклатура.Ссылка
	//                  |ИЗ
	//                  |	Справочник.Номенклатура КАК Номенклатура
	//                  |ГДЕ
	//                  |	НЕ Номенклатура.ПометкаУдаления
	//                  |	И НЕ Номенклатура.ЭтоГруппа
	//                  |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	//                  |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	//                  |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ТоварыБезНДС)";
	//ВыборкаВЕС = ЗапросВЕС.Выполнить().Выбрать();			   
	//Пока ВыборкаВЕС.Следующий() Цикл
	//	ТоварыВесовые.Добавить(ВыборкаВЕС.Ссылка);
	//КонецЦикла;	
		
	МассивЗонНабора = Новый Массив;
	МассивЗонНабора.Добавить(Справочники.ЗоныНабораТовара.НайтиПоКоду("000000005"));
	МассивЗонНабора.Добавить(Справочники.ЗоныНабораТовара.НайтиПоКоду("000000006"));
	
	ЗапросВЕС = Новый Запрос;
	ЗапросВЕС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	ЗапросВЕС.УстановитьПараметр("ЗонаНабора", 		 МассивЗонНабора);
	ЗапросВЕС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	Номенклатура.Ссылка
	                  |ИЗ
	                  |	Справочник.Номенклатура КАК Номенклатура
	                  |ГДЕ
	                  |	НЕ Номенклатура.ПометкаУдаления
	                  |	И НЕ Номенклатура.ЭтоГруппа
	                  |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ТоварыИсключения)
	                  |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	                  |	И Номенклатура.ЗонаНабора В(&ЗонаНабора)";
	ВыборкаВЕС = ЗапросВЕС.Выполнить().Выбрать();			   
	Пока ВыборкаВЕС.Следующий() Цикл
		ТоварыВесовые.Добавить(ВыборкаВЕС.Ссылка);
	КонецЦикла;		
		
	// Весовые товары без НДС
	
	ТоварыВесовыеБезНДС = Новый Массив;
	
	ЗапросВЕСБезНДС = Новый Запрос;
	ЗапросВЕСБезНДС.УстановитьПараметр("ТоварыБезНДС",     ТоварыБезНДС);
	ЗапросВЕСБезНДС.УстановитьПараметр("ВидНоменклатуры",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Молочная продукция"));
	ЗапросВЕСБезНДС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	ЗапросВЕСБезНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	Номенклатура.Ссылка
	                        |ИЗ
	                        |	Справочник.Номенклатура КАК Номенклатура
	                        |ГДЕ
	                        |	НЕ Номенклатура.ПометкаУдаления
	                        |	И НЕ Номенклатура.ЭтоГруппа
	                        |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	                        |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	                        |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыБезНДС)";
	ВыборкаВЕСБезНДС = ЗапросВЕСБезНДС.Выполнить().Выбрать();			   
	Пока ВыборкаВЕСБезНДС.Следующий() Цикл
		ТоварыВесовыеБезНДС.Добавить(ВыборкаВЕСБезНДС.Ссылка);
	КонецЦикла;		

	// Сигареты
	
	ТоварыСигареты = Новый Массив;
	
	ЗапросСигареты = Новый Запрос;
	ЗапросСигареты.УстановитьПараметр("ТоварыСигареты",  Справочники.Номенклатура.НайтиПоКоду("00-00009131"));
	ЗапросСигареты.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры_ТабачнаяПродукция);
	ЗапросСигареты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	Номенклатура.Ссылка
	                       |ИЗ
	                       |	Справочник.Номенклатура КАК Номенклатура
	                       |ГДЕ
	                       |	НЕ Номенклатура.ПометкаУдаления
	                       |	И НЕ Номенклатура.ЭтоГруппа
	                       |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыСигареты)
	                       |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
	ВыборкаСигареты = ЗапросСигареты.Выполнить().Выбрать();			   
	Пока ВыборкаСигареты.Следующий() Цикл
		ТоварыСигареты.Добавить(ВыборкаСигареты.Ссылка);
	КонецЦикла;
	
	// ОВОЩИ-ФРУКТЫ ВЕС
	
	Товары_ОвощиФрукты = Новый Массив;
	
	ЗапросОвощиФрукты = Новый Запрос;
	ЗапросОвощиФрукты.УстановитьПараметр("ТоварыОвощиФрукты",  Справочники.Номенклатура.НайтиПоКоду("00-00012416"));
	ЗапросОвощиФрукты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	Номенклатура.Ссылка
	                          |ИЗ
	                          |	Справочник.Номенклатура КАК Номенклатура
	                          |ГДЕ
	                          |	НЕ Номенклатура.ПометкаУдаления
	                          |	И НЕ Номенклатура.ЭтоГруппа
	                          |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыОвощиФрукты)";
	ВыборкаОвощиФрукты = ЗапросОвощиФрукты.Выполнить().Выбрать();			   
	Пока ВыборкаОвощиФрукты.Следующий() Цикл
		Товары_ОвощиФрукты.Добавить(ВыборкаОвощиФрукты.Ссылка);
	КонецЦикла;		
			
КонецФункции	


// Флюгер - Сканирование

Функция Флюгер_Сканирование()
	
	Событие1С = "ФЛЮГЕР (Сканирование)";
	
	КаталогФлюгер = РабочийКаталог + "DevInsider2";
	
	ТЗ_Инвойс = Новый ТаблицаЗначений;
	ТЗ_Инвойс.Колонки.Добавить("Агент");
	ТЗ_Инвойс.Колонки.Добавить("Клиент");
	ТЗ_Инвойс.Колонки.Добавить("ИнвойсИД");
	ТЗ_Инвойс.Колонки.Добавить("Возврат");
	ТЗ_Инвойс.Колонки.Добавить("Бонус");
	ТЗ_Инвойс.Колонки.Добавить("Наличные");		
	ТЗ_Инвойс.Колонки.Добавить("БезОплатыНеОставлять");
	ТЗ_Инвойс.Колонки.Добавить("Комментарий");
	
	ТЗ_ИнвойсПродукт = Новый ТаблицаЗначений;
	ТЗ_ИнвойсПродукт.Колонки.Добавить("ИнвойсИД");
	ТЗ_ИнвойсПродукт.Колонки.Добавить("Товар");
	ТЗ_ИнвойсПродукт.Колонки.Добавить("Количество");
	
	ФлагОбработкиДанных = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФлюгерЗаказы.ИДФлюгер,
	               |	ФлюгерЗаказы.Партнер,
	               |	ФлюгерЗаказы.Пользователь КАК Пользователь,
	               |	ФлюгерЗаказы.Комментарий,
	               |	ФлюгерЗаказы.Товары
	               |ИЗ
	               |	РегистрСведений.ФлюгерЗаказы КАК ФлюгерЗаказы
	               |ГДЕ
	               |	НЕ ФлюгерЗаказы.Обработан
	               |ИТОГИ ПО
	               |	Пользователь";
	ВыборкаПользователи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПользователи.Следующий() Цикл
		
		ФлагОбработкиДанных = Истина;
		
		// Очистка каталога загрузки + вспомогательных структур данных
		
		ТЗ_Инвойс.Очистить();
		ТЗ_ИнвойсПродукт.Очистить();
		
		Если Не аян_СинхронизацияСервер.Файлы_ОчиститьКаталог(СокрЛП(КаталогФлюгер) + "\FromDevice") Тогда
			Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка очистки каталога загрузки");
			Продолжить;
		КонецЕсли;	
		
		// Invoice.txt, InvoiceProduct.txt
		
		Выборка = ВыборкаПользователи.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НовСтрокаИнвойс = ТЗ_Инвойс.Добавить();
			НовСтрокаИнвойс.Агент   			 = ВыборкаПользователи.Пользователь;
			НовСтрокаИнвойс.Клиент   			 = Выборка.Партнер;
			НовСтрокаИнвойс.ИнвойсИД             = "FLG_" + СокрЛП(Выборка.ИДФлюгер);
			НовСтрокаИнвойс.Возврат              = Ложь;
			НовСтрокаИнвойс.Бонус                = Ложь;
			НовСтрокаИнвойс.Наличные             = Ложь;
			НовСтрокаИнвойс.БезОплатыНеОставлять = Ложь;
			НовСтрокаИнвойс.Комментарий          = СокрЛП(Выборка.Комментарий);
		//	НовСтрокаИнвойс.Комментарий          = СокрЛП("ТЕСТ!!! ТЕСТ!!! ТЕСТ!!! НЕ ПРОВОДИТЬ!!!");
			
			Попытка
				
				ХЗТовары = Выборка.Товары.Получить();
				
				Если ХЗТовары.Количество() = 0 Тогда
					
					Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие1С, "Пустая табличная часть для ИД Флюгер: " + Строка(Выборка.ИДФлюгер));
					
				КонецЕсли;	
				
				Для Каждого ТекСтрокаТоварыХЗ Из ХЗТовары Цикл
					
					НовСтрокаТовары = ТЗ_ИнвойсПродукт.Добавить();
					НовСтрокаТовары.ИнвойсИД   = "FLG_" + СокрЛП(Выборка.ИДФлюгер);
					НовСтрокаТовары.Товар      = ТекСтрокаТоварыХЗ.Номенклатура;
					НовСтрокаТовары.Количество = ТекСтрокаТоварыХЗ.Количество;
					
				КонецЦикла;
				
			Исключение
				
				Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка чтения хранилища значения!", ИнформацияОбОшибке(), Истина);
				Продолжить;
				
			КонецПопытки;	
		
		КонецЦикла;
		
		Если Не Флюгер_СоздатьФайл_Invoice(КаталогФлюгер, ТЗ_Инвойс) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не Флюгер_СоздатьФайл_InvoiceProduct(КаталогФлюгер, ТЗ_ИнвойсПродукт) Тогда
			Продолжить;
		КонецЕсли;		
		
		// Инициализация параметров сканирования
		
		Флюгер_ИнициализацияПараметровСканирования();
		
		ТекАгент = ВыборкаПользователи.Пользователь;
		
	//	ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Батин Олег Викторович");
									
		ЗапросСклад = Новый Запрос;
		ЗапросСклад.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	НастройкиПользователей.Пользователь,
		                    |	НастройкиПользователей.Настройка,
		                    |	НастройкиПользователей.Значение
		                    |ИЗ
		                    |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
		                    |ГДЕ
		                    |	НастройкиПользователей.Пользователь = &Пользователь
		                    |	И НастройкиПользователей.Настройка = &Настройка";
		ЗапросСклад.Параметры.Вставить("Пользователь", ТекАгент);
		ЗапросСклад.Параметры.Вставить("Настройка",    ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);		
		ВыборкаСклад = ЗапросСклад.Выполнить().Выбрать();
		Если ВыборкаСклад.Следующий() Тогда 
			СкладАгента = ВыборкаСклад.Значение;
		Иначе 
			СкладАгента = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
			
		ОсновнаяФирма   = ПолучитьОсновнуюОрганизацию(ТекАгент);				
		ОргБонусТомск   = ПолучитьОрганизациюБонус(ТекАгент);				
		ОсновнойТипЦен	= Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист"); 
		ОсновнойСклад 	= ПолучитьОсновнойСкладАгента(ТекАгент);
		
		КаталогЗагрузки = СокрЛП(КаталогФлюгер + "\FromDevice");
		КаталогВыгрузки = СокрЛП(КаталогФлюгер + "\ToDevice");
		
		ФайлОшибок      = Новый ТекстовыйДокумент;		
		
		ЛогФайл         = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "F_LogGeneral" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".log", КодировкаТекста.ANSI, ,Истина);
		
		ЛогФайл.ЗаписатьСтроку("");
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " " + СокрЛП(ТекАгент));
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Загрузка документов...");
		
		ЗамерСтарт = ТекущаяДата();
			
		// Загрузка документов
		
		ФлагЗагрузкиДокументов = Ложь;
		
		Попытка
			
			КоличествоЗаявокВСинхронизации = 0;
			
			//Если ИмяСервераМА = "Region" Тогда
			//	ЗагрузитьДокументы(КоличествоЗаявокВСинхронизации);
			//Иначе
				ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗаявокВСинхронизации);
			//КонецЕсли;	
		
			ФлагЗагрузкиДокументов = Истина;
			
		Исключение
			
			Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка загрузки документов!", ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;	
		
		ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Загрузка документов завершена ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд).");
		
		ЛогФайл.Закрыть();
		
		ФайлОшибок.Записать(КаталогЛогФайлов + "\" + "DevInsider2" + ".err", КодировкаТекста.ANSI);
		
		// Отметка загрузки документов
		
		НЗ_ФлюгерЗаказы = РегистрыСведений.ФлюгерЗаказы.СоздатьНаборЗаписей();
		
		Для Каждого ТекСтрокаИнвойс Из ТЗ_Инвойс Цикл
			
			врИнвойсИД = Прав(ТекСтрокаИнвойс.ИнвойсИД, СтрДлина(ТекСтрокаИнвойс.ИнвойсИД) - 4);
			
			НЗ_ФлюгерЗаказы.Отбор.ИДФлюгер.Установить(врИнвойсИД);
			НЗ_ФлюгерЗаказы.Прочитать();
	
			Если НЗ_ФлюгерЗаказы.Количество() > 0 Тогда
				
				Для Каждого ТекЗаписьНЗ Из НЗ_ФлюгерЗаказы Цикл
					
					ТекЗаписьНЗ.Обработан     = Истина;
					ТекЗаписьНЗ.ДатаОбработки = ТекущаяДата();
					ТекЗаписьНЗ.ПолныйОтказ   = Флюгер_ПолныйОтказ(ТекСтрокаИнвойс.ИнвойсИД);
					
				КонецЦикла;	
				
				Попытка
					НЗ_ФлюгерЗаказы.Записать(Истина);
				Исключение
					Флюгер_ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка отметки загрузки документов!", ИнформацияОбОшибке(), Истина);
				КонецПопытки;	
				
			КонецЕсли;
			
		КонецЦикла;	
						
		// Пауза 5 секунд
		
		ДатаПауза = ТекущаяДата();
						
		Если ТекущаяДата() >= ДатаПауза Тогда
						
			Пока (ТекущаяДата() - ДатаПауза) <= 5 Цикл
									
			КонецЦикла;	
			
		КонецЕсли;	
		
	//	Возврат ФлагОбработкиДанных;
		
	КонецЦикла;	
	
	Возврат ФлагОбработкиДанных;
	
КонецФункции


#КонецОбласти


#Область ПЕТРУШКА


Функция Петрушка_ВариантОтветаКлиентаПриЗаказе(врДокЗаказПриложения)
	
	Попытка 
		
	    врПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ВариантОтветаКлиентаПриЗаказе (Документ ""Заказы приложения"")"); 
	   
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",   врДокЗаказПриложения);
		Запрос.УстановитьПараметр("Свойство", врПВХ);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ЗаказыПриложенияДополнительныеРеквизиты.Значение
		               |ИЗ
		               |	Документ.ЗаказыПриложения.ДополнительныеРеквизиты КАК ЗаказыПриложенияДополнительныеРеквизиты
		               |ГДЕ
		               |	ЗаказыПриложенияДополнительныеРеквизиты.Свойство = &Свойство
		               |	И ЗаказыПриложенияДополнительныеРеквизиты.Ссылка = &Объект";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Значение;
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение доп. реквизита ВариантОтветаКлиентаПриЗаказе", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат "";	
	
КонецФункции


Функция Петрушка_ИнформацияМА(врКлиент)
	
	Попытка
	
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовПриложения.Отменен);
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер",      врКлиент);
		Запрос.УстановитьПараметр("СтатусЗаказа", МассивСтатусов);
		Запрос.Текст  = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	ЗаказыПриложения.Ссылка,
		                |	ЗаказыПриложения.Дата
		                |ИЗ
		                |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
		                |ГДЕ
		                |	НЕ ЗаказыПриложения.ПометкаУдаления
		                |	И НЕ ЗаказыПриложения.СтатусЗаказа В (&СтатусЗаказа)
		                |	И ЗаказыПриложения.Партнер = &Партнер
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	ЗаказыПриложения.МоментВремени УБЫВ";
	
		РЗ = Запрос.Выполнить();
		Если НЕ РЗ.Пустой() Тогда
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			Возврат "ДА. Посл.заказ: " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + " г." + " Сумма " + Формат(ТекущаяДата(), "ДФ='MMMM'") + " = " + СуммаРеализацийПоПетрушке(врКлиент);
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", врКлиент);	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПользователиПриложения.Ссылка
		               |ИЗ
		               |	Справочник.ПользователиПриложения КАК ПользователиПриложения
		               |ГДЕ
		               |	ПользователиПриложения.Партнер = &Партнер
		               |	И НЕ ПользователиПриложения.ПометкаУдаления";
		РЗ = Запрос.Выполнить();
		Если НЕ РЗ.Пустой() Тогда
			Возврат "ДА. Заказов НЕТ.";	
		КонецЕсли;	
		
		Возврат "НЕТ";
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Петрушка_ИнформацияМА()", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
		Возврат "";
		
	КонецПопытки;	
	
КонецФункции


Функция Петрушка_ПолучитьАгентаТочки(врКлиент)
	
	Если врКлиент = Справочники.Партнеры.НайтиПоКоду("00-00046500") Тогда
		Возврат врКлиент.ОсновнойМенеджер;
	КонецЕсли;	
	
	ОснМенеджер = врКлиент.ОсновнойМенеджер;
	
	Если КегиУтро_МассивАгентов.Найти(ОснМенеджер) <> Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец",              врКлиент);
		Запрос.УстановитьПараметр("ТорговыйПредставитель", КегиУтро_МассивАгентов);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель
		               |ИЗ
		               |	Справочник.УсловияОбслуживанияПартнеровТорговымиПредставителями КАК УсловияОбслуживанияПартнеровТорговымиПредставителями
		               |ГДЕ
		               |	НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ПометкаУдаления
		               |	И УсловияОбслуживанияПартнеровТорговымиПредставителями.Владелец = &Владелец
		               |	И НЕ УсловияОбслуживанияПартнеровТорговымиПредставителями.ТорговыйПредставитель В (&ТорговыйПредставитель)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.ТорговыйПредставитель;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ОснМенеджер;
	
КонецФункции


Функция Петрушка_ПолучитьЗаказПетрушка(врНомер, врДата)
	
	Попытка
	
		врДок = Документы.ЗаказыПриложения.НайтиПоНомеру(врНомер, врДата);
	
		Если ЗначениеЗаполнено(врДок) Тогда
			Возврат врДок;
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ПОЛУЧИТЬ ЗАКАЗ ПЕТРУШКА. ЗАЯВКА УТ = " + Строка(врНомер) + " от  " + Строка(врДата));
		
	КонецПопытки;	
	
	Возврат Документы.ЗаказыПриложения.ПустаяСсылка();
	
КонецФункции	


Процедура Петрушка_ОчиститьЗаявкуПетрушка(врЗаявкаПетрушка)
	
	Попытка
		
		врЗаявкаСкорректирована = Ложь;
		
		врЗаявкаПетрушкаОбъект  = врЗаявкаПетрушка.ПолучитьОбъект();
	
		Для Каждого ТекТовар Из врЗаявкаПетрушкаОбъект.Товары Цикл
		
			ТекТовар.КоличествоФакт = 0;
			ТекТовар.СуммаФакт      = 0;									
		
		КонецЦикла;	
		
		врЗаявкаПетрушкаОбъект.СуммаФакт = 0;
		врЗаявкаПетрушкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Очистить заявку петрушка = " + СокрЛП(врЗаявкаПетрушка), ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;		
	
КонецПроцедуры	


Функция Петрушка_СоздатьФайл_DevInsider(КаталогФайла, ИмяФайла, Заявка, врАгент)
	
	Попытка
		
		Агент = врАгент;
	
		ФайлВыгрузки = Новый ТекстовыйДокумент;
	
		ФайлВыгрузки.ДобавитьСтроку("");
		ФайлВыгрузки.ДобавитьСтроку("SyncType = 2");
		ФайлВыгрузки.ДобавитьСтроку("DeviceID = " + СокрЛП(ИмяФайла));
		ФайлВыгрузки.ДобавитьСтроку("AgentID = "  + СокрЛП(Агент.УникальныйИдентификатор()));
		ФайлВыгрузки.ДобавитьСтроку("FromDevicePath = " + СокрЛП(КаталогФайла) + СокрЛП(ИмяФайла) + "\FromDevice\");
		ФайлВыгрузки.ДобавитьСтроку("ToDevicePath = "   + СокрЛП(КаталогФайла) + СокрЛП(ИмяФайла) + "\ToDevice\");
		ФайлВыгрузки.ДобавитьСтроку("ErrorFilePath = "  + СокрЛП(КаталогФайла) + СокрЛП(ИмяФайла) + ".err");
		ФайлВыгрузки.ДобавитьСтроку("ExportDailyData = False");
		ФайлВыгрузки.ДобавитьСтроку("ExportRemains = True");
		ФайлВыгрузки.ДобавитьСтроку("SyncDocumentsPeriod = 901");
		Если ЭтоГруппаПользователяСевер(Агент) Тогда
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Sever");
		ИначеЕсли ЭтоГруппаПользователяТомск(Агент) Тогда	
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Tomsk");
		ИначеЕсли ЭтоГруппаПользователяБарнаул(Агент) Тогда
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Altai");						
		ИначеЕсли ЭтоГруппаПользователяНовосибирск(Агент) Тогда
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Novosib");
		ИначеЕсли ЭтоГруппаПользователяКузбасс(Агент) Тогда	
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Kuzbass");
		Иначе	
			ФайлВыгрузки.ДобавитьСтроку("MAWSName = Kuzbass");
		КонецЕсли;	
		
		ФайлВыгрузки.Записать(КаталогФайла + СокрЛП(ИмяФайла) + ".txt", КодировкаТекста.ANSI);
		
		Возврат Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Ошибка при создании сигнального файла " + СокрЛП(ИмяФайла) + ".txt", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции	


Функция Петрушка_СоздатьФайл_Invoice(КаталогФайла, ИмяФайла, ИнвойсИд, Заявка, врАгент)
	
	Попытка
		
		Клиент 		= Заявка.Партнер;
		Агент  		= врАгент;
		Комментарий = ?(СокрЛП(Заявка.КомментарийЗаказа) = ";", "", СокрЛП(Заявка.КомментарийЗаказа));
		врНал       = ?(Заявка.СпособОплаты = Перечисления.СпособОплатыПриложение.Наличными, "True", "False");
		
		Комментарий = СтрЗаменить(Комментарий, Символы.ПС, "; ");
	
		ФайлВыгрузки = Новый ТекстовыйДокумент;
		
		ФайлВыгрузки.ДобавитьСтроку("1");
		ФайлВыгрузки.ДобавитьСтроку("");
					
		ДатаНакладной = Формат(НачалоДня(ТекущаяДата() + ДеньВСекундах), "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 	
		ДатаДоставки  = ДатаНакладной;
		Попытка
			Если ЗначениеЗаполнено(Заявка.ДатаДоставки) Тогда
				Если Заявка.ДатаДоставки >= (КонецДня(ТекущаяДата()) + 1 + ДеньВСекундах) Тогда
					ДатаДоставки = Формат(Заявка.ДатаДоставки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""); 	
					//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - ДАТА ДОСТАВКИ", СокрЛП(Клиент) + " = " + СокрЛП(ДатаДоставки));
				КонецЕсли;	
			КонецЕсли;
		Исключение
			ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - ДАТА ДОСТАВКИ", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		InvoiceID     = СокрЛП(ИнвойсИд);
		
		ФайлВыгрузки.ДобавитьСтроку(
			СокрЛП(ИмяФайла) 														+ Символ(9) +  // DeviceID
			InvoiceID																+ Символ(9) +  // InvoiceID
			""																		+ Символ(9) +  // InvoiceRefID
			"11"																	+ Символ(9) +  // InvoiceTypeRefID
			""																		+ Символ(9) +  // ParentInvoiceID 
			""																		+ Символ(9) +  // ParentInvoiceRefID
			СокрЛП(Агент.УникальныйИдентификатор())									+ Символ(9) +  // AgentRefID
			СокрЛП(Клиент.УникальныйИдентификатор())  				                + Символ(9) +  // ShopRefID
			""																		+ Символ(9) +  // VisitID
			ДатаНакладной															+ Символ(9) +  // InvoiceDateTime (10)
			""																		+ Символ(9) +  // InvoiceNo
			""																		+ Символ(9) +  // InvoiceAmount    
			""																		+ Символ(9) +  // AmountPaid		
			ДатаДоставки															+ Символ(9) +  // DeliveryFromDateTime
			ДатаНакладной															+ Символ(9) +  // DeliveryThruDateTime		
			""																		+ Символ(9) +  // IsConfidential
			Лев(Комментарий, 249)										   			+ Символ(9) +  // Note
			""																		+ Символ(9) +  // SellerRefID		
			""																		+ Символ(9) +  // PriceTypeRefID
			"11"																	+ Символ(9) +  // InvoiceTypeCode (20)
			"False"																	+ Символ(9) +  // InvoiceRequired
			""                               										+ Символ(9) +  // ShopID
			""																		+ Символ(9) +  // GpsLatitude		
			""																		+ Символ(9) +  // GpsLongitude		
			""																		+ Символ(9) +  // GpsHDOP			
			"False"																	+ Символ(9) +  // GpsIsVisited		
			""																		+ Символ(9) +  // InvoiceWeight			
			"2"																		+ Символ(9) +  // InvoiceStatusRefID		
			""																		+ Символ(9) +  // StockRefID		
			ДатаНакладной															+ Символ(9) +  // InvoiceInitDateTime (30)
			""																		+ Символ(9) +  // IsTTN	(31)			
			"False"																	+ Символ(9) +  // IsInvoice	(32)		
			врНал																	+ Символ(9) +  // WithouPay			
			"False"																	+ Символ(9) +  // Return			
			"False"																	+ Символ(9) +  // Petrov			
			"");																				   // PaymentDate		
						
		ФайлВыгрузки.Записать(КаталогФайла + СокрЛП(ИмяФайла) + "\FromDevice\Invoice.txt", КодировкаТекста.ANSI);
		
		Возврат Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Ошибка при создании файла Invoice.txt", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции	


Функция Петрушка_СоздатьФайл_InvoiceProduct(КаталогФайла, ИмяФайла, ИнвойсИд, Заявка, врАгент)
	
	Попытка
		
		Клиент 		= Заявка.Партнер;
		Агент  		= врАгент;
	
		ФайлВыгрузки = Новый ТекстовыйДокумент;
		
		ТабЧасть = Заявка.Товары;
		
		КолЗаписей = 0;
		
		Для Каждого ТекСтрока Из ТабЧасть Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;       
			
			Если ТекСтрока.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			КолЗаписей = КолЗаписей + 1;
			
		КонецЦикла;
		
		ФайлВыгрузки.ДобавитьСтроку(Строка(КолЗаписей));
		ФайлВыгрузки.ДобавитьСтроку("");
					
		InvoiceID = СокрЛП(ИнвойсИд); 		
		
		Для Каждого ТекСтрока Из ТабЧасть Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			СтавкаНДС = Формат(ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.Номенклатура.СтавкаНДС), "ЧРД=.; ЧГ=");
			
			ФайлВыгрузки.ДобавитьСтроку(			
				СокрЛП(ИмяФайла)   															+ Символ(9) +            						// DeviceID
				""																			+ Символ(9) +    						    	// InvoiceProductID
				InvoiceID																	+ Символ(9) +            						// InvoiceID
				СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор()) 	 				+ Символ(9) +            						// ProductRefID
				Формат(ТекСтрока.Цена, "ЧРД=.; ЧГ=")										+ Символ(9) +     						    	// Price
				Формат(ТекСтрока.Количество, "ЧРД=.; ЧГ=")									+ Символ(9) +            						// Volume
				СтавкаНДС																	+ Символ(9) +									// VATRate
				""																			+ Символ(9) +            						// DiscountAmount
				""																			+ Символ(9) +       							// DiscountRate
				СокрЛП(ТекСтрока.Номенклатура.ЕдиницаИзмерения.УникальныйИдентификатор())	+ Символ(9) +									// MeasureUnitRefID
				""																			+ Символ(9) +            						// PriceTypeRefID
				""																			+ Символ(9) +            						// StockRefID
				"false");																													// IsManualPrice
			
		КонецЦикла;	
		
		ФайлВыгрузки.Записать(КаталогФайла + СокрЛП(ИмяФайла) + "\FromDevice\InvoiceProduct.txt", КодировкаТекста.ANSI);
		
		Возврат Истина;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Ошибка при создании файла InvoiceProduct.txt; ", ИнформацияОбОшибке(), Истина);
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции	


Процедура Петрушка_СформироватьЗаявки(Заявка)
	
	ИмяФайла = "DevPetrushka";
	
//	НачатьТранзакцию();

		ФлагНорма = Ложь;
	
	    ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.ОбработаноСинхронизацией = Истина;
		Попытка
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		//	ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Установка флага ОБРАБОТАНО СИНХРОНИЗАЦИЕЙ = " + Строка(Заявка));
		Исключение
			ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "Установка флага ОБРАБОТАНО СИНХРОНИЗАЦИЕЙ", ИнформацияОбОшибке(), Истина);
			Возврат;
		КонецПопытки;	
		
		Если ЗначениеЗаполнено(Заявка.Агент) И аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(Заявка.Агент) Тогда
			врАгент = Заявка.Агент;
		Иначе	
			врАгент = Петрушка_ПолучитьАгентаТочки(Заявка.Партнер);
		КонецЕсли;	
	
		InvoiceID            = "DEV_PET_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd_hhmmss") + "_" + СокрЛП(Заявка.Номер); 
		
		КаталогСинхронизации = РабочийКаталог + "\";
	
		ФлагИнвойс        = Петрушка_СоздатьФайл_Invoice(КаталогСинхронизации, ИмяФайла, InvoiceID, Заявка, врАгент);
		ФлагИнвойсПродукт = Петрушка_СоздатьФайл_InvoiceProduct(КаталогСинхронизации, ИмяФайла, InvoiceID, Заявка, врАгент);
	
		Если ФлагИнвойс И ФлагИнвойсПродукт Тогда
			ФлагСигнальный = Петрушка_СоздатьФайл_DevInsider(КаталогСинхронизации, ИмяФайла, Заявка, врАгент);
			Если Не ФлагСигнальный Тогда
				ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ОШИБКА СОЗДАНИЯ ФАЙЛОВ СИНХРОНИЗАЦИИ! ФлагСигнальный = " + Строка(ФлагСигнальный));
			Иначе
				ФлагНорма = Истина;
			КонецЕсли;
		Иначе
			ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ОШИБКА СОЗДАНИЯ ФАЙЛОВ СИНХРОНИЗАЦИИ! ФлагИнвойс = " + Строка(ФлагИнвойс) + "; ФлагИнвойсПродукт = " + ФлагИнвойсПродукт);	
		КонецЕсли;	
		
		Если Не ФлагНорма Тогда
			Попытка
				ЗаявкаОбъект.ОбработаноСинхронизацией = Ложь;
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
				ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ОТКАТ ЗАПИСИ ФЛАГА оработано синхронизацией = " + Строка(Заявка));
			Исключение
				ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ИСКЛЮЧЕНИЕ! ОТКАТ ФЛАГА ЗАПИСИ", ИнформацияОбОшибке(), Истина);
				Возврат;
			КонецПопытки;
		КонецЕсли;	
	
//	ЗафиксироватьТранзакцию();	
		
КонецПроцедуры	


Функция Петрушка_ТочкиВСтопе(врМассивКлиентов)
	
	врМассивВозврата = Новый Массив;
	врМассивСегмент  = Новый Массив;
	
	ЗапросСегментОтгрузка = Новый Запрос;
	ЗапросСегментОтгрузка.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.НайтиПоКоду("00-00000012"));
	ЗапросСегментОтгрузка.Текст = "ВЫБРАТЬ
	                              |	ПартнерыСегмента.Партнер
	                              |ИЗ
	                              |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	                              |ГДЕ
	                              |	ПартнерыСегмента.Сегмент = &Сегмент";
	ВыборкаСегментОтгрузка = ЗапросСегментОтгрузка.Выполнить().Выбрать();
	Пока ВыборкаСегментОтгрузка.Следующий() Цикл
		врМассивСегмент.Добавить(ВыборкаСегментОтгрузка.Партнер);
	КонецЦикла;	
	
	//врМассивТочкиСевер = Новый Массив;
	//
	//ЗапросТочкиСевер = Новый Запрос;
	//ЗапросТочкиСевер.УстановитьПараметр("Сервер",  "Sever");
	//ЗапросТочкиСевер.УстановитьПараметр("Сервер2", "Novosib");
	//ЗапросТочкиСевер.Текст = "ВЫБРАТЬ
	//                         |	аян_СинхронизацияТТ.ТорговаяТочка
	//                         |ИЗ
	//                         |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	//                         |ГДЕ
	//                         |	аян_СинхронизацияТТ.Сервер = &Сервер ИЛИ аян_СинхронизацияТТ.Сервер = &Сервер2";
	//ВыборкаТочкиСевер = ЗапросТочкиСевер.Выполнить().Выбрать();
	//Пока ВыборкаТочкиСевер.Следующий() Цикл
	//	врМассивТочкиСевер.Добавить(ВыборкаТочкиСевер.ТорговаяТочка);
	//КонецЦикла;	
	//
	//врМассивХорека = КлиентыКонтрагенты_МассивТочекХорека();
	//
	//Для Каждого ТекСтрокаХорека Из врМассивХорека Цикл
	//	врМассивТочкиСевер.Добавить(ТекСтрокаХорека);
	//КонецЦикла;	
	//	
	//Массив_Отсрочка7 = Новый Массив;
	//
	//ЗапросОтсрочка7 = Новый Запрос;
	//ЗапросОтсрочка7.Текст = "ВЫБРАТЬ
	//                        |	ПартнерыСегмента.Партнер
	//                        |ПОМЕСТИТЬ втПартнерыГоловные
	//                        |ИЗ
	//                        |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	//                        |ГДЕ
	//                        |	ПартнерыСегмента.Сегмент = &Сегмент
	//                        |;
	//                        |
	//                        |////////////////////////////////////////////////////////////////////////////////
	//                        |ВЫБРАТЬ
	//                        |	Партнеры.Ссылка КАК Партнер
	//                        |ПОМЕСТИТЬ врВсеПартнеры
	//                        |ИЗ
	//                        |	Справочник.Партнеры КАК Партнеры
	//                        |ГДЕ
	//                        |	Партнеры.Ссылка В ИЕРАРХИИ
	//                        |			(ВЫБРАТЬ
	//                        |				втПартнерыГоловные.Партнер
	//                        |			ИЗ
	//                        |				втПартнерыГоловные КАК втПартнерыГоловные)
	//                        |;
	//                        |
	//                        |////////////////////////////////////////////////////////////////////////////////
	//                        |ВЫБРАТЬ
	//                        |	врВсеПартнеры.Партнер
	//                        |ИЗ
	//                        |	врВсеПартнеры КАК врВсеПартнеры
	//                        |ГДЕ
	//                        |	врВсеПартнеры.Партнер В(&Партнер)";

	//ЗапросОтсрочка7.УстановитьПараметр("Сегмент", Сегмент_Отрочка7);
	//ЗапросОтсрочка7.УстановитьПараметр("Партнер", врМассивКлиентов);
	//ВыборкаОтсрочка7 = ЗапросОтсрочка7.Выполнить().Выбрать();
	//Пока ВыборкаОтсрочка7.Следующий() Цикл
	//	Массив_Отсрочка7.Добавить(ВыборкаОтсрочка7.Партнер);
	//КонецЦикла;	
	
	//врМассивХорека = КлиентыКонтрагенты_МассивТочекХорека();
	//
	//Для Каждого ТекСтрокаХорека Из врМассивХорека Цикл
	//	Массив_Отсрочка7.Добавить(ТекСтрокаХорека);
	//КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",    врМассивКлиентов);
	Запрос.УстановитьПараметр("ДатаОтчета", ТекущаяДата());
	Запрос.УстановитьПараметр("БонусТомск", Справочники.Организации.НайтиПоНаименованию("Бонус томск"));
	//Запрос.УстановитьПараметр("Север",      врМассивТочкиСевер);
	//Запрос.УстановитьПараметр("Отсрочка7",  Массив_Отсрочка7);
    Запрос.Текст = "ВЫБРАТЬ
                   |	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
                   |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
                   |	ВЫБОР
                   |		КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 50
                   |			ТОГДА ВЫБОР
    			   |					КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 3
    			  // |					КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.Дата, &ДатаОтчета, ДЕНЬ) > 1
                   |						ТОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
                   |					ИНАЧЕ 0
                   |				КОНЕЦ
                   |		ИНАЧЕ 0
                   |	КОНЕЦ КАК ПросроченнаяСумма
                   |ПОМЕСТИТЬ втРеализации
                   |ИЗ
                   |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
                   |			&ДатаОтчета,
                   |			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
                   |				И РасчетныйДокумент.Партнер В (&Партнер)
                   |				И РасчетныйДокумент.Организация <> &БонусТомск) КАК РасчетыСКлиентамиПоДокументамОстатки
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК ПКО,
                   |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа
                   |ПОМЕСТИТЬ втПКО
                   |ИЗ
                   |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
                   |ГДЕ
                   |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа В
                   |			(ВЫБРАТЬ
                   |				втРеализации.РасчетныйДокумент
                   |			ИЗ
                   |				втРеализации КАК втРеализации)
                   |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления
                   |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидОплатыПКО.ВКассу)
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	втРеализации.Партнер,
                   |	втРеализации.РасчетныйДокумент,
                   |	МАКСИМУМ(ВЫБОР
                   |			КОГДА ЕСТЬNULL(втПКО.ПКО, ИСТИНА) = ИСТИНА
                   |				ТОГДА втРеализации.ПросроченнаяСумма
                   |			ИНАЧЕ 0
                   |		КОНЕЦ) КАК ПросроченнаяСумма
                   |ИЗ
                   |	втРеализации КАК втРеализации
                   |		ЛЕВОЕ СОЕДИНЕНИЕ втПКО КАК втПКО
                   |		ПО втРеализации.РасчетныйДокумент = втПКО.ОснованиеПлатежа
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	втРеализации.Партнер,
                   |	втРеализации.РасчетныйДокумент
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	втРеализации.Партнер.Наименование";
 
	 //Запрос.Текст = "ВЫБРАТЬ
	 //               |	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	 //               |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	 //               |	ВЫБОР
	 //               |		КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 50
	 //               |			ТОГДА ВЫБОР
	 //               |					КОГДА РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер В (&Север)
	 //               |						ТОГДА ВЫБОР
	 //               |								КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 2
	 //               |									ТОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
	 //               |								ИНАЧЕ 0
	 //               |							КОНЕЦ
	 //               |					КОГДА РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер В (&Отсрочка7)
	 //               |						ТОГДА ВЫБОР
	 //               |								КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.Дата, &ДатаОтчета, ДЕНЬ) > 7
	 //               |									ТОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
	 //               |								ИНАЧЕ 0
	 //               |							КОНЕЦ
	 //               |					ИНАЧЕ ВЫБОР
	 //               |							КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.Дата, &ДатаОтчета, ДЕНЬ) > 1
	 //               |								ТОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
	 //               |							ИНАЧЕ 0
	 //               |						КОНЕЦ
	 //               |				КОНЕЦ
	 //               |		ИНАЧЕ 0
	 //               |	КОНЕЦ КАК ПросроченнаяСумма
	 //               |ПОМЕСТИТЬ втРеализации
	 //               |ИЗ
	 //               |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	 //               |			&ДатаОтчета,
	 //               |			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	 //               |				И РасчетныйДокумент.Партнер В (&Партнер)
	 //               |				И РасчетныйДокумент.Организация <> &БонусТомск) КАК РасчетыСКлиентамиПоДокументамОстатки
	 //               |;
	 //               |
	 //               |////////////////////////////////////////////////////////////////////////////////
	 //               |ВЫБРАТЬ
	 //               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК ПКО,
	 //               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа
	 //               |ПОМЕСТИТЬ втПКО
	 //               |ИЗ
	 //               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	 //               |ГДЕ
	 //               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа В
	 //               |			(ВЫБРАТЬ
	 //               |				втРеализации.РасчетныйДокумент
	 //               |			ИЗ
	 //               |				втРеализации КАК втРеализации)
	 //               |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	 //               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидОплатыПКО.ВКассу)
	 //               |;
	 //               |
	 //               |////////////////////////////////////////////////////////////////////////////////
	 //               |ВЫБРАТЬ
	 //               |	втРеализации.Партнер,
	 //               |	втРеализации.РасчетныйДокумент,
	 //               |	МАКСИМУМ(ВЫБОР
	 //               |			КОГДА ЕСТЬNULL(втПКО.ПКО, ИСТИНА) = ИСТИНА
	 //               |				ТОГДА втРеализации.ПросроченнаяСумма
	 //               |			ИНАЧЕ 0
	 //               |		КОНЕЦ) КАК ПросроченнаяСумма
	 //               |ИЗ
	 //               |	втРеализации КАК втРеализации
	 //               |		ЛЕВОЕ СОЕДИНЕНИЕ втПКО КАК втПКО
	 //               |		ПО втРеализации.РасчетныйДокумент = втПКО.ОснованиеПлатежа
	 //               |
	 //               |СГРУППИРОВАТЬ ПО
	 //               |	втРеализации.Партнер,
	 //               |	втРеализации.РасчетныйДокумент
	 //               |
	 //               |УПОРЯДОЧИТЬ ПО
	 //               |	втРеализации.Партнер.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		                               
		Если Выборка.ПросроченнаяСумма > 50 Тогда
			
			Если врМассивВозврата.Найти(Выборка.Партнер) = Неопределено Тогда
				
				Если врМассивСегмент.Найти(Выборка.Партнер) = Неопределено Тогда   
					
					Если Выборка.Партнер.Родитель = Клиенты_Роснефть Тогда
						Продолжить;
					КонецЕсли;	
					
					врМассивВозврата.Добавить(Выборка.Партнер);
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат врМассивВозврата;
	
КонецФункции


Функция Петрушка_ТочкиВСтопе_NEW(врМассивКлиентов)
	
	врМассивВозврата = Новый Массив;
	врМассивСегмент  = Новый Массив;
	
	ЗапросСегментОтгрузка = Новый Запрос;
	ЗапросСегментОтгрузка.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.НайтиПоКоду("00-00000012"));
	ЗапросСегментОтгрузка.Текст = "ВЫБРАТЬ
	                              |	ПартнерыСегмента.Партнер
	                              |ИЗ
	                              |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	                              |ГДЕ
	                              |	ПартнерыСегмента.Сегмент = &Сегмент";
	ВыборкаСегментОтгрузка = ЗапросСегментОтгрузка.Выполнить().Выбрать();
	Пока ВыборкаСегментОтгрузка.Следующий() Цикл
		врМассивСегмент.Добавить(ВыборкаСегментОтгрузка.Партнер);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",    врМассивКлиентов);
	Запрос.УстановитьПараметр("ДатаОтчета", ТекущаяДата());
	Запрос.УстановитьПараметр("БонусТомск", Справочники.Организации.НайтиПоНаименованию("Бонус томск"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа,
	               |	СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТ_ПКО
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидОплатыПКО.ОплатаАгенту)
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Партнер В(&Партнер)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПКО.ОснованиеПлатежа,
	               |	ВТ_ПКО.Сумма,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоДокументам.Регистратор, ЛОЖЬ) = ЛОЖЬ
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЗачетОплаты
	               |ПОМЕСТИТЬ втНезакрытаяОплата
	               |ИЗ
	               |	ВТ_ПКО КАК ВТ_ПКО
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	               |		ПО ВТ_ПКО.ОснованиеПлатежа = РасчетыСКлиентамиПоДокументам.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	               |	ВЫБОР
	               |		КОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 0
	               |			ТОГДА ВЫБОР
	               |					КОГДА РАЗНОСТЬДАТ(РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 1
	               |						ТОГДА РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПросроченнаяСумма
	               |ПОМЕСТИТЬ втРеализации
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	               |			&ДатаОтчета,
	               |			РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				И РасчетныйДокумент.Партнер В (&Партнер)
	               |				И РасчетныйДокумент.Организация <> &БонусТомск) КАК РасчетыСКлиентамиПоДокументамОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК ПКО,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа
	               |ПОМЕСТИТЬ втПКО
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа В
	               |			(ВЫБРАТЬ
	               |				втРеализации.РасчетныйДокумент
	               |			ИЗ
	               |				втРеализации КАК втРеализации)
	               |	И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	               |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидОплатыПКО.ВКассу)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРеализации.Партнер,
	               |	втРеализации.РасчетныйДокумент,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втПКО.ПКО, ИСТИНА) = ИСТИНА
	               |			ТОГДА втРеализации.ПросроченнаяСумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПросроченнаяСумма,
	               |	ЕСТЬNULL(втНезакрытаяОплата.Сумма, 0) КАК НезакрытаяОплата,
	               |	втНезакрытаяОплата.ЗачетОплаты
	               |ИЗ
	               |	втРеализации КАК втРеализации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втПКО КАК втПКО
	               |		ПО втРеализации.РасчетныйДокумент = втПКО.ОснованиеПлатежа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втНезакрытаяОплата КАК втНезакрытаяОплата
	               |		ПО втРеализации.РасчетныйДокумент = втНезакрытаяОплата.ОснованиеПлатежа";				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		врНезакрытаяОплатаСумма = ?(Выборка.ЗачетОплаты, 0, Выборка.НезакрытаяОплата);
		Если (Выборка.ПросроченнаяСумма - врНезакрытаяОплатаСумма) > 50 Тогда
			Если врМассивВозврата.Найти(Выборка.Партнер) = Неопределено Тогда
				Если врМассивСегмент.Найти(Выборка.Партнер) = Неопределено Тогда
					//Сообщить(Строка(Выборка.Партнер) + " = " + Строка(Выборка.ПросроченнаяСумма));
					врМассивВозврата.Добавить(Выборка.Партнер);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат врМассивВозврата;
	
КонецФункции


Процедура Петрушка_ОбрататьСТОП_ЛИСТ(врМассивИсклАгент)
	
	врМассивОбластьДействия = Новый Массив;
	
	ЗапросОбласть = Новый Запрос;
	ЗапросОбласть.УстановитьПараметр("ИсклАгент", врМассивИсклАгент);
	ЗапросОбласть.УстановитьПараметр("НашиТочки", Клиенты_НашиТочки);
	ЗапросОбласть.Текст = "ВЫБРАТЬ
	                      |	аян_СинхронизацияТТ.ТорговаяТочка
	                      |ИЗ
	                      |	РегистрСведений.аян_СинхронизацияТТ КАК аян_СинхронизацияТТ
	                      |ГДЕ
	                      |	аян_СинхронизацияТТ.Агент В(&ИсклАгент)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	аян_СинхронизацияТТ.ТорговаяТочка
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Партнеры.Ссылка
	                      |ИЗ
	                      |	Справочник.Партнеры КАК Партнеры
	                      |ГДЕ
	                      |	Партнеры.Ссылка В ИЕРАРХИИ(&НашиТочки)";
	ВыборкаОбласть = ЗапросОбласть.Выполнить().Выбрать();
	Пока ВыборкаОбласть.Следующий() Цикл
		врМассивОбластьДействия.Добавить(ВыборкаОбласть.ТорговаяТочка);
	КонецЦикла;	
	
	врСписокПартнеров = Новый Массив;
	
	врМассивСтатусов = Новый Массив;
	врМассивСтатусов.Добавить(Перечисления.СтатусыПодтвержденийЗаказовПриложения.ПустаяСсылка());
	врМассивСтатусов.Добавить(Перечисления.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение);
	врМассивСтатусов.Добавить(Перечисления.СтатусыПодтвержденийЗаказовПриложения.Подтвержден);
	
	ЗапросПредОбработка = Новый Запрос;
	ЗапросПредОбработка.УстановитьПараметр("ДатаОтсечки",        ТекущаяДата() - 60*60*24 * 7);
	ЗапросПредОбработка.УстановитьПараметр("Партнер",            врМассивОбластьДействия);
	ЗапросПредОбработка.УстановитьПараметр("СтатусПодтвержения", врМассивСтатусов);
	ЗапросПредОбработка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                            |	ЗаказыПриложения.Ссылка,
	                            |	ЗаказыПриложения.Номер,
	                            |	ЗаказыПриложения.Партнер,
	                            |	ЗаказыПриложения.СтатусПодтвержения,
	                            |	ЗаказыПриложения.КомментарийЗаказа,
	                            |	ЗаказыПриложения.СтопЛист,
								|	ЗаказыПриложения.Агент
	                            |ИЗ
	                            |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
	                            |ГДЕ
	                            |	НЕ ЗаказыПриложения.ПометкаУдаления
	                            |	И ЗаказыПриложения.Дата >= &ДатаОтсечки
	                            |	И НЕ ЗаказыПриложения.ОбработаноСинхронизацией
	                            |	И ЗаказыПриложения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
								|	И НЕ ЗаказыПриложения.Партнер В (&Партнер)
	                            |	И ЗаказыПриложения.СтатусПодтвержения В(&СтатусПодтвержения)
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	ЗаказыПриложения.МоментВремени";
	РЗПредОбработка = ЗапросПредОбработка.Выполнить();
	Если Не РЗПредОбработка.Пустой() Тогда
		ВыборкаПредОбработка = РЗПредОбработка.Выбрать();
		Пока ВыборкаПредОбработка.Следующий() Цикл
			врСписокПартнеров.Добавить(ВыборкаПредОбработка.Партнер);
		КонецЦикла;	
	КонецЕсли;
	
	врСписокПартнеровДолг = Петрушка_ТочкиВСтопе(врСписокПартнеров);
	
	ВыборкаПредОбработка.Сбросить();
	Пока ВыборкаПредОбработка.Следующий() Цикл
		
		врФлагЗаписиЗаказа = Ложь;
		
		врПропуститьТочку = Ложь;
		Если ЗначениеЗаполнено(ВыборкаПредОбработка.Агент) И аян_СинхронизацияСервер.ФОКУС_ЭтоФокусныйАгент(ВыборкаПредОбработка.Агент) Тогда
			врПропуститьТочку = Истина;
		КонецЕсли;	
		
		// Точка в Стопе
		
		Если НЕ врПропуститьТочку И врСписокПартнеровДолг.Найти(ВыборкаПредОбработка.Партнер) <> Неопределено Тогда
			
			Если НЕ ВыборкаПредОбработка.СтопЛист Тогда 
				
				врФлагЗаписиЗаказа = Истина;
		
				ЗаявкаОбъект = ВыборкаПредОбработка.Ссылка.ПолучитьОбъект();
				
				ЗаявкаОбъект.СтопЛист = Истина;
				
				Если ВыборкаПредОбработка.СтатусПодтвержения = Перечисления.СтатусыПодтвержденийЗаказовПриложения.Подтвержден Тогда
					ЗаявкаОбъект.СтатусПодтвержения      = Перечисления.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение;
					ЗаявкаОбъект.ДатаПодтвержденияЗаказа = Дата(1,1,1);
					ЗаявкаОбъект.АвторСтатусаЗаказа      = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
				
				//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - СТОП_ЛИСТ", "УСТАНОВКА = " + Строка(ВыборкаПредОбработка.Ссылка));
				
			Иначе
				
				Если ВыборкаПредОбработка.СтатусПодтвержения = Перечисления.СтатусыПодтвержденийЗаказовПриложения.Подтвержден Тогда
					
					врФлагЗаписиЗаказа = Истина;
					
					ЗаявкаОбъект = ВыборкаПредОбработка.Ссылка.ПолучитьОбъект();
					
					ЗаявкаОбъект.СтатусПодтвержения      = Перечисления.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение;
					ЗаявкаОбъект.ДатаПодтвержденияЗаказа = Дата(1,1,1);
					ЗаявкаОбъект.АвторСтатусаЗаказа      = Справочники.Пользователи.ПустаяСсылка();
					
					//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - СТОП_ЛИСТ", "ОЧИСТКА СТАТУСА = " + Строка(ВыборкаПредОбработка.Ссылка));
					
				КонецЕсли;				
				
			КонецЕсли;	
						
		// Точка НЕ в Стопе или Стоп снят	
			
		Иначе
			
			Если ВыборкаПредОбработка.СтопЛист Тогда 
				
				врФлагЗаписиЗаказа = Истина;
		
				ЗаявкаОбъект = ВыборкаПредОбработка.Ссылка.ПолучитьОбъект();
				
				ЗаявкаОбъект.СтопЛист = Ложь;
				
				врНаименованиеПартнера = СокрЛП(ВыборкаПредОбработка.Партнер.Наименование);
				
				ПетрушкаСервер.ОтправитьУведомлениеАгенту(ВыборкаПредОбработка.Ссылка, "Точка ОТКРЫТА: " + врНаименованиеПартнера,  "Можно подтвердить заказ(ы) клиента: " + врНаименованиеПартнера);
								
				//ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - СТОП_ЛИСТ", "СБРОС СТОПА = " + Строка(ВыборкаПредОбработка.Ссылка));
								
			КонецЕсли;				
			
		КонецЕсли;	
		
		Если врФлагЗаписиЗаказа Тогда
			
			Попытка
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - СТОП_ЛИСТ", "ИСКЛЮЧЕНИЕ!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
			
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры	


Процедура Петрушка_ОбработатьЗаявки()
	
	ИмяФайла = "DevPetrushka";
	
	Файл = Новый Файл(РабочийКаталог + "\" + ИмяФайла + ".txt");
	Если Файл.Существует() Тогда
		Возврат;        
	КонецЕсли;	
		
	МатрицаПредОбработкиИскл = Новый Массив;
	
	врАгентИскл = Справочники.Пользователи.НайтиПоНаименованию("Носков Алексей");
	Если ЗначениеЗаполнено(врАгентИскл) Тогда МатрицаПредОбработкиИскл.Добавить(врАгентИскл) КонецЕсли;
	врАгентИскл = Справочники.Пользователи.НайтиПоНаименованию("Кузнецова Ольга Владимировна");
	Если ЗначениеЗаполнено(врАгентИскл) Тогда МатрицаПредОбработкиИскл.Добавить(врАгентИскл) КонецЕсли;
	
	Попытка
		Петрушка_ОбрататьСТОП_ЛИСТ(МатрицаПредОбработкиИскл);
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА. ОБРАБОТКА ЗАЯВОК. СТОП-ЛИСТ", "Исключение!!!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;		
	
	ЗапросПредОбработка = Новый Запрос;
	ЗапросПредОбработка.УстановитьПараметр("ДатаОтсечки", ТекущаяДата() - ДеньВСекундах * 7);
	ЗапросПредОбработка.Текст = "ВЫБРАТЬ
	                            |	ЗаказыПриложения.Ссылка,
	                            |	ЗаказыПриложения.Номер,
	                            |	ЗаказыПриложения.Партнер,
	                            |	ЗаказыПриложения.СтатусПодтвержения,
	                            |	ЗаказыПриложения.СтопЛист
	                            |ИЗ
	                            |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
	                            |ГДЕ
	                            |	НЕ ЗаказыПриложения.ПометкаУдаления
	                            |	И ЗаказыПриложения.Дата >= &ДатаОтсечки
	                            |	И НЕ ЗаказыПриложения.ОбработаноСинхронизацией
	                            |	И ЗаказыПриложения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	                            |	И ЗаказыПриложения.СтатусПодтвержения = ЗНАЧЕНИЕ(Перечисление.СтатусыПодтвержденийЗаказовПриложения.ПустаяСсылка)
	                            |	И ЗаказыПриложения.Агент = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	ЗаказыПриложения.МоментВремени";
	РЗПредОбработка = ЗапросПредОбработка.Выполнить();
	Если Не РЗПредОбработка.Пустой() Тогда
		ВыборкаПредОбработка = РЗПредОбработка.Выбрать();
		Пока ВыборкаПредОбработка.Следующий() Цикл
			
			Если ВыборкаПредОбработка.Партнер = Клиенты_Дорога Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаявкаОбъект = ВыборкаПредОбработка.Ссылка.ПолучитьОбъект();
			
			ФлагОтправкиУведомления = Ложь;
			
			Попытка
				
				ЗаявкаОбъект.Агент = Петрушка_ПолучитьАгентаТочки(ВыборкаПредОбработка.Партнер);
				
				Если ЗначениеЗаполнено(ЗаявкаОбъект.Агент) Тогда
					
					Если МатрицаПредОбработкиИскл.Найти(ЗаявкаОбъект.Агент) = Неопределено Тогда
						
						ЗаявкаОбъект.СтатусПодтвержения = Перечисления.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение;
						//ЗаявкаОбъект.СпособОплаты       = Перечисления.СпособОплатыПриложение.Отсрочка;
						ФлагОтправкиУведомления = Истина;
						
					Иначе
						
						ЗаявкаОбъект.СтатусПодтвержения      = Перечисления.СтатусыПодтвержденийЗаказовПриложения.Подтвержден;
						ЗаявкаОбъект.ДатаПодтвержденияЗаказа = ТекущаяДата();
						ЗаявкаОбъект.АвторСтатусаЗаказа      = ПараметрыСеанса.ТекущийПользователь;
						
					КонецЕсли;	
					
					Если ВыборкаПредОбработка.Партнер.ПринадлежитЭлементу(Клиенты_НашиТочки) Тогда
						
						//ЗаявкаОбъект.СтатусПодтвержения = Перечисления.СтатусыПодтвержденийЗаказовПриложения.ПустаяСсылка();
						//ЗаявкаОбъект.СпособОплаты       = Перечисления.СпособОплатыПриложение.Отсрочка;
						//ФлагОтправкиУведомления         = Ложь;
						
						ЗаявкаОбъект.СпособОплаты       = Перечисления.СпособОплатыПриложение.Отсрочка;
						
					ИначеЕсли ЭтоГруппаПользователяТомск(ЗаявкаОбъект.Агент) Тогда	
						
	                    ЗаявкаОбъект.СпособОплаты       = Перечисления.СпособОплатыПриложение.Отсрочка;
						                                                                                         
					КонецЕсли;	
					
				Иначе
					
					ЗаписатьОшибку1СвЛогФайл("Определение Агента заказа", "ПУСТОЙ АГЕНТ! " + "Заказ №" + СокрЛП(ВыборкаПредОбработка.Номер));
					
				КонецЕсли;
				
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			//	ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - ПРЕДОБРАБОТКА", СокрЛП(ВыборкаПредОбработка.Ссылка));
			
				Если ФлагОтправкиУведомления Тогда
					ПетрушкаСервер.ОтправитьУведомлениеАгенту(ВыборкаПредОбработка.Ссылка, ?(ВыборкаПредОбработка.СтопЛист, "!СТОП-ЛИСТ! Заявка Петрушка", "Новая заявка Петрушка"), ?(ВыборкаПредОбработка.СтопЛист, "!СТОП-ЛИСТ! ", "") + "Заказ №" + СокрЛП(ВыборкаПредОбработка.Номер) + " ожидает согласования" );
				КонецЕсли;	
				
			Исключение
				ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА - ПРЕДОБРАБОТКА", "ИСКЛЮЧЕНИЕ!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтсечки", ТекущаяДата() - ДеньВСекундах * 7);
	Запрос.УстановитьПараметр("АгентыИскл",  МатрицаПредОбработкиИскл);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказыПриложения.Ссылка,
	               |	ЗаказыПриложения.СтатусПодтвержения
	               |ИЗ
	               |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
	               |ГДЕ
	               |	НЕ ЗаказыПриложения.ПометкаУдаления
	               |	И ЗаказыПриложения.Дата >= &ДатаОтсечки
	               |	И НЕ ЗаказыПриложения.ОбработаноСинхронизацией
	               |	И ЗаказыПриложения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И НЕ ЗаказыПриложения.СтопЛист
	               |	И ЗаказыПриложения.Агент В (&АгентыИскл)
	               |	И ЗаказыПриложения.СтатусПодтвержения = ЗНАЧЕНИЕ(Перечисление.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказыПриложения.МоментВремени";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаявкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ЗаявкаОбъект.СтатусПодтвержения      = Перечисления.СтатусыПодтвержденийЗаказовПриложения.Подтвержден;
			ЗаявкаОбъект.ДатаПодтвержденияЗаказа = ТекущаяДата();
			ЗаявкаОбъект.АвторСтатусаЗаказа      = ПараметрыСеанса.ТекущийПользователь;

			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
							
		КонецЦикла;	
	КонецЕсли;	
	
	// ФОКУС
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтсечки", ТекущаяДата() - ДеньВСекундах * 7);
	Запрос.УстановитьПараметр("АгентыИскл",  МатрицаПредОбработкиИскл);
	Запрос.Текст = "ВЫБРАТЬ
	               |	аян_Синхронизация_ФокусныеАгенты.ФокусныйАгент
	               |ПОМЕСТИТЬ ВТФокусныеАгенты
	               |ИЗ
	               |	РегистрСведений.аян_Синхронизация_ФокусныеАгенты КАК аян_Синхронизация_ФокусныеАгенты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказыПриложения.Ссылка,
	               |	ЗаказыПриложения.СтатусПодтвержения,
	               |	ЗаказыПриложения.СтопЛист,
	               |	ЗаказыПриложения.Номер
	               |ИЗ
	               |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
	               |ГДЕ
	               |	НЕ ЗаказыПриложения.ПометкаУдаления
	               |	И ЗаказыПриложения.Дата >= &ДатаОтсечки
	               |	И НЕ ЗаказыПриложения.ОбработаноСинхронизацией
	               |	И ЗаказыПриложения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И НЕ ЗаказыПриложения.СтопЛист
	               |	И ЗаказыПриложения.Агент В
	               |			(ВЫБРАТЬ
	               |				ВТФокусныеАгенты.ФокусныйАгент
	               |			ИЗ
	               |				ВТФокусныеАгенты КАК ВТФокусныеАгенты)
	               |	И ЗаказыПриложения.СтатусПодтвержения = ЗНАЧЕНИЕ(Перечисление.СтатусыПодтвержденийЗаказовПриложения.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказыПриложения.МоментВремени";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаявкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ЗаявкаОбъект.СтатусПодтвержения = Перечисления.СтатусыПодтвержденийЗаказовПриложения.ОжидаетсяПодтверждение;
			ФлагОтправкиУведомления = Истина;
			
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ФлагОтправкиУведомления Тогда
				ПетрушкаСервер.ОтправитьУведомлениеАгенту(Выборка.Ссылка, ?(Выборка.СтопЛист, "!СТОП-ЛИСТ! Заявка Петрушка", "Новая заявка Петрушка"), ?(Выборка.СтопЛист, "!СТОП-ЛИСТ! ", "") + "Заказ №" + СокрЛП(Выборка.Номер) + " ожидает согласования" );
			КонецЕсли;				
							
		КонецЦикла;	
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтсечки", ТекущаяДата() - ДеньВСекундах * 7);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказыПриложения.Ссылка,
	               |	ЗаказыПриложения.СтатусПодтвержения
	               |ИЗ
	               |	Документ.ЗаказыПриложения КАК ЗаказыПриложения
	               |ГДЕ
	               |	НЕ ЗаказыПриложения.ПометкаУдаления
	               |	И ЗаказыПриложения.Дата >= &ДатаОтсечки
	               |	И НЕ ЗаказыПриложения.ОбработаноСинхронизацией
	               |	И ЗаказыПриложения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И НЕ ЗаказыПриложения.СтопЛист
	               |	И ЗаказыПриложения.Агент <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И ЗаказыПриложения.СтатусПодтвержения = ЗНАЧЕНИЕ(Перечисление.СтатусыПодтвержденийЗаказовПриложения.Подтвержден)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказыПриложения.МоментВремени";
	РЗ = Запрос.Выполнить();
	Если Не РЗ.Пустой() Тогда
		Выборка = РЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
		//	ЗаписатьОшибку1СвЛогФайл("ПЕТРУШКА", "ОБРАБОТКА ЗАЯВКИ = " + Строка(Выборка.Ссылка));
			Петрушка_СформироватьЗаявки(Выборка.Ссылка);
			Возврат;
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры


#КонецОбласти


#Область СКАНИРОВАНИЕ


Процедура Сканирование_ПроверкаНаФайл_Lock()
	
	ЕстьСтопФайл = Ложь;
	
	Попытка
		
		Для Сч = 1 По 10 Цикл
			
			Файл = Новый Файл(КаталогВыгрузки + "\Lock.txt");
			Если Файл.Существует() = Ложь Тогда
				Возврат;
			КонецЕсли;	
			
			//ЗаписатьИнформацию1СвЛогФайл("Проверка на файл Lock.txt", "Есть файл Lock.txt (" + Строка(Сч) + ")");
			
			врЗамерВремени = ТекущаяДата();
			
			Пока (ТекущаяДата() - врЗамерВремени) <= 1 Цикл
			КонецЦикла;	
			
		КонецЦикла;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка на файл Lock.txt", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	ЗаписатьИнформацию1СвЛогФайл("Проверка на файл Lock.txt", "Превышено время ожидание!!!");
		
КонецПроцедуры


Процедура Сканирование_СохранитьКопиюВходящихФайлов()
	
	Попытка
		
		врПутьКАрхиву = СокрЛП(КаталогЛогФайлов) + "\Archive\Temp";
		
		Файл = Новый Файл(врПутьКАрхиву);
		Если Не Файл.Существует() Тогда
			СоздатьКаталог(врПутьКАрхиву);
		КонецЕсли;	
		
		КопироватьФайл(РабочийКаталог + "\" + СокрЛП(ИдКПК) + "\FromDevice\Invoice.txt",        СокрЛП(КаталогЛогФайлов) + "\Archive\Temp\Invoice.txt");	
		КопироватьФайл(РабочийКаталог + "\" + СокрЛП(ИдКПК) + "\FromDevice\InvoiceProduct.txt", СокрЛП(КаталогЛогФайлов) + "\Archive\Temp\InvoiceProduct.txt");			
		
		врИмяАрхива   = СокрЛП(ИдКПК) + "_FromDevice_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd_HHmmss");
		
		НовыйАрхив = Новый ЗаписьZipФайла(СокрЛП(КаталогЛогФайлов) + "\Archive\" + врИмяАрхива + ".zip", "", "", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
   	
		НовыйАрхив.Добавить(врПутьКАрхиву + "\*.*");  
				
		НовыйАрхив.Записать();
								
		УдалитьФайлы(врПутьКАрхиву);
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Копирование входящих файлов.", "Исключение!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
КонецПроцедуры	


// Получить список полных путей к каталогам агентов

Функция Сканирование_МассивКаталоговDev()
	
	МассивКаталоговВозврат = Новый Массив;
	
	НайденныеФайлы = НайтиФайлы(СокрЛП(РабочийКаталог), "Dev*");		
	Для Каждого нФайл Из НайденныеФайлы Цикл
		
		Если нФайл.ЭтоКаталог() Тогда
			
			Если нФайл.Имя <> "DevEmu" Тогда
				МассивКаталоговВозврат.Добавить(нФайл.ПолноеИмя);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат МассивКаталоговВозврат;
	
КонецФункции


// Проверка ежедневного файла, на то, что он уже выгружен СЕГОДНЯ

Функция Сканирование_ПроверитьФайлЕжедневкиНаВыгрузку(ИмяФайлаЕжедневки)
	
	Попытка
	
		Файл = Новый Файл(РабочийКаталог + "\DailyOriginal\" + СокрЛП(ИмяФайлаЕжедневки));
	
		Если Файл.Существует() Тогда
			
			Если НачалоДня(Файл.ПолучитьВремяИзменения()) = НачалоДня(ТекущаяДата()) Тогда
			
				КопироватьФайл(РабочийКаталог + "\DailyOriginal\" + СокрЛП(ИмяФайлаЕжедневки), РабочийКаталог + "\DevEmu\ToDevice\" + СокрЛП(ИмяФайлаЕжедневки));
				
				ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Файл ежедневной выгрузки " + СокрЛП(ИмяФайлаЕжедневки) + " скопирован из эмуляционной выгрузки...");
				
				Возврат Истина;
			
			КонецЕсли;	
		
		КонецЕсли;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Проверка файла ежедневки на выгрузку", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции


// Проверяем, что в каталоге находится файл DevInsider

Функция Сканирование_ЕстьФайл_DevInsider()
	
	Попытка
		
		НайденныеФайлы = НайтиФайлы(СокрЛП(РабочийКаталог), "DevInsider.txt");			
		
		Если НайденныеФайлы.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;	
		
		НайденныеФайлы = НайтиФайлы(СокрЛП(РабочийКаталог), "Dev26.txt");			
		
		Если НайденныеФайлы.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;			
			
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка на файл DevInsider", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции


// Проверяем, что в каталоге находится СТОП файл

Функция Сканирование_ЕстьСтопФайл()
	
	ЕстьСтопФайл = Ложь;
	
	Попытка
		
		НайденныеФайлы = НайтиФайлы(СокрЛП(РабочийКаталог), "stop*.txt");			
		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			ЕстьСтопФайл = Истина;
			Если ТекФайл.Имя = "stop.txt" Тогда
				ПутьКФайлуСтоп = ТекФайл.Путь;
				ПереместитьФайл(ТекФайл.ПолноеИмя, ПутьКФайлуСтоп + "stop!!!.txt");	
			КонецЕсли;	
		КонецЦикла;	
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Проверка на СТОП файл", "Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
							
	Если (врТекущийЧас >= 1) И (врТекущийЧас < 7) Тогда	
	
		Попытка
				
			НайденныеФайлы = НайтиФайлы(СокрЛП(РабочийКаталог), "stop!!!.txt");			
		
			Для Каждого ТекФайл Из НайденныеФайлы Цикл
				ПутьКФайлуСтоп = ТекФайл.Путь;
				УдалитьФайлы(ПутьКФайлуСтоп + "stop!!!.txt");
				ЗаписатьОшибку1СвЛогФайл("СТОП файл", "УДАЛЕНИЕ !!!");
			КонецЦикла;	
			
		Исключение
			ЗаписатьОшибку1СвЛогФайл("Удаление СТОП файла", "Исключение", ИнформацияОбОшибке(), Истина);
		КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат ЕстьСтопФайл;
	
КонецФункции	


// В синхронизации есть заказы

Функция Сканирование_ЕстьЗаказы(врНайденныеФайлы)
	
	Попытка
		
		Для Каждого ТекФайл Из врНайденныеФайлы Цикл
			
			Если ТекФайл.ЭтоФайл() Тогда
				
				врИмяФайла = ТекФайл.Имя;
							
				врКаталогПользователя = Лев(врИмяФайла, СтрДлина(врИмяФайла) - 4);
		
				врКаталогСинхронизации = РабочийКаталог;
		
				врФайл = Новый Файл(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt");
				Если врФайл.Существует() Тогда					
					Возврат Истина;
				КонецЕсли;							
					
			КонецЕсли;	
			
		КонецЦикла;	
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Определение наличия заказов", "Исключение", ИнформацияОбОшибке(), Истина);
		
		Возврат Истина;
		
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции	


// Сигнальный файл Регион

Функция Сканирование_Девайс_Регион(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Region") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс Регион", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;

КонецФункции


// Сигнальный файл Кузбасс

Функция Сканирование_Девайс_Кузбасс(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Kuzbass") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс Кузбасс", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;

КонецФункции


// Сигнальный файл Север

Функция Сканирование_Девайс_Север(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Sever") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс Север", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;

КонецФункции


// Сигнальный файл Томск

Функция Сканирование_Девайс_Томск(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Tomsk") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс Томск", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;

КонецФункции


// Сигнальный файл Томск - КЕГИ УТРО


Функция Сканирование_ЭтоКЕГИУТРО(врИмяФайла) Экспорт
	
	Попытка 
		
		Если КегиУтро_МассивАгентов.Найти(ТекАгент) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
		врКаталогСинхронизации = РабочийКаталог;
		
		врКаталогПользователя  = Лев(врИмяФайла, СтрДлина(врИмяФайла) - 4);				
		
		врФайл = Новый Файл(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt");
		Если Не врФайл.Существует() Тогда
			ЗаписатьОшибку1СвЛогФайл("Сканирование_ЭтоКЕГИУТРО", "Файл НЕ существует: " + Строка(врФайл.Имя));
			Возврат Ложь;
		КонецЕсли;					
		
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt", КодировкаТекста.ANSI);	
				
		КЧ2		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2);
		КЧ3		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3);
		КЧ4		= ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,4);
		КС20 	= ПолучитьОписаниеТиповСтроки(20);
		КС36 	= ПолучитьОписаниеТиповСтроки(36);
		КС40 	= ПолучитьОписаниеТиповСтроки(40);
		КС100 	= ПолучитьОписаниеТиповСтроки(100);
			
		Счета = Новый ТаблицаЗначений;
	
		Счета.Колонки.Добавить("DeviceID",				КС20);
		Счета.Колонки.Добавить("InvoiceID",				КС36);
		Счета.Колонки.Добавить("InvoiceRefID",			КС36);
		Счета.Колонки.Добавить("InvoiceTypeRefID",		КС20);
		Счета.Колонки.Добавить("ParentInvoiceID",		КС20);
		Счета.Колонки.Добавить("ParentInvoiceRefID",	КС36);
		Счета.Колонки.Добавить("AgentRefID",			КС36);
		Счета.Колонки.Добавить("ShopRefID",				КС40);
		Счета.Колонки.Добавить("VisitID",				КС36);
		Счета.Колонки.Добавить("InvoiceDateTime",		КС20);
		Счета.Колонки.Добавить("InvoiceNo",				КС20);
		Счета.Колонки.Добавить("InvoiceAmount",			КЧ2);
		Счета.Колонки.Добавить("AmountPaID",			КЧ2);
		Счета.Колонки.Добавить("DeliveryFromDateTime",	КС20);
		Счета.Колонки.Добавить("DeliveryThruDateTime",	КС20);
		Счета.Колонки.Добавить("IsConfidential",		КС20); 
		Счета.Колонки.Добавить("Note",					КС100);	
		Счета.Колонки.Добавить("SellerRefID",			КС100);
		Счета.Колонки.Добавить("PriceTypeRefID",		КС36); 
		Счета.Колонки.Добавить("InvoiceTypeCode",		КС36); 
		Счета.Колонки.Добавить("InvoiceRequired",		КС36); 	
		Счета.Колонки.Добавить("ShopID",				КС36);
		Счета.Колонки.Добавить("GpsLatitude",			КС36);
		Счета.Колонки.Добавить("GpsLongitude",			КС36);
		Счета.Колонки.Добавить("GpsHDOP",				КС36);
		Счета.Колонки.Добавить("GpsIsVisited",			КС36);
		Счета.Колонки.Добавить("InvoiceWeight",			КС36);
		Счета.Колонки.Добавить("InvoiceStatusRefID",	КС36);
		Счета.Колонки.Добавить("StockRefID",			КС36);
		Счета.Колонки.Добавить("InvoiceInitDateTime",   КС20);
		Счета.Колонки.Добавить("IsTTN",					КС36);
		Счета.Колонки.Добавить("IsInvoice",				КС20);
		Счета.Колонки.Добавить("WithouPay",				КС20);	
		Счета.Колонки.Добавить("Return",				КС20);
		Счета.Колонки.Добавить("Petrov",				КС20);
		Счета.Колонки.Добавить("PaymentDate",			КС20);
		
		КоличествоЗаписей = Число(Файл.ПолучитьСтроку(1));   
	
		Для сч = 3 По КоличествоЗаписей + 2 Цикл
		
			СписокАтрибутов = Split(файл.ПолучитьСтроку(сч), Символы.Таб);
		
			НоваяСтрока = Счета.Добавить();
			
			НоваяСтрока.DeviceID 				= СписокАтрибутов[0].Значение; 
			НоваяСтрока.InvoiceID				= СписокАтрибутов[1].Значение;
			НоваяСтрока.InvoiceRefID 			= ПолучитьНомерОтветаНаЗаказ();			
			НоваяСтрока.InvoiceTypeRefID 		= СписокАтрибутов[3].Значение;
			НоваяСтрока.ParentInvoiceID			= СписокАтрибутов[4].Значение; 
			НоваяСтрока.ParentInvoiceRefID		= СписокАтрибутов[5].Значение;
			НоваяСтрока.AgentRefID 				= СписокАтрибутов[6].Значение;
			НоваяСтрока.ShopRefID 				= СписокАтрибутов[7].Значение;
			НоваяСтрока.VisitID 				= СписокАтрибутов[8].Значение;
			НоваяСтрока.InvoiceDateTime			= СписокАтрибутов[9].Значение;			
			НоваяСтрока.InvoiceNo				= СписокАтрибутов[10].Значение;
			НоваяСтрока.InvoiceAmount			= СписокАтрибутов[11].Значение;
			НоваяСтрока.AmountPaid				= СписокАтрибутов[12].Значение;
			НоваяСтрока.DeliveryFromDateTime	= СписокАтрибутов[13].Значение;
			НоваяСтрока.DeliveryThruDateTime	= СписокАтрибутов[14].Значение;
			НоваяСтрока.IsConfidential			= СписокАтрибутов[15].Значение; 
			НоваяСтрока.Note					= СписокАтрибутов[16].Значение;
			НоваяСтрока.SellerRefID				= СписокАтрибутов[17].Значение;
			НоваяСтрока.PriceTypeRefID	 		= СписокАтрибутов[18].Значение;
			НоваяСтрока.InvoiceTypeCode	 		= СписокАтрибутов[19].Значение;
			НоваяСтрока.InvoiceRequired	 		= СписокАтрибутов[20].Значение;
			НоваяСтрока.ShopID					= СписокАтрибутов[21].Значение;
			НоваяСтрока.GpsLatitude				= СписокАтрибутов[22].Значение;
			НоваяСтрока.GpsLongitude			= СписокАтрибутов[23].Значение;
			НоваяСтрока.GpsHDOP					= СписокАтрибутов[24].Значение;
			НоваяСтрока.GpsIsVisited			= СписокАтрибутов[25].Значение;
			НоваяСтрока.InvoiceWeight			= СписокАтрибутов[26].Значение;
			НоваяСтрока.InvoiceStatusRefID		= СписокАтрибутов[27].Значение;
			НоваяСтрока.StockRefID				= СписокАтрибутов[28].Значение;
			НоваяСтрока.InvoiceInitDateTime		= СписокАтрибутов[29].Значение;
			НоваяСтрока.IsTTN					= СписокАтрибутов[30].Значение;
			НоваяСтрока.IsInvoice				= СписокАтрибутов[31].Значение;
			НоваяСтрока.WithouPay				= СписокАтрибутов[32].Значение;
			НоваяСтрока.Return					= СписокАтрибутов[33].Значение;
			НоваяСтрока.Petrov					= СписокАтрибутов[34].Значение;
			НоваяСтрока.PaymentDate				= СписокАтрибутов[35].Значение;
						
		КонецЦикла; 
		
		Для Каждого ТекСтрокаСчета Из Счета Цикл
			
			Если ТекСтрокаСчета.Petrov = "True" Тогда
				Возврат Истина;
			КонецЕсли;	    
						
		КонецЦикла;	
							
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Сканирование_ЭтоКЕГИУТРО()", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;		
	
	Возврат Ложь;

КонецФункции


// Сигнальный файл НСК

Функция Сканирование_Девайс_НСК(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Novosib") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс НСК", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;

КонецФункции


// Сигнальный файл АЛТАЙ


Функция Сканирование_Девайс_АЛТАЙ(врИмяФайла) Экспорт
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Если СтрЧислоВхождений(ИмяСервера, "Altai") > 0 Тогда
			Т.Закрыть();
			Возврат Истина;
		КонецЕсли;	
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("Девайс НСК", "Исключение", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();

	Возврат Ложь;
	
				
КонецФункции


Функция Сканирование_Девайс_ИмяСервера(врИмяФайла)
	
	Попытка
	
		Т = Новый ЧтениеТекста(врИмяФайла);
						
		СписокПараметров = Новый Соответствие;
	
		Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
		Стр = Т.ПрочитатьСтроку(); 
	
		Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
			СпСтр = Split(Стр, " = ");
				
			Если СпСтр.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
				
			СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
			Стр = Т.ПрочитатьСтроку();
			
		КонецЦикла;
			
		Если СписокПараметров.Количество() < 9 Тогда
			Т.Закрыть();
			Возврат Ложь;
		КонецЕсли;
			
		ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
		
		Возврат ИмяСервера
		
	Исключение	
		
		ЗаписатьОшибку1СвЛогФайл("СКАНИРОВАНИЕ", " ИМЯ СЕРВЕРА ДЕВАЙСА - ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Т.Закрыть();
	
	ЗаписатьОшибку1СвЛогФайл("СКАНИРОВАНИЕ", " ИМЯ СЕРВЕРА ДЕВАЙСА - НЕОПРЕДЕЛЕНО = " + врИмяФайла); 

	Возврат "";	
	
КонецФункции	


Функция Сканирование_КоличествоЗаказовВЗаявке(врИмяФайла) Экспорт
	
	Попытка 
		
		Если КегиУтро_МассивАгентов.Найти(ТекАгент) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
		врКаталогСинхронизации = РабочийКаталог;
		
		врКаталогПользователя  = Лев(врИмяФайла, СтрДлина(врИмяФайла) - 4);				
		
		врФайл = Новый Файл(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt");		
		Если Не врФайл.Существует() Тогда
			Возврат Ложь;
		КонецЕсли;					
		
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt", КодировкаТекста.ANSI);	
		
		КоличествоЗаписей = Число(Файл.ПолучитьСтроку(1));
		
		Возврат КоличествоЗаписей;
		
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("СКАНИРОВАНИЕ", "КОЛИЧЕСТВО ЗАКАЗОВ В ЗАЯВКЕ - ИСКЛЮЧЕНИЕ!!!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;	
	
	Возврат 0;

КонецФункции


// Приоритет синхронизации

Функция Сканирование_ПриоритетСинхронизации(врИмяФайла)
		
	Попытка
		
		Если СтрЧислоВхождений(врИмяФайла, "DevEmu") > 0 Тогда
			Возврат 0;
		КонецЕсли;					
		
		Если СтрЧислоВхождений(врИмяФайла, "DevInsider") > 0 Тогда
			Возврат 0;
		КонецЕсли;			
		
		Если СтрЧислоВхождений(врИмяФайла, "DevPetrushka") > 0 Тогда
			Возврат 0;
		КонецЕсли;					
		
		Если СтрЧислоВхождений(врИмяФайла, "Dev26") > 0 Тогда
			Возврат 0;
		КонецЕсли;	
		
		Если СтрЧислоВхождений(врИмяФайла, "Dev8") > 0 Тогда
			Возврат 0;
		КонецЕсли;		
		
		Если СтрЧислоВхождений(врИмяФайла, "Dev229") > 0 Тогда
			Возврат 0;
		КонецЕсли;			
		
	//	Возврат 1;
						
		врКаталогСинхронизации = РабочийКаталог;
		врСигнальныйФайл       = врКаталогСинхронизации + врИмяФайла; 
		
		врИмяСервераДевайса = Сканирование_Девайс_ИмяСервера(врСигнальныйФайл);
		
		// ВЫСШИЙ ПРИОРИТЕТ
		
		Если (врИмяСервераДевайса = "Sever") Тогда
			Возврат 2;
		КонецЕсли;
		
		врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
				                         
		Если (врТекущийЧас >= 15) И (врТекущийЧас < 18) Тогда
							
			Если (врИмяСервераДевайса = "Altai") ИЛИ (врИмяСервераДевайса = "Novosib") ИЛИ (врИмяСервераДевайса = "Kuzbass") Тогда
				Возврат 0;
			КонецЕсли;	
				
		КонецЕсли;			
				
		Если (врТекущийЧас >= 9) И (врТекущийЧас < 11) Тогда
							
			Если врИмяСервераДевайса = "Tomsk" Тогда
				Если Сканирование_ЭтоКЕГИУТРО(врИмяФайла) Тогда					
					Возврат 0;
				КонецЕсли;	
			КонецЕсли;			
				
		КонецЕсли;
		
		Если (врТекущийЧас > 17) Тогда
		
			Если (врИмяСервераДевайса = "Altai") ИЛИ (врИмяСервераДевайса = "Novosib") ИЛИ (врИмяСервераДевайса = "Kuzbass") Тогда
				Возврат 8;
			КонецЕсли;	
				
		КонецЕсли;					
				
		Если (врТекущийЧас >= 17) Тогда
		
			Если СтрЧислоВхождений(врИмяФайла, "Dev127") > 0 Тогда
				Возврат 0;
			КонецЕсли;	
			
			Если СтрЧислоВхождений(врИмяФайла, "Dev9") > 0 Тогда
				Возврат 0;
			КонецЕсли;	
			
			Если СтрЧислоВхождений(врИмяФайла, "Dev8") > 0 Тогда
				Возврат 0;
			КонецЕсли;	
			
		КонецЕсли;			
		
		// БЕЗ ОЧЕРЕДИ - ПРИОРИТЕТ 1
				
		врКоличествоЗаказовВЗаявке = Сканирование_КоличествоЗаказовВЗаявке(врИмяФайла);
		Если (врКоличествоЗаказовВЗаявке = 1) ИЛИ (врКоличествоЗаказовВЗаявке = 2) Тогда
			Возврат 1;
		КонецЕсли;	
		
		// ПРИОРИТЕТ 2 - пустая синхронизация без очереди
		
		// ПРИОРИТЕТ 3 - пустая синхронизация без очереди (низкий приоритет, без обновления точек)
		
		// ПРИОРИТЕТ 4 - РЕЗЕРВ
		
		// ПРИОРИТЕТ 5 - пустая синхронизация (отсутствуют файлы Invoice.txt и Payment.txt)	 
		
		// ПРИОРИТЕТ 6 - только оплаты (отсутствует файл Invoice.txt)	
		
		врКаталогПользователя = Лев(врИмяФайла, СтрДлина(врИмяФайла) - 4);		
		
		ЕстьInvoice = Ложь;
		ЕстьPayment = Ложь;
		
		врФайл = Новый Файл(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Invoice.txt");
		Если врФайл.Существует() Тогда
			ЕстьInvoice = Истина;
		КонецЕсли;			
		
		врФайл = Новый Файл(врКаталогСинхронизации + "\" + СокрЛП(врКаталогПользователя) + "\FromDevice\Payment.txt");
		Если врФайл.Существует() Тогда
			ЕстьPayment = Истина;
		КонецЕсли;	
				 										 
		Если (Не ЕстьInvoice) И (Не ЕстьPayment) Тогда
			Возврат 5;
		КонецЕсли;
				
		Если (Не ЕстьInvoice) И ЕстьPayment Тогда
			Возврат 6;
		КонецЕсли;	
	
	Исключение
		
		ЗаписатьОшибку1СвЛогФайл("Сканирование", "Приоритет синхронизации. Исключение!", ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	// Синхронизация содержит заявки и оплаты
		
	Возврат 7;
		
КонецФункции	


// Сортировка сигнальных файлов 

Функция Сканирование_ОтсортироватьСигнальныеФайлы(врНайденныеФайлы)
	
	Попытка
		
		врКаталогСинхронизации = РабочийКаталог;
		
		Для Каждого ТекФайл Из врНайденныеФайлы Цикл
			аян_СинхронизацияСервер.Сканирование_ДобавитьСигнальныйФайлВОчередь(ТекФайл);
		КонецЦикла;	
		
		Если врНайденныеФайлы.Количество() <= 1 Тогда
			Возврат врНайденныеФайлы;
		КонецЕсли;	
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Файл");
		ТЗ.Колонки.Добавить("Приоритет",    ОписаниеТипаЧисло(1));
		ТЗ.Колонки.Добавить("ДатаСоздания", ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
		Для Каждого ТекФайл Из врНайденныеФайлы Цикл
			
			Если ТекФайл.ЭтоФайл() Тогда
			
				НовСтрока = ТЗ.Добавить();
				НовСтрока.Файл         = ТекФайл;
				НовСтрока.Приоритет    = Сканирование_ПриоритетСинхронизации(ТекФайл.Имя);
				НовСтрока.ДатаСоздания = аян_СинхронизацияСервер.Сканирование_ПолучитьВремяСозданияСигнальногоФайла(ТекФайл);
								
			КонецЕсли;	
			
		КонецЦикла;	
		
		ТЗ.Сортировать("Приоритет, ДатаСоздания");
		
		МассивДляВозврата = Новый Массив;
		
		Для Каждого ТекСтрока Из ТЗ Цикл
			МассивДляВозврата.Добавить(ТекСтрока.Файл);
		КонецЦикла;	
		
		Возврат МассивДляВозврата;
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Сортировка сигнальных файлов", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	Возврат врНайденныеФайлы;
	
КонецФункции


// Сканирование папки синхронизации

Процедура Сканирование() Экспорт
		
	Если ПустаяСтрока(РабочийКаталог) Тогда
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	Если Константы.аян_СинхронизацияТриггер.Получить() Тогда
	//		РабочийКаталог = "\\192.168.0.17\SyncAian\"; 
	//		Константы.аян_СинхронизацияТриггер.Установить(Ложь);
	//	Иначе
	//		РабочийКаталог = "\\192.168.100.15\Sync\"; 
	//		Константы.аян_СинхронизацияТриггер.Установить(Истина);			
	//	КонецЕсли;	
	//Исключение
	//	ЗаписатьОшибку1СвЛогФайл("Сканирование", "Переключение каталогов", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;				
	
	Попытка
		Если Сканирование_ЕстьСтопФайл() Тогда
			Возврат;
		КонецЕсли;	
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Сканирование", "Проверка на СТОП файл - Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
	
	врЗамерСтарт = ТекущаяДата();
	
	// Далюева Агенты
	
	Далюева_Агенты = Новый Массив;
	Далюева_Агенты.Добавить(ПолучитьПользователяПоГУИД("d1f4ccf8-bae3-11e7-81a5-00155d640d00"));
	Далюева_Агенты.Добавить(ПолучитьПользователяПоГУИД("900b1eff-1b09-11e9-82b6-1831bf2dc5c0"));
	Далюева_Агенты.Добавить(ПолучитьПользователяПоГУИД("90a9b18a-1af2-11e9-82b6-1831bf2dc5c0"));
	Далюева_Агенты.Добавить(ПолучитьПользователяПоГУИД("0712d740-d131-11ea-8331-1831bf2dc5c0"));
	
	// КЕГИ УТРО - ХОРИКА
	
	КегиУтро_Хорика = Новый Массив;
	
	врМассивСВХорека = Новый Массив;
	врМассивСВХорека.Добавить(Справочники.ГруппыПользователей.ПолучитьСсылку(Новый УникальныйИдентификатор("401791c4-8ff6-11ec-83da-ac1f6b8732b0")));
	врМассивСВХорека.Добавить(Справочники.ГруппыПользователей.ПолучитьСсылку(Новый УникальныйИдентификатор("572b5228-905b-11ec-83da-ac1f6b8732b0")));
	врМассивСВХорека.Добавить(Справочники.ГруппыПользователей.ПолучитьСсылку(Новый УникальныйИдентификатор("8b487777-ec43-11e6-a286-000c29fb98a2")));
	
	ЗапросХорекаПользователи = Новый Запрос;
	ЗапросХорекаПользователи.УстановитьПараметр("Ссылка", врМассивСВХорека);
	ЗапросХорекаПользователи.Текст = "ВЫБРАТЬ
	                                 |	ГруппыПользователейСостав.Пользователь
	                                 |ИЗ
	                                 |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	                                 |ГДЕ
	                                 |	ГруппыПользователейСостав.Ссылка В (&Ссылка)";
	
	ВыборкаХорекаПользователи = ЗапросХорекаПользователи.Выполнить().Выбрать();
	Пока ВыборкаХорекаПользователи.Следующий() Цикл
		КегиУтро_Хорика.Добавить(ВыборкаХорекаПользователи.Пользователь);
	КонецЦикла;	
	
	// КЕГИ УТРО
	
	КегиУтро_МассивАгентов = Новый Массив;
	
	// Балашов Лев Викторович
	КегиУтро_МассивАгентов.Добавить(ПолучитьПользователяПоГУИД("cffe2a3b-b2ae-11e5-80c6-00155d000c03"));
	
	// Тугузбаев Данил Михайлович
	КегиУтро_МассивАгентов.Добавить(ПолучитьПользователяПоГУИД("07beabc2-82c3-11e9-82ca-1831bf2dc5c0"));
	
	// Шарахтов Валерий Константинович
	КегиУтро_МассивАгентов.Добавить(ПолучитьПользователяПоГУИД("ce917b5c-2881-11ea-82ee-1831bf2dc5c0"));
	
	Для Каждого ТекАгентХорека Из КегиУтро_Хорика Цикл
		КегиУтро_МассивАгентов.Добавить(ТекАгентХорека);
	КонецЦИкла;
	
	Массив_АгентыМороженное = Новый Массив;
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("cffe2a40-b2ae-11e5-80c6-00155d000c03")); // Евсеенко
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("cffe2a39-b2ae-11e5-80c6-00155d000c03")); // Комарницкая
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("416bbfba-8beb-11e9-82cc-1831bf2dc5c0")); // Ященко
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("83655a99-2a5e-11ed-83fc-ac1f6b8732b0")); // Ефимова
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("ab122745-971d-11e9-82ce-1831bf2dc5c0")); // Валишев
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("cffe2a44-b2ae-11e5-80c6-00155d000c03")); // Кужелев
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("efee0f88-0e8d-11ee-842f-ac1f6b8732b0")); // Таразанова
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("9cf3d34d-a36b-11ec-83de-ac1f6b8732b0")); // Цой
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("2cac8c6b-9b29-11eb-837e-1831bf2dc5c0")); // Ломшакова
	Массив_АгентыМороженное.Добавить(ПолучитьПользователяПоГУИД("cffe2a3b-b2ae-11e5-80c6-00155d000c03")); // Савченко
	
	Массив_АгентыРИФ = Новый Массив;
	Массив_АгентыРИФ.Добавить(ПолучитьПользователяПоГУИД("cffe2a3b-b2ae-11e5-80c6-00155d000c03")); // Савченко
	Массив_АгентыРИФ.Добавить(ПолучитьПользователяПоГУИД("07beabc2-82c3-11e9-82ca-1831bf2dc5c0")); // Кладов
	Массив_АгентыРИФ.Добавить(ПолучитьПользователяПоГУИД("ce917b5c-2881-11ea-82ee-1831bf2dc5c0")); // Шпигрев
	
	Попытка
		Петрушка_ОбработатьЗаявки();
	Исключение
		ЗаписатьОшибку1СвЛогФайл("Сканирование", "ПЕТРУШКА - Обработать заявки!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	
	врЗамер_1 = врЗамерСтарт - ТекущаяДата();
	
	Попытка 
		аян_СинхронизацияСервер.Рассылка_УПД_ВОЗВРАТЫ();
	Исключение
		ЗаписатьОшибку1СвЛогФайл("РАССЫЛКА_УПД_ВОЗВРАТЫ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;		
	
	Попытка 
		аян_СинхронизацияСервер.ТразитныеСклады_ВыполнитьРегламент();
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ТРАНЗИТНЫЕ_ТОВАРЫ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;			
	
	Попытка                                              
		аян_СинхронизацияСервер.ЗакрытиеРезервовТоваров();
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗАКРЫТИЕ_РЕЗЕРВОВ_ТОВАРОВ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;				
	
	Попытка                                              
		аян_СинхронизацияСервер.АвансыПоставщиков_Регламент();
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ЗАКРЫТИЕ_АВАНСОВ_ПОСТАВЩИКОВ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;					
	
	Попытка                                              
		
		врЧасЗаказа = Час(ТекущаяДата());
					
		Если врЧасЗаказа > 8 Тогда		
			аян_СинхронизацияСервер.ДеревенскоеМолочко_Регламент();
		КонецЕсли;
		
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ДЕРЕВЕНСКОЕ_МОЛОЧКО", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;						
	
	врЗамер_2 = врЗамерСтарт - ТекущаяДата();
	
	Попытка 
		аян_СинхронизацияСервер.ВыравниваниеСерий();;
	Исключение
		ЗаписатьОшибку1СвЛогФайл("ВЫРАВНИВАНИЕ_СЕРИЙ", "Исключение!", ИнформацияОбОшибке(), Истина);
	КонецПопытки;				
		
	//Попытка 
	//	Если Флюгер_Сканирование() Тогда
	//		Возврат;
	//	КонецЕсли;
	//Исключение
	//	Флюгер_ЗаписатьОшибку1СвЛогФайл("ФЛЮГЕР (Общее сканирование)", "Исключение!", ИнформацияОбОшибке(), Истина);
	//КонецПопытки;	
		
	НайденныеФайлыБезСортировки = НайтиФайлы(СокрЛП(РабочийКаталог), "dev*.txt");	
	
	КоличествоСигнальныхФайлов = НайденныеФайлыБезСортировки.Количество();
	
	Если КоличествоСигнальныхФайлов = 0 Тогда
	    Возврат;
	КонецЕсли;	
	
	врЗамер_3 = врЗамерСтарт - ТекущаяДата();
	
	// СУПЕРВАЙЗЕРЫ
	
	Структура_СВ = Новый Структура;
	
	Структура_СВ.Вставить("Абакумов",    ПолучитьГруппуПользователяПоГУИД("b9400d59-52b7-11e9-82c0-1831bf2dc5c0"));
	Структура_СВ.Вставить("Власов",      ПолучитьГруппуПользователяПоГУИД("5e2ad4f8-ec43-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Горковенко",  ПолучитьГруппуПользователяПоГУИД("550fb0fc-e821-11ea-833b-1831bf2dc5c0"));
	Структура_СВ.Вставить("Горохов",     ПолучитьГруппуПользователяПоГУИД("646f365e-ec43-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Далюева",     ПолучитьГруппуПользователяПоГУИД("a63ebe3c-b34e-11e9-82d4-1831bf2dc5c0"));
	Структура_СВ.Вставить("Думченко",    ПолучитьГруппуПользователяПоГУИД("3daa4590-e4bc-11e9-82e1-1831bf2dc5c0"));
	Структура_СВ.Вставить("Либрихт",     ПолучитьГруппуПользователяПоГУИД("ad0b1962-d130-11ea-8331-1831bf2dc5c0"));
	Структура_СВ.Вставить("Колениченко", ПолучитьГруппуПользователяПоГУИД("2eee7299-ec3d-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Лютаева",     ПолучитьГруппуПользователяПоГУИД("85445b44-ec43-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Мезенцев",    ПолучитьГруппуПользователяПоГУИД("e08707a9-ec3c-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Мирусина",    ПолучитьГруппуПользователяПоГУИД("6ebe3dfd-ec3c-11e6-a286-000c29fb98a2"));
	Структура_СВ.Вставить("Меленцова",   ПолучитьГруппуПользователяПоГУИД("4a16b0da-2b7b-11e9-82b9-1831bf2dc5c0"));
	Структура_СВ.Вставить("Нечаев",      ПолучитьГруппуПользователяПоГУИД("e4f4eb32-250d-11e9-82b8-1831bf2dc5c0"));	
	Структура_СВ.Вставить("Коликов",     ПолучитьГруппуПользователяПоГУИД("b9700335-6de7-11e8-8276-1831bf2dc5c0"));
	
	// ТРАНЗИТНЫЕ СКЛАДЫ
		
	ТЗ_ТранзитныеСклады = аян_СинхронизацияСервер.ТранзитныеСклады_Инициализация();
		
	Событие1С = "Разбор сигнального файла";
	
	ЛогФайл     = Новый ЗаписьТекста(КаталогЛогФайлов + "\" + "LogGeneral" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".log", КодировкаТекста.ANSI, ,Истина);		
	
	врЗамерВремени_Старт = ТекущаяДата();
	
	ЕстьЗаказы = Сканирование_ЕстьЗаказы(НайденныеФайлыБезСортировки);
	
	НайденныеФайлы = Сканирование_ОтсортироватьСигнальныеФайлы(НайденныеФайлыБезСортировки);
	
	врЗамер_4 = врЗамерСтарт - ТекущаяДата();
	
	врЗамерВремени_Сортировка = ТекущаяДата();
	
	// Фокусные агенты
	Массив_ФокусныеАгенты = Новый Массив;
	ЗапросФокусныеАгенты = Новый Запрос;
	ЗапросФокусныеАгенты.Текст = "ВЫБРАТЬ
	                             |	аян_Синхронизация_ФокусныеАгенты.ФокусныйАгент
	                             |ИЗ
	                             |	РегистрСведений.аян_Синхронизация_ФокусныеАгенты КАК аян_Синхронизация_ФокусныеАгенты";
	Выборка = ЗапросФокусныеАгенты.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив_ФокусныеАгенты.Добавить(Выборка.ФокусныйАгент);
	КонецЦикла;	
	
	// Данные повторного использования
	
	ПовтИсп_ТЗ_ТелефоныФизЛиц = Новый ТаблицаЗначений;
	ПовтИсп_ТЗ_ТелефоныФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПовтИсп_ТЗ_ТелефоныФизЛиц.Колонки.Добавить("Телефон", 		 ОписаниеТипаСтрока(50));

	ПовтИсп_ТЗ_ФИОФизЛиц = Новый ТаблицаЗначений;
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("ФизическоеЛицо",      Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Фамилия", 		     ОписаниеТипаСтрока(100));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Имя", 			     ОписаниеТипаСтрока(100));
	ПовтИсп_ТЗ_ФИОФизЛиц.Колонки.Добавить("Отчество", 		     ОписаниеТипаСтрока(100));	
	
	ПовтИсп_ТЗ_Петровы = Новый ТаблицаЗначений;
	ПовтИсп_ТЗ_Петровы.Колонки.Добавить("Партнер",   Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ПовтИсп_ТЗ_Петровы.Колонки.Добавить("ЭтоПетров", ОписаниеТипаЧисло(1));	
	
	// Точки с ручными заказами
	
	ТочкиСРучнымиЗаказами = Новый Массив;
	
	врМассивГруппТочекСРучнымиЗаказами = Новый Массив;
	врМассивГруппТочекСРучнымиЗаказами.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00001111"));   // Гринтея
	врМассивГруппТочекСРучнымиЗаказами.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00017444"));   // ДельтаТорг
	врМассивГруппТочекСРучнымиЗаказами.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00001117"));	// Дина
	врМассивГруппТочекСРучнымиЗаказами.Добавить(Справочники.Партнеры.НайтиПоКоду("00-00030915"));   // МЕГАТОРГ
	
	ЗапросРучныеЗаказы = Новый Запрос;
	ЗапросРучныеЗаказы.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	Партнеры.Ссылка
	                           |ИЗ
	                           |	Справочник.Партнеры КАК Партнеры
	                           |ГДЕ
	                           |	НЕ Партнеры.ПометкаУдаления
	                           |	И Партнеры.Ссылка В ИЕРАРХИИ(&Ссылка)";
	Для Каждого ТекГрРучнойЗаказ Из врМассивГруппТочекСРучнымиЗаказами Цикл
		ЗапросРучныеЗаказы.УстановитьПараметр("Ссылка", врМассивГруппТочекСРучнымиЗаказами);
		ВыборкаРучныеЗаказы = ЗапросРучныеЗаказы.Выполнить().Выбрать();
		Пока ВыборкаРучныеЗаказы.Следующий() Цикл
			ТочкиСРучнымиЗаказами.Добавить(ВыборкаРучныеЗаказы.Ссылка);
		КонецЦикла;	
	КонецЦикла;	
	
	// Сегменты клиентов без лимита задолженности
	
	СегментСети 				= Справочники.СегментыПартнеров.НайтиПоКоду("00-00000011");
	СегментОгружатьВЛюбомСлучае = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000012");
	
	СегментыБезЛимитаЗадолженности = Новый Массив;
	СегментыБезЛимитаЗадолженности.Добавить(СегментСети);
	СегментыБезЛимитаЗадолженности.Добавить(СегментОгружатьВЛюбомСлучае);
				
	// Товары без НДС
			
	ТоварыБезНДС = Новый Массив;
				
	ЗапросТоварыБезНДС = Новый Запрос;
	ЗапросТоварыБезНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	аян_ТоварыБезНДС.Номенклатура
	                           |ИЗ
	                           |	РегистрСведений.аян_ТоварыБезНДС КАК аян_ТоварыБезНДС";
	ВыборкаТоварыБезНДС = ЗапросТоварыБезНДС.Выполнить().Выбрать();
	Пока ВыборкаТоварыБезНДС.Следующий() Цикл
		ТоварыБезНДС.Добавить(ВыборкаТоварыБезНДС.Номенклатура);
	КонецЦикла;		
				
	// Весовые товары
	
	ТоварыВесовые = Новый Массив;
	
	//Если ЕстьЗаказы Тогда
	//
	//	ЗапросВЕС = Новый Запрос;
	//	ЗапросВЕС.УстановитьПараметр("ТоварыБезНДС",     ТоварыБезНДС);
	//	ЗапросВЕС.УстановитьПараметр("ВидНоменклатуры",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Молочная продукция"));
	//	ЗапросВЕС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	//	ЗапросВЕС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	                  |	Номенклатура.Ссылка
	//	                  |ИЗ
	//	                  |	Справочник.Номенклатура КАК Номенклатура
	//	                  |ГДЕ
	//	                  |	НЕ Номенклатура.ПометкаУдаления
	//	                  |	И НЕ Номенклатура.ЭтоГруппа
	//	                  |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	//	                  |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	//	                  |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&ТоварыБезНДС)";
	//	ВыборкаВЕС = ЗапросВЕС.Выполнить().Выбрать();			   
	//	Пока ВыборкаВЕС.Следующий() Цикл
	//		ТоварыВесовые.Добавить(ВыборкаВЕС.Ссылка);
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	
	МассивЗонНабора = Новый Массив;
	МассивЗонНабора.Добавить(Справочники.ЗоныНабораТовара.НайтиПоКоду("000000005"));
	МассивЗонНабора.Добавить(Справочники.ЗоныНабораТовара.НайтиПоКоду("000000006"));
	
	ЗапросВЕС = Новый Запрос;
	ЗапросВЕС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	ЗапросВЕС.УстановитьПараметр("ЗонаНабора", 		 МассивЗонНабора);
	ЗапросВЕС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	Номенклатура.Ссылка
	                  |ИЗ
	                  |	Справочник.Номенклатура КАК Номенклатура
	                  |ГДЕ
	                  |	НЕ Номенклатура.ПометкаУдаления
	                  |	И НЕ Номенклатура.ЭтоГруппа
	                  |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	                  |	И Номенклатура.ЗонаНабора В(&ЗонаНабора)";
	ВыборкаВЕС = ЗапросВЕС.Выполнить().Выбрать();			   
	Пока ВыборкаВЕС.Следующий() Цикл
		ТоварыВесовые.Добавить(ВыборкаВЕС.Ссылка);
	КонецЦикла;			
	
	// Весовые товары без НДС
	
	ТоварыВесовыеБезНДС = Новый Массив;
	
	Если ЕстьЗаказы Тогда
	
		ЗапросВЕСБезНДС = Новый Запрос;
		ЗапросВЕСБезНДС.УстановитьПараметр("ТоварыБезНДС",     ТоварыБезНДС);
		ЗапросВЕСБезНДС.УстановитьПараметр("ВидНоменклатуры",  Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Молочная продукция"));
		ЗапросВЕСБезНДС.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
		ЗапросВЕСБезНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                  |	Номенклатура.Ссылка
		                  |ИЗ
		                  |	Справочник.Номенклатура КАК Номенклатура
		                  |ГДЕ
		                  |	НЕ Номенклатура.ПометкаУдаления
		                  |	И НЕ Номенклатура.ЭтоГруппа
			                  |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		                  |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
		                  |	И Номенклатура.Ссылка В ИЕРАРХИИ (&ТоварыБезНДС)";
		ВыборкаВЕСБезНДС = ЗапросВЕСБезНДС.Выполнить().Выбрать();			   
		Пока ВыборкаВЕСБезНДС.Следующий() Цикл
			ТоварыВесовыеБезНДС.Добавить(ВыборкаВЕСБезНДС.Ссылка);
		КонецЦикла;		
		
	КонецЕсли;		
	
	// Сигареты
	
	ТоварыСигареты = Новый Массив;
	
	Если ЕстьЗаказы Тогда
				
		ЗапросСигареты = Новый Запрос;
		ЗапросСигареты.УстановитьПараметр("ТоварыСигареты",  Справочники.Номенклатура.НайтиПоКоду("00-00009131"));
		ЗапросСигареты.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры_ТабачнаяПродукция);
		ЗапросСигареты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	Номенклатура.Ссылка
		                       |ИЗ
		                       |	Справочник.Номенклатура КАК Номенклатура
		                       |ГДЕ
		                       |	НЕ Номенклатура.ПометкаУдаления
		                       |	И НЕ Номенклатура.ЭтоГруппа
		                       |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыСигареты)
		                       |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
		ВыборкаСигареты = ЗапросСигареты.Выполнить().Выбрать();			   
		Пока ВыборкаСигареты.Следующий() Цикл
			ТоварыСигареты.Добавить(ВыборкаСигареты.Ссылка);
		КонецЦикла;
					
	КонецЕсли;	
	
	// ОВОЩИ-ФРУКТЫ ВЕС
	
	Товары_ОвощиФрукты = Новый Массив;
	
	Если ЕстьЗаказы Тогда
			
		ЗапросОвощиФрукты = Новый Запрос;
		ЗапросОвощиФрукты.УстановитьПараметр("ТоварыОвощиФрукты",  Справочники.Номенклатура.НайтиПоКоду("00-00012416"));
		ЗапросОвощиФрукты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                          |	Номенклатура.Ссылка
		                          |ИЗ
		                          |	Справочник.Номенклатура КАК Номенклатура
		                          |ГДЕ
		                          |	НЕ Номенклатура.ПометкаУдаления
		                          |	И НЕ Номенклатура.ЭтоГруппа
		                          |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыОвощиФрукты)";
		ВыборкаОвощиФрукты = ЗапросОвощиФрукты.Выполнить().Выбрать();			   
		Пока ВыборкаОвощиФрукты.Следующий() Цикл
			Товары_ОвощиФрукты.Добавить(ВыборкаОвощиФрукты.Ссылка);
		КонецЦикла;		
			
	КонецЕсли;	
	
	// Товары для продажи с бортов агентов
	
	врТовары_Борт = Новый Массив;
	
	ЗапросТоварыБорт = Новый Запрос;
	ЗапросТоварыБорт.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	аян_ТоварыБорт.Товар
		                     |ИЗ
		                     |	РегистрСведений.аян_ТоварыБорт КАК аян_ТоварыБорт";
	ВыборкаТоварыБорт = ЗапросТоварыБорт.Выполнить().Выбрать();			   
	Пока ВыборкаТоварыБорт.Следующий() Цикл
		врТовары_Борт.Добавить(ВыборкаТоварыБорт.Товар);
	КонецЦикла;		
	
	Товары_Борт = аян_СинхронизацияСервер.Товары_ПолучитьСписокТоваровСУчетомИерархии(врТовары_Борт);
	
	// ЗАМОРОЗКА ВЕС
	
	ТоварыЗаморозкаВЕС = Новый Массив;
	
	врМассивЗаморозка = Новый Массив;
	врМассивЗаморозка.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00013589"));   
	//врМассивЗаморозка.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0004293   "));
	//врМассивЗаморозка.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0008408   "));
	//врМассивЗаморозка.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0001118   "));
	//
	//ЗапросЗаморозка = Новый Запрос;
	//ЗапросЗаморозка.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоКоду("166"));
	//ЗапросЗаморозка.УстановитьПараметр("ЗонаНабора", 	   МассивЗонНабора);	
	//ЗапросЗаморозка.УстановитьПараметр("Ссылка",           врМассивЗаморозка);
	//ЗапросЗаморозка.Текст = "ВЫБРАТЬ
	//                        |	Номенклатура.Ссылка
	//                        |ИЗ
	//                        |	Справочник.Номенклатура КАК Номенклатура
	//                        |ГДЕ
	//                        |	НЕ Номенклатура.ЭтоГруппа
	//                        |	И НЕ Номенклатура.ПометкаУдаления
	//                        |	И Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	//                        |	И Номенклатура.ЗонаНабора В(&ЗонаНабора)
	//                        |	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)";
	//ВыборкаЗаморозка = ЗапросЗаморозка.Выполнить().Выбрать();
	//Пока ВыборкаЗаморозка.Следующий() Цикл
	//	ТоварыЗаморозкаВЕС.Добавить(ВыборкаЗаморозка.Ссылка);
	//КонецЦикла;	
	
	// ЗАМОРОЗКА
	
	ТоварыЗаморозка = Новый Массив;
	
	ЗапросЗаморозка = Новый Запрос;
	ЗапросЗаморозка.УстановитьПараметр("Ссылка", врМассивЗаморозка);
	ЗапросЗаморозка.Текст = "ВЫБРАТЬ
	                        |	Номенклатура.Ссылка
	                        |ИЗ
	                        |	Справочник.Номенклатура КАК Номенклатура
	                        |ГДЕ
	                        |	НЕ Номенклатура.ЭтоГруппа
	                        |	И НЕ Номенклатура.ПометкаУдаления
	                        |	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)";
	ВыборкаЗаморозка = ЗапросЗаморозка.Выполнить().Выбрать();
	Пока ВыборкаЗаморозка.Следующий() Цикл
		ТоварыЗаморозка.Добавить(ВыборкаЗаморозка.Ссылка);
	КонецЦикла;	
	
	Товары_СкидкаКеги = Новый Массив;
	
	ЗапросСкидкаКеги = Новый Запрос;
	ЗапросСкидкаКеги.УстановитьПараметр("Ссылка", Справочники.Номенклатура.НайтиПоКоду("Ц0007873   "));
	ЗапросСкидкаКеги.Текст = "ВЫБРАТЬ
	                         |	Номенклатура.Ссылка
	                         |ИЗ
	                         |	Справочник.Номенклатура КАК Номенклатура
	                         |ГДЕ
	                         |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
	                         |	И НЕ Номенклатура.ПометкаУдаления
	                         |	И НЕ Номенклатура.ЭтоГруппа";
	ВыборкаСкидкаКеги = ЗапросСкидкаКеги.Выполнить().Выбрать();
	Пока ВыборкаСкидкаКеги.Следующий() Цикл
		Товары_СкидкаКеги.Добавить(ВыборкаСкидкаКеги.Ссылка);
	КонецЦикла;	
	
	Товары_НеверныйНДС = аян_СинхронизацияСервер.Товары_ТоварыСНевернойСтавкойНДС();
	
	// ТЕКСТИЛЬ
	
	ТоварыТекстиль = Новый Массив;
	
	ЗапросТекстиль = Новый Запрос;
	ЗапросТекстиль.УстановитьПараметр("Ссылка", Справочники.Номенклатура.НайтиПоКоду("00-00025430"));
	ЗапросТекстиль.Текст = "ВЫБРАТЬ
	                         |	Номенклатура.Ссылка
	                         |ИЗ
	                         |	Справочник.Номенклатура КАК Номенклатура
	                         |ГДЕ
	                         |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
	                         |	И НЕ Номенклатура.ПометкаУдаления
	                         |	И НЕ Номенклатура.ЭтоГруппа";
	ВыборкаТекстиль = ЗапросТекстиль.Выполнить().Выбрать();
	Пока ВыборкаТекстиль.Следующий() Цикл
		ТоварыТекстиль.Добавить(ВыборкаТекстиль.Ссылка);
	КонецЦикла;	
	
	// МОРОЖЕННОЕ
	
	ТоварыМороженное = Новый Массив;
	
	ЗапросМороженное = Новый Запрос;
	ЗапросМороженное.УстановитьПараметр("Ссылка", Справочники.Номенклатура.НайтиПоКоду("00-00049933"));
	ЗапросМороженное.Текст = "ВЫБРАТЬ
	                         |	Номенклатура.Ссылка
	                         |ИЗ
	                         |	Справочник.Номенклатура КАК Номенклатура
	                         |ГДЕ
	                         |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
	                         |	И НЕ Номенклатура.ПометкаУдаления
	                         |	И НЕ Номенклатура.ЭтоГруппа";
	ВыборкаМороженное = ЗапросМороженное.Выполнить().Выбрать();
	Пока ВыборкаМороженное.Следующий() Цикл
		ТоварыМороженное.Добавить(ВыборкаМороженное.Ссылка);
	КонецЦикла;		
	
	// СОЦИАЛЬНЫЕ ТОВАРЫ
	
	Попытка
		Товары_СоциальныеГруппыТоваров = аян_СинхронизацияСервер.ПолучитьСоциальныеТовары(ТекущаяДата());
		Товары_СоциальныеГруппы        = аян_СинхронизацияСервер.ПолучитьСоциальныеГруппы(ТекущаяДата())
	Исключение
		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Социалка. Исключение", ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
		
	// БОНУС
	
	ТоварыБонус = Новый Массив;
	ТоварыБонусБезКратности = Новый Массив;
	
	ЗапросБонус = Новый Запрос;
	ЗапросБонус.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Номенклатура.Ссылка,
	                    |	Номенклатура.ВидНоменклатуры,
	                    |	Номенклатура.Наименование
	                    |ИЗ
	                    |	Справочник.Номенклатура КАК Номенклатура
	                    |ГДЕ
	                    |	НЕ Номенклатура.ЭтоГруппа
	                    |	И НЕ Номенклатура.ПометкаУдаления
	                    |	И Номенклатура.Ссылка В ИЕРАРХИИ
	                    |			(ВЫБРАТЬ
	                    |				аян_Синхронизация_БонусныеТовары.Номенклатура
	                    |			ИЗ
	                    |				РегистрСведений.аян_Синхронизация_БонусныеТовары КАК аян_Синхронизация_БонусныеТовары)";
	ВыборкаБонус = ЗапросБонус.Выполнить().Выбрать();
	Пока ВыборкаБонус.Следующий() Цикл
		ТоварыБонус.Добавить(ВыборкаБонус.Ссылка);
	КонецЦикла;	
	// ▼ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21  ▼ Начало
	//ТоварыБонус.Добавить(Справочники.Номенклатура.НайтиПоКоду("Ц0003510   "));
	//ТоварыБонус.Добавить(Справочники.Номенклатура.НайтиПоКоду("00001596   "));
	ТоварыБонус.Добавить(аян_ОбщийМодульСерверПовтИсп.Газ40());
	ТоварыБонус.Добавить(аян_ОбщийМодульСерверПовтИсп.ГазБаллон40());
	ТоварыБонус.Добавить(аян_ОбщийМодульСерверПовтИсп.Газ40Аттест());
	ТоварыБонус.Добавить(аян_ОбщийМодульСерверПовтИсп.ГазБаллон40Аттест());
	// ▲ ayan#мпп#bitrix3253 Добавить в мх Синхронизации новые номенклатуры с Газ-ом  КирилловПС  2023.08.21  ▲ Конец 
	ЗапросБонус = Новый Запрос;
	ЗапросБонус.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Номенклатура.Ссылка
	                    |ИЗ
	                    |	Справочник.Номенклатура КАК Номенклатура
	                    |ГДЕ
	                    |	НЕ Номенклатура.ЭтоГруппа
	                    |	И НЕ Номенклатура.ПометкаУдаления
	                    |	И Номенклатура.Ссылка В ИЕРАРХИИ
	                    |			(ВЫБРАТЬ
	                    |				аян_Синхронизация_БонусныеТовары.Номенклатура
	                    |			ИЗ
	                    |				РегистрСведений.аян_Синхронизация_БонусныеТовары КАК аян_Синхронизация_БонусныеТовары
	                    |			ГДЕ
	                    |				аян_Синхронизация_БонусныеТовары.УчитыватьКратность = ЛОЖЬ)";
	ВыборкаБонус = ЗапросБонус.Выполнить().Выбрать();
	Пока ВыборкаБонус.Следующий() Цикл
		ТоварыБонусБезКратности.Добавить(ВыборкаБонус.Ссылка);
	КонецЦикла;
	
	ТоварыРИФ = Справочники.Номенклатура.НайтиПоКоду("00-00047569");
	
	// СЕГМЕНТЫ
	
	Массив_Сегмент_ЧерныйСписок   = Новый Массив;
	Массив_Сегмент_ЗапретОтгрузки = Новый Массив;
	Массив_Сегмент_ВсегдаЗаНАЛ    = Новый Массив;
	Массив_Сегмент_БОНУС          = Новый Массив;
	Массив_Сегмент_Доставка       = Новый Массив;
	Массив_Сегмент_Доставка2      = Новый Массив;
	Массив_Сегмент_ПереподключениеРегионов = Новый Массив;
	Массив_Сегмент_Отсрочка7      = Новый Массив;
	
	ЗапросСегменты = Новый Запрос;
	ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_ЧерныйСписок);
	ЗапросСегменты.Текст = "ВЫБРАТЬ
	                       |	ПартнерыСегмента.Партнер
	                       |ИЗ
	                       |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	                       |ГДЕ
	                       |	ПартнерыСегмента.Сегмент = &Сегмент";
	ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	Пока ВыборкаСегменты.Следующий() Цикл
		Массив_Сегмент_ЧерныйСписок.Добавить(ВыборкаСегменты.Партнер);
	КонецЦикла;	
	
	ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_ОтгрузкаЗапрещена);
	ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	Пока ВыборкаСегменты.Следующий() Цикл
		Массив_Сегмент_ЗапретОтгрузки.Добавить(ВыборкаСегменты.Партнер);
	КонецЦикла;	
	
	ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_ВсегдаЗаНАЛ);
	ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	Пока ВыборкаСегменты.Следующий() Цикл
		Массив_Сегмент_ВсегдаЗаНАЛ.Добавить(ВыборкаСегменты.Партнер);
	КонецЦикла;		
	
	ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_БОНУС);
	ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	Пока ВыборкаСегменты.Следующий() Цикл
		Массив_Сегмент_БОНУС.Добавить(ВыборкаСегменты.Партнер);
	КонецЦикла;	
	
	//ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_Доставка);
	//ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	//Пока ВыборкаСегменты.Следующий() Цикл
	//	//Массив_Сегмент_Доставка.Добавить(ВыборкаСегменты.Партнер);
	//КонецЦикла;	
	//
	//ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_Доставка2);
	//ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	//Пока ВыборкаСегменты.Следующий() Цикл
	//	//Массив_Сегмент_Доставка2.Добавить(ВыборкаСегменты.Партнер);
	//КонецЦикла;			
	//
	//ЗапросСегменты.УстановитьПараметр("Сегмент", Сегмент_ПереподключениеРегионов);
	//ВыборкаСегменты = ЗапросСегменты.Выполнить().Выбрать();
	//Пока ВыборкаСегменты.Следующий() Цикл
	//	//Массив_Сегмент_ПереподключениеРегионов.Добавить(ВыборкаСегменты.Партнер);
	//КонецЦикла;		
	
	ЗапросСегментыИерархия = Новый Запрос;
	ЗапросСегментыИерархия.Текст = "ВЫБРАТЬ
	                               |	ПартнерыСегмента.Партнер
	                               |ПОМЕСТИТЬ втПартнерыГоловные
	                               |ИЗ
	                               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	                               |ГДЕ
	                               |	ПартнерыСегмента.Сегмент = &Сегмент
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	Партнеры.Ссылка КАК Партнер
	                               |ИЗ
	                               |	Справочник.Партнеры КАК Партнеры
	                               |ГДЕ
	                               |	Партнеры.Ссылка В ИЕРАРХИИ
	                               |			(ВЫБРАТЬ
	                               |				втПартнерыГоловные.Партнер
	                               |			ИЗ
	                               |				втПартнерыГоловные КАК втПартнерыГоловные)";

	ЗапросСегментыИерархия.УстановитьПараметр("Сегмент", Сегмент_Отрочка7);
	ВыборкаСегментыИерархия = ЗапросСегментыИерархия.Выполнить().Выбрать();
	Пока ВыборкаСегментыИерархия.Следующий() Цикл
		Массив_Сегмент_Отсрочка7.Добавить(ВыборкаСегментыИерархия.Партнер);
	КонецЦикла;	
	
	//врМассивТочкиХорека = КлиентыКонтрагенты_МассивТочекХорека();
	//Для Каждого ТекТочкаХорека Из врМассивТочкиХорека Цикл
	//	Массив_Сегмент_Отсрочка7.Добавить(ТекТочкаХорека);
	//КонецЦикла;	
	
	Сигареты_Скидка = Справочники.Номенклатура.НайтиПоКоду("00-00029279");
	
	врЗамер_5 = врЗамерСтарт - ТекущаяДата();
	
	ЛогФайл.ЗаписатьСтроку("Замер 1 = " + Строка(врЗамер_1) + "; " + "Замер 2 = " + Строка(врЗамер_2) + "; " + "Замер 3 = " + Строка(врЗамер_3) + "; " + "Замер 4 = " + Строка(врЗамер_4) + "; " + "Замер 5 = " + Строка(врЗамер_5));
	
	врЗамерВремени_Инициализация = ТекущаяДата();	
	
//	ЛогФайл.ЗаписатьСтроку("СТАРТ = " + СокрЛП(врЗамерВремени_Старт) + "; СОРТИРОВКА = " + СокрЛП(врЗамерВремени_Сортировка) + "; ИНИЦИАЛИЗАЦИЯ = " + СокрЛП(врЗамерВремени_Инициализация));

	Для Каждого нФайл Из НайденныеФайлы Цикл
		
		Попытка
			Если Сканирование_ЕстьСтопФайл() Тогда
				Возврат;
			КонецЕсли;	
		Исключение
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка на СТОП файл - Исключение!", ИнформацияОбОшибке(), Истина);
		КонецПопытки;		
		
		Попытка                                       
			
			Попытка                                                  
				Если Не нФайл.Существует() Тогда
					ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Сигнальный файл не существует!!! " + СокрЛП(нФайл.Имя)); 
					Продолжить;	
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Проверка сигнального файла на существование", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
		
		Если нФайл.ЭтоФайл() Тогда
			
			ЗамерВыполненияНачало = ТекущаяДата();
			
			КоличествоЗявокВСинхронизации = 0;
			
			ЭтоФоновоеЗадание  = ?(СокрЛП(нФайл.Имя) = "DevEmu.txt",     Истина, Ложь);
			
			врЭтоДневнаяЭмуляция = Истина;
			
			врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
					
			Если врТекущийЧас < 7 Тогда
				врЭтоДневнаяЭмуляция = Ложь;
			КонецЕсли;	
			
			ЭтоВнутреннийАгент = ?(СокрЛП(нФайл.Имя) = "DevInsider.txt", Истина, Ложь);
			
			Т = Новый ЧтениеТекста(нФайл.ПолноеИмя);
			
			ПриоритетТекущегоФайла = Сканирование_ПриоритетСинхронизации(нФайл.Имя);
			
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Обрабатываем файл " + нФайл.Имя + " (ПРИОРИТЕТ = " + СокрЛП(ПриоритетТекущегоФайла) + ")");
			
			СписокПараметров = Новый Соответствие;
			Стр = Т.ПрочитатьСтроку(); 		// Проигнорируем первую строку (в ней записано количество строк файла)
			Стр = Т.ПрочитатьСтроку(); 
			Пока Стр <> Неопределено Цикл 	// Строки читаются до символа перевода строки
				
				СпСтр = Split(Стр, " = ");
				
				Если СпСтр.Количество() < 2 Тогда
				    ЗаписатьОшибку1СвЛогФайл(Событие1С, "Строка сигнального файла содержит некорректную строку параметров '" + стр + "' !");
					Продолжить;
				//	ЛогФайл.Закрыть();
				//	Возврат;
				КонецЕсли;
				
				СписокПараметров.Вставить(СпСтр[0].Значение, СпСтр[1].Значение);
				Стр = Т.ПрочитатьСтроку();
				
			КонецЦикла;
			
			Если СписокПараметров.Количество() < 9 Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, " Файл '" + нФайл.ПолноеИмя + "' содержит неверное число параметров!");
				ЛогФайл.Закрыть();
				УдалитьФайлы(нФайл.ПолноеИмя);
				Возврат;
			КонецЕсли;
			
			ТипСинхронизации	= Число(СписокПараметров.Получить("SyncType")); 			// Число(СпСтр[0].Значение);
			ИдКПК				= СокрЛП(СписокПараметров.Получить("DeviceID")); 			// СокрЛП(СпСтр[1].Значение);
			ИдАгента			= СокрЛП(СписокПараметров.Получить("AgentID")); 			// СокрЛП(СпСтр[2].Значение);
			КаталогЗагрузки 	= СокрЛП(СписокПараметров.Получить("FromDevicePath")); 		// СокрЛП(СпСтр[3].Значение);
			КаталогВыгрузки 	= СокрЛП(СписокПараметров.Получить("ToDevicePath")); 		// СокрЛП(СпСтр[4].Значение);
			ИмяФайлаОшибок		= СокрЛП(СписокПараметров.Получить("ErrorFilePath")); 		// СокрЛП(СпСтр[5].Значение);
			ВыгрЕжедневнДанных  = СокрЛП(СписокПараметров.Получить("ExportDailyData")); 	// СокрЛП(СпСтр[6].Значение);
			ВыгрОстатков	  	= СокрЛП(СписокПараметров.Получить("ExportRemains")); 		// СокрЛП(СпСтр[7].Значение);
			ГлубинаВыгрузки	  	= Число(СписокПараметров.Получить("SyncDocumentsPeriod")); 	// Число(СпСтр[8].Значение);
			
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Тип синхронизации = " + Строка(ТипСинхронизации) + ". Ежедневная синхронизация = " + Строка(ВыгрЕжедневнДанных) + ".");
			
			ИмяСервера 			= "";   
			ЭтоНовыйСерверМА    = Ложь;
			ЭтоТестовыйСерверМА = Ложь;
			Попытка
				ИмяСервера = СокрЛП(СписокПараметров.Получить("MAWSName"));
				Если СтрЧислоВхождений(ИмяСервера, "_") > 0 Тогда
					ЭтоНовыйСерверМА = Истина;
					ИмяСервера = Лев(ИмяСервера, СтрДлина(ИмяСервера) - 2);
				КонецЕсли;
				Если ИмяСервера = "MAWSTest" Тогда
					ИмяСервера          = "Tomsk";
					ЭтоТестовыйСерверМА = Истина;
					ИдКПК               = "DevEmu";            
				КонецЕсли;	
				Если ИмяСервера = "Altai" Тогда
					ЭтоНовыйСерверМА = Истина;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Определение параметра MAWSName", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			ИмяСервераМА = ?(ПустаяСтрока(ИмяСервера), "Region", ИмяСервера);
			
			Если ЭтоВнутреннийАгент Тогда
				ИмяСервераМА = "Tomsk";	
				Сканирование_СохранитьКопиюВходящихФайлов();
			КонецЕсли;	
						
			ТекСервер = ПолучитьТекущийСервер(ИмяСервераМА);
			
			КаталогЗагрузки 	= ?(Прав(СтрДлина(КаталогЗагрузки), 1) = "\", Лев(КаталогЗагрузки, СтрДлина(КаталогЗагрузки) - 1), КаталогЗагрузки);
			КаталогВыгрузки 	= ?(Прав(СтрДлина(КаталогВыгрузки), 1) = "\", Лев(КаталогВыгрузки, СтрДлина(КаталогВыгрузки) - 1), каталогВыгрузки);
						
			Каталог = Новый Файл(КаталогЗагрузки);
			Если Каталог.Существует() = ЛОЖЬ Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не найден каталог загрузки " + Строка(КаталогЗагрузки));
				ЛогФайл.Закрыть();
				Возврат;
			КонецЕсли;
			
			Каталог = Новый Файл(КаталогВыгрузки);
			Если Каталог.Существует() = ЛОЖЬ Тогда
				ЗаписатьОшибку1СвЛогФайл(Событие1С, " Не найден каталог выгрузки " + Строка(КаталогВыгрузки));
				Возврат;
			КонецЕсли;
			
			МожноЗагружатьДокументы = Ложь;
			
			ТекАгент = Справочники.Пользователи.ПустаяСсылка();
						
			ФайлОшибок = Новый ТекстовыйДокумент;
			Если (ТипСинхронизации > 1) и (ИдАгента<>"Админ") и (ТипСинхронизации <> 5) Тогда
				
				Попытка
					GUID = СоздатьУникальныйИдентификатор(ИдАгента);				
					МожноЗагружатьДокументы = Истина;
				Исключение
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка создания уникального идентификатора для ИдАгента """ + Строка(ИдАгента) + """");
					//ЛогОшибок1С.Закрыть();
					//ЛогФайл.Закрыть();					
					//Возврат;
				КонецПопытки;	
				ТекАгент = Справочники.Пользователи.ПолучитьСсылку(GUID);
				Если ТекАгент = Справочники.Пользователи.ПустаяСсылка() Тогда   
					ЗаписатьОшибку1СвЛогФайл("Разбор сигнального файла", "Не найден агент по уникальному идентификатору " + Строка(ИдАгента), ИнформацияОбОшибке(), Истина); 
				//	ЛогОшибок1С.Закрыть();
				//	ЛогФайл.Закрыть();
				//	Возврат;
				КонецЕсли;
								
			КонецЕсли;
			
			Попытка
				Если ИдКПК = "DevInsider" Тогда 
					Если ЭтоИнвойсНашейТочки() Тогда
						ИмяСервера   = "Tomsk";
						ИмяСервераМА = "Tomsk";
					//	ЗаписатьИнформацию1СвЛогФайл(Событие1С, "ИНВОЙС НАШЕЙ ТОЧКИ");
					КонецЕсли;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "НАША ТОЧКА", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			ЗапросСклад = Новый Запрос;
			ЗапросСклад.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                    |	НастройкиПользователей.Пользователь,
			                    |	НастройкиПользователей.Настройка,
			                    |	НастройкиПользователей.Значение
			                    |ИЗ
			                    |	РегистрСведений.алкНастройкиПользователей КАК НастройкиПользователей
			                    |ГДЕ
			                    |	НастройкиПользователей.Пользователь = &Пользователь
			                    |	И НастройкиПользователей.Настройка = &Настройка";
			ЗапросСклад.Параметры.Вставить("Пользователь", ТекАгент);
			ЗапросСклад.Параметры.Вставить("Настройка",    ПланыВидовХарактеристик.алкНастройкиПользователей.ОсновнойСклад);		
			ВыборкаСклад = ЗапросСклад.Выполнить().Выбрать();
			Если ВыборкаСклад.Следующий() Тогда 
				СкладАгента = ВыборкаСклад.Значение;
			Иначе 
				СкладАгента = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
			
			//ОсновнаяФирма 	= Справочники.Организации.НайтиПоНаименованию("АТ-Логистик", Истина);
			
			ОсновнаяФирма = ПолучитьОсновнуюОрганизацию(ТекАгент);				
			ОргБонусТомск = ПолучитьОрганизациюБонус(ТекАгент);				
			
			ОсновнойТипЦен	= Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист"); 
			//ОсновнойСклад 	= Справочники.Склады.НайтиПоНаименованию("Томск Пиво");
			ОсновнойСклад 	= ПолучитьОсновнойСкладАгента(ТекАгент);
										
			ДатаПоследнейУдачнойСинхронизации = НачалоДня(ТекущаяДата() - ?(ГлубинаВыгрузки > 0, ГлубинаВыгрузки, 180)*60*60*24); // За последние 180 дней			
			
			ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " ### Начало синхронизации: %" + СокрЛП(ИмяСервераМА) + "% " + Строка(ИдКПК) + " (" + Строка(ТекАгент) + " - " + Строка(ПолучитьГруппуПользователя(ТекАгент)) + ") ###");
			
			error = 0;
			
			// ПАУЗА
			
			//Попытка 
			//			
			//	ЕстьПауза = Ложь;
			//			
			//	ДатаВремяСозданияФайла = нФайл.ПолучитьВремяИзменения();
			//			
			//	Если ТекущаяДата() >= ДатаВремяСозданияФайла Тогда
			//			
			//		Пока (ТекущаяДата() - ДатаВремяСозданияФайла) <= 5 Цикл						
			//						
			//		КонецЦикла;	
			//				
			//	Иначе
			//
			//		ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Дата создания файла " + СокрЛП(ДатаВремяСозданияФайла) + " больше текущей даты!" + СокрЛП(ТекущаяДата()));
			//					
			//	КонецЕсли;	
			//			
			//Исключение	
			//
			//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ПАУЗА перед экспортом данных", ИнформацияОбОшибке(), Истина);
			//			
			//КонецПопытки;
			
			Попытка
				
				врЗамерУдалениеСтарт = ТекущаяДата();
				
				Сканирование_ПроверкаНаФайл_Lock();
		
				ФайлНаУдаление = Новый Файл(КаталогВыгрузки + "\Invoice.txt");
				Если ФайлНаУдаление.Существует() Тогда
					//врТекущееВремя = ПолучитьТекущиеДатаВремяСМиллисекундами();
					//ЗаписатьОшибку1СвЛогФайл_Delete(Событие1С, "Удаление файла Invoice.txt", врТекущееВремя);
					УдалитьФайлы(ФайлНаУдаление.ПолноеИмя);
				КонецЕсли;		
		
				ФайлНаУдаление = Новый Файл(КаталогВыгрузки + "\InvoiceProduct.txt");
				Если ФайлНаУдаление.Существует() Тогда
					//врТекущееВремя = ПолучитьТекущиеДатаВремяСМиллисекундами();
					//ЗаписатьОшибку1СвЛогФайл_Delete(Событие1С, "Удаление файла InvoiceProduct.txt", врТекущееВремя);					
					УдалитьФайлы(ФайлНаУдаление.ПолноеИмя);
				КонецЕсли;	
				
				ФайлНаУдаление = Новый Файл(КаталогВыгрузки + "\Shop.txt");
				Если ФайлНаУдаление.Существует() Тогда
					//врТекущееВремя = ПолучитьТекущиеДатаВремяСМиллисекундами();
					//ЗаписатьОшибку1СвЛогФайл_Delete(Событие1С, "Удаление файла Shop.txt", врТекущееВремя);					
					УдалитьФайлы(ФайлНаУдаление.ПолноеИмя);
				КонецЕсли;									
				
				ФайлНаУдаление = Новый Файл(КаталогВыгрузки + "\Shop2.txt");
				Если ФайлНаУдаление.Существует() Тогда
					//врТекущееВремя = ПолучитьТекущиеДатаВремяСМиллисекундами();
					//ЗаписатьОшибку1СвЛогФайл_Delete(Событие1С, "Удаление файла Shop2.txt", врТекущееВремя);					
					УдалитьФайлы(ФайлНаУдаление.ПолноеИмя);
				КонецЕсли;					
				
				врЗамерУдаление = ТекущаяДата() - врЗамерУдалениеСтарт;
				
				ЛогФайл.ЗаписатьСтроку("Замер Удаление файлов = " + Строка(врЗамерУдаление));
		
			Исключение
				
			//	врТекущееВремя = ПолучитьТекущиеДатаВремяСМиллисекундами();
			//	ЗаписатьОшибку1СвЛогФайл_Delete(Событие1С, "Исключение при удаление Invoice.txt, InvoiceProduct.txt, Shop.txt, Shop2.txt", врТекущееВремя);				
			//	ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Исключение при удаление Invoice.txt, InvoiceProduct.txt, Shop.txt, Shop2.txt");
				
				Продолжить;
		
			КонецПопытки;
			
			Если ТипСинхронизации <> 5 Тогда 
				
				// ИМПОРТ
				
				Попытка
					
					Если ПроверитьНаличиеФайловДляЗагрузкиДокументов() И МожноЗагружатьДокументы И (ТипСинхронизации <> 1) Тогда 
						
						ЗамерСтарт = ТекущаяДата();
						
						ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Загрузка документов...");
						
						// Загрузка документов (заказы)
						
						Если ЗначениеЗаполнено(ТекАгент) Тогда
														
							Попытка 
								Если ИмяСервераМА = "Region" Тогда
									ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗявокВСинхронизации);
								ИначеЕсли ИмяСервераМА = "Kuzbass" Тогда
									ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗявокВСинхронизации);									
								ИначеЕсли (ИмяСервераМА = "Tomsk") ИЛИ (ИмяСервераМА = "Novosib") ИЛИ (ИмяСервераМА = "Altai") Тогда
									ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗявокВСинхронизации);	
								Иначе
									Если ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Батин Олег Викторович") Тогда
										ЗагрузитьДокументы_All_In_Kuzbass(КоличествоЗявокВСинхронизации);
									Иначе	
										ЗагрузитьДокументы_All_In_ТОП17(КоличествоЗявокВСинхронизации);
									КонецЕсли;	
								КонецЕсли;	
								
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка при загрузке заказов!", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
							
						Иначе
							
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Не определен Агент. Загрузка документов не выполнена!");
							
						КонецЕсли;
						
						// Загрузка оплат
						
						//Попытка 
						//	ЗагрузитьПКО();
						//Исключение
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка при загрузке оплат!", ИнформацияОбОшибке(), Истина);
						//КонецПопытки;	
						//
						//ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Загрузка документов завершена ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд).");
						
					Иначе	
						
			//			ЛогФайл.ЗаписатьСтроку("--------------------------------------------------------------------------------------------------------------------------------------------------");
			//			ЛогФайл.Закрыть();
			//			Т.Закрыть();
			//
			//			УдалитьФайлы(нФайл.ПолноеИмя);
			//			
			//			// Повтор загрузки заказов
			//			
			//			Если СтрДлина(СокрЛП(ИдКПК)) > 3 Тогда
			//				
			//				НомерИдАгента = Прав(СокрЛП(ИдКПК), СтрДлина(СокрЛП(ИдКПК)) - 3);
			//															
			//				DevErr = Новый ЗаписьТекста(РабочийКаталог + "\" + "Dev" + СокрЛП(НомерИдАгента) + ".err", КодировкаТекста.ANSI, ,Истина);
			//				DevErr.ЗаписатьСтроку("Сбой при создании заказов, повторите попытку!");
			//				DevErr.Закрыть();
			//				
			//				Возврат;
			//				
			//			КонецЕсли;	
					
					КонецЕсли;
		
					Если МожноЗагружатьДокументы И (ТипСинхронизации <> 1) Тогда 
						
						ЗамерСтарт = ТекущаяДата();
						
						ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " Загрузка оплат...");
						
						// Загрузка оплат
						
						Попытка 
							ЗагрузитьПКО();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Ошибка при загрузке оплат!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Загрузка оплат завершена ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд).");
						
					КонецЕсли;	
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();					
					ФайлОшибок.ДобавитьСтроку("" + Инфо.Описание + ", " + Инфо.НомерСтроки);
					ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
					ЗаписатьОшибку1СвЛогФайл(Событие1С, "Синхронизация была прервана из-за ошибок!", Инфо, Истина); 
					
				КонецПопытки;
				
			КонецЕсли;
			
			// ЭКСПОРТ
									
			Попытка
				
				// НАЧАЛЬНАЯ СИНХРОНИЗАЦИЯ
				
				Если ТипСинхронизации = 1 Тогда     
					
					ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " НАЧАЛЬНАЯ СИНХРОНИЗАЦИЯ");	
					
					ЭкспортСкладов(); 
					ЭкспортАгентов();  
					ЭкспортФирм();		
					
					ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " НАЧАЛЬНАЯ СИНХРОНИЗАЦИЯ ЗАВЕРШЕНА");	
					
				// ЕЖЕДНЕВНАЯ СИНХРОНИЗАЦИЯ	/ ФОНОВОЕ ЗАДАНИЕ
					
				ИначеЕсли ТипСинхронизации = 5 ИЛИ ВыгрЕжедневнДанных = "True" Тогда 
				
						// Очистка каталога выгрузки
						
						Попытка
							
							врКаталогОчищен = аян_СинхронизацияСервер.Файлы_ОчиститьКаталог(КаталогВыгрузки);
							Если Не врКаталогОчищен Тогда
								ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Ошибка очистки каталога выгрузки!");
								Возврат;
							КонецЕсли;	
							
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Очистка каталога выгрузки!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;							
				
					    врСписокПользователейСервера = аян_СинхронизацияСервер.ПользователиАгенты_СписокПользователейСервера(?(ПустаяСтрока(ИмяСервера), "Region", ИмяСервера));
						
						// Очистка журнала логирования
						
						Попытка
							
							врКонечнаяДатаОчистки = НачалоДня(ТекущаяДата() - 14 * ДеньВСекундах) - 1;
							
							ОчиститьЖурналЛогирования(врКонечнаяДатаОчистки);
							
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Очистка журнала логирования!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;		
						
						// Очистка сегмента отгружать в любом случае
						
						Попытка
							
							врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
							
							Если врТекущийЧас < 7 Тогда
							
								аян_СинхронизацияСервер.Ежедневная_ОчиститьСегментОтгружатьВЛюбомСлучае();
								
							КонецЕсли;	
							
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Очистка сегмента Отгружать в любом случае!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;		
						
						// Суточная корреляция остатоков
						
						врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
							
						//Если врТекущийЧас < 7 Тогда
						//						
						//	Попытка
						//		//ОбъединениеЗаявок_ВыровнятьОстатки_ОМСК(СкладАтлантАлкоголь);
						//	Исключение
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Суточная корреляция остатков! Склад: " + СокрЛП(СкладАТАлкоголь), ИнформацияОбОшибке(), Истина);
						//	КонецПопытки;		
						//
						//	Попытка
						//		ОбъединениеЗаявок_ВыровнятьОстатки(оргАТ_Логистик, СкладАТАлкоголь);
						//		//ОбъединениеЗаявок_ВыровнятьОстатки(оргРИФПлюс,     СкладРИФПлюсАлкоголь);
						//		ОбъединениеЗаявок_ВыровнятьОстатки(оргМеркурий,    Справочники.Склады.НайтиПоНаименованию("Меркурий Алкоголь", Истина));
						//		//ОбъединениеЗаявок_ВыровнятьОстатки(оргМарс,        СкладМарсАлкоголь);
						//		//ОбъединениеЗаявок_ВыровнятьОстатки(оргСигма,       СкладСигмаАлкоголь);
						//		ОбъединениеЗаявок_ВыровнятьОстатки(оргАТЛАНТОмск,  Справочники.Склады.НайтиПоНаименованию("Атлант Алкоголь",   Истина));
						//	Исключение
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Суточная корреляция остатков! Склад: " + СокрЛП(СкладРИФПлюсАлкоголь), ИнформацияОбОшибке(), Истина);
						//	КонецПопытки;		
						//	
						//КонецЕсли;	
										
						// Экспорт агентов
						
						Попытка
						//	Если (ИмяСервера = "Sever") ИЛИ (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Kuzbass") Тогда
							Если ЭтоТестовыйСерверМА Тогда
								ЭкспортАгентовСевер_New();
							Иначе	
								ЭкспортАгентовСевер();
							КонецЕсли;	
						//	Иначе	
						//		ЭкспортАгентов();
						//	КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Агентов!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						// Экспорт фирм (организаций)
						
						Попытка
						//	Если (ИмяСервера = "Sever") ИЛИ (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Kuzbass") Тогда
								ЭкспортФирмСевер();
							//Иначе	
							//	ЭкспортФирм();
							//КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Фирм (Организаций)!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						// Экспорт складов
						
						Попытка
						//	Если (ИмяСервера = "Sever") ИЛИ (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Kuzbass") Тогда
								ЭкспортСкладовСевер();
							//Иначе	
							//	ЭкспортСкладов();
							//КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Складов!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;							
						
						// Экспорт единиц измерения
						
						Попытка
							ЭкспортЕдиницИзмерения();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Единиц измерения!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;		
												
						// Экспорт категорий торговых точек
						
						//Попытка
						//	ЭкспортКатегорийТорговыхТочек();
						//Исключение
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Категорий торговых точек!", ИнформацияОбОшибке(), Истина);
						//КонецПопытки;		
						
						// Экспорт торговых точек
						
						Попытка
															
							//Есть_Shop       = Сканирование_ПроверитьФайлЕжедневкиНаВыгрузку("Shop.txt");
							//Есть_DeviceShop = Сканирование_ПроверитьФайлЕжедневкиНаВыгрузку("DeviceShop.txt");
							//
							//Если Не (Есть_Shop И Есть_DeviceShop) Тогда
						//	Если Не врЭтоДневнаяЭмуляция Тогда
								ТЗАгентыТовары = ЭкспортТорговыхТочек(врСписокПользователейСервера);
						//	КонецЕсли;	
							//КонецЕсли;	
								
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Торговых точек!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;							
						
						// Экспорт типов цен
						
						Попытка
							ЭкспортТиповЦен(врСписокПользователейСервера);
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Типов цен!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;							
						
						// Экспорт дерева товаров
						
						Попытка
							ЭкспортДереваТоваров();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Дерева товаров!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						// Экспорт категорий товаров
						
						//Попытка
						//	ЭкспортКатегорийТоваров(2);
						//Исключение
						//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Категорий товаров!", ИнформацияОбОшибке(), Истина);
						//КонецПопытки;							
						
						// Экспорт товаров
						
						Попытка
							ЭкспортТоваров(0, врСписокПользователейСервера);
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Товаров!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
						
						// Заполняем приоритет товаров
						Попытка
							Если Не врЭтоДневнаяЭмуляция Тогда
								Товары_ЗаполнитьПриоритетТоваров();
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при заполнении приоритета Товаров!", ИнформацияОбОшибке(), Истина);	
						КонецПопытки;	
						
						// Экспорт презентера
						
						Попытка
							ЭкспортПрезентера();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Презентера!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
						
						// Экспорт привязки групп товаров к агентам
						
		//				Если (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Novosib") ИЛИ (ИмяСервера = "Kuzbass") ИЛИ (ИмяСервера = "Sever") ИЛИ (ИмяСервераМА = "Altai") Тогда
						
							Попытка
								ЭкспортПривязкиГруппТоваровКАгентам(ТЗАгентыТовары);
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Привязки групп товаров к агентам!", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
							
		//				КонецЕсли;	
		
						// Экспорт Запрета групп товаров в точках
						
						Попытка
								
						//	Если (ИмяСервера = "Novosib") ИЛИ (ИмяСервера = "Altai") Тогда
								ЭкспортЗапретаГруппТоваровВТочках();								
						//	КонецЕсли
								
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Запрета групп товаров в точках!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;																
		
		//Если Не врЭтоДневнаяЭмуляция Тогда
		
						Попытка
							ТОП_50_ПоВидуЦены();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке ТОП 50!", ИнформацияОбОшибке(), Истина);							
						КонецПопытки;	

		
						// Специальные группы товаров
						
						
				//		Если (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Novosib") ИЛИ (ИмяСервера = "Kuzbass") ИЛИ (ИмяСервера = "Sever") ИЛИ (ИмяСервераМА = "Altai") Тогда	
						
							Попытка
								ЭкспортСпециальныхГруппТоваров();								
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Специальных групп товаров!", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
							
							Попытка
								ЭкспортПривязкиТоваровКСпециальнымГруппамТоваров();								
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Привязки товаров к специальным группам товаров!", ИнформацияОбОшибке(), Истина);
							КонецПопытки;
							
				//		КонецЕсли;	
							
						//	
						//ИначеЕсли ИмяСервера = "Kuzbass" Тогда	
						//	
						//	//Попытка
						//	//	ЭкспортСпециальныхГруппТоваров_БОРТ();								
						//	//Исключение
						//	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Специальных групп товаров!", ИнформацияОбОшибке(), Истина);
						//	//КонецПопытки;
						//	//
						//	//Попытка
						//	//	ЭкспортПривязкиТоваровКСпециальнымГруппамТоваров_БОРТ();								
						//	//Исключение
						//	//	ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Привязки товаров к специальным группам товаров!", ИнформацияОбОшибке(), Истина);
						//	//КонецПопытки;							
						//								
						//КонецЕсли;							
																		
						// Экспорт индивидуальных цен товаров в точке
						
						Попытка
							ЭкспортЦенПоЦеновымГруппам();
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке Ценовых групп!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;
						
						// Экспорт индивидуальных скидок на группу товаров в торговой точке
						
						Попытка
							//Если ИмяСервераМА = "Altai" Тогда
							//	ЭкспортИндивидуальныхСкидокНаГруппуТоваровВТорговойТочке_NEW();
							//Иначе	
								ЭкспортИндивидуальныхСкидокНаГруппуТоваровВТорговойТочке();
							//КонецЕсли;
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке индивидуальных скидок на группу товаров в торговой точке!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
												
						//Если ЭтоФоновоеЗадание Тогда
						//	Попытка
						//		ЭкспортОстатковТоваров();
						//	Исключение
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Ошибка экспорта остатков товаров!", ИнформацияОбОшибке(), Истина);
						//	КонецПопытки;		
						//КонецЕсли;	
						
			//КонецЕсли;			
						
						// Экспорт всех накладных
						
						Попытка
							Если ЭтоТестовыйСерверМА Тогда
								ЭкспортВсехНакладных(2);
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "ЕЖЕДНЕВНАЯ. Ошибка при выгрузке ВСЕХ накладных!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;						
																		
				//	КонецЕсли;	
					
				// ОПЕРАТИВНАЯ СИНХРОНИЗАЦИЯ
				
				Иначе
					
					врЭтоЕжедневнаяАгента = Ложь;
					Если ТипСинхронизации = 2 Тогда
						врЭтоЕжедневнаяАгента = Истина;
					КонецЕсли;	
																			
					// Экспорт остатков товаров
					
					Попытка
						ЭкспортОстатковТоваров();
					Исключение
						ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Ошибка экспорта остатков товаров!", ИнформацияОбОшибке(), Истина);
					КонецПопытки;	
					
					Если ИдКПК = "DevPetrushka" Тогда
						ЭтоВнутреннийАгент = Истина;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(ТекАгент) И (НЕ ЭтоВнутреннийАгент) Тогда
						
						//Если ТекСервер = Перечисления.аян_Синхронизация_Сервера.Kuzbass Тогда
						//	Попытка
						//		ЭкспортЦен_Оперативная();
						//	Исключение
						//		ЗаписатьОшибку1СвЛогФайл(Событие1С, "Экспорт цен (оперативная)", ИнформацияОбОшибке(), Истина);
						//	КонецПопытки;	
						//КонецЕсли;	
						
						// Копирование данных оперативной синхронизации из КЭШа
						
						КопияИзКЭШа = Ложь;
						
						КопияИзКЭШа_Приоритет0 = Ложь;
						Если (ПриоритетТекущегоФайла = 0) И (КоличествоЗявокВСинхронизации > 0) Тогда
							КопияИзКЭШа_Приоритет0 = Истина;
						КонецЕсли;	
						Если (ПриоритетТекущегоФайла = 1) И (КоличествоЗявокВСинхронизации > 0) Тогда
							КопияИзКЭШа_Приоритет0 = Истина;
						КонецЕсли;							
						Если (ПриоритетТекущегоФайла = 2) И (КоличествоЗявокВСинхронизации > 0) Тогда
							КопияИзКЭШа_Приоритет0 = Истина;
						КонецЕсли;	
						
						Попытка							
							Если КоличествоСигнальныхФайлов <= 3 Тогда
								Если ИмяСервераМА = "Sever" Тогда
									КопияИзКЭШа            = Ложь;
									КопияИзКЭШа_Приоритет0 = Ложь;
								КонецЕсли;	
							КонецЕсли;	
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Приоритет СЕВЕР - Исключение!!!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						//Если (КоличествоСигнальныхФайлов > 5) И ((ПриоритетТекущегоФайла = 5) ИЛИ (ПриоритетТекущегоФайла = 7)) Тогда
						//	КопияИзКЭШа = Истина;
						//КонецЕсли;	
						
						Если (КоличествоСигнальныхФайлов > 1) И ((ПриоритетТекущегоФайла = 3) ИЛИ (ПриоритетТекущегоФайла = 6) ИЛИ (ПриоритетТекущегоФайла = 7) ИЛИ КопияИзКЭШа_Приоритет0) Тогда
							
							//ДатаПоследнегоОбновленияТорговыхТочекАгента = аян_СинхронизацияСервер.Оперативная_ДатаПоследнегоОбновленияТорговыхТочек(ТекАгент);
							//
							//Если (ТекущаяДата() - ДатаПоследнегоОбновленияТорговыхТочекАгента) < 360 Тогда
						
								Попытка
								
									КопияИзКЭШа = СкопироватьДанныеОперативнойСинхронизацииИзКэша(врЭтоЕжедневнаяАгента);
								//	ЗаписатьИнформацию1СвЛогФайл(Событие1С, "Данные скопированы из КЭШа");
									ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Файлы ""Invoice.txt"" и ""Shop2.txt"" скопированы из КЭШа... ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
								Исключение
									ЗаписатьОшибку1СвЛогФайл(Событие1С, "Копирование данных оперативной синхронизации", ИнформацияОбОшибке(), Истина);
								КонецПопытки;	
								
						//	КонецЕсли;	
							
						КонецЕсли;	
						
						Если (Не КопияИзКЭШа) И (КоличествоСигнальныхФайлов > 2) И Пользователи_ЭтоСупервайзер(ТекАгент) Тогда
							Попытка
								КопияИзКЭШа = СкопироватьДанныеОперативнойСинхронизацииИзКэша(врЭтоЕжедневнаяАгента);
								ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " <-Файлы ""Invoice.txt"" и ""Shop2.txt"" скопированы из КЭШа... ("  + Строка(ТекущаяДата() - ЗамерСтарт) + " секунд)");	
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "Копирование данных оперативной синхронизации", ИнформацияОбОшибке(), Истина);
							КонецПопытки;	
						КонецЕсли;	
						
						// Экспорт накладных 
					
						Попытка
							
						//	СтруктураДанныхНакладные = НеоплаченныеНакладные();
							
							Если Не КопияИзКЭШа Тогда
							
								СтруктураДанныхНакладные = НеоплаченныеНакладные();
								ЭкспортНакладных(СтруктураДанныхНакладные.ТЗ); 
								ЭкспортТабличнойЧасти(СтруктураДанныхНакладные.ТЗ);
								
							КонецЕсли;	
							
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Ошибка экспорта накладных!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;	
						
						// Отчет супервайзеру
						
						врЭтоСуперВайзер = Ложь;
						
						МассивСВ_Алтай = Новый Массив;
						МассивСВ_Алтай.Добавить(ПолучитьГруппуПользователяПоГУИД("4a16b0da-2b7b-11e9-82b9-1831bf2dc5c0"));			// Меленцова Наталья										
						
						МассивСВ_Барнаул = Новый Массив;
						МассивСВ_Барнаул.Добавить(ПолучитьГруппуПользователяПоГУИД("ad0b1962-d130-11ea-8331-1831bf2dc5c0"));		// Либрихт Владимир																		
						//МассивСВ_Барнаул.Добавить(ПолучитьГруппуПользователяПоГУИД("550fb0fc-e821-11ea-833b-1831bf2dc5c0"));		// Горковенко Дмитрий
						
						МассивСВ_Куйбышев = Новый Массив;
						МассивСВ_Куйбышев.Добавить(ПолучитьГруппуПользователяПоГУИД("b9400d59-52b7-11e9-82c0-1831bf2dc5c0"));		// Абакумов Андрей					
						
						МассивСВ_Новосибирск = Новый Массив;
						МассивСВ_Новосибирск.Добавить(ПолучитьГруппуПользователяПоГУИД("a63ebe3c-b34e-11e9-82d4-1831bf2dc5c0"));	// Далюева Наталья
						
						МассивСВ_Томск = Новый Массив;
						МассивСВ_Томск.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Храмов Дмитрий"));
						МассивСВ_Томск.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Лютаева Наталья"));
						МассивСВ_Томск.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Куликов Алексей"));
						
						МассивСВ_Кузбасс = Новый Массив;
						
						// Турова
						МассивСВ_Кузбасс.Добавить(ПолучитьГруппуПользователяПоГУИД("3daa4590-e4bc-11e9-82e1-1831bf2dc5c0")); 	
						// Мезенцев
						МассивСВ_Кузбасс.Добавить(ПолучитьГруппуПользователяПоГУИД("e08707a9-ec3c-11e6-a286-000c29fb98a2"));
						// Горковенко
						МассивСВ_Кузбасс.Добавить(ПолучитьГруппуПользователяПоГУИД("6ebe3dfd-ec3c-11e6-a286-000c29fb98a2"));
						// Маметьева
						МассивСВ_Кузбасс.Добавить(ПолучитьГруппуПользователяПоГУИД("b9700335-6de7-11e8-8276-1831bf2dc5c0"));
						
						врБР_Алтай      = Справочники.БизнесРегионы.НайтиПоНаименованию("АЛТАЙ",          Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Куйбышев   = Справочники.БизнесРегионы.НайтиПоНаименованию("КУЙБЫШЕВ",       Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Барнаул    = Справочники.БизнесРегионы.НайтиПоНаименованию("БАРНАУЛ",        Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Кемерово   = Справочники.БизнесРегионы.НайтиПоНаименованию("Кемерово",       Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Красноярск = Справочники.БизнесРегионы.НайтиПоНаименованию("Красноярск",     Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_НСК        = Справочники.БизнесРегионы.НайтиПоНаименованию("Новосибирск",    Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Хакасия    = Справочники.БизнесРегионы.НайтиПоНаименованию("ХАКАСИЯ",        Истина, Справочники.БизнесРегионы.ПустаяСсылка());
						врБР_Пригород   = Справочники.БизнесРегионы.НайтиПоНаименованию("ТОМСК ПРИГОРОД", Истина, Справочники.БизнесРегионы.ПустаяСсылка());						
						врБР_Север      = Справочники.БизнесРегионы.НайтиПоНаименованию("ТОМСК ОБЛАСТЬ",  Истина, Справочники.БизнесРегионы.ПустаяСсылка());						
						
					    врМассивЗонДоставки_Красноярск = Новый Массив;
						врМассивЗонДоставки_Красноярск.Добавить(врБР_Красноярск);	
						врМассивЗонДоставки_Красноярск.Добавить(врБР_Хакасия);	
						
					    врМассивЗонДоставки_Новосибирск = Новый Массив;
						врМассивЗонДоставки_Новосибирск.Добавить(врБР_Алтай);
						врМассивЗонДоставки_Новосибирск.Добавить(врБР_НСК);
						врМассивЗонДоставки_Новосибирск.Добавить(врБР_Куйбышев);
						врМассивЗонДоставки_Новосибирск.Добавить(врБР_Барнаул);
						
					    врМассивЗонДоставки_Кузбасс = Новый Массив;
						врМассивЗонДоставки_Кузбасс.Добавить(врБР_Кемерово);
						
					    врМассивЗонДоставки_Куйбышев = Новый Массив;
						врМассивЗонДоставки_Куйбышев.Добавить(врБР_Куйбышев);						
						
					    врМассивЗонДоставки_Алтай = Новый Массив;
						врМассивЗонДоставки_Алтай.Добавить(врБР_Алтай);	
						
					    врМассивЗонДоставки_Барнаул = Новый Массив;
						врМассивЗонДоставки_Барнаул.Добавить(врБР_Барнаул);
						
					    врМассивЗонДоставки_Пригород = Новый Массив;
						врМассивЗонДоставки_Пригород.Добавить(врБР_Пригород);
						
					    врМассивЗонДоставки_Север = Новый Массив;
						врМассивЗонДоставки_Север.Добавить(врБР_Север);
						
						// Зиганшина Виктория Валерьевна
						Если ТекАгент = ПолучитьПользователяПоГУИД("43ad85f0-73ca-11e8-8277-1831bf2dc5c0") Тогда
							
							грЗиганшина = ПолучитьГруппуПользователяПоГУИД("b9400d59-52b7-11e9-82c0-1831bf2dc5c0");
							
							МассивСВ = Новый Массив;
							МассивСВ.Добавить(Структура_СВ.Либрихт);
							
							СформироватьОтчет_Маршрут_ПоРегиону("Novosib", врМассивЗонДоставки_Новосибирск, Ложь);			
							
							СформироватьОтчет_ДниПогрузки("Barnaul", врМассивЗонДоставки_Барнаул);
							СформироватьОтчет_ДниПогрузки("Novosib", врМассивЗонДоставки_Новосибирск);
							//СформироватьОтчет_ДниПогрузки("Altay",   врМассивЗонДоставки_Алтай);
							
							//СформироватьОтчет_ЗаказыНаДоставкуСВ(Структура_СВ.Либрихт);
							//СформироватьОтчет_ЗаказыНаДоставкуСВ(Структура_СВ.Абакумов);
							
							// Лебедева Татьяна
							//СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("550fb0fc-e821-11ea-833b-1831bf2dc5c0"));
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(грЗиганшина);
									
							МассивСВ_Бонус = Новый Массив;
							//МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Абакумов Андрей Геннадьевич"));
							//МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Либрихт Владимир Викторович"));
							//МассивСВ_Бонус.Добавить(ПолучитьПользователяПоГУИД("93eaeaa6-fc00-11ec-83f2-ac1f6b8732b0")); // Лебедева
							МассивСВ_Бонус.Добавить(ТекАгент);
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);
							
							Попытка
								СформироватьОтчет_Посещения(МассивСВ_Бонус);
							Исключение
								ЗаписатьОшибку1СвЛогФайл(Событие1С, "Отчет ПОСЕЩЕНИЯ", ИнформацияОбОшибке(), Истина);
							КонецПопытки;	
							
							//МассивСВ_Лимит_Алтай = Новый Массив;
							//МассивСВ_Лимит_Алтай.Добавить(ПолучитьГруппуПользователяПоГУИД("ad0b1962-d130-11ea-8331-1831bf2dc5c0"));	// Либрихт Владимир																		
							//МассивСВ_Лимит_Алтай.Добавить(ПолучитьГруппуПользователяПоГУИД("b9400d59-52b7-11e9-82c0-1831bf2dc5c0"));	// Абакумов Андрей					
							//
							//СформироватьОтчет_ЛимитЗаказов_СВ(МассивСВ_Лимит_Алтай, "Altay");
							
							СформироватьОтчет_ТранспортныеРасходы(врБР_Барнаул,    "Altay");
							СформироватьОтчет_ТранспортныеРасходы(врБР_НСК,        "Novosib");							
							                                        
							врЭтоСуперВайзер = Истина;
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Власов Евгений Николаевич") Тогда
							
							СформироватьОтчет_Маршрут_ПоРегиону("Kuzbass", врМассивЗонДоставки_Кузбасс);
							СформироватьОтчет_ДниПогрузки("Kuzbass", врМассивЗонДоставки_Кузбасс);
							
							СформироватьОтчет_Маршрут_ПоРегиону("Krasnoyarsk", врМассивЗонДоставки_Красноярск);
							СформироватьОтчет_ДниПогрузки("Krasnoyarsk", врМассивЗонДоставки_Красноярск);
							
							СформироватьОтчет_Маршрут_ПоРегиону("TomskPrigorod", врМассивЗонДоставки_Пригород,    Ложь);							
							
							СформироватьОтчет_ТранспортныеРасходы(врБР_Кемерово,   "Kuzbass");
							СформироватьОтчет_ТранспортныеРасходы(врБР_Красноярск, "Krasnoyarsk");
							
							// Турова
							СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("3daa4590-e4bc-11e9-82e1-1831bf2dc5c0")); 	
							// Мезенцев
							СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("e08707a9-ec3c-11e6-a286-000c29fb98a2"));
							// Маметьева
							СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("b9700335-6de7-11e8-8276-1831bf2dc5c0"));	
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Турова Ирина Васильевна"));
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Мезенцев Кирилл Николаевич"));
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Маметьева Юлия Владиславовна"));							
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);
							
							врЭтоСуперВайзер = Истина;	
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Далюева Наталья Владимировна") Тогда	
							
							СформироватьОтчет_Маршрут_ПоРегиону("Kuzbass",     врМассивЗонДоставки_Кузбасс,     Истина);
							СформироватьОтчет_Маршрут_ПоРегиону("Krasnoyarsk", врМассивЗонДоставки_Красноярск,  Истина);
							СформироватьОтчет_Маршрут_ПоРегиону("Novosib",     врМассивЗонДоставки_Новосибирск, Истина);			
							
							СформироватьОтчет_ТранспортныеРасходы(врБР_Кемерово,   "Kuzbass");
							СформироватьОтчет_ТранспортныеРасходы(врБР_Красноярск, "Krasnoyarsk");
							//СформироватьОтчет_ТранспортныеРасходы(врБР_Барнаул,    "Barnaul");
							СформироватьОтчет_ТранспортныеРасходы(врБР_НСК,        "Novosib");
																					
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Абакумов Андрей Геннадьевич") Тогда
							
							МассивСВ = Новый Массив;
							МассивСВ.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Абакумов Андрей"));
							
							СформироватьОтчет_Маршрут_ПоРегиону("Novosib",   врМассивЗонДоставки_Новосибирск);
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(Структура_СВ.Абакумов);
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							СформироватьОтчет_Посещения(МассивСВ_Бонус);
							
							врЭтоСуперВайзер = Истина;													
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Нечаев Дмитрий Леонидович") Тогда
							
							МассивСВ = Новый Массив;
							МассивСВ.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Нечаев Дмитрий"));
							
							СформироватьОтчет_Маршрут_ПоРегиону("Sever",   врМассивЗонДоставки_Север);
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(Справочники.ГруппыПользователей.НайтиПоНаименованию("Нечаев Дмитрий"));
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							//СформироватьОтчет_Посещения(МассивСВ_Бонус);
							
							врЭтоСуперВайзер = Истина;													
														
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Мезенцев Кирилл Николаевич") Тогда
							
							МассивСВ = Новый Массив;
							МассивСВ.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Мезенцев Кирилл"));
							
							СформироватьОтчет_Маршрут_ПоРегиону("Kuzbass", врМассивЗонДоставки_Кузбасс);
							СформироватьОтчет_ДниПогрузки("Kuzbass", врМассивЗонДоставки_Кузбасс);
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);							
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Маметьева Юлия Владиславовна") Тогда
							
							МассивСВ = Новый Массив;
							
							// Маметьева
							МассивСВ.Добавить(ПолучитьГруппуПользователяПоГУИД("b9700335-6de7-11e8-8276-1831bf2dc5c0"));	
							
							СформироватьОтчет_Маршрут_ПоРегиону("Kuzbass", врМассивЗонДоставки_Кузбасс);
							СформироватьОтчет_ДниПогрузки("Kuzbass", врМассивЗонДоставки_Кузбасс);
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("b9700335-6de7-11e8-8276-1831bf2dc5c0"));
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);							
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;		
							
						// Лебедева Татьяна	
						ИначеЕсли ТекАгент = ПолучитьПользователяПоГУИД("93eaeaa6-fc00-11ec-83f2-ac1f6b8732b0") Тогда
							
							МассивСВ = Новый Массив;
							
							// Лебедева Татьяна
							МассивСВ.Добавить(ПолучитьГруппуПользователяПоГУИД("550fb0fc-e821-11ea-833b-1831bf2dc5c0"));	
							
							СформироватьОтчет_Маршрут_ПоРегиону("Novosib", врМассивЗонДоставки_Новосибирск);
							СформироватьОтчет_ДниПогрузки("Novosib", врМассивЗонДоставки_Новосибирск);
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(ПолучитьГруппуПользователяПоГУИД("550fb0fc-e821-11ea-833b-1831bf2dc5c0"));
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ПолучитьПользователяПоГУИД("93eaeaa6-fc00-11ec-83f2-ac1f6b8732b0"));							
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);	
							
							СформироватьОтчет_Посещения(МассивСВ_Бонус);
							
							врЭтоСуперВайзер = Истина;																					
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Мирусина Олеся Юрьевна") Тогда
														
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куликов Алексей Юрьевич"));
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Мищенко Ольга Викторовна"));
							МассивСВ_Бонус.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Храмов Дмитрий Анатольевич"));
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);
							
							врЭтоСуперВайзер = Истина;
							
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Турова Ирина Васильевна") Тогда
							
							МассивСВ = Новый Массив;
							МассивСВ.Добавить(Структура_СВ.Думченко);
							
							СформироватьОтчет_Маршрут_ПоРегиону("Krasnoyarsk", врМассивЗонДоставки_Красноярск);
							СформироватьОтчет_ДниПогрузки("Krasnoyarsk", врМассивЗонДоставки_Красноярск);
							
							СформироватьОтчет_ЗаказыНаДоставкуСВ(Структура_СВ.Думченко);
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);							
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;		
														
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Тецлова Виктория Валерьевна") Тогда
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);														
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;																											
							
 						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Храмов Дмитрий Анатольевич") Тогда
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);														
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;																				
							
 						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Кострыгин Иван Олегович") Тогда
							
							МассивСВ_Бонус = Новый Массив;
							МассивСВ_Бонус.Добавить(ТекАгент);														
							
							СформироватьОтчет_БонусыАгентов(МассивСВ_Бонус);							
							
							врЭтоСуперВайзер = Истина;																											
																					
						ИначеЕсли ТекАгент = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей", Истина) Тогда
							
							СформироватьОтчет_Маршрут_ПоРегиону("Novosib",       врМассивЗонДоставки_Новосибирск, Ложь);			
							СформироватьОтчет_Маршрут_ПоРегиону("Kuzbass",       врМассивЗонДоставки_Кузбасс,     Ложь);	
							СформироватьОтчет_Маршрут_ПоРегиону("Krasnoyarsk",   врМассивЗонДоставки_Красноярск,  Ложь);	
							СформироватьОтчет_Маршрут_ПоРегиону("TomskPrigorod", врМассивЗонДоставки_Пригород,    Ложь);							
						
							врЭтоСуперВайзер = Истина;
							
						КонецЕсли;							
												
						// Отчет агенту
						
						Попытка 
							
							Если Не КопияИзКЭШа Тогда
								
								врОчередьВСистеме = Ложь;
								Если (КоличествоСигнальныхФайлов > 5) Тогда
									врОчередьВСистеме = Истина;
								КонецЕсли;									
							
								НачПериодаОтчета = ТекущаяДата() - (5 * ДеньВСекундах);							
								КонПериодаОтчета = ТекущаяДата();
								
								Если врОчередьВСистеме Тогда
									НачПериодаОтчета = ТекущаяДата() - (2 * ДеньВСекундах);								
								КонецЕсли;	
								
								Если Не врЭтоЕжедневнаяАгента Тогда
									
									СформироватьОтчетАгенту(ТекАгент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные.ТЗ);	
									Если Не врОчередьВСистеме Тогда
										СформироватьОтчетАгенту_Оборудование(ТекАгент);
										СформироватьОтчетАгенту_ДебиторскаяЗадолженность(ТекАгент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные.ТЗ);
									//	СформироватьОтчетАгенту_Борт(ТекАгент);
									КонецЕсли;
									
									Если (ИмяСервераМА = "Altai") ИЛИ (ИмяСервераМА = "Novosib") Тогда
										СформироватьОтчет_ЗаказыНаДоставкуСВ(ТекАгент);
									КонецЕсли;	
								
								КонецЕсли;
								
								Если ТекАгент = Агент_Лейкам Тогда
									
									Товары_ОвощиФрукты = Новый Массив;
	
									ЗапросОвощиФрукты = Новый Запрос;
									ЗапросОвощиФрукты.УстановитьПараметр("ТоварыОвощиФрукты",  Справочники.Номенклатура.НайтиПоКоду("00-00012416"));
									ЗапросОвощиФрукты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
									                          |	Номенклатура.Ссылка
									                          |ИЗ
									                          |	Справочник.Номенклатура КАК Номенклатура
									                          |ГДЕ
									                          |	НЕ Номенклатура.ПометкаУдаления
									                          |	И НЕ Номенклатура.ЭтоГруппа
									                          |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ТоварыОвощиФрукты)";
									ВыборкаОвощиФрукты = ЗапросОвощиФрукты.Выполнить().Выбрать();			   
									Пока ВыборкаОвощиФрукты.Следующий() Цикл
										Товары_ОвощиФрукты.Добавить(ВыборкаОвощиФрукты.Ссылка);
									КонецЦикла;		
			
									СформироватьОтчетАгенту_ОвощиФрукты(ТекАгент);
									
								КонецЕсли;	
								
								ЗапросАгентыСупервайзера = Новый Запрос;
								ЗапросАгентыСупервайзера.УстановитьПараметр("Агент", ТекАгент);
								ЗапросАгентыСупервайзера.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
																	|	аян_Агенты.Агент,
								                					|	аян_Агенты.ИдКПК
																	|ИЗ
																	|	РегистрСведений.аян_Агенты КАК аян_Агенты
																	|ГДЕ
																	|	аян_Агенты.Супервайзер = &Агент";
								РЗАгентыСупервайзера = ЗапросАгентыСупервайзера.Выполнить();
								Если Не РЗАгентыСупервайзера.Пустой() Тогда
									
									ВыборкаАгентыСупервайзера = РЗАгентыСупервайзера.Выбрать();
									Пока ВыборкаАгентыСупервайзера.Следующий() Цикл
										
										//СформироватьОтчетАгенту(ВыборкаАгентыСупервайзера.Агент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные.ТЗ, ВыборкаАгентыСупервайзера.ИдКПК);	
										//СформироватьОтчетАгенту_Оборудование(ВыборкаАгентыСупервайзера.Агент, ВыборкаАгентыСупервайзера.ИдКПК);
										//СформироватьОтчетАгенту_ДебиторскаяЗадолженность(ВыборкаАгентыСупервайзера.Агент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные.ТЗ, ВыборкаАгентыСупервайзера.ИдКПК);										

										СтруктураДанныхНакладные_СВ = НеоплаченныеНакладные_СВ(ВыборкаАгентыСупервайзера.Агент);
										
										ФИОФизЛица = ФизическиеЛицаУТ.ФамилияИмяОтчество(ВыборкаАгентыСупервайзера.Агент, ТекущаяДата());
										
										врФамилия = ФИОФизЛица.Фамилия;
										
										СформироватьОтчетАгенту(ВыборкаАгентыСупервайзера.Агент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные_СВ.ТЗ, "_" + Транслит(врФамилия));	
										СформироватьОтчетАгенту_Оборудование(ВыборкаАгентыСупервайзера.Агент, "_" + Транслит(врФамилия));
										СформироватьОтчетАгенту_ДебиторскаяЗадолженность(ВыборкаАгентыСупервайзера.Агент, НачПериодаОтчета, КонПериодаОтчета, СтруктураДанныхНакладные_СВ.ТЗ, "_" + Транслит(врФамилия));	
										
									КонецЦикла;	
										
								КонецЕсли;
								
							КонецЕсли;	
							
						Исключение
							ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Отчет агенту. Исключение!", ИнформацияОбОшибке(), Истина);
						КонецПопытки;													
					
						// Экспорт торговых точек
						
						Если НЕ ((ТипСинхронизации = 2) И ЭтоНовыйСерверМА) Тогда
						
							Если Не КопияИзКЭШа Тогда
						
								Попытка 
									//	Если (ИмяСервера = "Sever") ИЛИ (ИмяСервера = "Tomsk") ИЛИ (ИмяСервера = "Kuzbass") Тогда
										ЭкспортТорговыхТочекОперативная(СтруктураДанныхНакладные.РЗ, СтруктураДанныхНакладные.ТЗ, Истина);
									//Иначе	
									//	ЭкспортТорговыхТочекОперативная(СтруктураДанныхНакладные.РЗ, СтруктураДанныхНакладные.ТЗ);
									//КонецЕсли;	
								Исключение
									ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Ошибка экспорта торговых точек!", ИнформацияОбОшибке(), Истина);
								КонецПопытки;
							
								// Сохранение данных оперативной синхронизации в КЭШ
						
								Попытка
									СохранитьДанныеОперативнойСинхронизацииВКэш();
								Исключение
									ЗаписатьОшибку1СвЛогФайл(Событие1С, "Оперативная синхронизация. Ошибка сохранения данных в КЭШ", ИнформацияОбОшибке(), Истина);	
								КонецПопытки;	
							
							КонецЕсли;	
							
						КонецЕсли;	
						
						// Проверка на заказы через СТОП-ЛИСТ
						
						//ПроверитьНаЗаказыЧерезСтопЛист();						
						
					КонецЕсли;	
															
				КонецЕсли;
				
				ЗамерВыполненияОкончание = ТекущаяДата();
				
				КолСекундВыполнения = ЗамерВыполненияОкончание - ЗамерВыполненияНачало;
				
				ЛогФайл.ЗаписатьСтроку("" + ТекущаяДата() + " ### Синхронизация прошла успешно: %" + СокрЛП(ИмяСервераМА) + "% "+ Строка(ИдКПК) + " (" + Строка(ТекАгент) + " - " + Строка(ПолучитьГруппуПользователя(ТекАгент)) + "). Время синхронизации (секунд): " + Строка(КолСекундВыполнения) + " ###");
				
			Исключение
				
				Инфо = ИнформацияОбОшибке();
				ФайлОшибок.ДобавитьСтроку("" + Инфо.Описание + ", " + Инфо.НомерСтроки);
				ФайлОшибок.Записать(ИмяФайлаОшибок, КодировкаТекста.ANSI);
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Синхронизация была прервана из-за ошибок!", Инфо, Истина);
				
			КонецПопытки;
			
			ЛогФайл.ЗаписатьСтроку("--------------------------------------------------------------------------------------------------------------------------------------------------");
			Т.Закрыть();
			
			НеобходимостьПрерватьОбработку = Ложь;
		//	НеобходимостьПрерватьОбработку = Истина;
			
			Попытка				
				Если ИдКПК = "DevPetrushka" Тогда
					НеобходимостьПрерватьОбработку = Истина;
				//ИначеЕсли (ПриоритетТекущегоФайла = 7) ИЛИ (ПриоритетТекущегоФайла = 8) Тогда
				//	НеобходимостьПрерватьОбработку = Истина;
				ИначеЕсли Сканирование_ЕстьФайл_DevInsider() Тогда
					НеобходимостьПрерватьОбработку = Истина;
				КонецЕсли;	
			Исключение
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение! Прерывание обработки по наличию заказа!", ИнформацияОбОшибке(), Истина);
			КонецПопытки;	
			
			аян_СинхронизацияСервер.Сканирование_УдалитьСигнальныйФайлИзОчереди(нФайл);
			
			УдалитьФайлы(нФайл.ПолноеИмя);
			
			// Пауза 10 минут после ежедневной эмуляции
						
			Попытка
				
				Если ЭтоФоновоеЗадание Тогда	
				
					врТекущийЧас = Число(Формат(ТекущаяДата(), "ДФ=H"));
							
					Если врТекущийЧас < 7 Тогда
						
						ЗаписатьИнформацию1СвЛогФайл(Событие1С, "" + ТекущаяДата() + " %" + Строка(ИмяСервераМА) + "% <-Пауза 10 минут...");	
							
						аян_СинхронизацияСервер.Вспомогательные_Пауза(600);
								
					КонецЕсли;	
					
				КонецЕсли;	
							
			Исключение
							
				ЗаписатьОшибку1СвЛогФайл(Событие1С, "Эмуляция. Ошибка паузы!", ИнформацияОбОшибке(), Истина);
							
			КонецПопытки;	
			
			
			Если НеобходимостьПрерватьОбработку Тогда
				Прервать;
			КонецЕсли;	
						
		КонецЕсли;	
		
		Исключение
			
			ЗаписатьОшибку1СвЛогФайл(Событие1С, "Исключение при чтение файла: " + СокрЛП(нФайл.нФайл.ПолноеИмя), ИнформацияОбОшибке(), Истина);
			
		КонецПопытки;	
		
	КонецЦикла;
	
	ЛогФайл.Закрыть();
	
КонецПроцедуры


#КонецОбласти


// Скидка клиента по соглашению
Функция ПолучитьСкидкуКлиента(Партнер, ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("Партнер",   Партнер);
	Запрос.УстановитьПараметр("ВидЦен",    ВидЦен);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки, 0) КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, ) КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник.Партнер = &Партнер
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник.ВидЦен = &ВидЦен
	               |	И ДействиеСкидокНаценокСрезПоследних.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки <> 0
	               |	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.УсловияПредоставления.УсловиеПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)";
				   
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции	

Функция ПолучитьСтруктуруУсловийПродаж()
	
	Возврат Новый Структура("
	|Партнер,
	|Контрагент,
	|Соглашение,
	|Организация,
	|Валюта,
	|Период,
	|ГрафикОплаты,
	|ФормаОплаты,
	|ПорядокОплаты,
	|ГруппаФинансовогоУчета,
	|СуммаДокумента,
	|Регулярное,
	|КоличествоПериодов,
	|СрокПоставки,
	|ВидЦен,
	|ЦенаВключаетНДС,
	|НалогообложениеНДС,
	|ИспользуетсяВРаботеТорговыхПредставителей,
	|Склад,
	|СегментНоменклатуры,
	|Типовое,
	|ДатаНачалаДействия,
	|ДатаОкончанияДействия,
	|ХозяйственнаяОперация,
	|ОграничиватьРучныеСкидки,
	|ПроцентРучнойСкидки,
	|ПроцентРучнойНаценки,
	|СпособРасчетаВознаграждения,
	|ПроцентВознаграждения,
	|УдержатьВознаграждение,
	|ИспользуютсяДоговорыКонтрагентов,
	|ДоступноВнешнимПользователям,
	|СтатусСоглашения
	|");
	
КонецФункции // ПолучитьСтруктуруУсловийПродаж()

// Возвращает структуру условий продаж по партнеру.
//
// Параметры:
// Партнер                      - Ссылка на партнера, для которого необходимо получить условия продаж
// ДатаДокумента                - Дата документа, на которую необходимо получить условия продаж
// ТолькоТиповые                - Флаг, позволяющий искать только типовые соглашения
// ТолькоИспользуемыеВРаботеТП  - Флаг, позволяющий искать только соглашения,
// используемые в работе торговых представителей
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияПродажПоУмолчанию(Знач Партнер = Неопределено, Знач ДатаДокумента, Организация = Неопределено) 
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаДокумента = НачалоДня(ДатаДокумента);
	КонецЕсли;
	
	// Учтем вариант использования соглашений
	ИспользоватьТиповыеСоглашенияСКлиентами			= ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами	= ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоТиповые",                           ТолькоТиповые);
	ВсеПараметрыОтбора.Вставить("ТолькоИндивидуальные",                    ТолькоИндивидуальные);
	ВсеПараметрыОтбора.Вставить("ТолькоИспользуемыеВРаботеТП",             Ложь);
	ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственнаяОперация",                   Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	//Если ПараметрыОтбора <> Неопределено Тогда
	//	ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	//КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
	|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
	|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
	|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
	|	СоглашениеСКлиентом.Организация                                 КАК Организация,
	|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
	|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
	|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
	|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
	|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
	|	СоглашениеСКлиентом.Период                                      КАК Период,
	|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
	|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
	|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
	|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
	|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
	|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСКлиентом.Склад
	|		КОГДА
	|			СоглашениеСКлиентом.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСКлиентом.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
	|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
	|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
	|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
	|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
	|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
	|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
	|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
	|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
	|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	НЕ СоглашениеСКлиентом.ПометкаУдаления И
	|	СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
	|	СоглашениеСКлиентом.Типовое И НЕ &ТолькоИндивидуальные И
	|" + ?(ЗначениеЗаполнено(Организация), "СоглашениеСКлиентом.Организация = &Организация И ","") + "
	|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
	|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
	|" + ?(Не ЗначениеЗаполнено(Партнер),"СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка) ", "
	|
	|	(СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|	ИЛИ СоглашениеСКлиентом.СегментПартнеров В
	|		(ВЫБРАТЬ
	|			ПартнерыСегмента.Сегмент
	|		ИЗ
	|			РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ГДЕ
	|			ПартнерыСегмента.Партнер = &Партнер))
	|") + "
	|
	|" + ?(ВсеПараметрыОтбора.ТолькоТиповые Или Не ЗначениеЗаполнено(Партнер),"","
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
	|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
	|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
	|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
	|	СоглашениеСКлиентом.Организация                                 КАК Организация,
	|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
	|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
	|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
	|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
	|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
	|	СоглашениеСКлиентом.Период                                      КАК Период,
	|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
	|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
	|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
	|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
	|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
	|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСКлиентом.Склад
	|		КОГДА
	|			СоглашениеСКлиентом.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСКлиентом.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
	|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
	|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
	|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
	|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
	|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
	|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
	|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
	|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
	|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	НЕ СоглашениеСКлиентом.ПометкаУдаления
	|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
	|	НЕ СоглашениеСКлиентом.Типовое И НЕ &ТолькоТиповые И
	|" + ?(ЗначениеЗаполнено(Организация), "СоглашениеСКлиентом.Организация = &Организация И ","") + "
	|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
	|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
	|	СоглашениеСКлиентом.Партнер = &Партнер
	|УПОРЯДОЧИТЬ ПО
	|	Типовое ВОЗР
	|"));
	
	Запрос.УстановитьПараметр("Партнер",                Партнер);
	Запрос.УстановитьПараметр("ДатаДокумента",          ДатаДокумента);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",  ВсеПараметрыОтбора.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
	Запрос.УстановитьПараметр("ТолькоТиповые",          ВсеПараметрыОтбора.ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",   ВсеПараметрыОтбора.ТолькоИндивидуальные);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если не найдено ни одного соглашения - возвращаем Неопределено 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НайденноеСоглашение = Неопределено;
	
	// Если в выборке одно соглашение - используем его
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		НайденноеСоглашение = Выборка.Соглашение;
		
	КонецЕсли;
	
	// Если необходимы только типовые соглашения - дальнейшие проверки не имеют смысла
	Если НайденноеСоглашение = Неопределено И Не ВсеПараметрыОтбора.ТолькоТиповые Тогда
		
		// В выборке два или более соглашений
		Выборка.Следующий();
		
		ПервоеСоглашение        = Выборка.Соглашение;
		ПервоеСоглашениеТиповое = Выборка.Типовое;
		
		Выборка.Следующий();
		
		ВтороеСоглашениеТиповое = Выборка.Типовое;
		
		Выборка.Сбросить();
		Выборка.Следующий();
		
		// Если в выборке два соглашения разного типа - используем индивидуальное
		Если ПервоеСоглашениеТиповое <> ВтороеСоглашениеТиповое Тогда
			НайденноеСоглашение = ПервоеСоглашение;
		КонецЕсли;
	КонецЕсли;
	
	Если НайденноеСоглашение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьУсловияПродажПоУмолчанию()

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки)
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

Процедура ЭкспортСкидок()
	ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" Выгружаем скидки и спец цены...");
	
	файлВыгрузкиГруппСкидки = Новый ТекстовыйДокумент;
	файлВыгрузкиГруппСкидки.ДобавитьСтроку(
	"ShopRefID" 			+ Символ(9) + 
	"ProductTreeRefID"		+ Символ(9) +
	"DiscountRate");
	
	файлВыгрузкиСЦ = Новый ТекстовыйДокумент;
	файлВыгрузкиСЦ.ДобавитьСтроку(
	"ShopRefID" 			+ Символ(9) + 
	"ProductRefID"			+ Символ(9) +
	"Price");
	
	ТЗ = Новый ТаблицаЗначений;
	//ТЗ = Запрос.Выполнить().Выгрузить();	
	
	// спеццены на конкретные позиции
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентамиТовары.Ссылка.Партнер КАК Контрагент,
	|	СоглашенияСКлиентамиТовары.Номенклатура,
	|	СоглашенияСКлиентамиТовары.Цена
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|ГДЕ НЕ СоглашенияСКлиентамиТовары.Ссылка.ПометкаУдаления
	|		И СоглашенияСКлиентамиТовары.Ссылка.Организация = &ОсновнаяОрганизация
	|		И СоглашенияСКлиентамиТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяФирма);			 
	
	РЗ = Запрос.Выполнить();
	ТЗ = РЗ.Выгрузить();
	Выборка = РЗ.Выбрать();
	Пока Выборка.Следующий() Цикл 
		файлВыгрузкиСЦ.ДобавитьСтроку(
		СокрЛП(Выборка.Контрагент.УникальныйИдентификатор())	+ Символ(9)+
		СокрЛП(Выборка.Номенклатура.Код)						+ Символ(9)+
		СокрЛП(Формат(Выборка.Цена, "ЧРД=.; ЧН=; ЧГ=")));	
	КонецЦикла;	
	
	//Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			 |	СоглашенияСКлиентамиСкидкиНаценки.Ссылка.Партнер КАК Контрагент,
	//			 |	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа,
	//			 |	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки
	//			 |ПОМЕСТИТЬ СкидкиПоЦеновымГруппам
	//			 |ИЗ
	//			 |	Справочник.СоглашенияСКлиентами.СкидкиНаценки КАК СоглашенияСКлиентамиСкидкиНаценки
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	//			 |		ПО СоглашенияСКлиентамиСкидкиНаценки.СкидкаНаценка = СкидкиНаценкиЦеновыеГруппы.Ссылка
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	СкидкиПоЦеновымГруппам.Контрагент,
	//			 |	СкидкиПоЦеновымГруппам.ЗначениеСкидкиНаценки,
	//			 |	СпрНоменклатура.Ссылка КАК Номенклатура
	//			 |ИЗ
	//			 |	СкидкиПоЦеновымГруппам КАК СкидкиПоЦеновымГруппам
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	//			 |ПО СкидкиПоЦеновымГруппам.ЦеноваяГруппа = СпрНоменклатура.ЦеноваяГруппа";
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентамиСкидкиНаценки.Ссылка.Партнер КАК Контрагент,
	|	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа,
	|	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки
	|ПОМЕСТИТЬ СкидкиПоЦеновымГруппам
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.СкидкиНаценки КАК СоглашенияСКлиентамиСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	|		ПО СоглашенияСКлиентамиСкидкиНаценки.СкидкаНаценка = СкидкиНаценкиЦеновыеГруппы.Ссылка
	|ГДЕ НЕ СоглашенияСКлиентамиСкидкиНаценки.Ссылка.ПометкаУдаления
	|		И СоглашенияСКлиентамиСкидкиНаценки.Ссылка.Организация = &ОсновнаяОрганизация
	|		И СоглашенияСКлиентамиСкидкиНаценки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СпрНоменклатура.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиПоЦеновымГруппам.Контрагент,
	|	СкидкиПоЦеновымГруппам.ЗначениеСкидкиНаценки,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.ВидЦены,
	|	ЦеныНоменклатуры.Цена
	|ИЗ
	|	СкидкиПоЦеновымГруппам КАК СкидкиПоЦеновымГруппам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры
	|		ПО СкидкиПоЦеновымГруппам.ЦеноваяГруппа = ЦеныНоменклатуры.ЦеноваяГруппа
	|ГДЕ ЦеныНоменклатуры.Цена > 0";
	
	
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ТекущаяДата()));			 
	//терехин++
	//, ВидЦены = &ТипЦен
	//Запрос.УстановитьПараметр("ТипЦен", ОсновнойТипЦен);			 
	//терехин--
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяФирма);			 
	
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ = Запрос.Выполнить().Выгрузить();	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если ТЗ.Найти(Выборка.Номенклатура, "Номенклатура") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		файлВыгрузкиСЦ.ДобавитьСтроку(
		СокрЛП(Выборка.Контрагент.УникальныйИдентификатор())	+ Символ(9)+
		СокрЛП(Выборка.Номенклатура.Код)						+ Символ(9)+
		СокрЛП(Формат(Окр(Выборка.Цена * (1 - Выборка.ЗначениеСкидкиНаценки / 100),2), "ЧРД=.; ЧГ=")));	
	КонецЦикла;		
	
	//спец. виды цен на ценовую группу 			 
	Запрос.Текст="ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Партнер КАК Контрагент,
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен КАК ВидЦены,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа = СпрНоменклатура.ЦеноваяГруппа
	|ГДЕ НЕ СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.ПометкаУдаления
	|		И СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Организация = &ОсновнаяОрганизация
	|		И СоглашенияСКлиентамиЦеновыеГруппы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ТаблицаНоменклатуры.Контрагент КАК Контрагент,
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), 
	|			ВидЦены = &ТипЦен
	|				И Номенклатура В (ВЫБРАТЬ ТаблицаНоменклатуры.Номенклатура ИЗ ТаблицаНоменклатуры))
	|КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ТаблицаНоменклатуры.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена <> 0";			 
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("ТипЦен", ОсновнойТипЦен);			 
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяФирма);			 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		файлВыгрузкиСЦ.ДобавитьСтроку(
		СокрЛП(Выборка.Контрагент.УникальныйИдентификатор())	+ Символ(9) +
		СокрЛП(Выборка.Номенклатура.Код)						+ Символ(9) +
		СокрЛП(Формат(Выборка.Цена, "ЧРД=.; ЧН=; ЧГ=")));	
	КонецЦикла;	
	
	файлВыгрузкиГруппСкидки.ВставитьСтроку(1, Формат(файлВыгрузкиГруппСкидки.КоличествоСтрок()-1, "ЧГ="));
	файлВыгрузкиГруппСкидки.Записать(каталогВыгрузки + "\ShopProductTreeDiscount.txt", КодировкаТекста.ANSI);
	
	файлВыгрузкиСЦ.ВставитьСтроку(1, Формат(файлВыгрузкиСЦ.КоличествоСтрок()-1, "ЧГ="));
	файлВыгрузкиСЦ.Записать(каталогВыгрузки + "\ShopProductPrice.txt", КодировкаТекста.ANSI);    
	
	//Сообщить("<-Выгрузка скидок произведена в " + каталогВыгрузки + "\ShopProductTreeDiscount.txt");
	ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка скидок произведена в " + каталогВыгрузки + "\ShopProductTreeDiscount.txt");
	
	//Сообщить("<-Выгрузка спеццен произведена в " + каталогВыгрузки + "\ShopProductPrice.txt");
	ЛогФайл.ЗаписатьСтроку(""+ТекущаяДата()+" <-Выгрузка спеццен произведена в " + каталогВыгрузки + "\ShopProductPrice.txt");
	
КонецПроцедуры


КаталогЛогФайлов                    = "\\192.168.100.10\LogMA";  

//оргАТ_Логистик                      = Справочники.Организации.НайтиПоНаименованию("АТ-Логистик",          Истина);
оргАТ_Логистик                      = Справочники.Организации.НайтиПоНаименованию("АТЛ", 			      Истина);
оргАТ_ЛогистикОМСК                  = Справочники.Организации.НайтиПоНаименованию("АТ-ЛОГИСТИК (Омск)",   Истина);
оргАТЛАНТОмск                       = Справочники.Организации.НайтиПоНаименованию("АТЛАНТ ООО",		      Истина);
оргАТ_ЛогистикТЮМЕНЬ                = Справочники.Организации.НайтиПоНаименованию("АЯН- Тюмень ООО",      Истина);
оргАТ_ЛогистикЕКТ                   = Справочники.Организации.НайтиПоНаименованию("АЯН+ Екатеринбург",    Истина);
оргРИФ                              = Справочники.Организации.НайтиПоНаименованию("РИФ ООО", 	          Истина);
оргРИФПлюс                          = Справочники.Организации.НайтиПоНаименованию("РИФ+ ООО", 	          Истина);
оргАВН_70                           = Справочники.Организации.НайтиПоНаименованию("АВН-70 ООО",           Истина);
оргТОП_17                           = Справочники.Организации.НайтиПоНаименованию("ТОП-17 ООО",           Истина);
ОргБонусТомск           			= Справочники.Организации.НайтиПоНаименованию("Бонус томск");
оргМирНапитковТомск                 = Справочники.Организации.НайтиПоНаименованию("Мир, напитки (Томск)", Истина);
оргМеркурий                         = Справочники.Организации.НайтиПоНаименованию("Меркурий ООО",         Истина);
оргМарс   	                        = Справочники.Организации.НайтиПоНаименованию("Марс ООО", 	          Истина);
оргСигма                            = Справочники.Организации.НайтиПоНаименованию("СИГМА ООО", 	          Истина);
оргГалактика                        = Справочники.Организации.НайтиПоНаименованию("ГАЛАКТИКА ООО",        Истина);

Склады 								= Новый Массив;
СкладТомскПиво                      = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий", 		Истина); 
//СкладАТАлкоголь                     = Справочники.Склады.НайтиПоНаименованию("Томск АТ алкоголь",   Истина); 
//СкладАТАлкоголь                     = Справочники.Склады.НайтиПоНаименованию("АТЛ алкоголь",   		Истина); 
СкладАТАлкоголь                     = Справочники.Склады.НайтиПоНаименованию("Томск АТ общий", 		Истина); 
СкладРИФ	                        = Справочники.Склады.НайтиПоНаименованию("Томск РИФ",           Истина);
СкладРИФПлюс                        = Справочники.Склады.НайтиПоНаименованию("Томск РИФ+ общий",    Истина);
//СкладРИФПлюсАлкоголь                = Справочники.Склады.НайтиПоНаименованию("Томск РИФ+ Алкоголь", Истина);
СкладРИФПлюсАлкоголь                = СкладАТАлкоголь;
//СкладРИФПлюс                        = Справочники.Склады.НайтиПоНаименованию("МАРС  общий",    		Истина);
//СкладРИФПлюсАлкоголь                = Справочники.Склады.НайтиПоНаименованию("МАРС  алкоголь", 		Истина);
//СкладАВН_70                         = Справочники.Склады.НайтиПоНаименованию("АВН-70  алкоголь",    Истина);
//СкладТОП_17                         = Справочники.Склады.НайтиПоНаименованию("ТОП17  алкоголь",     Истина);
СкладАВН_70                         = СкладАТАлкоголь;
СкладТОП_17                         = СкладАТАлкоголь;
СкладОмск   	                    = Справочники.Склады.НайтиПоНаименованию("Омск",                Истина);
СкладТюмень                         = Справочники.Склады.НайтиПоНаименованию("Тюмень",              Истина);
//СкладМеркурийАлкоголь               = Справочники.Склады.НайтиПоНаименованию("Меркурий Алкоголь",   Истина);
//СкладАтлантАлкоголь                 = Справочники.Склады.НайтиПоНаименованию("Атлант Алкоголь",     Истина);
СкладМеркурийАлкоголь               = СкладАТАлкоголь;
СкладАтлантАлкоголь                 = СкладАТАлкоголь;
СкладОмскЦентральный                = Справочники.Склады.НайтиПоНаименованию("Омск Центральный",    Истина);
СкладТомскОборудование              = Справочники.Склады.НайтиПоНаименованию("Томск Оборудование новый",    Истина);
СкладБракТомскАТОбщий               = Справочники.Склады.НайтиПоНаименованию("Томск Брак", 			Истина);
//СкладМарсАлкоголь                   = Справочники.Склады.НайтиПоНаименованию("МАРС  алкоголь",      Истина);
СкладМарсАлкоголь                   = СкладАТАлкоголь; 
//СкладСигмаАлкоголь                  = Справочники.Склады.НайтиПоНаименованию("Сигма Алкоголь",      Истина);
СкладСигмаАлкоголь                  = СкладАТАлкоголь;

Клиенты_грПетров                    = Справочники.Партнеры.НайтиПоКоду("00-00002248");
Клиенты_НашиТочки                   = Справочники.Партнеры.НайтиПоКоду("00-00005788");
Клиенты_Дорога                      = Справочники.Партнеры.НайтиПоКоду("00-00048510");

ПВХ_ДоговорАТ			            = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор АТЛ");
ПВХ_ДоговорРИФПлюсБезНДС            = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор на товары без НДС (РИФ+)");
ПВХ_ДоговорАВН70                    = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор АВН_70");
ПВХ_ДоговорТОП17                    = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор с организацией ТОП-17");
ПВХ_ДоговорРИФПлюс 					= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор РИФ+");
ПВХ_ДоговорМарс 					= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор Марс");
ПВХ_ДоговорМарсБезНДС				= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор на товары без НДС (Марс)");
ПВХ_ДоговорГалактика                = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Заключен договор Галактика");

ЕдиницаИзмерения_КГ 			    = Справочники.ЕдиницыИзмерения.НайтиПоКоду("166");

ВидНоменклатуры_ПивоРозлив 			= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво разливное",     Истина);
ВидНоменклатуры_ПивоДубль   		= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пиво дублирующее",   Истина);
ВидНоменклатуры_ЛосьоныДубль 		= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар ДУБЛЬ",        Истина);						
ВидНоменклатуры_Джолики     		= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Джолики",            Истина);						
ВидНоменклатуры_Молочка             = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Молочная продукция", Истина);						
ВидНоменклатуры_Бисквит             = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Бисквит",			 Истина);						
ВидНоменклатуры_ТабачнаяПродукция   = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Табачная продукция", Истина);
ВидНоменклатуры_Маркировка          = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Маркированная вода", Истина);

ИспользоватьРазделениеПоСоглашениям = Ложь;
ДеньВСекундах  				        = 60 * 60 * 24;
КоличествоДнейПросрочки 			= 3;
ИнформационноеСообщениеАгенту       = "";

РубрикиСФото						= Новый Массив;
ВидНоменклатурыМногооборотнаяТара   = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("МногооборотнаяТара");

Агент_Лейкам                        = Справочники.Пользователи.НайтиПоНаименованию("Лейкам Евгений Евгеньевич");
Агент_Горковенко	                = Справочники.Пользователи.НайтиПоНаименованию("Горковенко Дмитрий Евгеньевич");
Агент_Валишев                       = Справочники.Пользователи.НайтиПоНаименованию("Валишев Александр Мунирович");
Агент_Кидяева                       = Справочники.Пользователи.НайтиПоНаименованию("Максимова Олеся Ивановна");
Агент_Пьянков                       = Справочники.Пользователи.НайтиПоНаименованию("Пьянков Олег Владимирович");
Агент_Васильев                      = Справочники.Пользователи.НайтиПоНаименованию("Васильев Алексей Валерьевич");
Агент_Заяц                          = Справочники.Пользователи.НайтиПоНаименованию("Заяц Сергей Николаевич");
Агент_Дубовицкий                    = Справочники.Пользователи.НайтиПоНаименованию("Дубовицкий Николай Валерьевич");
Агент_СтопНечаев                    = Справочники.Пользователи.НайтиПоНаименованию("Балахонов Александр Николаевич");
Агент_БезСтопа                      = Справочники.Пользователи.НайтиПоНаименованию("Байдина Анастасия Юрьевна");
Агент_БезСтопа2                     = Справочники.Пользователи.НайтиПоНаименованию("Сорокина Ирина Алексеевна");
Агент_Чурсина                       = Справочники.Пользователи.НайтиПоНаименованию("Чурсина Алена Анатольевна");

МассивЗаказов                       = Новый Массив;

НоменАкцияНЭФИС                     = Справочники.Номенклатура.НайтиПоКоду("00-00016572"); 
НоменСкидкаОШАЖиг14                 = Справочники.Номенклатура.НайтиПоКоду("00-00005894");
НоменПеченьеВоронино                = Справочники.Номенклатура.НайтиПоКоду("Ц0006271   ");
НоменДеревенскоеМолоко              = Справочники.Номенклатура.НайтиПоКоду("00-00037266");

Сегмент_ОптовыеКлиенты              = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000013");
Сегмент_ЧерныйСписок                = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000021");
Сегмент_ОтгрузкаЗапрещена           = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000022");
Сегмент_ВсегдаЗаНАЛ                 = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000017");
Сегмент_БОНУС		                = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000023");
Сегмент_Доставка                    = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000034");   
Сегмент_Доставка2                   = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000035");
Сегмент_ПереподключениеРегионов     = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000033");

Сегмент_Косиха                      = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000028");
Сегмент_Отрочка7                    = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000031");
Сегмент_КегиОтсрочкаИсключения      = Справочники.СегментыПартнеров.НайтиПоКоду("00-00000036");

ПВХ_ЗапретЕГАИС_1 					= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (нет подтверждения в ЕГАИС)");
ПВХ_ЗапретЕГАИС_2 					= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Запретить отгрузку алкоголя (версия ЕГАИС 1, 2)");
ПВХ_ОсновнойКлиентПоКегам           = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("основной клиент по кегам");

Клиенты_Роснефть                    = Справочники.Партнеры.НайтиПоКоду("00-00002409");

